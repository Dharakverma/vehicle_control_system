
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000910c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08009310  08009310  00019310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d4  080097d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097dc  080097dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  080099c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080099c0  00020494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015559  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002940  00000000  00000000  00035763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000380a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000390d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005299  00000000  00000000  00039fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014be5  00000000  00000000  0003f271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107744  00000000  00000000  00053e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b59a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005374  00000000  00000000  0015b5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00160960  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016099c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	080092f4 	.word	0x080092f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	080092f4 	.word	0x080092f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <look1_iflf_binlcpw>:
/* Real-time model */
static RT_MODEL_controller_T controller_M_;
RT_MODEL_controller_T *const controller_M = &controller_M_;
real32_T look1_iflf_binlcpw(real32_T u0, const real32_T bp0[], const real32_T
  table[], uint32_T maxIndex)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80005fe:	60b8      	str	r0, [r7, #8]
 8000600:	6079      	str	r1, [r7, #4]
 8000602:	603a      	str	r2, [r7, #0]
     Extrapolation method: 'Clip'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	ed97 7a03 	vldr	s14, [r7, #12]
 800060e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d805      	bhi.n	8000624 <look1_iflf_binlcpw+0x30>
    iLeft = 0U;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
    frac = 0.0F;
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
 8000622:	e054      	b.n	80006ce <look1_iflf_binlcpw+0xda>
  } else if (u0 < bp0[maxIndex]) {
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	ed97 7a03 	vldr	s14, [r7, #12]
 8000634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063c:	d541      	bpl.n	80006c2 <look1_iflf_binlcpw+0xce>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
    iLeft = 0U;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
    iRght = maxIndex;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U) {
 800064c:	e016      	b.n	800067c <look1_iflf_binlcpw+0x88>
      if (u0 < bp0[bpIdx]) {
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	edd3 7a00 	vldr	s15, [r3]
 800065a:	ed97 7a03 	vldr	s14, [r7, #12]
 800065e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000666:	d502      	bpl.n	800066e <look1_iflf_binlcpw+0x7a>
        iRght = bpIdx;
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	e001      	b.n	8000672 <look1_iflf_binlcpw+0x7e>
      } else {
        iLeft = bpIdx;
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	623b      	str	r3, [r7, #32]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000672:	69ba      	ldr	r2, [r7, #24]
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	2b01      	cmp	r3, #1
 8000684:	d8e3      	bhi.n	800064e <look1_iflf_binlcpw+0x5a>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	4413      	add	r3, r2
 800068e:	edd3 7a00 	vldr	s15, [r3]
 8000692:	ed97 7a03 	vldr	s14, [r7, #12]
 8000696:	ee77 6a67 	vsub.f32	s13, s14, s15
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	3301      	adds	r3, #1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	4413      	add	r3, r2
 80006a4:	ed93 7a00 	vldr	s14, [r3]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80006c0:	e005      	b.n	80006ce <look1_iflf_binlcpw+0xda>
  } else {
    iLeft = maxIndex - 1U;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
    frac = 1.0F;
 80006c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  yL_0d0 = table[iLeft];
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	617b      	str	r3, [r7, #20]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	3301      	adds	r3, #1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	ed93 7a00 	vldr	s14, [r3]
 80006e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80006f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000700:	eeb0 0a67 	vmov.f32	s0, s15
 8000704:	372c      	adds	r7, #44	; 0x2c
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <controller_step>:

/* Model step function */
void controller_step(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	ed2d 8b02 	vpush	{d8}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
  /* Chart: '<S3>/Chart' incorporates:
   *  Delay: '<S3>/Delay'
   *  Delay: '<S3>/Delay1'
   *  Delay: '<S3>/Delay2'
   */
  if (controller_DW.is_active_c3_governor_lib == 0U) {
 800071a:	4b97      	ldr	r3, [pc, #604]	; (8000978 <controller_step+0x268>)
 800071c:	7c1b      	ldrb	r3, [r3, #16]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10f      	bne.n	8000742 <controller_step+0x32>
    controller_DW.is_active_c3_governor_lib = 1U;
 8000722:	4b95      	ldr	r3, [pc, #596]	; (8000978 <controller_step+0x268>)
 8000724:	2201      	movs	r2, #1
 8000726:	741a      	strb	r2, [r3, #16]
    controller_DW.is_c3_governor_lib = controlle_IN_Initialize_outputs;
 8000728:	4b93      	ldr	r3, [pc, #588]	; (8000978 <controller_step+0x268>)
 800072a:	2201      	movs	r2, #1
 800072c:	731a      	strb	r2, [r3, #12]
    controller_B.GOV_e_miCmd = CMD_INIT;
 800072e:	4b93      	ldr	r3, [pc, #588]	; (800097c <controller_step+0x26c>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
    controller_B.GOV_e_diCmd = DI_CMD_INIT;
 8000734:	4b91      	ldr	r3, [pc, #580]	; (800097c <controller_step+0x26c>)
 8000736:	2200      	movs	r2, #0
 8000738:	709a      	strb	r2, [r3, #2]
    controller_DW.motorStartCount = 0U;
 800073a:	4b8f      	ldr	r3, [pc, #572]	; (8000978 <controller_step+0x268>)
 800073c:	2200      	movs	r2, #0
 800073e:	809a      	strh	r2, [r3, #4]
 8000740:	e0e5      	b.n	800090e <controller_step+0x1fe>
  } else {
    switch (controller_DW.is_c3_governor_lib) {
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <controller_step+0x268>)
 8000744:	7b1b      	ldrb	r3, [r3, #12]
 8000746:	3b01      	subs	r3, #1
 8000748:	2b03      	cmp	r3, #3
 800074a:	f200 80bf 	bhi.w	80008cc <controller_step+0x1bc>
 800074e:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <controller_step+0x44>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000765 	.word	0x08000765
 8000758:	08000779 	.word	0x08000779
 800075c:	080007b3 	.word	0x080007b3
 8000760:	080007cb 	.word	0x080007cb
     case controlle_IN_Initialize_outputs:
      controller_B.GOV_e_diCmd = DI_CMD_INIT;
 8000764:	4b85      	ldr	r3, [pc, #532]	; (800097c <controller_step+0x26c>)
 8000766:	2200      	movs	r2, #0
 8000768:	709a      	strb	r2, [r3, #2]
      controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 800076a:	4b83      	ldr	r3, [pc, #524]	; (8000978 <controller_step+0x268>)
 800076c:	2204      	movs	r2, #4
 800076e:	731a      	strb	r2, [r3, #12]
      controller_DW.is_STARTUP = controller_IN_HV_startup;
 8000770:	4b81      	ldr	r3, [pc, #516]	; (8000978 <controller_step+0x268>)
 8000772:	2202      	movs	r2, #2
 8000774:	735a      	strb	r2, [r3, #13]
      break;
 8000776:	e0ca      	b.n	800090e <controller_step+0x1fe>

     case controller_IN_RUNNING:
      if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 8000778:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <controller_step+0x268>)
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	2b08      	cmp	r3, #8
 800077e:	d109      	bne.n	8000794 <controller_step+0x84>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 8000780:	4b7d      	ldr	r3, [pc, #500]	; (8000978 <controller_step+0x268>)
 8000782:	2203      	movs	r2, #3
 8000784:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_HV_run_error;
 8000786:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <controller_step+0x268>)
 8000788:	2201      	movs	r2, #1
 800078a:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 800078c:	4b7b      	ldr	r3, [pc, #492]	; (800097c <controller_step+0x26c>)
 800078e:	2202      	movs	r2, #2
 8000790:	709a      	strb	r2, [r3, #2]
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 8000792:	e0bb      	b.n	800090c <controller_step+0x1fc>
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 8000794:	4b78      	ldr	r3, [pc, #480]	; (8000978 <controller_step+0x268>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b05      	cmp	r3, #5
 800079a:	f040 80b7 	bne.w	800090c <controller_step+0x1fc>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 800079e:	4b76      	ldr	r3, [pc, #472]	; (8000978 <controller_step+0x268>)
 80007a0:	2203      	movs	r2, #3
 80007a2:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
 80007a4:	4b74      	ldr	r3, [pc, #464]	; (8000978 <controller_step+0x268>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007aa:	4b74      	ldr	r3, [pc, #464]	; (800097c <controller_step+0x26c>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	709a      	strb	r2, [r3, #2]
      break;
 80007b0:	e0ac      	b.n	800090c <controller_step+0x1fc>

     case controller_IN_RUNNING_ERROR:
      if (controller_DW.is_RUNNING_ERROR == controller_IN_HV_run_error) {
 80007b2:	4b71      	ldr	r3, [pc, #452]	; (8000978 <controller_step+0x268>)
 80007b4:	7bdb      	ldrb	r3, [r3, #15]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d103      	bne.n	80007c2 <controller_step+0xb2>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007ba:	4b70      	ldr	r3, [pc, #448]	; (800097c <controller_step+0x26c>)
 80007bc:	2202      	movs	r2, #2
 80007be:	709a      	strb	r2, [r3, #2]
      } else {
        /* case IN_Motor_run_error: */
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 80007c0:	e0a5      	b.n	800090e <controller_step+0x1fe>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007c2:	4b6e      	ldr	r3, [pc, #440]	; (800097c <controller_step+0x26c>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	709a      	strb	r2, [r3, #2]
      break;
 80007c8:	e0a1      	b.n	800090e <controller_step+0x1fe>

     case controller_IN_STARTUP:
      {
        if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 80007ca:	4b6b      	ldr	r3, [pc, #428]	; (8000978 <controller_step+0x268>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	d109      	bne.n	80007e6 <controller_step+0xd6>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 80007d2:	4b69      	ldr	r3, [pc, #420]	; (8000978 <controller_step+0x268>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 80007d8:	4b67      	ldr	r3, [pc, #412]	; (8000978 <controller_step+0x268>)
 80007da:	2205      	movs	r2, #5
 80007dc:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = controller_IN_HV_startup_error;
 80007de:	4b66      	ldr	r3, [pc, #408]	; (8000978 <controller_step+0x268>)
 80007e0:	2203      	movs	r2, #3
 80007e2:	739a      	strb	r2, [r3, #14]
            }
            break;
          }
        }
      }
      break;
 80007e4:	e093      	b.n	800090e <controller_step+0x1fe>
        } else if (controller_DW.Delay2_DSTATE == DI_ERROR) {
 80007e6:	4b64      	ldr	r3, [pc, #400]	; (8000978 <controller_step+0x268>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d109      	bne.n	8000802 <controller_step+0xf2>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 80007ee:	4b62      	ldr	r3, [pc, #392]	; (8000978 <controller_step+0x268>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 80007f4:	4b60      	ldr	r3, [pc, #384]	; (8000978 <controller_step+0x268>)
 80007f6:	2205      	movs	r2, #5
 80007f8:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = contro_IN_DriverInterface_Error;
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <controller_step+0x268>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	739a      	strb	r2, [r3, #14]
      break;
 8000800:	e085      	b.n	800090e <controller_step+0x1fe>
        } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 8000802:	4b5d      	ldr	r3, [pc, #372]	; (8000978 <controller_step+0x268>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d11a      	bne.n	8000840 <controller_step+0x130>
          if (controller_DW.motorStartCount >= 5) {
 800080a:	4b5b      	ldr	r3, [pc, #364]	; (8000978 <controller_step+0x268>)
 800080c:	889b      	ldrh	r3, [r3, #4]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d90c      	bls.n	800082c <controller_step+0x11c>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <controller_step+0x268>)
 8000814:	2200      	movs	r2, #0
 8000816:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000818:	4b57      	ldr	r3, [pc, #348]	; (8000978 <controller_step+0x268>)
 800081a:	2205      	movs	r2, #5
 800081c:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Motor_faulted;
 800081e:	4b56      	ldr	r3, [pc, #344]	; (8000978 <controller_step+0x268>)
 8000820:	2204      	movs	r2, #4
 8000822:	739a      	strb	r2, [r3, #14]
            controller_B.GOV_e_miCmd = CMD_SHUTDOWN;
 8000824:	4b55      	ldr	r3, [pc, #340]	; (800097c <controller_step+0x26c>)
 8000826:	2203      	movs	r2, #3
 8000828:	705a      	strb	r2, [r3, #1]
      break;
 800082a:	e070      	b.n	800090e <controller_step+0x1fe>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800082c:	4b52      	ldr	r3, [pc, #328]	; (8000978 <controller_step+0x268>)
 800082e:	2200      	movs	r2, #0
 8000830:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000832:	4b51      	ldr	r3, [pc, #324]	; (8000978 <controller_step+0x268>)
 8000834:	2205      	movs	r2, #5
 8000836:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Err_reset;
 8000838:	4b4f      	ldr	r3, [pc, #316]	; (8000978 <controller_step+0x268>)
 800083a:	2202      	movs	r2, #2
 800083c:	739a      	strb	r2, [r3, #14]
      break;
 800083e:	e066      	b.n	800090e <controller_step+0x1fe>
          switch (controller_DW.is_STARTUP) {
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <controller_step+0x268>)
 8000842:	7b5b      	ldrb	r3, [r3, #13]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d002      	beq.n	800084e <controller_step+0x13e>
 8000848:	2b02      	cmp	r3, #2
 800084a:	d00f      	beq.n	800086c <controller_step+0x15c>
 800084c:	e02a      	b.n	80008a4 <controller_step+0x194>
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 800084e:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <controller_step+0x268>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d134      	bne.n	80008c0 <controller_step+0x1b0>
                (controller_DW.Delay2_DSTATE == DRV_START_REQ)) {
 8000856:	4b48      	ldr	r3, [pc, #288]	; (8000978 <controller_step+0x268>)
 8000858:	789b      	ldrb	r3, [r3, #2]
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 800085a:	2b05      	cmp	r3, #5
 800085c:	d130      	bne.n	80008c0 <controller_step+0x1b0>
              controller_DW.is_STARTUP = controller_IN_Send_ReadyToDrive;
 800085e:	4b46      	ldr	r3, [pc, #280]	; (8000978 <controller_step+0x268>)
 8000860:	2203      	movs	r2, #3
 8000862:	735a      	strb	r2, [r3, #13]
              controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 8000864:	4b45      	ldr	r3, [pc, #276]	; (800097c <controller_step+0x26c>)
 8000866:	2201      	movs	r2, #1
 8000868:	709a      	strb	r2, [r3, #2]
            break;
 800086a:	e029      	b.n	80008c0 <controller_step+0x1b0>
              if (controller_DW.Delay_DSTATE_f == BM_RUNNING) {
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <controller_step+0x268>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	2b06      	cmp	r3, #6
 8000872:	d127      	bne.n	80008c4 <controller_step+0x1b4>
                controller_DW.is_STARTUP = contro_IN_Command_motor_startup;
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <controller_step+0x268>)
 8000876:	2201      	movs	r2, #1
 8000878:	735a      	strb	r2, [r3, #13]
                controller_B.GOV_e_miCmd = CMD_STARTUP;
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <controller_step+0x26c>)
 800087c:	2202      	movs	r2, #2
 800087e:	705a      	strb	r2, [r3, #1]
                tmp = controller_DW.motorStartCount + 1U;
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <controller_step+0x268>)
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	3301      	adds	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
                if (controller_DW.motorStartCount + 1U > 65535U) {
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <controller_step+0x268>)
 800088a:	889b      	ldrh	r3, [r3, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000892:	d302      	bcc.n	800089a <controller_step+0x18a>
                  tmp = 65535U;
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	607b      	str	r3, [r7, #4]
                controller_DW.motorStartCount = (uint16_T)tmp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <controller_step+0x268>)
 80008a0:	809a      	strh	r2, [r3, #4]
            break;
 80008a2:	e00f      	b.n	80008c4 <controller_step+0x1b4>
            controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 80008a4:	4b35      	ldr	r3, [pc, #212]	; (800097c <controller_step+0x26c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	709a      	strb	r2, [r3, #2]
            if (controller_DW.Delay2_DSTATE == DI_RUNNING) {
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <controller_step+0x268>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d10a      	bne.n	80008c8 <controller_step+0x1b8>
              controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <controller_step+0x268>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	735a      	strb	r2, [r3, #13]
              controller_DW.is_c3_governor_lib = controller_IN_RUNNING;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <controller_step+0x268>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	731a      	strb	r2, [r3, #12]
            break;
 80008be:	e003      	b.n	80008c8 <controller_step+0x1b8>
            break;
 80008c0:	bf00      	nop
 80008c2:	e024      	b.n	800090e <controller_step+0x1fe>
            break;
 80008c4:	bf00      	nop
 80008c6:	e022      	b.n	800090e <controller_step+0x1fe>
            break;
 80008c8:	bf00      	nop
      break;
 80008ca:	e020      	b.n	800090e <controller_step+0x1fe>

     default:
      /* case IN_STARTUP_ERROR: */
      switch (controller_DW.is_STARTUP_ERROR) {
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <controller_step+0x268>)
 80008ce:	7b9b      	ldrb	r3, [r3, #14]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d017      	beq.n	8000904 <controller_step+0x1f4>
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	dc17      	bgt.n	8000908 <controller_step+0x1f8>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d013      	beq.n	8000904 <controller_step+0x1f4>
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d113      	bne.n	8000908 <controller_step+0x1f8>
       case contro_IN_DriverInterface_Error:
       case controller_IN_HV_startup_error:
        break;

       case controller_IN_Err_reset:
        if (controller_DW.Delay1_DSTATE == OFF) {
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <controller_step+0x268>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d109      	bne.n	80008fc <controller_step+0x1ec>
          controller_DW.is_STARTUP_ERROR = controller_IN_NO_ACTIVE_CHILD;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <controller_step+0x268>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	739a      	strb	r2, [r3, #14]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <controller_step+0x268>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP = controller_IN_HV_startup;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <controller_step+0x268>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	735a      	strb	r2, [r3, #13]
        } else {
          controller_B.GOV_e_miCmd = ERR_RESET;
        }
        break;
 80008fa:	e006      	b.n	800090a <controller_step+0x1fa>
          controller_B.GOV_e_miCmd = ERR_RESET;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <controller_step+0x26c>)
 80008fe:	2204      	movs	r2, #4
 8000900:	705a      	strb	r2, [r3, #1]
        break;
 8000902:	e002      	b.n	800090a <controller_step+0x1fa>
        break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <controller_step+0x1fe>

       default:
        /* case IN_Motor_faulted: */
        break;
 8000908:	bf00      	nop
      }
      break;
 800090a:	e000      	b.n	800090e <controller_step+0x1fe>
      break;
 800090c:	bf00      	nop
  /* End of Chart: '<S3>/Chart' */

  /* Chart: '<S2>/Chart' incorporates:
   *  Delay: '<S3>/Delay2'
   */
  if (controller_DW.temporalCounter_i1_a < 255U) {
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <controller_step+0x268>)
 8000910:	7d5b      	ldrb	r3, [r3, #21]
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d005      	beq.n	8000922 <controller_step+0x212>
    controller_DW.temporalCounter_i1_a++;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <controller_step+0x268>)
 8000918:	7d5b      	ldrb	r3, [r3, #21]
 800091a:	3301      	adds	r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <controller_step+0x268>)
 8000920:	755a      	strb	r2, [r3, #21]
  }

  if (controller_DW.is_active_c3_driver_interface_l == 0U) {
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <controller_step+0x268>)
 8000924:	7d1b      	ldrb	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10f      	bne.n	800094a <controller_step+0x23a>
    controller_DW.is_active_c3_driver_interface_l = 1U;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <controller_step+0x268>)
 800092c:	2201      	movs	r2, #1
 800092e:	751a      	strb	r2, [r3, #20]
    controller_DW.is_c3_driver_interface_lib = controller_IN_INIT;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <controller_step+0x268>)
 8000932:	2203      	movs	r2, #3
 8000934:	745a      	strb	r2, [r3, #17]
    controller_DW.Delay2_DSTATE = DI_STS_INIT;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <controller_step+0x268>)
 8000938:	2201      	movs	r2, #1
 800093a:	709a      	strb	r2, [r3, #2]
    controller_B.b_ReadyToDrive = false;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <controller_step+0x26c>)
 800093e:	2200      	movs	r2, #0
 8000940:	70da      	strb	r2, [r3, #3]

    /* Outport: '<Root>/DI_b_driverSpeaker' incorporates:
     *  Delay: '<S3>/Delay2'
     */
    controller_Y.DI_b_driverSpeaker = false;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <controller_step+0x270>)
 8000944:	2200      	movs	r2, #0
 8000946:	711a      	strb	r2, [r3, #4]
 8000948:	e088      	b.n	8000a5c <controller_step+0x34c>
  } else {
    switch (controller_DW.is_c3_driver_interface_lib) {
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <controller_step+0x268>)
 800094c:	7c5b      	ldrb	r3, [r3, #17]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d06d      	beq.n	8000a2e <controller_step+0x31e>
 8000952:	2b03      	cmp	r3, #3
 8000954:	dc7b      	bgt.n	8000a4e <controller_step+0x33e>
 8000956:	2b01      	cmp	r3, #1
 8000958:	d002      	beq.n	8000960 <controller_step+0x250>
 800095a:	2b02      	cmp	r3, #2
 800095c:	d004      	beq.n	8000968 <controller_step+0x258>
 800095e:	e076      	b.n	8000a4e <controller_step+0x33e>
     case controller_IN_DI_error:
      controller_DW.Delay2_DSTATE = DI_ERROR;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <controller_step+0x268>)
 8000962:	2207      	movs	r2, #7
 8000964:	709a      	strb	r2, [r3, #2]
      break;
 8000966:	e079      	b.n	8000a5c <controller_step+0x34c>

     case controller_IN_DI_running:
      switch (controller_DW.is_DI_running) {
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <controller_step+0x268>)
 800096a:	7c9b      	ldrb	r3, [r3, #18]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d009      	beq.n	8000984 <controller_step+0x274>
 8000970:	2b02      	cmp	r3, #2
 8000972:	d021      	beq.n	80009b8 <controller_step+0x2a8>
 8000974:	e050      	b.n	8000a18 <controller_step+0x308>
 8000976:	bf00      	nop
 8000978:	200001fc 	.word	0x200001fc
 800097c:	200001f8 	.word	0x200001f8
 8000980:	20000240 	.word	0x20000240
       case contr_IN_Driver_requested_start:
        controller_DW.Delay2_DSTATE = DRV_START_REQ;
 8000984:	4bb5      	ldr	r3, [pc, #724]	; (8000c5c <controller_step+0x54c>)
 8000986:	2205      	movs	r2, #5
 8000988:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == READY_TO_DRIVE) {
 800098a:	4bb5      	ldr	r3, [pc, #724]	; (8000c60 <controller_step+0x550>)
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d149      	bne.n	8000a26 <controller_step+0x316>
          controller_DW.is_DI_running = controller_IN_Ready_to_drive;
 8000992:	4bb2      	ldr	r3, [pc, #712]	; (8000c5c <controller_step+0x54c>)
 8000994:	2202      	movs	r2, #2
 8000996:	749a      	strb	r2, [r3, #18]
          controller_B.b_ReadyToDrive = true;
 8000998:	4bb1      	ldr	r3, [pc, #708]	; (8000c60 <controller_step+0x550>)
 800099a:	2201      	movs	r2, #1
 800099c:	70da      	strb	r2, [r3, #3]
          controller_DW.Delay2_DSTATE = DI_RUNNING;
 800099e:	4baf      	ldr	r3, [pc, #700]	; (8000c5c <controller_step+0x54c>)
 80009a0:	2206      	movs	r2, #6
 80009a2:	709a      	strb	r2, [r3, #2]
          controller_DW.is_Ready_to_drive = controller_IN_SpeakerOn_;
 80009a4:	4bad      	ldr	r3, [pc, #692]	; (8000c5c <controller_step+0x54c>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	74da      	strb	r2, [r3, #19]
          controller_DW.temporalCounter_i1_a = 0U;
 80009aa:	4bac      	ldr	r3, [pc, #688]	; (8000c5c <controller_step+0x54c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	755a      	strb	r2, [r3, #21]

          /* Outport: '<Root>/DI_b_driverSpeaker' */
          controller_Y.DI_b_driverSpeaker = true;
 80009b0:	4bac      	ldr	r3, [pc, #688]	; (8000c64 <controller_step+0x554>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	711a      	strb	r2, [r3, #4]
        }
        break;
 80009b6:	e036      	b.n	8000a26 <controller_step+0x316>

       case controller_IN_Ready_to_drive:
        controller_B.b_ReadyToDrive = true;
 80009b8:	4ba9      	ldr	r3, [pc, #676]	; (8000c60 <controller_step+0x550>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	70da      	strb	r2, [r3, #3]
        controller_DW.Delay2_DSTATE = DI_RUNNING;
 80009be:	4ba7      	ldr	r3, [pc, #668]	; (8000c5c <controller_step+0x54c>)
 80009c0:	2206      	movs	r2, #6
 80009c2:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == SYSTEM_ERROR) {
 80009c4:	4ba6      	ldr	r3, [pc, #664]	; (8000c60 <controller_step+0x550>)
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d10f      	bne.n	80009ec <controller_step+0x2dc>
          controller_DW.is_Ready_to_drive = controller_IN_NO_ACTIVE_CHILD;
 80009cc:	4ba3      	ldr	r3, [pc, #652]	; (8000c5c <controller_step+0x54c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	74da      	strb	r2, [r3, #19]
          controller_DW.is_DI_running = controller_IN_NO_ACTIVE_CHILD;
 80009d2:	4ba2      	ldr	r3, [pc, #648]	; (8000c5c <controller_step+0x54c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	749a      	strb	r2, [r3, #18]
          controller_DW.is_c3_driver_interface_lib =
 80009d8:	4ba0      	ldr	r3, [pc, #640]	; (8000c5c <controller_step+0x54c>)
 80009da:	2204      	movs	r2, #4
 80009dc:	745a      	strb	r2, [r3, #17]
            controller_IN_Vehicle_coasting;
          controller_B.b_ReadyToDrive = false;
 80009de:	4ba0      	ldr	r3, [pc, #640]	; (8000c60 <controller_step+0x550>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	70da      	strb	r2, [r3, #3]
          controller_DW.Delay2_DSTATE = DI_IDLE;
 80009e4:	4b9d      	ldr	r3, [pc, #628]	; (8000c5c <controller_step+0x54c>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	709a      	strb	r2, [r3, #2]

            /* Outport: '<Root>/DI_b_driverSpeaker' */
            controller_Y.DI_b_driverSpeaker = false;
          }
        }
        break;
 80009ea:	e01e      	b.n	8000a2a <controller_step+0x31a>
        } else if (controller_DW.is_Ready_to_drive == controller_IN_SpeakerOff)
 80009ec:	4b9b      	ldr	r3, [pc, #620]	; (8000c5c <controller_step+0x54c>)
 80009ee:	7cdb      	ldrb	r3, [r3, #19]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d103      	bne.n	80009fc <controller_step+0x2ec>
          controller_Y.DI_b_driverSpeaker = false;
 80009f4:	4b9b      	ldr	r3, [pc, #620]	; (8000c64 <controller_step+0x554>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	711a      	strb	r2, [r3, #4]
        break;
 80009fa:	e016      	b.n	8000a2a <controller_step+0x31a>
          controller_Y.DI_b_driverSpeaker = true;
 80009fc:	4b99      	ldr	r3, [pc, #612]	; (8000c64 <controller_step+0x554>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	711a      	strb	r2, [r3, #4]
          if (controller_DW.temporalCounter_i1_a >= 200U) {
 8000a02:	4b96      	ldr	r3, [pc, #600]	; (8000c5c <controller_step+0x54c>)
 8000a04:	7d5b      	ldrb	r3, [r3, #21]
 8000a06:	2bc7      	cmp	r3, #199	; 0xc7
 8000a08:	d90f      	bls.n	8000a2a <controller_step+0x31a>
            controller_DW.is_Ready_to_drive = controller_IN_SpeakerOff;
 8000a0a:	4b94      	ldr	r3, [pc, #592]	; (8000c5c <controller_step+0x54c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	74da      	strb	r2, [r3, #19]
            controller_Y.DI_b_driverSpeaker = false;
 8000a10:	4b94      	ldr	r3, [pc, #592]	; (8000c64 <controller_step+0x554>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	711a      	strb	r2, [r3, #4]
        break;
 8000a16:	e008      	b.n	8000a2a <controller_step+0x31a>

       default:
        /* case IN_Waiting_for_driver: */
        controller_DW.is_DI_running = contr_IN_Driver_requested_start;
 8000a18:	4b90      	ldr	r3, [pc, #576]	; (8000c5c <controller_step+0x54c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	749a      	strb	r2, [r3, #18]
        controller_DW.Delay2_DSTATE = DRV_START_REQ;
 8000a1e:	4b8f      	ldr	r3, [pc, #572]	; (8000c5c <controller_step+0x54c>)
 8000a20:	2205      	movs	r2, #5
 8000a22:	709a      	strb	r2, [r3, #2]
        break;
 8000a24:	e002      	b.n	8000a2c <controller_step+0x31c>
        break;
 8000a26:	bf00      	nop
 8000a28:	e018      	b.n	8000a5c <controller_step+0x34c>
        break;
 8000a2a:	bf00      	nop
      }
      break;
 8000a2c:	e016      	b.n	8000a5c <controller_step+0x34c>

     case controller_IN_INIT:
      controller_B.b_ReadyToDrive = false;
 8000a2e:	4b8c      	ldr	r3, [pc, #560]	; (8000c60 <controller_step+0x550>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	70da      	strb	r2, [r3, #3]

      /* Outport: '<Root>/DI_b_driverSpeaker' */
      controller_Y.DI_b_driverSpeaker = false;
 8000a34:	4b8b      	ldr	r3, [pc, #556]	; (8000c64 <controller_step+0x554>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	711a      	strb	r2, [r3, #4]
      controller_DW.is_c3_driver_interface_lib = controller_IN_DI_running;
 8000a3a:	4b88      	ldr	r3, [pc, #544]	; (8000c5c <controller_step+0x54c>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	745a      	strb	r2, [r3, #17]
      controller_DW.is_DI_running = controlle_IN_Waiting_for_driver;
 8000a40:	4b86      	ldr	r3, [pc, #536]	; (8000c5c <controller_step+0x54c>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	749a      	strb	r2, [r3, #18]
      controller_DW.Delay2_DSTATE = WAITING_FOR_DRVR;
 8000a46:	4b85      	ldr	r3, [pc, #532]	; (8000c5c <controller_step+0x54c>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	709a      	strb	r2, [r3, #2]
      break;
 8000a4c:	e006      	b.n	8000a5c <controller_step+0x34c>

     default:
      /* case IN_Vehicle_coasting: */
      controller_B.b_ReadyToDrive = false;
 8000a4e:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <controller_step+0x550>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	70da      	strb	r2, [r3, #3]
      controller_DW.Delay2_DSTATE = DI_IDLE;
 8000a54:	4b81      	ldr	r3, [pc, #516]	; (8000c5c <controller_step+0x54c>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	709a      	strb	r2, [r3, #2]
      break;
 8000a5a:	bf00      	nop
   *  Gain: '<S5>/convertToAmps3'
   *  Inport: '<Root>/AMK_ActualVelocity'
   *  Inport: '<Root>/AMK_MagnetizingCurrent'
   */
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
    controller_U.AMK_MagnetizingCurrent, 0.0F);
 8000a5c:	4b82      	ldr	r3, [pc, #520]	; (8000c68 <controller_step+0x558>)
 8000a5e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a6a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8000c6c <controller_step+0x55c>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8000c70 <controller_step+0x560>
 8000a76:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7a:	f008 fb13 	bl	80090a4 <fmaxf>
 8000a7e:	ed87 0a02 	vstr	s0, [r7, #8]
  a = fminf(controller_ConstB.Gain1, 52.0F);
 8000a82:	4b7c      	ldr	r3, [pc, #496]	; (8000c74 <controller_step+0x564>)
 8000a84:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000a88:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8000c78 <controller_step+0x568>
 8000a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a90:	f008 fb23 	bl	80090da <fminf>
 8000a94:	ed87 0a03 	vstr	s0, [r7, #12]
  rtb_TorqueLimit = fminf(fmaxf(sqrtf(a * a - rtb_TorqueLimit * rtb_TorqueLimit),
 8000a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	f008 fb6a 	bl	8009188 <sqrtf>
 8000ab4:	eef0 7a40 	vmov.f32	s15, s0
 8000ab8:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8000c70 <controller_step+0x560>
 8000abc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac0:	f008 faf0 	bl	80090a4 <fmaxf>
 8000ac4:	eef0 7a40 	vmov.f32	s15, s0
    0.0F) * 24.0F / (fmaxf(controller_U.AMK_ActualVelocity, 1.0F) * 3.14159274F /
 8000ac8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000acc:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000ad0:	4b65      	ldr	r3, [pc, #404]	; (8000c68 <controller_step+0x558>)
 8000ad2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ade:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae6:	f008 fadd 	bl	80090a4 <fmaxf>
 8000aea:	eef0 7a40 	vmov.f32	s15, s0
 8000aee:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000c7c <controller_step+0x56c>
 8000af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000af6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8000afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
  rtb_TorqueLimit = fminf(fmaxf(sqrtf(a * a - rtb_TorqueLimit * rtb_TorqueLimit),
 8000afe:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000b02:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8000b06:	eeb0 0a47 	vmov.f32	s0, s14
 8000b0a:	f008 fae6 	bl	80090da <fminf>
 8000b0e:	ed87 0a02 	vstr	s0, [r7, #8]
   *  MinMax: '<S5>/Min'
   *  Product: '<S5>/Divide'
   *  RelationalOperator: '<S15>/Lower Test'
   *  RelationalOperator: '<S15>/Upper Test'
   */
  if (controller_ConstB.Switch2 > 0.0F) {
 8000b12:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <controller_step+0x564>)
 8000b14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b20:	dd03      	ble.n	8000b2a <controller_step+0x41a>
    rtb_TorqueLimit = 0.0F;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	e040      	b.n	8000bac <controller_step+0x49c>
  } else {
    if (!controller_B.b_ReadyToDrive) {
 8000b2a:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <controller_step+0x550>)
 8000b2c:	78db      	ldrb	r3, [r3, #3]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <controller_step+0x42a>
       */
      /* If: '<S2>/If' incorporates:
       *  Constant: '<S2>/Constant'
       *  SignalConversion generated from: '<S8>/In1'
       */
      a = 0.0F;
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e025      	b.n	8000b86 <controller_step+0x476>

      /* End of Outputs for SubSystem: '<S2>/If Action Subsystem' */
    } else if ((controller_U.DI_V_AccelPedalPos1 < 0) ||
 8000b3a:	4b4b      	ldr	r3, [pc, #300]	; (8000c68 <controller_step+0x558>)
 8000b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db05      	blt.n	8000b50 <controller_step+0x440>
               (controller_U.DI_V_AccelPedalPos1 > 4095)) {
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <controller_step+0x558>)
 8000b46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    } else if ((controller_U.DI_V_AccelPedalPos1 < 0) ||
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	db03      	blt.n	8000b58 <controller_step+0x448>
       *  ActionPort: '<S10>/Action Port'
       */
      /* If: '<S2>/If' incorporates:
       *  SignalConversion generated from: '<S10>/In1'
       */
      a = controller_ConstB.Gain;
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <controller_step+0x564>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e016      	b.n	8000b86 <controller_step+0x476>
       *  Gain: '<S16>/Gain'
       *  Inport: '<Root>/DI_V_AccelPedalPos1'
       *  Product: '<S16>/Divide'
       *  Sum: '<S16>/Subtract1'
       */
      a = ((real32_T)controller_U.DI_V_AccelPedalPos1 -
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <controller_step+0x558>)
 8000b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
           controller_ConstB.DataTypeConversion2_p) / controller_ConstB.range_p *
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <controller_step+0x564>)
 8000b68:	edd3 7a08 	vldr	s15, [r3, #32]
      a = ((real32_T)controller_U.DI_V_AccelPedalPos1 -
 8000b6c:	ee77 6a67 	vsub.f32	s13, s14, s15
           controller_ConstB.DataTypeConversion2_p) / controller_ConstB.range_p *
 8000b70:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <controller_step+0x564>)
 8000b72:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
      a = ((real32_T)controller_U.DI_V_AccelPedalPos1 -
 8000b7a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000c80 <controller_step+0x570>
 8000b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b82:	edc7 7a03 	vstr	s15, [r7, #12]
        100.0F;
    }

    rtb_TorqueLimit = 0.01F * look1_iflf_binlcpw(a, controller_ConstP.pooled2,
 8000b86:	2214      	movs	r2, #20
 8000b88:	493e      	ldr	r1, [pc, #248]	; (8000c84 <controller_step+0x574>)
 8000b8a:	483e      	ldr	r0, [pc, #248]	; (8000c84 <controller_step+0x574>)
 8000b8c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b90:	f7ff fd30 	bl	80005f4 <look1_iflf_binlcpw>
 8000b94:	eef0 7a40 	vmov.f32	s15, s0
 8000b98:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000c88 <controller_step+0x578>
 8000b9c:	ee27 7a87 	vmul.f32	s14, s15, s14
      controller_ConstP.pooled2, 20U) * fminf(rtb_TorqueLimit, rtb_TorqueLimit);
 8000ba0:	edd7 7a02 	vldr	s15, [r7, #8]
    rtb_TorqueLimit = 0.01F * look1_iflf_binlcpw(a, controller_ConstP.pooled2,
 8000ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ba8:	edc7 7a02 	vstr	s15, [r7, #8]
   *  Inport: '<Root>/AMK_bInverterOn'
   *  Inport: '<Root>/AMK_bQuitDcOn'
   *  Inport: '<Root>/AMK_bQuitInverterOn'
   *  Inport: '<Root>/AMK_bSystemReady'
   */
  if (controller_DW.temporalCounter_i1 < 127U) {
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <controller_step+0x54c>)
 8000bae:	7adb      	ldrb	r3, [r3, #11]
 8000bb0:	2b7e      	cmp	r3, #126	; 0x7e
 8000bb2:	d805      	bhi.n	8000bc0 <controller_step+0x4b0>
    controller_DW.temporalCounter_i1++;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <controller_step+0x54c>)
 8000bb6:	7adb      	ldrb	r3, [r3, #11]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <controller_step+0x54c>)
 8000bbe:	72da      	strb	r2, [r3, #11]
  }

  if (controller_DW.is_active_c3_motor_interface_li == 0U) {
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <controller_step+0x54c>)
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11e      	bne.n	8000c06 <controller_step+0x4f6>
    controller_DW.is_active_c3_motor_interface_li = 1U;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <controller_step+0x54c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	729a      	strb	r2, [r3, #10]
    controller_DW.is_c3_motor_interface_lib = contr_IN_motorOff_waitingForGov;
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <controller_step+0x54c>)
 8000bd0:	2206      	movs	r2, #6
 8000bd2:	719a      	strb	r2, [r3, #6]
    controller_B.MI_motorStatus = OFF;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <controller_step+0x550>)
 8000bd6:	2206      	movs	r2, #6
 8000bd8:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/AMK_bInverterOn_tx' */
    controller_Y.AMK_bInverterOn_tx = 0U;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <controller_step+0x554>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	715a      	strb	r2, [r3, #5]

    /* Outport: '<Root>/AMK_bDcOn_tx' */
    controller_Y.AMK_bDcOn_tx = 0U;
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <controller_step+0x554>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	719a      	strb	r2, [r3, #6]

    /* Outport: '<Root>/AMK_bEnable' */
    controller_Y.AMK_bEnable = 0U;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <controller_step+0x554>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	71da      	strb	r2, [r3, #7]

    /* Outport: '<Root>/AMK_bErrorReset' */
    controller_Y.AMK_bErrorReset = 0U;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <controller_step+0x554>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	721a      	strb	r2, [r3, #8]

    /* Outport: '<Root>/AMK_TargetVelocity' */
    controller_Y.AMK_TargetVelocity = 0;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <controller_step+0x554>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	815a      	strh	r2, [r3, #10]

    /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
    controller_Y.AMK_TorqueLimitPositiv = 0;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <controller_step+0x554>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	819a      	strh	r2, [r3, #12]

    /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
    controller_Y.AMK_TorqueLimitNegativ = 0;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <controller_step+0x554>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	81da      	strh	r2, [r3, #14]
 8000c04:	e259      	b.n	80010ba <controller_step+0x9aa>
  } else {
    switch (controller_DW.is_c3_motor_interface_lib) {
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <controller_step+0x54c>)
 8000c08:	799b      	ldrb	r3, [r3, #6]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	f200 8237 	bhi.w	8001080 <controller_step+0x970>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <controller_step+0x508>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c2d 	.word	0x08000c2d
 8000c1c:	08000c8d 	.word	0x08000c8d
 8000c20:	08000d59 	.word	0x08000d59
 8000c24:	08000e47 	.word	0x08000e47
 8000c28:	08000f59 	.word	0x08000f59
     case controller_IN_AMK_errorDetected:
      if (controller_B.GOV_e_miCmd == ERR_RESET) {
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <controller_step+0x550>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	f040 823f 	bne.w	80010b4 <controller_step+0x9a4>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_errorReset;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <controller_step+0x54c>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_errorReset = contr_IN_enforceSetpointsZero_p;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <controller_step+0x54c>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	721a      	strb	r2, [r3, #8]

        /* Outport: '<Root>/AMK_TargetVelocity' */
        controller_Y.AMK_TargetVelocity = 0;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <controller_step+0x554>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	815a      	strh	r2, [r3, #10]

        /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
        controller_Y.AMK_TorqueLimitPositiv = 0;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <controller_step+0x554>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	819a      	strh	r2, [r3, #12]

        /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
        controller_Y.AMK_TorqueLimitNegativ = 0;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <controller_step+0x554>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	81da      	strh	r2, [r3, #14]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <controller_step+0x554>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	715a      	strb	r2, [r3, #5]
      }
      break;
 8000c5a:	e22b      	b.n	80010b4 <controller_step+0x9a4>
 8000c5c:	200001fc 	.word	0x200001fc
 8000c60:	200001f8 	.word	0x200001f8
 8000c64:	20000240 	.word	0x20000240
 8000c68:	20000218 	.word	0x20000218
 8000c6c:	3dcccc00 	.word	0x3dcccc00
 8000c70:	00000000 	.word	0x00000000
 8000c74:	0800932c 	.word	0x0800932c
 8000c78:	42500000 	.word	0x42500000
 8000c7c:	40490fdb 	.word	0x40490fdb
 8000c80:	42c80000 	.word	0x42c80000
 8000c84:	08009384 	.word	0x08009384
 8000c88:	3c23d70a 	.word	0x3c23d70a

     case controller_IN_AMK_errorReset:
      switch (controller_DW.is_AMK_errorReset) {
 8000c8c:	4ba1      	ldr	r3, [pc, #644]	; (8000f14 <controller_step+0x804>)
 8000c8e:	7a1b      	ldrb	r3, [r3, #8]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d025      	beq.n	8000ce0 <controller_step+0x5d0>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	dc34      	bgt.n	8000d02 <controller_step+0x5f2>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <controller_step+0x592>
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d011      	beq.n	8000cc4 <controller_step+0x5b4>
 8000ca0:	e02f      	b.n	8000d02 <controller_step+0x5f2>
       case contr_IN_enforceSetpointsZero_p:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000ca2:	4b9d      	ldr	r3, [pc, #628]	; (8000f18 <controller_step+0x808>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000ca8:	4b9c      	ldr	r3, [pc, #624]	; (8000f1c <controller_step+0x80c>)
 8000caa:	7d5b      	ldrb	r3, [r3, #21]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14b      	bne.n	8000d48 <controller_step+0x638>
          controller_DW.is_AMK_errorReset = controller_IN_toggleEnable;
 8000cb0:	4b98      	ldr	r3, [pc, #608]	; (8000f14 <controller_step+0x804>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000cb6:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <controller_step+0x804>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000cbc:	4b96      	ldr	r3, [pc, #600]	; (8000f18 <controller_step+0x808>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	71da      	strb	r2, [r3, #7]
        }
        break;
 8000cc2:	e041      	b.n	8000d48 <controller_step+0x638>

       case controller_IN_sendReset:
        /* Outport: '<Root>/AMK_bErrorReset' */
        controller_Y.AMK_bErrorReset = 1U;
 8000cc4:	4b94      	ldr	r3, [pc, #592]	; (8000f18 <controller_step+0x808>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	721a      	strb	r2, [r3, #8]
        if (controller_DW.temporalCounter_i1 >= 50U) {
 8000cca:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <controller_step+0x804>)
 8000ccc:	7adb      	ldrb	r3, [r3, #11]
 8000cce:	2b31      	cmp	r3, #49	; 0x31
 8000cd0:	d93c      	bls.n	8000d4c <controller_step+0x63c>
          controller_DW.is_AMK_errorReset = controller_IN_toggleReset;
 8000cd2:	4b90      	ldr	r3, [pc, #576]	; (8000f14 <controller_step+0x804>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000cd8:	4b8f      	ldr	r3, [pc, #572]	; (8000f18 <controller_step+0x808>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000cde:	e035      	b.n	8000d4c <controller_step+0x63c>

       case controller_IN_toggleEnable:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000ce0:	4b8d      	ldr	r3, [pc, #564]	; (8000f18 <controller_step+0x808>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	71da      	strb	r2, [r3, #7]
        if (controller_DW.temporalCounter_i1 >= 50U) {
 8000ce6:	4b8b      	ldr	r3, [pc, #556]	; (8000f14 <controller_step+0x804>)
 8000ce8:	7adb      	ldrb	r3, [r3, #11]
 8000cea:	2b31      	cmp	r3, #49	; 0x31
 8000cec:	d930      	bls.n	8000d50 <controller_step+0x640>
          controller_DW.is_AMK_errorReset = controller_IN_sendReset;
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <controller_step+0x804>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000cf4:	4b87      	ldr	r3, [pc, #540]	; (8000f14 <controller_step+0x804>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 1U;
 8000cfa:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <controller_step+0x808>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000d00:	e026      	b.n	8000d50 <controller_step+0x640>

       default:
        /* Outport: '<Root>/AMK_bErrorReset' */
        /* case IN_toggleReset: */
        controller_Y.AMK_bErrorReset = 0U;
 8000d02:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <controller_step+0x808>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	721a      	strb	r2, [r3, #8]
        if (controller_U.AMK_bSystemReady) {
 8000d08:	4b84      	ldr	r3, [pc, #528]	; (8000f1c <controller_step+0x80c>)
 8000d0a:	7bdb      	ldrb	r3, [r3, #15]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d021      	beq.n	8000d54 <controller_step+0x644>
          controller_DW.is_AMK_errorReset = controller_IN_NO_ACTIVE_CHILD;
 8000d10:	4b80      	ldr	r3, [pc, #512]	; (8000f14 <controller_step+0x804>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	721a      	strb	r2, [r3, #8]
          controller_DW.is_c3_motor_interface_lib =
 8000d16:	4b7f      	ldr	r3, [pc, #508]	; (8000f14 <controller_step+0x804>)
 8000d18:	2206      	movs	r2, #6
 8000d1a:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000d1c:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <controller_step+0x810>)
 8000d1e:	2206      	movs	r2, #6
 8000d20:	701a      	strb	r2, [r3, #0]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000d22:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <controller_step+0x808>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <controller_step+0x808>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	719a      	strb	r2, [r3, #6]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000d2e:	4b7a      	ldr	r3, [pc, #488]	; (8000f18 <controller_step+0x808>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0;
 8000d34:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <controller_step+0x808>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	815a      	strh	r2, [r3, #10]

          /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
          controller_Y.AMK_TorqueLimitPositiv = 0;
 8000d3a:	4b77      	ldr	r3, [pc, #476]	; (8000f18 <controller_step+0x808>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	819a      	strh	r2, [r3, #12]

          /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
          controller_Y.AMK_TorqueLimitNegativ = 0;
 8000d40:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <controller_step+0x808>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	81da      	strh	r2, [r3, #14]
        }
        break;
 8000d46:	e005      	b.n	8000d54 <controller_step+0x644>
        break;
 8000d48:	bf00      	nop
 8000d4a:	e1b6      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000d4c:	bf00      	nop
 8000d4e:	e1b4      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000d50:	bf00      	nop
 8000d52:	e1b2      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000d54:	bf00      	nop
      }
      break;
 8000d56:	e1b0      	b.n	80010ba <controller_step+0x9aa>

     case controller_IN_AMK_running:
      if (controller_U.AMK_bError) {
 8000d58:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <controller_step+0x80c>)
 8000d5a:	7c1b      	ldrb	r3, [r3, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <controller_step+0x65e>
        controller_DW.is_c3_motor_interface_lib =
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <controller_step+0x804>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	719a      	strb	r2, [r3, #6]
          controller_IN_AMK_errorDetected;
        controller_B.MI_motorStatus = MI_STS_ERROR;
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <controller_step+0x810>)
 8000d68:	2205      	movs	r2, #5
 8000d6a:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
        controller_Y.AMK_TorqueLimitNegativ =
          controller_ConstB.DataTypeConversion1_l;
      }
      break;
 8000d6c:	e1a5      	b.n	80010ba <controller_step+0x9aa>
      } else if (controller_B.GOV_e_miCmd == CMD_SHUTDOWN) {
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <controller_step+0x810>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d115      	bne.n	8000da2 <controller_step+0x692>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_shutdown;
 8000d76:	4b67      	ldr	r3, [pc, #412]	; (8000f14 <controller_step+0x804>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_shutdown = control_IN_enforceSetpointsZero;
 8000d7c:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <controller_step+0x804>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	725a      	strb	r2, [r3, #9]
        controller_B.MI_motorStatus = SHUTDOWN;
 8000d82:	4b67      	ldr	r3, [pc, #412]	; (8000f20 <controller_step+0x810>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	701a      	strb	r2, [r3, #0]
        controller_Y.AMK_TargetVelocity = 0;
 8000d88:	4b63      	ldr	r3, [pc, #396]	; (8000f18 <controller_step+0x808>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	815a      	strh	r2, [r3, #10]
        controller_Y.AMK_TorqueLimitPositiv = 0;
 8000d8e:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <controller_step+0x808>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	819a      	strh	r2, [r3, #12]
        controller_Y.AMK_TorqueLimitNegativ = 0;
 8000d94:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <controller_step+0x808>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	81da      	strh	r2, [r3, #14]
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	; (8000f18 <controller_step+0x808>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]
      break;
 8000da0:	e18b      	b.n	80010ba <controller_step+0x9aa>
        controller_B.MI_motorStatus = RUNNING;
 8000da2:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <controller_step+0x810>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	701a      	strb	r2, [r3, #0]
          controller_ConstB.DataTypeConversion2_d;
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <controller_step+0x814>)
 8000daa:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
        controller_Y.AMK_TargetVelocity =
 8000dae:	4b5a      	ldr	r3, [pc, #360]	; (8000f18 <controller_step+0x808>)
 8000db0:	815a      	strh	r2, [r3, #10]
        a = floorf(1000.0F * rtb_TorqueLimit);
 8000db2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000db6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000f28 <controller_step+0x818>
 8000dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc2:	f008 f92d 	bl	8009020 <floorf>
 8000dc6:	ed87 0a03 	vstr	s0, [r7, #12]
        if (rtIsNaNF(a) || rtIsInfF(a)) {
 8000dca:	ed97 0a03 	vldr	s0, [r7, #12]
 8000dce:	f000 fb6d 	bl	80014ac <rtIsNaNF>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d106      	bne.n	8000de6 <controller_step+0x6d6>
 8000dd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ddc:	f000 fb40 	bl	8001460 <rtIsInfF>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <controller_step+0x6de>
          a = 0.0F;
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e007      	b.n	8000dfe <controller_step+0x6ee>
          a = fmodf(a, 65536.0F);
 8000dee:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8000f2c <controller_step+0x81c>
 8000df2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000df6:	f008 f9a7 	bl	8009148 <fmodf>
 8000dfa:	ed87 0a03 	vstr	s0, [r7, #12]
        controller_Y.AMK_TorqueLimitPositiv = (int16_T)(a < 0.0F ? (int32_T)
 8000dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	d50c      	bpl.n	8000e26 <controller_step+0x716>
          (int16_T)-(int16_T)(uint16_T)-a : (int32_T)(int16_T)(uint16_T)a);
 8000e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e10:	eef1 7a67 	vneg.f32	s15, s15
 8000e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e18:	ee17 3a90 	vmov	r3, s15
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	425b      	negs	r3, r3
 8000e20:	b29b      	uxth	r3, r3
        controller_Y.AMK_TorqueLimitPositiv = (int16_T)(a < 0.0F ? (int32_T)
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	e007      	b.n	8000e36 <controller_step+0x726>
          (int16_T)-(int16_T)(uint16_T)-a : (int32_T)(int16_T)(uint16_T)a);
 8000e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e2e:	ee17 3a90 	vmov	r3, s15
 8000e32:	b29b      	uxth	r3, r3
        controller_Y.AMK_TorqueLimitPositiv = (int16_T)(a < 0.0F ? (int32_T)
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <controller_step+0x808>)
 8000e38:	8193      	strh	r3, [r2, #12]
          controller_ConstB.DataTypeConversion1_l;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <controller_step+0x814>)
 8000e3c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
        controller_Y.AMK_TorqueLimitNegativ =
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <controller_step+0x808>)
 8000e42:	81da      	strh	r2, [r3, #14]
      break;
 8000e44:	e139      	b.n	80010ba <controller_step+0x9aa>

     case controller_IN_AMK_shutdown:
      switch (controller_DW.is_AMK_shutdown) {
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <controller_step+0x804>)
 8000e48:	7a5b      	ldrb	r3, [r3, #9]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <controller_step+0x744>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d01c      	beq.n	8000e8c <controller_step+0x77c>
 8000e52:	e037      	b.n	8000ec4 <controller_step+0x7b4>
       case controller_IN_commandOff:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <controller_step+0x808>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	71da      	strb	r2, [r3, #7]
        if (!controller_U.AMK_bQuitDcOn) {
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <controller_step+0x80c>)
 8000e5c:	7c9b      	ldrb	r3, [r3, #18]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d106      	bne.n	8000e70 <controller_step+0x760>
          controller_DW.is_AMK_shutdown = controller_IN_toggleDCon;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <controller_step+0x804>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <controller_step+0x808>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000e6e:	e06d      	b.n	8000f4c <controller_step+0x83c>
        } else if (controller_U.AMK_bError) {
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <controller_step+0x80c>)
 8000e72:	7c1b      	ldrb	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d069      	beq.n	8000f4c <controller_step+0x83c>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <controller_step+0x804>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <controller_step+0x804>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <controller_step+0x810>)
 8000e86:	2205      	movs	r2, #5
 8000e88:	701a      	strb	r2, [r3, #0]
        break;
 8000e8a:	e05f      	b.n	8000f4c <controller_step+0x83c>

       case control_IN_enforceSetpointsZero:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <controller_step+0x808>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <controller_step+0x80c>)
 8000e94:	7d5b      	ldrb	r3, [r3, #21]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <controller_step+0x798>
          controller_DW.is_AMK_shutdown = controller_IN_commandOff;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <controller_step+0x804>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <controller_step+0x808>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	71da      	strb	r2, [r3, #7]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000ea6:	e053      	b.n	8000f50 <controller_step+0x840>
        } else if (controller_U.AMK_bError) {
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <controller_step+0x80c>)
 8000eaa:	7c1b      	ldrb	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d04f      	beq.n	8000f50 <controller_step+0x840>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <controller_step+0x804>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <controller_step+0x804>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <controller_step+0x810>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	701a      	strb	r2, [r3, #0]
        break;
 8000ec2:	e045      	b.n	8000f50 <controller_step+0x840>

       default:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        /* case IN_toggleDCon: */
        controller_Y.AMK_bDcOn_tx = 0U;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <controller_step+0x808>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	719a      	strb	r2, [r3, #6]
        if ((!controller_U.AMK_bDcOn) && (!controller_U.AMK_bQuitDcOn)) {
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <controller_step+0x80c>)
 8000ecc:	7cdb      	ldrb	r3, [r3, #19]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d12e      	bne.n	8000f30 <controller_step+0x820>
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <controller_step+0x80c>)
 8000ed4:	7c9b      	ldrb	r3, [r3, #18]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d12a      	bne.n	8000f30 <controller_step+0x820>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <controller_step+0x804>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <controller_step+0x804>)
 8000ee2:	2206      	movs	r2, #6
 8000ee4:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <controller_step+0x810>)
 8000ee8:	2206      	movs	r2, #6
 8000eea:	701a      	strb	r2, [r3, #0]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <controller_step+0x808>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <controller_step+0x808>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <controller_step+0x808>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <controller_step+0x808>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	815a      	strh	r2, [r3, #10]

          /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
          controller_Y.AMK_TorqueLimitPositiv = 0;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <controller_step+0x808>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	819a      	strh	r2, [r3, #12]

          /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
          controller_Y.AMK_TorqueLimitNegativ = 0;
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <controller_step+0x808>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	81da      	strh	r2, [r3, #14]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f10:	e020      	b.n	8000f54 <controller_step+0x844>
 8000f12:	bf00      	nop
 8000f14:	200001fc 	.word	0x200001fc
 8000f18:	20000240 	.word	0x20000240
 8000f1c:	20000218 	.word	0x20000218
 8000f20:	200001f8 	.word	0x200001f8
 8000f24:	0800932c 	.word	0x0800932c
 8000f28:	447a0000 	.word	0x447a0000
 8000f2c:	47800000 	.word	0x47800000
        } else if (controller_U.AMK_bError) {
 8000f30:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <controller_step+0xaac>)
 8000f32:	7c1b      	ldrb	r3, [r3, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <controller_step+0x844>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000f38:	4ba1      	ldr	r3, [pc, #644]	; (80011c0 <controller_step+0xab0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000f3e:	4ba0      	ldr	r3, [pc, #640]	; (80011c0 <controller_step+0xab0>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000f44:	4b9f      	ldr	r3, [pc, #636]	; (80011c4 <controller_step+0xab4>)
 8000f46:	2205      	movs	r2, #5
 8000f48:	701a      	strb	r2, [r3, #0]
        break;
 8000f4a:	e003      	b.n	8000f54 <controller_step+0x844>
        break;
 8000f4c:	bf00      	nop
 8000f4e:	e0b4      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000f50:	bf00      	nop
 8000f52:	e0b2      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000f54:	bf00      	nop
      }
      break;
 8000f56:	e0b0      	b.n	80010ba <controller_step+0x9aa>

     case controller_IN_AMK_startup:
      switch (controller_DW.is_AMK_startup) {
 8000f58:	4b99      	ldr	r3, [pc, #612]	; (80011c0 <controller_step+0xab0>)
 8000f5a:	79db      	ldrb	r3, [r3, #7]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d045      	beq.n	8000fec <controller_step+0x8dc>
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	dc6c      	bgt.n	800103e <controller_step+0x92e>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d002      	beq.n	8000f6e <controller_step+0x85e>
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d023      	beq.n	8000fb4 <controller_step+0x8a4>
 8000f6c:	e067      	b.n	800103e <controller_step+0x92e>
       case controller_IN_commandOn:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 1U;
 8000f6e:	4b96      	ldr	r3, [pc, #600]	; (80011c8 <controller_step+0xab8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	71da      	strb	r2, [r3, #7]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 1U;
 8000f74:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <controller_step+0xab8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	715a      	strb	r2, [r3, #5]
        if (controller_U.AMK_bInverterOn && controller_U.AMK_bQuitInverterOn) {
 8000f7a:	4b90      	ldr	r3, [pc, #576]	; (80011bc <controller_step+0xaac>)
 8000f7c:	7d5b      	ldrb	r3, [r3, #21]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <controller_step+0x888>
 8000f82:	4b8e      	ldr	r3, [pc, #568]	; (80011bc <controller_step+0xaac>)
 8000f84:	7d1b      	ldrb	r3, [r3, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <controller_step+0x888>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8000f8a:	4b8d      	ldr	r3, [pc, #564]	; (80011c0 <controller_step+0xab0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_running;
 8000f90:	4b8b      	ldr	r3, [pc, #556]	; (80011c0 <controller_step+0xab0>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f96:	e06b      	b.n	8001070 <controller_step+0x960>
        } else if (controller_U.AMK_bError) {
 8000f98:	4b88      	ldr	r3, [pc, #544]	; (80011bc <controller_step+0xaac>)
 8000f9a:	7c1b      	ldrb	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d067      	beq.n	8001070 <controller_step+0x960>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8000fa0:	4b87      	ldr	r3, [pc, #540]	; (80011c0 <controller_step+0xab0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8000fa6:	4b86      	ldr	r3, [pc, #536]	; (80011c0 <controller_step+0xab0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000fac:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <controller_step+0xab4>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	701a      	strb	r2, [r3, #0]
        break;
 8000fb2:	e05d      	b.n	8001070 <controller_step+0x960>

       case control_IN_enforceSetpointsZero:
        if (controller_DW.temporalCounter_i1 >= 100U) {
 8000fb4:	4b82      	ldr	r3, [pc, #520]	; (80011c0 <controller_step+0xab0>)
 8000fb6:	7adb      	ldrb	r3, [r3, #11]
 8000fb8:	2b63      	cmp	r3, #99	; 0x63
 8000fba:	d909      	bls.n	8000fd0 <controller_step+0x8c0>
          controller_DW.is_AMK_startup = controller_IN_commandOn;
 8000fbc:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <controller_step+0xab0>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 1U;
 8000fc2:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <controller_step+0xab8>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 1U;
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <controller_step+0xab8>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	715a      	strb	r2, [r3, #5]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000fce:	e051      	b.n	8001074 <controller_step+0x964>
        } else if (controller_U.AMK_bError) {
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <controller_step+0xaac>)
 8000fd2:	7c1b      	ldrb	r3, [r3, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d04d      	beq.n	8001074 <controller_step+0x964>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8000fd8:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <controller_step+0xab0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8000fde:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <controller_step+0xab0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <controller_step+0xab4>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	701a      	strb	r2, [r3, #0]
        break;
 8000fea:	e043      	b.n	8001074 <controller_step+0x964>

       case controller_IN_toggleDCon:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        controller_Y.AMK_bDcOn_tx = 1U;
 8000fec:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <controller_step+0xab8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	719a      	strb	r2, [r3, #6]
        if (controller_U.AMK_bDcOn && controller_U.AMK_bQuitDcOn) {
 8000ff2:	4b72      	ldr	r3, [pc, #456]	; (80011bc <controller_step+0xaac>)
 8000ff4:	7cdb      	ldrb	r3, [r3, #19]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d013      	beq.n	8001022 <controller_step+0x912>
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <controller_step+0xaac>)
 8000ffc:	7c9b      	ldrb	r3, [r3, #18]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00f      	beq.n	8001022 <controller_step+0x912>
          controller_DW.is_AMK_startup = control_IN_enforceSetpointsZero;
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <controller_step+0xab0>)
 8001004:	2202      	movs	r2, #2
 8001006:	71da      	strb	r2, [r3, #7]
          controller_DW.temporalCounter_i1 = 0U;
 8001008:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <controller_step+0xab0>)
 800100a:	2200      	movs	r2, #0
 800100c:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0;
 800100e:	4b6e      	ldr	r3, [pc, #440]	; (80011c8 <controller_step+0xab8>)
 8001010:	2200      	movs	r2, #0
 8001012:	815a      	strh	r2, [r3, #10]

          /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
          controller_Y.AMK_TorqueLimitPositiv = 0;
 8001014:	4b6c      	ldr	r3, [pc, #432]	; (80011c8 <controller_step+0xab8>)
 8001016:	2200      	movs	r2, #0
 8001018:	819a      	strh	r2, [r3, #12]

          /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
          controller_Y.AMK_TorqueLimitNegativ = 0;
 800101a:	4b6b      	ldr	r3, [pc, #428]	; (80011c8 <controller_step+0xab8>)
 800101c:	2200      	movs	r2, #0
 800101e:	81da      	strh	r2, [r3, #14]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8001020:	e02a      	b.n	8001078 <controller_step+0x968>
        } else if (controller_U.AMK_bError) {
 8001022:	4b66      	ldr	r3, [pc, #408]	; (80011bc <controller_step+0xaac>)
 8001024:	7c1b      	ldrb	r3, [r3, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d026      	beq.n	8001078 <controller_step+0x968>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 800102a:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <controller_step+0xab0>)
 800102c:	2200      	movs	r2, #0
 800102e:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <controller_step+0xab0>)
 8001032:	2201      	movs	r2, #1
 8001034:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <controller_step+0xab4>)
 8001038:	2205      	movs	r2, #5
 800103a:	701a      	strb	r2, [r3, #0]
        break;
 800103c:	e01c      	b.n	8001078 <controller_step+0x968>

       default:
        /* case IN_waiting_sysReady: */
        if (controller_U.AMK_bSystemReady) {
 800103e:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <controller_step+0xaac>)
 8001040:	7bdb      	ldrb	r3, [r3, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <controller_step+0x944>
          controller_DW.is_AMK_startup = controller_IN_toggleDCon;
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <controller_step+0xab0>)
 8001048:	2203      	movs	r2, #3
 800104a:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 1U;
 800104c:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <controller_step+0xab8>)
 800104e:	2201      	movs	r2, #1
 8001050:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8001052:	e013      	b.n	800107c <controller_step+0x96c>
        } else if (controller_U.AMK_bError) {
 8001054:	4b59      	ldr	r3, [pc, #356]	; (80011bc <controller_step+0xaac>)
 8001056:	7c1b      	ldrb	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00f      	beq.n	800107c <controller_step+0x96c>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <controller_step+0xab0>)
 800105e:	2200      	movs	r2, #0
 8001060:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <controller_step+0xab0>)
 8001064:	2201      	movs	r2, #1
 8001066:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <controller_step+0xab4>)
 800106a:	2205      	movs	r2, #5
 800106c:	701a      	strb	r2, [r3, #0]
        break;
 800106e:	e005      	b.n	800107c <controller_step+0x96c>
        break;
 8001070:	bf00      	nop
 8001072:	e022      	b.n	80010ba <controller_step+0x9aa>
        break;
 8001074:	bf00      	nop
 8001076:	e020      	b.n	80010ba <controller_step+0x9aa>
        break;
 8001078:	bf00      	nop
 800107a:	e01e      	b.n	80010ba <controller_step+0x9aa>
        break;
 800107c:	bf00      	nop
      }
      break;
 800107e:	e01c      	b.n	80010ba <controller_step+0x9aa>

     default:
      /* Outport: '<Root>/AMK_bInverterOn_tx' */
      /* case IN_motorOff_waitingForGov: */
      controller_Y.AMK_bInverterOn_tx = 0U;
 8001080:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <controller_step+0xab8>)
 8001082:	2200      	movs	r2, #0
 8001084:	715a      	strb	r2, [r3, #5]

      /* Outport: '<Root>/AMK_bDcOn_tx' */
      controller_Y.AMK_bDcOn_tx = 0U;
 8001086:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <controller_step+0xab8>)
 8001088:	2200      	movs	r2, #0
 800108a:	719a      	strb	r2, [r3, #6]

      /* Outport: '<Root>/AMK_bEnable' */
      controller_Y.AMK_bEnable = 0U;
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <controller_step+0xab8>)
 800108e:	2200      	movs	r2, #0
 8001090:	71da      	strb	r2, [r3, #7]

      /* Outport: '<Root>/AMK_bErrorReset' */
      controller_Y.AMK_bErrorReset = 0U;
 8001092:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <controller_step+0xab8>)
 8001094:	2200      	movs	r2, #0
 8001096:	721a      	strb	r2, [r3, #8]
      if (controller_B.GOV_e_miCmd == CMD_STARTUP) {
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <controller_step+0xab4>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d10b      	bne.n	80010b8 <controller_step+0x9a8>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_startup;
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <controller_step+0xab0>)
 80010a2:	2205      	movs	r2, #5
 80010a4:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_startup = controller_IN_waiting_sysReady;
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <controller_step+0xab0>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	71da      	strb	r2, [r3, #7]
        controller_B.MI_motorStatus = STARTUP;
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <controller_step+0xab4>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80010b2:	e001      	b.n	80010b8 <controller_step+0x9a8>
      break;
 80010b4:	bf00      	nop
 80010b6:	e000      	b.n	80010ba <controller_step+0x9aa>
      break;
 80010b8:	bf00      	nop
   *  Delay: '<S3>/Delay'
   *  Inport: '<Root>/BM_b_HVnegContactorSts'
   *  Inport: '<Root>/BM_b_HVposContactorSts'
   *  Inport: '<Root>/BM_b_prechrgContactorSts'
   */
  if (controller_DW.temporalCounter_i1_p < 127U) {
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <controller_step+0xab0>)
 80010bc:	7e1b      	ldrb	r3, [r3, #24]
 80010be:	2b7e      	cmp	r3, #126	; 0x7e
 80010c0:	d805      	bhi.n	80010ce <controller_step+0x9be>
    controller_DW.temporalCounter_i1_p++;
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <controller_step+0xab0>)
 80010c4:	7e1b      	ldrb	r3, [r3, #24]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <controller_step+0xab0>)
 80010cc:	761a      	strb	r2, [r3, #24]
  }

  if (controller_DW.is_active_c3_battery_monitor_li == 0U) {
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <controller_step+0xab0>)
 80010d0:	7ddb      	ldrb	r3, [r3, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <controller_step+0x9da>
    controller_DW.is_active_c3_battery_monitor_li = 1U;
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <controller_step+0xab0>)
 80010d8:	2201      	movs	r2, #1
 80010da:	75da      	strb	r2, [r3, #23]
    controller_DW.is_c3_battery_monitor_lib = controller_IN_InitialState;
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <controller_step+0xab0>)
 80010de:	2208      	movs	r2, #8
 80010e0:	759a      	strb	r2, [r3, #22]
    controller_DW.Delay_DSTATE_f = BM_INIT;
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <controller_step+0xab0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	705a      	strb	r2, [r3, #1]
 80010e8:	e188      	b.n	80013fc <controller_step+0xcec>
  } else {
    switch (controller_DW.is_c3_battery_monitor_lib) {
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <controller_step+0xab0>)
 80010ec:	7d9b      	ldrb	r3, [r3, #22]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	2b0b      	cmp	r3, #11
 80010f2:	f200 815f 	bhi.w	80013b4 <controller_step+0xca4>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <controller_step+0x9ec>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	0800112d 	.word	0x0800112d
 8001100:	08001135 	.word	0x08001135
 8001104:	0800113d 	.word	0x0800113d
 8001108:	08001145 	.word	0x08001145
 800110c:	0800114d 	.word	0x0800114d
 8001110:	08001155 	.word	0x08001155
 8001114:	0800115d 	.word	0x0800115d
 8001118:	08001165 	.word	0x08001165
 800111c:	08001293 	.word	0x08001293
 8001120:	080012dd 	.word	0x080012dd
 8001124:	08001325 	.word	0x08001325
 8001128:	0800136d 	.word	0x0800136d
     case controll_IN_ErrorAllClosedState:
      controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <controller_step+0xab0>)
 800112e:	220c      	movs	r2, #12
 8001130:	705a      	strb	r2, [r3, #1]
      break;
 8001132:	e163      	b.n	80013fc <controller_step+0xcec>

     case controller_IN_ErrorHVPositive:
      controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <controller_step+0xab0>)
 8001136:	220d      	movs	r2, #13
 8001138:	705a      	strb	r2, [r3, #1]
      break;
 800113a:	e15f      	b.n	80013fc <controller_step+0xcec>

     case IN_ErrorInitializePrechargeStat:
      controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <controller_step+0xab0>)
 800113e:	2209      	movs	r2, #9
 8001140:	705a      	strb	r2, [r3, #1]
      break;
 8001142:	e15b      	b.n	80013fc <controller_step+0xcec>

     case co_IN_ErrorPrechargeClosedState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <controller_step+0xab0>)
 8001146:	2207      	movs	r2, #7
 8001148:	705a      	strb	r2, [r3, #1]
      break;
 800114a:	e157      	b.n	80013fc <controller_step+0xcec>

     case controll_IN_ErrorPrechargeState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <controller_step+0xab0>)
 800114e:	220a      	movs	r2, #10
 8001150:	705a      	strb	r2, [r3, #1]
      break;
 8001152:	e153      	b.n	80013fc <controller_step+0xcec>

     case controller_IN_ErrorRunningState:
      controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <controller_step+0xab0>)
 8001156:	220b      	movs	r2, #11
 8001158:	705a      	strb	r2, [r3, #1]
      break;
 800115a:	e14f      	b.n	80013fc <controller_step+0xcec>

     case controller_IN_ErrorStartupState:
      controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <controller_step+0xab0>)
 800115e:	2208      	movs	r2, #8
 8001160:	705a      	strb	r2, [r3, #1]
      break;
 8001162:	e14b      	b.n	80013fc <controller_step+0xcec>
     case controller_IN_InitialState:
      {
        boolean_T tmp_0;
        boolean_T tmp_1;
        boolean_T tmp_2;
        controller_DW.Delay_DSTATE_f = BM_INIT;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <controller_step+0xab0>)
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
        tmp_0 = !controller_U.BM_b_HVnegContactorSts;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <controller_step+0xaac>)
 800116c:	7b9b      	ldrb	r3, [r3, #14]
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	70fb      	strb	r3, [r7, #3]
        tmp_1 = !controller_U.BM_b_HVposContactorSts;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <controller_step+0xaac>)
 800117c:	7b5b      	ldrb	r3, [r3, #13]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	70bb      	strb	r3, [r7, #2]
        tmp_2 = ((!controller_U.BM_b_prechrgContactorSts) && tmp_0);
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <controller_step+0xaac>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d104      	bne.n	800119c <controller_step+0xa8c>
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <controller_step+0xa8c>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <controller_step+0xa8e>
 800119c:	2300      	movs	r3, #0
 800119e:	707b      	strb	r3, [r7, #1]
        if (tmp_2 && tmp_1) {
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d012      	beq.n	80011cc <controller_step+0xabc>
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00f      	beq.n	80011cc <controller_step+0xabc>
          controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState1;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <controller_step+0xab0>)
 80011ae:	220d      	movs	r2, #13
 80011b0:	759a      	strb	r2, [r3, #22]
          controller_DW.Delay_DSTATE_f = BM_IDLE;
 80011b2:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <controller_step+0xab0>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	705a      	strb	r2, [r3, #1]
 80011b8:	e06a      	b.n	8001290 <controller_step+0xb80>
 80011ba:	bf00      	nop
 80011bc:	20000218 	.word	0x20000218
 80011c0:	200001fc 	.word	0x200001fc
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	20000240 	.word	0x20000240
        } else if (controller_U.BM_b_prechrgContactorSts && tmp_0 && tmp_1) {
 80011cc:	4b94      	ldr	r3, [pc, #592]	; (8001420 <controller_step+0xd10>)
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <controller_step+0xade>
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <controller_step+0xade>
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <controller_step+0xade>
          controller_DW.is_c3_battery_monitor_lib =
 80011e0:	4b90      	ldr	r3, [pc, #576]	; (8001424 <controller_step+0xd14>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	759a      	strb	r2, [r3, #22]
            co_IN_ErrorPrechargeClosedState;
          controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 80011e6:	4b8f      	ldr	r3, [pc, #572]	; (8001424 <controller_step+0xd14>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	705a      	strb	r2, [r3, #1]
 80011ec:	e050      	b.n	8001290 <controller_step+0xb80>
        } else {
          tmp_0 = (controller_U.BM_b_prechrgContactorSts &&
 80011ee:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <controller_step+0xd10>)
 80011f0:	7b1b      	ldrb	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <controller_step+0xaf2>
                   controller_U.BM_b_HVnegContactorSts);
 80011f6:	4b8a      	ldr	r3, [pc, #552]	; (8001420 <controller_step+0xd10>)
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
          tmp_0 = (controller_U.BM_b_prechrgContactorSts &&
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <controller_step+0xaf2>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <controller_step+0xaf4>
 8001202:	2300      	movs	r3, #0
 8001204:	70fb      	strb	r3, [r7, #3]
          if (tmp_0 && controller_U.BM_b_HVposContactorSts) {
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <controller_step+0xb12>
 800120c:	4b84      	ldr	r3, [pc, #528]	; (8001420 <controller_step+0xd10>)
 800120e:	7b5b      	ldrb	r3, [r3, #13]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <controller_step+0xb12>
            controller_DW.is_c3_battery_monitor_lib =
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <controller_step+0xd14>)
 8001216:	2201      	movs	r2, #1
 8001218:	759a      	strb	r2, [r3, #22]
              controll_IN_ErrorAllClosedState;
            controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 800121a:	4b82      	ldr	r3, [pc, #520]	; (8001424 <controller_step+0xd14>)
 800121c:	220c      	movs	r2, #12
 800121e:	705a      	strb	r2, [r3, #1]
 8001220:	e036      	b.n	8001290 <controller_step+0xb80>
          } else if (tmp_2 && controller_U.BM_b_HVposContactorSts) {
 8001222:	787b      	ldrb	r3, [r7, #1]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00a      	beq.n	800123e <controller_step+0xb2e>
 8001228:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <controller_step+0xd10>)
 800122a:	7b5b      	ldrb	r3, [r3, #13]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <controller_step+0xb2e>
            controller_DW.is_c3_battery_monitor_lib =
 8001230:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <controller_step+0xd14>)
 8001232:	2202      	movs	r2, #2
 8001234:	759a      	strb	r2, [r3, #22]
              controller_IN_ErrorHVPositive;
            controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 8001236:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <controller_step+0xd14>)
 8001238:	220d      	movs	r2, #13
 800123a:	705a      	strb	r2, [r3, #1]
 800123c:	e028      	b.n	8001290 <controller_step+0xb80>
          } else if (tmp_0 && tmp_1) {
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00c      	beq.n	800125e <controller_step+0xb4e>
 8001244:	78bb      	ldrb	r3, [r7, #2]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <controller_step+0xb4e>
            controller_DW.is_c3_battery_monitor_lib =
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <controller_step+0xd14>)
 800124c:	220a      	movs	r2, #10
 800124e:	759a      	strb	r2, [r3, #22]
              controller_IN_PrechargeState;
            controller_DW.temporalCounter_i1_p = 0U;
 8001250:	4b74      	ldr	r3, [pc, #464]	; (8001424 <controller_step+0xd14>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
            controller_DW.Delay_DSTATE_f = PRECHARGE;
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <controller_step+0xd14>)
 8001258:	2205      	movs	r2, #5
 800125a:	705a      	strb	r2, [r3, #1]
 800125c:	e018      	b.n	8001290 <controller_step+0xb80>
          } else if ((!controller_U.BM_b_prechrgContactorSts) &&
 800125e:	4b70      	ldr	r3, [pc, #448]	; (8001420 <controller_step+0xd10>)
 8001260:	7b1b      	ldrb	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 80bf 	bne.w	80013e6 <controller_step+0xcd6>
                     controller_U.BM_b_HVnegContactorSts &&
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <controller_step+0xd10>)
 800126a:	7b9b      	ldrb	r3, [r3, #14]
          } else if ((!controller_U.BM_b_prechrgContactorSts) &&
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80ba 	beq.w	80013e6 <controller_step+0xcd6>
                     controller_U.BM_b_HVposContactorSts) {
 8001272:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <controller_step+0xd10>)
 8001274:	7b5b      	ldrb	r3, [r3, #13]
                     controller_U.BM_b_HVnegContactorSts &&
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80b5 	beq.w	80013e6 <controller_step+0xcd6>
            controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 800127c:	4b69      	ldr	r3, [pc, #420]	; (8001424 <controller_step+0xd14>)
 800127e:	220b      	movs	r2, #11
 8001280:	759a      	strb	r2, [r3, #22]
            controller_DW.temporalCounter_i1_p = 0U;
 8001282:	4b68      	ldr	r3, [pc, #416]	; (8001424 <controller_step+0xd14>)
 8001284:	2200      	movs	r2, #0
 8001286:	761a      	strb	r2, [r3, #24]
            controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001288:	4b66      	ldr	r3, [pc, #408]	; (8001424 <controller_step+0xd14>)
 800128a:	2206      	movs	r2, #6
 800128c:	705a      	strb	r2, [r3, #1]
          }
        }
      }
      break;
 800128e:	e0aa      	b.n	80013e6 <controller_step+0xcd6>
 8001290:	e0a9      	b.n	80013e6 <controller_step+0xcd6>

     case con_IN_InitializePrechargeState:
      controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <controller_step+0xd14>)
 8001294:	2204      	movs	r2, #4
 8001296:	705a      	strb	r2, [r3, #1]
      if (controller_U.BM_b_prechrgContactorSts &&
 8001298:	4b61      	ldr	r3, [pc, #388]	; (8001420 <controller_step+0xd10>)
 800129a:	7b1b      	ldrb	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d011      	beq.n	80012c4 <controller_step+0xbb4>
          controller_U.BM_b_HVnegContactorSts &&
 80012a0:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <controller_step+0xd10>)
 80012a2:	7b9b      	ldrb	r3, [r3, #14]
      if (controller_U.BM_b_prechrgContactorSts &&
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <controller_step+0xbb4>
          controller_U.BM_b_HVposContactorSts) {
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <controller_step+0xd10>)
 80012aa:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d009      	beq.n	80012c4 <controller_step+0xbb4>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_PrechargeState;
 80012b0:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <controller_step+0xd14>)
 80012b2:	220a      	movs	r2, #10
 80012b4:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <controller_step+0xd14>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = PRECHARGE;
 80012bc:	4b59      	ldr	r3, [pc, #356]	; (8001424 <controller_step+0xd14>)
 80012be:	2205      	movs	r2, #5
 80012c0:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          IN_ErrorInitializePrechargeStat;
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
      }
      break;
 80012c2:	e092      	b.n	80013ea <controller_step+0xcda>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 80012c4:	4b57      	ldr	r3, [pc, #348]	; (8001424 <controller_step+0xd14>)
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	2b63      	cmp	r3, #99	; 0x63
 80012ca:	f240 808e 	bls.w	80013ea <controller_step+0xcda>
        controller_DW.is_c3_battery_monitor_lib =
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <controller_step+0xd14>)
 80012d0:	2203      	movs	r2, #3
 80012d2:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <controller_step+0xd14>)
 80012d6:	2209      	movs	r2, #9
 80012d8:	705a      	strb	r2, [r3, #1]
      break;
 80012da:	e086      	b.n	80013ea <controller_step+0xcda>

     case controller_IN_PrechargeState:
      controller_DW.Delay_DSTATE_f = PRECHARGE;
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <controller_step+0xd14>)
 80012de:	2205      	movs	r2, #5
 80012e0:	705a      	strb	r2, [r3, #1]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80012e2:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <controller_step+0xd10>)
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d111      	bne.n	800130e <controller_step+0xbfe>
          controller_U.BM_b_HVnegContactorSts &&
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <controller_step+0xd10>)
 80012ec:	7b9b      	ldrb	r3, [r3, #14]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00d      	beq.n	800130e <controller_step+0xbfe>
          controller_U.BM_b_HVposContactorSts) {
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <controller_step+0xd10>)
 80012f4:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <controller_step+0xbfe>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <controller_step+0xd14>)
 80012fc:	220b      	movs	r2, #11
 80012fe:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <controller_step+0xd14>)
 8001302:	2200      	movs	r2, #0
 8001304:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <controller_step+0xd14>)
 8001308:	2206      	movs	r2, #6
 800130a:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          controll_IN_ErrorPrechargeState;
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
      }
      break;
 800130c:	e06f      	b.n	80013ee <controller_step+0xcde>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <controller_step+0xd14>)
 8001310:	7e1b      	ldrb	r3, [r3, #24]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	d96b      	bls.n	80013ee <controller_step+0xcde>
        controller_DW.is_c3_battery_monitor_lib =
 8001316:	4b43      	ldr	r3, [pc, #268]	; (8001424 <controller_step+0xd14>)
 8001318:	2205      	movs	r2, #5
 800131a:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <controller_step+0xd14>)
 800131e:	220a      	movs	r2, #10
 8001320:	705a      	strb	r2, [r3, #1]
      break;
 8001322:	e064      	b.n	80013ee <controller_step+0xcde>

     case controller_IN_RunningState:
      controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <controller_step+0xd14>)
 8001326:	2206      	movs	r2, #6
 8001328:	705a      	strb	r2, [r3, #1]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <controller_step+0xd10>)
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d111      	bne.n	8001356 <controller_step+0xc46>
          controller_U.BM_b_HVnegContactorSts &&
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <controller_step+0xd10>)
 8001334:	7b9b      	ldrb	r3, [r3, #14]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <controller_step+0xc46>
          controller_U.BM_b_HVposContactorSts) {
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <controller_step+0xd10>)
 800133c:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <controller_step+0xc46>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <controller_step+0xd14>)
 8001344:	220b      	movs	r2, #11
 8001346:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <controller_step+0xd14>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <controller_step+0xd14>)
 8001350:	2206      	movs	r2, #6
 8001352:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorRunningState;
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
      }
      break;
 8001354:	e04d      	b.n	80013f2 <controller_step+0xce2>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <controller_step+0xd14>)
 8001358:	7e1b      	ldrb	r3, [r3, #24]
 800135a:	2b63      	cmp	r3, #99	; 0x63
 800135c:	d949      	bls.n	80013f2 <controller_step+0xce2>
        controller_DW.is_c3_battery_monitor_lib =
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <controller_step+0xd14>)
 8001360:	2206      	movs	r2, #6
 8001362:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <controller_step+0xd14>)
 8001366:	220b      	movs	r2, #11
 8001368:	705a      	strb	r2, [r3, #1]
      break;
 800136a:	e042      	b.n	80013f2 <controller_step+0xce2>

     case controller_IN_StartupState:
      controller_DW.Delay_DSTATE_f = BM_STARTUP;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <controller_step+0xd14>)
 800136e:	2203      	movs	r2, #3
 8001370:	705a      	strb	r2, [r3, #1]
      if (controller_U.BM_b_prechrgContactorSts &&
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <controller_step+0xd10>)
 8001374:	7b1b      	ldrb	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d011      	beq.n	800139e <controller_step+0xc8e>
          controller_U.BM_b_HVnegContactorSts &&
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <controller_step+0xd10>)
 800137c:	7b9b      	ldrb	r3, [r3, #14]
      if (controller_U.BM_b_prechrgContactorSts &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00d      	beq.n	800139e <controller_step+0xc8e>
          (!controller_U.BM_b_HVposContactorSts)) {
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <controller_step+0xd10>)
 8001384:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <controller_step+0xc8e>
        controller_DW.is_c3_battery_monitor_lib =
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <controller_step+0xd14>)
 800138c:	2209      	movs	r2, #9
 800138e:	759a      	strb	r2, [r3, #22]
          con_IN_InitializePrechargeState;
        controller_DW.temporalCounter_i1_p = 0U;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <controller_step+0xd14>)
 8001392:	2200      	movs	r2, #0
 8001394:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <controller_step+0xd14>)
 8001398:	2204      	movs	r2, #4
 800139a:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorStartupState;
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
      }
      break;
 800139c:	e02b      	b.n	80013f6 <controller_step+0xce6>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <controller_step+0xd14>)
 80013a0:	7e1b      	ldrb	r3, [r3, #24]
 80013a2:	2b63      	cmp	r3, #99	; 0x63
 80013a4:	d927      	bls.n	80013f6 <controller_step+0xce6>
        controller_DW.is_c3_battery_monitor_lib =
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <controller_step+0xd14>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <controller_step+0xd14>)
 80013ae:	2208      	movs	r2, #8
 80013b0:	705a      	strb	r2, [r3, #1]
      break;
 80013b2:	e020      	b.n	80013f6 <controller_step+0xce6>

     default:
      /* case IN_StartupState1: */
      controller_DW.Delay_DSTATE_f = BM_IDLE;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <controller_step+0xd14>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	705a      	strb	r2, [r3, #1]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <controller_step+0xd10>)
 80013bc:	7b1b      	ldrb	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11b      	bne.n	80013fa <controller_step+0xcea>
          controller_U.BM_b_HVnegContactorSts &&
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <controller_step+0xd10>)
 80013c4:	7b9b      	ldrb	r3, [r3, #14]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d017      	beq.n	80013fa <controller_step+0xcea>
          (!controller_U.BM_b_HVposContactorSts)) {
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <controller_step+0xd10>)
 80013cc:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d113      	bne.n	80013fa <controller_step+0xcea>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <controller_step+0xd14>)
 80013d4:	220c      	movs	r2, #12
 80013d6:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <controller_step+0xd14>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_STARTUP;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <controller_step+0xd14>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	705a      	strb	r2, [r3, #1]
      }
      break;
 80013e4:	e009      	b.n	80013fa <controller_step+0xcea>
      break;
 80013e6:	bf00      	nop
 80013e8:	e008      	b.n	80013fc <controller_step+0xcec>
      break;
 80013ea:	bf00      	nop
 80013ec:	e006      	b.n	80013fc <controller_step+0xcec>
      break;
 80013ee:	bf00      	nop
 80013f0:	e004      	b.n	80013fc <controller_step+0xcec>
      break;
 80013f2:	bf00      	nop
 80013f4:	e002      	b.n	80013fc <controller_step+0xcec>
      break;
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <controller_step+0xcec>
      break;
 80013fa:	bf00      	nop
   *  Constant: '<S4>/Constant1'
   *  Delay: '<S3>/Delay1'
   *  RelationalOperator: '<S4>/motorErrorActive'
   *  Switch: '<S4>/Switch1'
   */
  if (controller_B.MI_motorStatus == MI_STS_ERROR) {
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <controller_step+0xd18>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d103      	bne.n	800140c <controller_step+0xcfc>
    controller_DW.Delay1_DSTATE = MI_STS_ERROR;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <controller_step+0xd14>)
 8001406:	2205      	movs	r2, #5
 8001408:	701a      	strb	r2, [r3, #0]
  } else {
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
  }

  /* End of Switch: '<S4>/Switch' */
}
 800140a:	e003      	b.n	8001414 <controller_step+0xd04>
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <controller_step+0xd18>)
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <controller_step+0xd14>)
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	ecbd 8b02 	vpop	{d8}
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000218 	.word	0x20000218
 8001424:	200001fc 	.word	0x200001fc
 8001428:	200001f8 	.word	0x200001f8

0800142c <rt_OneStep>:
 * the generated code step function.  Overrun behavior should be tailored to
 * your application needs.  This example simply sets an error status in the
 * real-time model and returns from rt_OneStep.
 */
void rt_OneStep(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <rt_OneStep+0x28>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <rt_OneStep+0x16>
    rtmSetErrorStatus(controller_M, "Overrun");
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <rt_OneStep+0x2c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <rt_OneStep+0x30>)
 800143e:	601a      	str	r2, [r3, #0]
    return;
 8001440:	e007      	b.n	8001452 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <rt_OneStep+0x28>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  controller_step();
 8001448:	f7ff f962 	bl	8000710 <controller_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 800144c:	4b01      	ldr	r3, [pc, #4]	; (8001454 <rt_OneStep+0x28>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000254 	.word	0x20000254
 8001458:	08009328 	.word	0x08009328
 800145c:	08009310 	.word	0x08009310

08001460 <rtIsInfF>:
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
}

/* Test if single-precision value is infinite */
boolean_T rtIsInfF(real32_T value)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <rtIsInfF+0x44>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ed97 7a01 	vldr	s14, [r7, #4]
 8001474:	eeb4 7a67 	vcmp.f32	s14, s15
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	d009      	beq.n	8001492 <rtIsInfF+0x32>
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <rtIsInfF+0x48>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ed97 7a01 	vldr	s14, [r7, #4]
 8001488:	eeb4 7a67 	vcmp.f32	s14, s15
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	d101      	bne.n	8001496 <rtIsInfF+0x36>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <rtIsInfF+0x38>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000258 	.word	0x20000258
 80014a8:	2000025c 	.word	0x2000025c

080014ac <rtIsNaNF>:
  return result;
}

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80014c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80014c4:	d106      	bne.n	80014d4 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <rtIsNaNF+0x28>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <rtIsNaNF+0x2a>
 80014d4:	2300      	movs	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014ea:	f001 f822 	bl	8002532 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014ee:	f000 f929 	bl	8001744 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014f2:	f000 faed 	bl	8001ad0 <MX_GPIO_Init>
	MX_CAN1_Init();
 80014f6:	f000 fa25 	bl	8001944 <MX_CAN1_Init>
	MX_USART3_UART_Init();
 80014fa:	f000 fab9 	bl	8001a70 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 80014fe:	f000 f97d 	bl	80017fc <MX_ADC1_Init>
	MX_ADC2_Init();
 8001502:	f000 f9cd 	bl	80018a0 <MX_ADC2_Init>
	MX_TIM2_Init();
 8001506:	f000 fa53 	bl	80019b0 <MX_TIM2_Init>

	/* USER CODE BEGIN 2 */
	// Start 0.2s timer interrupt
	HAL_TIM_Base_Start_IT(&htim2);
 800150a:	4880      	ldr	r0, [pc, #512]	; (800170c <main+0x228>)
 800150c:	f003 fe02 	bl	8005114 <HAL_TIM_Base_Start_IT>

	UART_st uart3 = {
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <main+0x22c>)
 8001512:	463c      	mov	r4, r7
 8001514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.bit_position = LSB_First,
		.baudrate = UART_115200,
		.mode = UART_TX_RX,
		.datasize = UART_Datasize_8,
		.uart_num = 3};
	Printf_Init(&uart3);
 800151a:	463b      	mov	r3, r7
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fb85 	bl	8001c2c <Printf_Init>

	CAN_Config();
 8001522:	f000 fb2d 	bl	8001b80 <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001526:	2102      	movs	r1, #2
 8001528:	487a      	ldr	r0, [pc, #488]	; (8001714 <main+0x230>)
 800152a:	f001 ff97 	bl	800345c <HAL_CAN_ActivateNotification>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <main+0x54>
	{
		Error_Handler();
 8001534:	f000 fb6e 	bl	8001c14 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001538:	2101      	movs	r1, #1
 800153a:	4876      	ldr	r0, [pc, #472]	; (8001714 <main+0x230>)
 800153c:	f001 ff8e 	bl	800345c <HAL_CAN_ActivateNotification>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <main+0x66>
	{
		Error_Handler();
 8001546:	f000 fb65 	bl	8001c14 <Error_Handler>
	}

	TxHeader.DLC = 8;
 800154a:	4b73      	ldr	r3, [pc, #460]	; (8001718 <main+0x234>)
 800154c:	2208      	movs	r2, #8
 800154e:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001550:	4b71      	ldr	r3, [pc, #452]	; (8001718 <main+0x234>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001556:	4b70      	ldr	r3, [pc, #448]	; (8001718 <main+0x234>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x184;
 800155c:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <main+0x234>)
 800155e:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8001562:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001564:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <main+0x234>)
 8001566:	2200      	movs	r2, #0
 8001568:	751a      	strb	r2, [r3, #20]

	TxHeader2.DLC = 8;
 800156a:	4b6c      	ldr	r3, [pc, #432]	; (800171c <main+0x238>)
 800156c:	2208      	movs	r2, #8
 800156e:	611a      	str	r2, [r3, #16]
	TxHeader2.IDE = CAN_ID_STD;
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <main+0x238>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8001576:	4b69      	ldr	r3, [pc, #420]	; (800171c <main+0x238>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x185;
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <main+0x238>)
 800157e:	f240 1285 	movw	r2, #389	; 0x185
 8001582:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 8001584:	4b65      	ldr	r3, [pc, #404]	; (800171c <main+0x238>)
 8001586:	2200      	movs	r2, #0
 8001588:	751a      	strb	r2, [r3, #20]

	TxHeader3.DLC = 8;
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <main+0x23c>)
 800158c:	2208      	movs	r2, #8
 800158e:	611a      	str	r2, [r3, #16]
	TxHeader3.IDE = CAN_ID_STD;
 8001590:	4b63      	ldr	r3, [pc, #396]	; (8001720 <main+0x23c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
	TxHeader3.RTR = CAN_RTR_DATA;
 8001596:	4b62      	ldr	r3, [pc, #392]	; (8001720 <main+0x23c>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
	TxHeader3.StdId = 0x500;
 800159c:	4b60      	ldr	r3, [pc, #384]	; (8001720 <main+0x23c>)
 800159e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80015a2:	601a      	str	r2, [r3, #0]
	TxHeader3.TransmitGlobalTime = DISABLE;
 80015a4:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <main+0x23c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	751a      	strb	r2, [r3, #20]

	TxData[0] = 0x00;
 80015aa:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <main+0x240>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x02;
 80015b0:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <main+0x240>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 80015b6:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <main+0x240>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <main+0x240>)
 80015be:	2200      	movs	r2, #0
 80015c0:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 80015c2:	4b58      	ldr	r3, [pc, #352]	; (8001724 <main+0x240>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 80015c8:	4b56      	ldr	r3, [pc, #344]	; (8001724 <main+0x240>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 80015ce:	4b55      	ldr	r3, [pc, #340]	; (8001724 <main+0x240>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <main+0x240>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	71da      	strb	r2, [r3, #7]

	TxData2[0] = 0x00;
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <main+0x244>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
	TxData2[1] = 0x05;
 80015e0:	4b51      	ldr	r3, [pc, #324]	; (8001728 <main+0x244>)
 80015e2:	2205      	movs	r2, #5
 80015e4:	705a      	strb	r2, [r3, #1]
	TxData2[2] = 0x00;
 80015e6:	4b50      	ldr	r3, [pc, #320]	; (8001728 <main+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	709a      	strb	r2, [r3, #2]
	TxData2[3] = 0x00;
 80015ec:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <main+0x244>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	70da      	strb	r2, [r3, #3]
	TxData2[4] = 0x00;
 80015f2:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <main+0x244>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	711a      	strb	r2, [r3, #4]
	TxData2[5] = 0x00;
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <main+0x244>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	715a      	strb	r2, [r3, #5]
	TxData2[6] = 0x00;
 80015fe:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <main+0x244>)
 8001600:	2200      	movs	r2, #0
 8001602:	719a      	strb	r2, [r3, #6]
	TxData2[7] = 0x00;
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <main+0x244>)
 8001606:	2200      	movs	r2, #0
 8001608:	71da      	strb	r2, [r3, #7]

	TxData3[0] = 0x00;
 800160a:	4b48      	ldr	r3, [pc, #288]	; (800172c <main+0x248>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	TxData3[1] = 0x07;
 8001610:	4b46      	ldr	r3, [pc, #280]	; (800172c <main+0x248>)
 8001612:	2207      	movs	r2, #7
 8001614:	705a      	strb	r2, [r3, #1]
	TxData3[2] = 0x00;
 8001616:	4b45      	ldr	r3, [pc, #276]	; (800172c <main+0x248>)
 8001618:	2200      	movs	r2, #0
 800161a:	709a      	strb	r2, [r3, #2]
	TxData3[3] = 0x00;
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <main+0x248>)
 800161e:	2200      	movs	r2, #0
 8001620:	70da      	strb	r2, [r3, #3]
	TxData3[4] = 0x00;
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <main+0x248>)
 8001624:	2200      	movs	r2, #0
 8001626:	711a      	strb	r2, [r3, #4]
	TxData3[5] = 0x00;
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <main+0x248>)
 800162a:	2200      	movs	r2, #0
 800162c:	715a      	strb	r2, [r3, #5]
	TxData3[6] = 0x00;
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <main+0x248>)
 8001630:	2200      	movs	r2, #0
 8001632:	719a      	strb	r2, [r3, #6]
	TxData3[7] = 0x00;
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <main+0x248>)
 8001636:	2200      	movs	r2, #0
 8001638:	71da      	strb	r2, [r3, #7]

	// Init steering and brake angle sensor ADC's
	// TODO: Add 2 more ADC for another accelerator and steering angle sensor
	MX_ADC1_Init();
 800163a:	f000 f8df 	bl	80017fc <MX_ADC1_Init>
	MX_ADC2_Init();
 800163e:	f000 f92f 	bl	80018a0 <MX_ADC2_Init>

	// Spoof battery contactor status values
	controller_U.BM_b_prechrgContactorSts = PRECHRG_CONTACTOR_STATUS;
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <main+0x24c>)
 8001644:	2200      	movs	r2, #0
 8001646:	731a      	strb	r2, [r3, #12]
	controller_U.BM_b_HVposContactorSts = HV_POS_CONTACTOR_STATUS;
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <main+0x24c>)
 800164a:	2201      	movs	r2, #1
 800164c:	735a      	strb	r2, [r3, #13]
	controller_U.BM_b_HVnegContactorSts = HV_NEG_CONTACTOR_STATUS;
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <main+0x24c>)
 8001650:	2201      	movs	r2, #1
 8001652:	739a      	strb	r2, [r3, #14]

	// Spoof steering angle as 0
	controller_U.DI_V_SteeringAngle = 0;
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <main+0x24c>)
 8001656:	2200      	movs	r2, #0
 8001658:	805a      	strh	r2, [r3, #2]
	
	controller_U.DI_b_DriverButton = true;
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <main+0x24c>)
 800165c:	2201      	movs	r2, #1
 800165e:	719a      	strb	r2, [r3, #6]
	controller_U.AMK_bSystemReady = true;
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <main+0x24c>)
 8001662:	2201      	movs	r2, #1
 8001664:	73da      	strb	r2, [r3, #15]
	controller_U.AMK_bError = false;
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <main+0x24c>)
 8001668:	2200      	movs	r2, #0
 800166a:	741a      	strb	r2, [r3, #16]
	controller_U.AMK_bQuitDcOn = false;
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <main+0x24c>)
 800166e:	2200      	movs	r2, #0
 8001670:	749a      	strb	r2, [r3, #18]
	controller_U.AMK_bDcOn = true;
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <main+0x24c>)
 8001674:	2201      	movs	r2, #1
 8001676:	74da      	strb	r2, [r3, #19]
	controller_U.AMK_bQuitInverterOn = false;
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <main+0x24c>)
 800167a:	2200      	movs	r2, #0
 800167c:	751a      	strb	r2, [r3, #20]
	controller_U.AMK_bInverterOn = true;
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <main+0x24c>)
 8001680:	2201      	movs	r2, #1
 8001682:	755a      	strb	r2, [r3, #21]
	controller_U.AMK_bDerating = false;
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <main+0x24c>)
 8001686:	2200      	movs	r2, #0
 8001688:	759a      	strb	r2, [r3, #22]

	controller_U.AMK_TempMotor = 35;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <main+0x24c>)
 800168c:	2223      	movs	r2, #35	; 0x23
 800168e:	831a      	strh	r2, [r3, #24]
	controller_U.AMK_TempInverter = 35;
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <main+0x24c>)
 8001692:	2223      	movs	r2, #35	; 0x23
 8001694:	835a      	strh	r2, [r3, #26]
	controller_U.AMK_ErrorInfo = 0;
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <main+0x24c>)
 8001698:	2200      	movs	r2, #0
 800169a:	839a      	strh	r2, [r3, #28]
	
	controller_U.AMK_TempIGBT = 35;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <main+0x24c>)
 800169e:	2223      	movs	r2, #35	; 0x23
 80016a0:	83da      	strh	r2, [r3, #30]
	controller_U.AMK_ActualVelocity = 10;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <main+0x24c>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	841a      	strh	r2, [r3, #32]
	controller_U.AMK_TorqueCurrent = 10;
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <main+0x24c>)
 80016aa:	220a      	movs	r2, #10
 80016ac:	845a      	strh	r2, [r3, #34]	; 0x22
	controller_U.AMK_MagnetizingCurrent = 10;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <main+0x24c>)
 80016b0:	220a      	movs	r2, #10
 80016b2:	849a      	strh	r2, [r3, #36]	; 0x24
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Get accelerator and brake pedal (ADC) inputs
		HAL_ADC_Start(&hadc1);
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <main+0x250>)
 80016b6:	f000 ffdd 	bl	8002674 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016be:	481d      	ldr	r0, [pc, #116]	; (8001734 <main+0x250>)
 80016c0:	f001 f8a6 	bl	8002810 <HAL_ADC_PollForConversion>
		accelPedalAdc = HAL_ADC_GetValue(&hadc1);
 80016c4:	481b      	ldr	r0, [pc, #108]	; (8001734 <main+0x250>)
 80016c6:	f001 f92e 	bl	8002926 <HAL_ADC_GetValue>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <main+0x254>)
 80016ce:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc2);
 80016d0:	481a      	ldr	r0, [pc, #104]	; (800173c <main+0x258>)
 80016d2:	f000 ffcf 	bl	8002674 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <main+0x258>)
 80016dc:	f001 f898 	bl	8002810 <HAL_ADC_PollForConversion>
		accelPedalAdc = HAL_ADC_GetValue(&hadc2);
 80016e0:	4816      	ldr	r0, [pc, #88]	; (800173c <main+0x258>)
 80016e2:	f001 f920 	bl	8002926 <HAL_ADC_GetValue>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <main+0x254>)
 80016ea:	6013      	str	r3, [r2, #0]
		
		// For testing purposes, we will use the same ADC input for both accelerator pedals
		controller_U.DI_V_AccelPedalPos1 = accelPedalAdc;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <main+0x254>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <main+0x24c>)
 80016f4:	811a      	strh	r2, [r3, #8]
		controller_U.DI_V_AccelPedalPos2 = accelPedalAdc;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <main+0x254>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <main+0x24c>)
 80016fe:	815a      	strh	r2, [r3, #10]
		controller_U.DI_V_BrakePedalPos = breakPedalAdc;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <main+0x25c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b21a      	sxth	r2, r3
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <main+0x24c>)
 8001708:	809a      	strh	r2, [r3, #4]
		HAL_ADC_Start(&hadc1);
 800170a:	e7d3      	b.n	80016b4 <main+0x1d0>
 800170c:	20000318 	.word	0x20000318
 8001710:	08009318 	.word	0x08009318
 8001714:	200002f0 	.word	0x200002f0
 8001718:	200003ec 	.word	0x200003ec
 800171c:	20000404 	.word	0x20000404
 8001720:	2000041c 	.word	0x2000041c
 8001724:	20000450 	.word	0x20000450
 8001728:	20000458 	.word	0x20000458
 800172c:	20000460 	.word	0x20000460
 8001730:	20000218 	.word	0x20000218
 8001734:	20000260 	.word	0x20000260
 8001738:	20000470 	.word	0x20000470
 800173c:	200002a8 	.word	0x200002a8
 8001740:	20000474 	.word	0x20000474

08001744 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	; 0x50
 8001748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	2234      	movs	r2, #52	; 0x34
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f004 ff28 	bl	80065a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <SystemClock_Config+0xb0>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <SystemClock_Config+0xb0>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <SystemClock_Config+0xb0>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <SystemClock_Config+0xb4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <SystemClock_Config+0xb4>)
 800178a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <SystemClock_Config+0xb4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179c:	2302      	movs	r3, #2
 800179e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2310      	movs	r3, #16
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fb9b 	bl	8003eec <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 80017bc:	f000 fa2a 	bl	8001c14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fe34 	bl	8004448 <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80017e6:	f000 fa15 	bl	8001c14 <Error_Handler>
	}
}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	; 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001802:	463b      	mov	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_ADC1_Init+0x98>)
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <MX_ADC1_Init+0x9c>)
 8001812:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_ADC1_Init+0x98>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_ADC1_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_ADC1_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_ADC1_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_ADC1_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_ADC1_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_ADC1_Init+0x98>)
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_ADC1_Init+0xa0>)
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_ADC1_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_ADC1_Init+0x98>)
 8001848:	2201      	movs	r2, #1
 800184a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_ADC1_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_ADC1_Init+0x98>)
 8001856:	2201      	movs	r2, #1
 8001858:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <MX_ADC1_Init+0x98>)
 800185c:	f000 fec6 	bl	80025ec <HAL_ADC_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001866:	f000 f9d5 	bl	8001c14 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800186e:	2301      	movs	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_ADC1_Init+0x98>)
 800187c:	f001 f860 	bl	8002940 <HAL_ADC_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001886:	f000 f9c5 	bl	8001c14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000260 	.word	0x20000260
 8001898:	40012000 	.word	0x40012000
 800189c:	0f000001 	.word	0x0f000001

080018a0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <MX_ADC2_Init+0x98>)
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <MX_ADC2_Init+0x9c>)
 80018b6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_ADC2_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <MX_ADC2_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_ADC2_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_ADC2_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_ADC2_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_ADC2_Init+0x98>)
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_ADC2_Init+0x98>)
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <MX_ADC2_Init+0xa0>)
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_ADC2_Init+0x98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_ADC2_Init+0x98>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_ADC2_Init+0x98>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_ADC2_Init+0x98>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018fe:	480e      	ldr	r0, [pc, #56]	; (8001938 <MX_ADC2_Init+0x98>)
 8001900:	f000 fe74 	bl	80025ec <HAL_ADC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC2_Init+0x6e>
	{
		Error_Handler();
 800190a:	f000 f983 	bl	8001c14 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800190e:	2301      	movs	r3, #1
 8001910:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001912:	2301      	movs	r3, #1
 8001914:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_ADC2_Init+0x98>)
 8001920:	f001 f80e 	bl	8002940 <HAL_ADC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 800192a:	f000 f973 	bl	8001c14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200002a8 	.word	0x200002a8
 800193c:	40012100 	.word	0x40012100
 8001940:	0f000001 	.word	0x0f000001

08001944 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_CAN1_Init+0x64>)
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <MX_CAN1_Init+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001950:	220a      	movs	r2, #10
 8001952:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_CAN1_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001962:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001966:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_CAN1_Init+0x64>)
 800196a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800196e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001978:	2200      	movs	r2, #0
 800197a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_CAN1_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_CAN1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_CAN1_Init+0x64>)
 8001996:	f001 fa23 	bl	8002de0 <HAL_CAN_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80019a0:	f000 f938 	bl	8001c14 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002f0 	.word	0x200002f0
 80019ac:	40006400 	.word	0x40006400

080019b0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019dc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3200;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019e6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80019ea:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f8:	4813      	ldr	r0, [pc, #76]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019fa:	f003 fb33 	bl	8005064 <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8001a04:	f000 f906 	bl	8001c14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <MX_TIM2_Init+0x98>)
 8001a16:	f003 fd15 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001a20:	f000 f8f8 	bl	8001c14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_TIM2_Init+0x98>)
 8001a32:	f003 ff33 	bl	800589c <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8001a3c:	f000 f8ea 	bl	8001c14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000318 	.word	0x20000318

08001a4c <HAL_TIM_PeriodElapsedCallback>:

// Callback function for 0.2ms time based IRQ to run control system
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	rt_OneStep();
 8001a54:	f7ff fcea 	bl	800142c <rt_OneStep>
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5c:	4803      	ldr	r0, [pc, #12]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a5e:	f002 fa2a 	bl	8003eb6 <HAL_GPIO_TogglePin>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40020400 	.word	0x40020400

08001a70 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_USART3_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001ab4:	f003 ff9e 	bl	80059f4 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8001abe:	f000 f8a9 	bl	8001c14 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000364 	.word	0x20000364
 8001acc:	40004800 	.word	0x40004800

08001ad0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_GPIO_Init+0xa8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <MX_GPIO_Init+0xac>)
 8001b4e:	f002 f999 	bl	8003e84 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8001b52:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001b56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_GPIO_Init+0xac>)
 8001b6c:	f001 ffde 	bl	8003b2c <HAL_GPIO_Init>
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020400 	.word	0x40020400

08001b80 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001baa:	230e      	movs	r3, #14
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480a      	ldr	r0, [pc, #40]	; (8001bdc <CAN_Config+0x5c>)
 8001bb4:	f001 fa10 	bl	8002fd8 <HAL_CAN_ConfigFilter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001bbe:	f000 f829 	bl	8001c14 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <CAN_Config+0x5c>)
 8001bc4:	f001 faf4 	bl	80031b0 <HAL_CAN_Start>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8001bce:	f000 f821 	bl	8001c14 <Error_Handler>
	}
}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002f0 	.word	0x200002f0

08001be0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	// Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001bec:	2100      	movs	r1, #0
 8001bee:	4808      	ldr	r0, [pc, #32]	; (8001c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001bf0:	f001 fb22 	bl	8003238 <HAL_CAN_GetRxMessage>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8001bfa:	f000 f80b 	bl	8001c14 <Error_Handler>
	}

	//	IncomingCANMessageHandler(&RxHeader.StdId, RxData);
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000468 	.word	0x20000468
 8001c0c:	20000434 	.word	0x20000434
 8001c10:	200002f0 	.word	0x200002f0

08001c14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	4802      	ldr	r0, [pc, #8]	; (8001c28 <Error_Handler+0x14>)
 8001c20:	f002 f949 	bl	8003eb6 <HAL_GPIO_TogglePin>
 8001c24:	e7fa      	b.n	8001c1c <Error_Handler+0x8>
 8001c26:	bf00      	nop
 8001c28:	40020400 	.word	0x40020400

08001c2c <Printf_Init>:

// Must be global
UART_st* Printer;


UART_Return_et Printf_Init(UART_st* uart) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  UART_Return_et response;

  // Set global to selected UART
  Printer = uart;
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <Printf_Init+0x3c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  response = UART_Init(uart);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fbcf 	bl	80023de <UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]

  if (response != UART_OK) {
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <Printf_Init+0x22>
      return response;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	e008      	b.n	8001c60 <Printf_Init+0x34>
  }

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */

  setvbuf(stdout, NULL, _IONBF, 0);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <Printf_Init+0x40>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	2202      	movs	r2, #2
 8001c58:	2100      	movs	r1, #0
 8001c5a:	f005 f8ef 	bl	8006e3c <setvbuf>

  return UART_OK;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000478 	.word	0x20000478
 8001c6c:	2000000c 	.word	0x2000000c

08001c70 <_isatty>:


int _isatty(int fd) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db04      	blt.n	8001c88 <_isatty+0x18>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	dc01      	bgt.n	8001c88 <_isatty+0x18>
    return 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e005      	b.n	8001c94 <_isatty+0x24>

  errno = EBADF;
 8001c88:	f004 fc64 	bl	8006554 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2209      	movs	r2, #9
 8001c90:	601a      	str	r2, [r3, #0]
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_write>:

int _write(int fd, char* ptr, int len) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <_write+0x18>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d110      	bne.n	8001cd6 <_write+0x3a>
    response = UART_Transmit(Printer, (uint8_t*) ptr, len);
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <_write+0x50>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fbd5 	bl	800246e <UART_Transmit>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]

    if (response == UART_OK)
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <_write+0x36>
      return len;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	e008      	b.n	8001ce4 <_write+0x48>
    else
      return EIO;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e006      	b.n	8001ce4 <_write+0x48>
  }

  errno = EBADF;
 8001cd6:	f004 fc3d 	bl	8006554 <__errno>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2209      	movs	r2, #9
 8001cde:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000478 	.word	0x20000478

08001cf0 <_close>:


int _close(int fd) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db04      	blt.n	8001d08 <_close+0x18>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	dc01      	bgt.n	8001d08 <_close+0x18>
    return 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e006      	b.n	8001d16 <_close+0x26>

  errno = EBADF;
 8001d08:	f004 fc24 	bl	8006554 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2209      	movs	r2, #9
 8001d10:	601a      	str	r2, [r3, #0]
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]

  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 8001d2a:	f004 fc13 	bl	8006554 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2209      	movs	r2, #9
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDIN_FILENO) {
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d110      	bne.n	8001d74 <_read+0x34>
    response = UART_Receive(Printer, (uint8_t*) ptr, len);
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <_read+0x4c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fba2 	bl	80024a6 <UART_Receive>
 8001d62:	4603      	mov	r3, r0
 8001d64:	75fb      	strb	r3, [r7, #23]
    if (response == UART_OK)
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <_read+0x30>
      return 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e008      	b.n	8001d82 <_read+0x42>
    else
      return EIO;
 8001d70:	2305      	movs	r3, #5
 8001d72:	e006      	b.n	8001d82 <_read+0x42>
  }

  errno = EBADF;
 8001d74:	f004 fbee 	bl	8006554 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2209      	movs	r2, #9
 8001d7c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000478 	.word	0x20000478

08001d90 <_fstat>:


int _fstat(int fd, struct stat* st) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db08      	blt.n	8001db2 <_fstat+0x22>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	dc05      	bgt.n	8001db2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dac:	605a      	str	r2, [r3, #4]
    return 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e005      	b.n	8001dbe <_fstat+0x2e>
  }

  errno = EBADF;
 8001db2:	f004 fbcf 	bl	8006554 <__errno>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2209      	movs	r2, #9
 8001dba:	601a      	str	r2, [r3, #0]
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_MspInit+0x44>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_MspInit+0x44>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_MspInit+0x44>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_MspInit+0x44>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_ADC_MspInit+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d124      	bne.n	8001e7c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <HAL_ADC_MspInit+0xd0>)
 8001e76:	f001 fe59 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e7a:	e028      	b.n	8001ece <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_ADC_MspInit+0xd4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d123      	bne.n	8001ece <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_ADC_MspInit+0xcc>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_ADC_MspInit+0xd0>)
 8001eca:	f001 fe2f 	bl	8003b2c <HAL_GPIO_Init>
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	; 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40012000 	.word	0x40012000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40012100 	.word	0x40012100

08001ee8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_CAN_MspInit+0x9c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d137      	bne.n	8001f7a <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <HAL_CAN_MspInit+0xa0>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_CAN_MspInit+0xa0>)
 8001f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_CAN_MspInit+0xa0>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_CAN_MspInit+0xa0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_CAN_MspInit+0xa0>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_CAN_MspInit+0xa0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f4a:	2309      	movs	r3, #9
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <HAL_CAN_MspInit+0xa4>)
 8001f56:	f001 fde9 	bl	8003b2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2013      	movs	r0, #19
 8001f60:	f001 fdad 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001f64:	2013      	movs	r0, #19
 8001f66:	f001 fdc6 	bl	8003af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2014      	movs	r0, #20
 8001f70:	f001 fda5 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f74:	2014      	movs	r0, #20
 8001f76:	f001 fdbe 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40006400 	.word	0x40006400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020c00 	.word	0x40020c00

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d113      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_TIM_Base_MspInit+0x44>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_TIM_Base_MspInit+0x44>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_TIM_Base_MspInit+0x44>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	201c      	movs	r0, #28
 8001fc0:	f001 fd7d 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fc4:	201c      	movs	r0, #28
 8001fc6:	f001 fd96 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0ae      	sub	sp, #184	; 0xb8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2290      	movs	r2, #144	; 0x90
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 fad5 	bl	80065a8 <memset>
  if(huart->Instance==USART3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_UART_MspInit+0xb4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d13c      	bne.n	8002082 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800200e:	2300      	movs	r3, #0
 8002010:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fbfc 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002022:	f7ff fdf7 	bl	8001c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_UART_MspInit+0xb8>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_UART_MspInit+0xb8>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_UART_MspInit+0xb8>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_UART_MspInit+0xb8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_UART_MspInit+0xb8>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0xb8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800205a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002070:	2307      	movs	r3, #7
 8002072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002076:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0xbc>)
 800207e:	f001 fd55 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	37b8      	adds	r7, #184	; 0xb8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40004800 	.word	0x40004800
 8002090:	40023800 	.word	0x40023800
 8002094:	40020c00 	.word	0x40020c00

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 fa62 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80020f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <CAN1_TX_IRQHandler+0x18>)
 80020f6:	f001 fede 	bl	8003eb6 <HAL_GPIO_TogglePin>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020fa:	4803      	ldr	r0, [pc, #12]	; (8002108 <CAN1_TX_IRQHandler+0x1c>)
 80020fc:	f001 f9d4 	bl	80034a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020400 	.word	0x40020400
 8002108:	200002f0 	.word	0x200002f0

0800210c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <CAN1_RX0_IRQHandler+0x10>)
 8002112:	f001 f9c9 	bl	80034a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200002f0 	.word	0x200002f0

08002120 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <TIM2_IRQHandler+0x10>)
 8002126:	f003 f86d 	bl	8005204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000318 	.word	0x20000318

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 f9f6 	bl	8006554 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20080000 	.word	0x20080000
 8002194:	00000400 	.word	0x00000400
 8002198:	2000047c 	.word	0x2000047c
 800219c:	20000498 	.word	0x20000498

080021a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <UART_Select>:

/*------------- PRIVATE FUNCTION DEFINITIONS ------------ */

// UART_Select configures the corresponding UART number from a UART_st
static UART_Return_et UART_Select(UART_st* uart)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	// Switch case for selection of 8 UARTS
	switch(uart->uart_num)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	2b07      	cmp	r3, #7
 80021d4:	d83a      	bhi.n	800224c <UART_Select+0x88>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <UART_Select+0x18>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080021fd 	.word	0x080021fd
 80021e0:	08002207 	.word	0x08002207
 80021e4:	08002211 	.word	0x08002211
 80021e8:	0800221b 	.word	0x0800221b
 80021ec:	08002225 	.word	0x08002225
 80021f0:	0800222f 	.word	0x0800222f
 80021f4:	08002239 	.word	0x08002239
 80021f8:	08002243 	.word	0x08002243
	{
		case 1:
			uart->huart -> Instance = USART1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <UART_Select+0x9c>)
 8002202:	601a      	str	r2, [r3, #0]
			break;
 8002204:	e024      	b.n	8002250 <UART_Select+0x8c>
		case 2:
			uart->huart -> Instance = USART2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <UART_Select+0xa0>)
 800220c:	601a      	str	r2, [r3, #0]
			break;
 800220e:	e01f      	b.n	8002250 <UART_Select+0x8c>
		case 3:
			uart->huart -> Instance = USART3;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <UART_Select+0xa4>)
 8002216:	601a      	str	r2, [r3, #0]
			break;
 8002218:	e01a      	b.n	8002250 <UART_Select+0x8c>
		case 4:
			uart->huart -> Instance = UART4;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <UART_Select+0xa8>)
 8002220:	601a      	str	r2, [r3, #0]
			break;
 8002222:	e015      	b.n	8002250 <UART_Select+0x8c>
		case 5:
			uart->huart -> Instance = UART5;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <UART_Select+0xac>)
 800222a:	601a      	str	r2, [r3, #0]
			break;
 800222c:	e010      	b.n	8002250 <UART_Select+0x8c>
		case 6:
			uart->huart -> Instance = USART6;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <UART_Select+0xb0>)
 8002234:	601a      	str	r2, [r3, #0]
			break;
 8002236:	e00b      	b.n	8002250 <UART_Select+0x8c>
		case 7:
			uart->huart -> Instance = UART7;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <UART_Select+0xb4>)
 800223e:	601a      	str	r2, [r3, #0]
			break;
 8002240:	e006      	b.n	8002250 <UART_Select+0x8c>
		case 8:
			uart->huart -> Instance = UART8;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <UART_Select+0xb8>)
 8002248:	601a      	str	r2, [r3, #0]
			break;
 800224a:	e001      	b.n	8002250 <UART_Select+0x8c>
		default:
			return INVALID_UART_NUM;
 800224c:	2305      	movs	r3, #5
 800224e:	e000      	b.n	8002252 <UART_Select+0x8e>
	}

	return UART_OK;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40011000 	.word	0x40011000
 8002264:	40004400 	.word	0x40004400
 8002268:	40004800 	.word	0x40004800
 800226c:	40004c00 	.word	0x40004c00
 8002270:	40005000 	.word	0x40005000
 8002274:	40011400 	.word	0x40011400
 8002278:	40007800 	.word	0x40007800
 800227c:	40007c00 	.word	0x40007c00

08002280 <UART_Baud_Rate_Select>:

// UART_Baud_Rate_Select configures the baud rate from the one specified in baudrate
static UART_Return_et UART_Baud_Rate_Select(UART_st* uart)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	// Baud rate must be between 123 Bits/s and 500 KBits/s, stated in .ioc requirements
	if(uart->baudrate < MIN_UART_BAUDRATE || uart->baudrate > MAX_UART_BAUDRATE){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b7a      	cmp	r3, #122	; 0x7a
 800228e:	d904      	bls.n	800229a <UART_Baud_Rate_Select+0x1a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <UART_Baud_Rate_Select+0x38>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <UART_Baud_Rate_Select+0x1e>
		return BAUDRATE_OUT_OF_BOUNDS;
 800229a:	2302      	movs	r3, #2
 800229c:	e005      	b.n	80022aa <UART_Baud_Rate_Select+0x2a>
	}

	uart->huart->Init.BaudRate = uart->baudrate;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	605a      	str	r2, [r3, #4]

	return UART_OK;
 80022a8:	2301      	movs	r3, #1
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	0007a120 	.word	0x0007a120

080022bc <UART_Datasize_Select>:

// UART_Datasize_Select configures the data size from a UART_Datasize_et
static UART_Return_et UART_Datasize_Select(UART_st* uart)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	switch(uart->datasize)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7b1b      	ldrb	r3, [r3, #12]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d011      	beq.n	80022f0 <UART_Datasize_Select+0x34>
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	dc15      	bgt.n	80022fc <UART_Datasize_Select+0x40>
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	d002      	beq.n	80022da <UART_Datasize_Select+0x1e>
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d006      	beq.n	80022e6 <UART_Datasize_Select+0x2a>
 80022d8:	e010      	b.n	80022fc <UART_Datasize_Select+0x40>
	{
		case UART_Datasize_7:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_7B;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e2:	609a      	str	r2, [r3, #8]
			break;
 80022e4:	e00c      	b.n	8002300 <UART_Datasize_Select+0x44>
		case UART_Datasize_8:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_8B;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
			break;
 80022ee:	e007      	b.n	8002300 <UART_Datasize_Select+0x44>
		case UART_Datasize_9:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_9B;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f8:	609a      	str	r2, [r3, #8]
			break;
 80022fa:	e001      	b.n	8002300 <UART_Datasize_Select+0x44>
		default:
			return INVALID_DATASIZE;
 80022fc:	2306      	movs	r3, #6
 80022fe:	e000      	b.n	8002302 <UART_Datasize_Select+0x46>
	}

	return UART_OK;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <UART_Mode_Select>:

// UART_Mode_Select configures the mode based on a UART_Mode_et
static UART_Return_et UART_Mode_Select(UART_st* uart)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
	switch(uart->mode)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7b5b      	ldrb	r3, [r3, #13]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d010      	beq.n	8002340 <UART_Mode_Select+0x32>
 800231e:	2b03      	cmp	r3, #3
 8002320:	dc13      	bgt.n	800234a <UART_Mode_Select+0x3c>
 8002322:	2b01      	cmp	r3, #1
 8002324:	d002      	beq.n	800232c <UART_Mode_Select+0x1e>
 8002326:	2b02      	cmp	r3, #2
 8002328:	d005      	beq.n	8002336 <UART_Mode_Select+0x28>
 800232a:	e00e      	b.n	800234a <UART_Mode_Select+0x3c>
	{
		case UART_RX:
			uart->huart -> Init.Mode = UART_MODE_RX;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2204      	movs	r2, #4
 8002332:	615a      	str	r2, [r3, #20]
			break;
 8002334:	e00b      	b.n	800234e <UART_Mode_Select+0x40>
		case UART_TX:
			uart->huart -> Init.Mode = UART_MODE_TX;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	615a      	str	r2, [r3, #20]
			break;
 800233e:	e006      	b.n	800234e <UART_Mode_Select+0x40>
		case UART_TX_RX:
			uart->huart -> Init.Mode = UART_MODE_TX_RX;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	220c      	movs	r2, #12
 8002346:	615a      	str	r2, [r3, #20]
			break;
 8002348:	e001      	b.n	800234e <UART_Mode_Select+0x40>
		default:
			return INVALID_MODE;
 800234a:	2303      	movs	r3, #3
 800234c:	e000      	b.n	8002350 <UART_Mode_Select+0x42>
	}

	return UART_OK;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <UART_MSB_Select>:

// UART_MSB_Select configures the bit position based on a UART_Bit_Position_et
static UART_Return_et UART_MSB_Select(UART_st* uart)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	switch(uart->bit_position){
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b9b      	ldrb	r3, [r3, #14]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d002      	beq.n	8002372 <UART_MSB_Select+0x16>
 800236c:	2b02      	cmp	r3, #2
 800236e:	d005      	beq.n	800237c <UART_MSB_Select+0x20>
 8002370:	e00e      	b.n	8002390 <UART_MSB_Select+0x34>
		case LSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800237a:	e00b      	b.n	8002394 <UART_MSB_Select+0x38>
		case MSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
			uart->huart -> AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800238c:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 800238e:	e001      	b.n	8002394 <UART_MSB_Select+0x38>
		default:
			return INVALID_BIT_POSITION;
 8002390:	2304      	movs	r3, #4
 8002392:	e000      	b.n	8002396 <UART_MSB_Select+0x3a>
	}

	return UART_OK;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <UART_Default_Configs>:

// Current configurations that are not being modified
static void UART_Default_Configs(UART_st* uart)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	uart->huart -> Init.StopBits = UART_STOPBITS_1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
	uart->huart -> Init.Parity = UART_PARITY_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
	uart->huart -> Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
	uart->huart -> Init.OverSampling = UART_OVERSAMPLING_16;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
	uart->huart -> Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <UART_Init>:

/*------------- PUBLIC FUNCTION DEFINITIONS ------------- */

UART_Return_et UART_Init(UART_st* uart)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
	UART_Return_et response;

	response = UART_Select(uart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff feec 	bl	80021c4 <UART_Select>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <UART_Init+0x1c>
		return response;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	e035      	b.n	8002466 <UART_Init+0x88>
	}

	response = UART_Baud_Rate_Select(uart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff40 	bl	8002280 <UART_Baud_Rate_Select>
 8002400:	4603      	mov	r3, r0
 8002402:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <UART_Init+0x30>
		return response;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	e02b      	b.n	8002466 <UART_Init+0x88>
	}

	response = UART_Datasize_Select(uart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff54 	bl	80022bc <UART_Datasize_Select>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d001      	beq.n	8002422 <UART_Init+0x44>
		return response;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	e021      	b.n	8002466 <UART_Init+0x88>
	}

	response = UART_Mode_Select(uart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ff73 	bl	800230e <UART_Mode_Select>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <UART_Init+0x58>
		return response;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	e017      	b.n	8002466 <UART_Init+0x88>
	}

	response = UART_MSB_Select(uart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff90 	bl	800235c <UART_MSB_Select>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <UART_Init+0x6c>
		return response;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	e00d      	b.n	8002466 <UART_Init+0x88>
	}

	UART_Default_Configs(uart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa9 	bl	80023a2 <UART_Default_Configs>

	if (HAL_UART_Init(uart->huart) != HAL_OK) { Error_Handler(); }
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f003 facd 	bl	80059f4 <HAL_UART_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <UART_Init+0x86>
 8002460:	f7ff fbd8 	bl	8001c14 <Error_Handler>

	return UART_OK;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <UART_Transmit>:

// Uses the HAL UART Transmit to transmit a buffer's contents over the channel specified in the uart struct
UART_Return_et UART_Transmit(UART_st* uart, uint8_t tx_buf[], uint8_t buf_len)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tx_response;

	tx_response = HAL_UART_Transmit(uart->huart, tx_buf, buf_len, TIMEOUT);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	b29a      	uxth	r2, r3
 8002484:	f241 3388 	movw	r3, #5000	; 0x1388
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	f003 fb01 	bl	8005a90 <HAL_UART_Transmit>
 800248e:	4603      	mov	r3, r0
 8002490:	75fb      	strb	r3, [r7, #23]
	if (tx_response != HAL_OK) {
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <UART_Transmit+0x2e>
		return TRANSMIT_FAILED;
 8002498:	2307      	movs	r3, #7
 800249a:	e000      	b.n	800249e <UART_Transmit+0x30>
	}

	return UART_OK;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <UART_Receive>:

// TODO: check the rx_buf dataframe being sent (casting currently)
UART_Return_et UART_Receive(UART_st* uart, uint8_t rx_buf[], uint8_t buf_len)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rx_response;

	rx_response = HAL_UART_Receive(uart->huart, rx_buf, buf_len, TIMEOUT);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	f003 fb68 	bl	8005b96 <HAL_UART_Receive>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
	if (rx_response != HAL_OK) {
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <UART_Receive+0x2e>
		return RECEIVE_FAILED;
 80024d0:	2308      	movs	r3, #8
 80024d2:	e000      	b.n	80024d6 <UART_Receive+0x30>
	}

	return UART_OK;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024fc:	4c0b      	ldr	r4, [pc, #44]	; (800252c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250a:	f7ff fe49 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f004 f827 	bl	8006560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7fe ffe7 	bl	80014e4 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002524:	080097e4 	.word	0x080097e4
  ldr r2, =_sbss
 8002528:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800252c:	20000494 	.word	0x20000494

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>

08002532 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002536:	2003      	movs	r0, #3
 8002538:	f001 fab6 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253c:	200f      	movs	r0, #15
 800253e:	f000 f805 	bl	800254c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002542:	f7ff fc41 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x54>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x58>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002562:	fbb3 f3f1 	udiv	r3, r3, r1
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fad1 	bl	8003b12 <HAL_SYSTICK_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00e      	b.n	8002598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d80a      	bhi.n	8002596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002588:	f001 fa99 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <HAL_InitTick+0x5c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x20>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x24>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_IncTick+0x24>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008
 80025d0:	20000480 	.word	0x20000480

080025d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_GetTick+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000480 	.word	0x20000480

080025ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e031      	b.n	8002666 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fc00 	bl	8001e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_ADC_Init+0x84>)
 8002630:	4013      	ands	r3, r2
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fad6 	bl	8002bec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
 8002656:	e001      	b.n	800265c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	ffffeefd 	.word	0xffffeefd

08002674 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_Start+0x1a>
 800268a:	2302      	movs	r3, #2
 800268c:	e0ad      	b.n	80027ea <HAL_ADC_Start+0x176>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d018      	beq.n	80026d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_ADC_Start+0x184>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a50      	ldr	r2, [pc, #320]	; (80027fc <HAL_ADC_Start+0x188>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9a      	lsrs	r2, r3, #18
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026c8:	e002      	b.n	80026d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d175      	bne.n	80027d0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e8:	4b45      	ldr	r3, [pc, #276]	; (8002800 <HAL_ADC_Start+0x18c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271e:	d106      	bne.n	800272e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f023 0206 	bic.w	r2, r3, #6
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
 800272c:	e002      	b.n	8002734 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002744:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_ADC_Start+0x190>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d143      	bne.n	80027e8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e03a      	b.n	80027e8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a24      	ldr	r2, [pc, #144]	; (8002808 <HAL_ADC_Start+0x194>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10e      	bne.n	800279a <HAL_ADC_Start+0x126>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002798:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_ADC_Start+0x190>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d120      	bne.n	80027e8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_ADC_Start+0x198>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d11b      	bne.n	80027e8 <HAL_ADC_Start+0x174>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d114      	bne.n	80027e8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	e00b      	b.n	80027e8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000
 80027fc:	431bde83 	.word	0x431bde83
 8002800:	fffff8fe 	.word	0xfffff8fe
 8002804:	40012300 	.word	0x40012300
 8002808:	40012000 	.word	0x40012000
 800280c:	40012200 	.word	0x40012200

08002810 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282c:	d113      	bne.n	8002856 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e063      	b.n	800291e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002856:	f7ff febd 	bl	80025d4 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800285c:	e021      	b.n	80028a2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002864:	d01d      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_ADC_PollForConversion+0x6c>
 800286c:	f7ff feb2 	bl	80025d4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d212      	bcs.n	80028a2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d00b      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e03d      	b.n	800291e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d1d6      	bne.n	800285e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0212 	mvn.w	r2, #18
 80028b8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d123      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11f      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d006      	beq.n	80028f8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1c>
 8002958:	2302      	movs	r3, #2
 800295a:	e136      	b.n	8002bca <HAL_ADC_ConfigChannel+0x28a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d93a      	bls.n	80029e2 <HAL_ADC_ConfigChannel+0xa2>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002974:	d035      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68d9      	ldr	r1, [r3, #12]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	3b1e      	subs	r3, #30
 800298c:	2207      	movs	r2, #7
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	400a      	ands	r2, r1
 800299a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a8d      	ldr	r2, [pc, #564]	; (8002bd8 <HAL_ADC_ConfigChannel+0x298>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10a      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68d9      	ldr	r1, [r3, #12]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	061a      	lsls	r2, r3, #24
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ba:	e035      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68d9      	ldr	r1, [r3, #12]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4403      	add	r3, r0
 80029d4:	3b1e      	subs	r3, #30
 80029d6:	409a      	lsls	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e0:	e022      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	2207      	movs	r2, #7
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43da      	mvns	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	400a      	ands	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6919      	ldr	r1, [r3, #16]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4403      	add	r3, r0
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d824      	bhi.n	8002a7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b05      	subs	r3, #5
 8002a42:	221f      	movs	r2, #31
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	400a      	ands	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b05      	subs	r3, #5
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34
 8002a78:	e04c      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d824      	bhi.n	8002acc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b23      	subs	r3, #35	; 0x23
 8002a94:	221f      	movs	r2, #31
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b23      	subs	r3, #35	; 0x23
 8002abe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aca:	e023      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b41      	subs	r3, #65	; 0x41
 8002ade:	221f      	movs	r2, #31
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	400a      	ands	r2, r1
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b41      	subs	r3, #65	; 0x41
 8002b08:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_ADC_ConfigChannel+0x29c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10a      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1f4>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <HAL_ADC_ConfigChannel+0x29c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10f      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b12      	cmp	r3, #18
 8002b44:	d10b      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b50:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_ADC_ConfigChannel+0x29c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d12b      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x280>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_ADC_ConfigChannel+0x298>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x23a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b11      	cmp	r3, #17
 8002b78:	d122      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b84:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b90:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_ADC_ConfigChannel+0x298>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d111      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0c9a      	lsrs	r2, r3, #18
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bb2:	e002      	b.n	8002bba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	10000012 	.word	0x10000012
 8002bdc:	40012000 	.word	0x40012000
 8002be0:	40012300 	.word	0x40012300
 8002be4:	20000000 	.word	0x20000000
 8002be8:	431bde83 	.word	0x431bde83

08002bec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bf4:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <ADC_Init+0x1ec>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a77      	ldr	r2, [pc, #476]	; (8002dd8 <ADC_Init+0x1ec>)
 8002bfa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bfe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c00:	4b75      	ldr	r3, [pc, #468]	; (8002dd8 <ADC_Init+0x1ec>)
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4973      	ldr	r1, [pc, #460]	; (8002dd8 <ADC_Init+0x1ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <ADC_Init+0x1f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e00f      	b.n	8002ce6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0202 	bic.w	r2, r2, #2
 8002cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	005a      	lsls	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	035a      	lsls	r2, r3, #13
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e007      	b.n	8002d5c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	051a      	lsls	r2, r3, #20
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d9e:	025a      	lsls	r2, r3, #9
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	029a      	lsls	r2, r3, #10
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40012300 	.word	0x40012300
 8002ddc:	0f000001 	.word	0x0f000001

08002de0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0ed      	b.n	8002fce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff f872 	bl	8001ee8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e14:	f7ff fbde 	bl	80025d4 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e1a:	e012      	b.n	8002e42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e1c:	f7ff fbda 	bl	80025d4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d90b      	bls.n	8002e42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2205      	movs	r2, #5
 8002e3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0c5      	b.n	8002fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0e5      	beq.n	8002e1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0202 	bic.w	r2, r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7ff fbb8 	bl	80025d4 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e66:	e012      	b.n	8002e8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e68:	f7ff fbb4 	bl	80025d4 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b0a      	cmp	r3, #10
 8002e74:	d90b      	bls.n	8002e8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2205      	movs	r2, #5
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e09f      	b.n	8002fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d108      	bne.n	8002eb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e007      	b.n	8002ec6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7e5b      	ldrb	r3, [r3, #25]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d108      	bne.n	8002ee0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e007      	b.n	8002ef0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7e9b      	ldrb	r3, [r3, #26]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0220 	orr.w	r2, r2, #32
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e007      	b.n	8002f1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0220 	bic.w	r2, r2, #32
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7edb      	ldrb	r3, [r3, #27]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0210 	bic.w	r2, r2, #16
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e007      	b.n	8002f44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0210 	orr.w	r2, r2, #16
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7f1b      	ldrb	r3, [r3, #28]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0208 	orr.w	r2, r2, #8
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e007      	b.n	8002f6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0208 	bic.w	r2, r2, #8
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7f5b      	ldrb	r3, [r3, #29]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d108      	bne.n	8002f88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0204 	orr.w	r2, r2, #4
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e007      	b.n	8002f98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	ea42 0103 	orr.w	r1, r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d003      	beq.n	8002ffe <HAL_CAN_ConfigFilter+0x26>
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 80c7 	bne.w	800318c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a69      	ldr	r2, [pc, #420]	; (80031a8 <HAL_CAN_ConfigFilter+0x1d0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d001      	beq.n	800300c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003008:	4b68      	ldr	r3, [pc, #416]	; (80031ac <HAL_CAN_ConfigFilter+0x1d4>)
 800300a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_CAN_ConfigFilter+0x1d4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800302a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	431a      	orrs	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2201      	movs	r2, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d123      	bne.n	80030ba <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	43db      	mvns	r3, r3
 800307c:	401a      	ands	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003094:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3248      	adds	r2, #72	; 0x48
 800309a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	3348      	adds	r3, #72	; 0x48
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d122      	bne.n	8003108 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3248      	adds	r2, #72	; 0x48
 80030e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030fe:	6979      	ldr	r1, [r7, #20]
 8003100:	3348      	adds	r3, #72	; 0x48
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003122:	e007      	b.n	8003134 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800314e:	e007      	b.n	8003160 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	431a      	orrs	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	431a      	orrs	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800317e:	f023 0201 	bic.w	r2, r3, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e006      	b.n	800319a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40003400 	.word	0x40003400
 80031ac:	40006400 	.word	0x40006400

080031b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d12e      	bne.n	8003222 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031dc:	f7ff f9fa 	bl	80025d4 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031e2:	e012      	b.n	800320a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031e4:	f7ff f9f6 	bl	80025d4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b0a      	cmp	r3, #10
 80031f0:	d90b      	bls.n	800320a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2205      	movs	r2, #5
 8003202:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e012      	b.n	8003230 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e5      	bne.n	80031e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e006      	b.n	8003230 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d003      	beq.n	800325c <HAL_CAN_GetRxMessage+0x24>
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b02      	cmp	r3, #2
 8003258:	f040 80f3 	bne.w	8003442 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10e      	bne.n	8003280 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0e7      	b.n	8003450 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0d8      	b.n	8003450 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	331b      	adds	r3, #27
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0204 	and.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10c      	bne.n	80032d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	331b      	adds	r3, #27
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0d5b      	lsrs	r3, r3, #21
 80032cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e00b      	b.n	80032ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	331b      	adds	r3, #27
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	08db      	lsrs	r3, r3, #3
 80032e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	331b      	adds	r3, #27
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0202 	and.w	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	331b      	adds	r3, #27
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	4413      	add	r3, r2
 8003310:	3304      	adds	r3, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	331b      	adds	r3, #27
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	b2da      	uxtb	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	331b      	adds	r3, #27
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	4413      	add	r3, r2
 8003340:	3304      	adds	r3, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4413      	add	r3, r2
 8003356:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0a1a      	lsrs	r2, r3, #8
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4413      	add	r3, r2
 8003386:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0c1a      	lsrs	r2, r3, #16
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	3302      	adds	r3, #2
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	4413      	add	r3, r2
 80033a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e1a      	lsrs	r2, r3, #24
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	3303      	adds	r3, #3
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	3304      	adds	r3, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0a1a      	lsrs	r2, r3, #8
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	3305      	adds	r3, #5
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0c1a      	lsrs	r2, r3, #16
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	3306      	adds	r3, #6
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	4413      	add	r3, r2
 8003406:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e1a      	lsrs	r2, r3, #24
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3307      	adds	r3, #7
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	e007      	b.n	800343e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e006      	b.n	8003450 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d002      	beq.n	800347a <HAL_CAN_ActivateNotification+0x1e>
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d109      	bne.n	800348e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6959      	ldr	r1, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e006      	b.n	800349c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d07c      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d023      	beq.n	8003540 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f983 	bl	8003816 <HAL_CAN_TxMailbox0CompleteCallback>
 8003510:	e016      	b.n	8003540 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	e00c      	b.n	8003540 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	e002      	b.n	8003540 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f989 	bl	8003852 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d024      	beq.n	8003594 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f963 	bl	800382a <HAL_CAN_TxMailbox1CompleteCallback>
 8003564:	e016      	b.n	8003594 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e00c      	b.n	8003594 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	e002      	b.n	8003594 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f969 	bl	8003866 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d024      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f943 	bl	800383e <HAL_CAN_TxMailbox2CompleteCallback>
 80035b8:	e016      	b.n	80035e8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	e00c      	b.n	80035e8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	e002      	b.n	80035e8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f949 	bl	800387a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2210      	movs	r2, #16
 800360a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2208      	movs	r2, #8
 8003626:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f930 	bl	800388e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe faca 	bl	8001be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003666:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2210      	movs	r2, #16
 800366e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d006      	beq.n	8003692 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2208      	movs	r2, #8
 800368a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f912 	bl	80038b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8f9 	bl	80038a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8fc 	bl	80038ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2208      	movs	r2, #8
 80036ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8f5 	bl	80038de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d07b      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d072      	beq.n	80037ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f043 0304 	orr.w	r3, r3, #4
 800375a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	2b00      	cmp	r3, #0
 8003764:	d043      	beq.n	80037ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03e      	beq.n	80037ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003776:	2b60      	cmp	r3, #96	; 0x60
 8003778:	d02b      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x32a>
 800377a:	2b60      	cmp	r3, #96	; 0x60
 800377c:	d82e      	bhi.n	80037dc <HAL_CAN_IRQHandler+0x334>
 800377e:	2b50      	cmp	r3, #80	; 0x50
 8003780:	d022      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x320>
 8003782:	2b50      	cmp	r3, #80	; 0x50
 8003784:	d82a      	bhi.n	80037dc <HAL_CAN_IRQHandler+0x334>
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d019      	beq.n	80037be <HAL_CAN_IRQHandler+0x316>
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d826      	bhi.n	80037dc <HAL_CAN_IRQHandler+0x334>
 800378e:	2b30      	cmp	r3, #48	; 0x30
 8003790:	d010      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x30c>
 8003792:	2b30      	cmp	r3, #48	; 0x30
 8003794:	d822      	bhi.n	80037dc <HAL_CAN_IRQHandler+0x334>
 8003796:	2b10      	cmp	r3, #16
 8003798:	d002      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x2f8>
 800379a:	2b20      	cmp	r3, #32
 800379c:	d005      	beq.n	80037aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800379e:	e01d      	b.n	80037dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f043 0308 	orr.w	r3, r3, #8
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037a8:	e019      	b.n	80037de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f043 0310 	orr.w	r3, r3, #16
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b2:	e014      	b.n	80037de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f043 0320 	orr.w	r3, r3, #32
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037bc:	e00f      	b.n	80037de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037c6:	e00a      	b.n	80037de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d0:	e005      	b.n	80037de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037da:	e000      	b.n	80037de <HAL_CAN_IRQHandler+0x336>
            break;
 80037dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2204      	movs	r2, #4
 80037f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f872 	bl	80038f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <__NVIC_SetPriorityGrouping+0x40>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 8003932:	4313      	orrs	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <__NVIC_SetPriorityGrouping+0x40>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60d3      	str	r3, [r2, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00
 800394c:	05fa0000 	.word	0x05fa0000

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a88:	f7ff ff8e 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff29 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff3e 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff8e 	bl	80039fc <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff31 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa2 	bl	8003a64 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e175      	b.n	8003e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f040 8164 	bne.w	8003e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d005      	beq.n	8003b82 <HAL_GPIO_Init+0x56>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d130      	bne.n	8003be4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0201 	and.w	r2, r3, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d017      	beq.n	8003c20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d123      	bne.n	8003c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	08da      	lsrs	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3208      	adds	r2, #8
 8003c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80be 	beq.w	8003e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_GPIO_Init+0x32c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d037      	beq.n	8003d6a <HAL_GPIO_Init+0x23e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_GPIO_Init+0x330>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d031      	beq.n	8003d66 <HAL_GPIO_Init+0x23a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a56      	ldr	r2, [pc, #344]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <HAL_GPIO_Init+0x236>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a55      	ldr	r2, [pc, #340]	; (8003e64 <HAL_GPIO_Init+0x338>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d025      	beq.n	8003d5e <HAL_GPIO_Init+0x232>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_GPIO_Init+0x33c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <HAL_GPIO_Init+0x22e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a53      	ldr	r2, [pc, #332]	; (8003e6c <HAL_GPIO_Init+0x340>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d019      	beq.n	8003d56 <HAL_GPIO_Init+0x22a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_GPIO_Init+0x344>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0x226>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a51      	ldr	r2, [pc, #324]	; (8003e74 <HAL_GPIO_Init+0x348>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <HAL_GPIO_Init+0x222>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a50      	ldr	r2, [pc, #320]	; (8003e78 <HAL_GPIO_Init+0x34c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <HAL_GPIO_Init+0x21e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4f      	ldr	r2, [pc, #316]	; (8003e7c <HAL_GPIO_Init+0x350>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_GPIO_Init+0x21a>
 8003d42:	2309      	movs	r3, #9
 8003d44:	e012      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d46:	230a      	movs	r3, #10
 8003d48:	e010      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	e00e      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00c      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d52:	2306      	movs	r3, #6
 8003d54:	e00a      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d56:	2305      	movs	r3, #5
 8003d58:	e008      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e004      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f002 0203 	and.w	r2, r2, #3
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	4093      	lsls	r3, r2
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d7c:	4935      	ldr	r1, [pc, #212]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dde:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	f67f ae86 	bls.w	8003b4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	40020400 	.word	0x40020400
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40021400 	.word	0x40021400
 8003e70:	40021800 	.word	0x40021800
 8003e74:	40021c00 	.word	0x40021c00
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40022400 	.word	0x40022400
 8003e80:	40013c00 	.word	0x40013c00

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ec8:	887a      	ldrh	r2, [r7, #2]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	041a      	lsls	r2, r3, #16
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e29b      	b.n	800443a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8087 	beq.w	800401e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f10:	4b96      	ldr	r3, [pc, #600]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d00c      	beq.n	8003f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1c:	4b93      	ldr	r3, [pc, #588]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d112      	bne.n	8003f4e <HAL_RCC_OscConfig+0x62>
 8003f28:	4b90      	ldr	r3, [pc, #576]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f34:	d10b      	bne.n	8003f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f36:	4b8d      	ldr	r3, [pc, #564]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d06c      	beq.n	800401c <HAL_RCC_OscConfig+0x130>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d168      	bne.n	800401c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e275      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x7a>
 8003f58:	4b84      	ldr	r3, [pc, #528]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a83      	ldr	r2, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	e02e      	b.n	8003fc4 <HAL_RCC_OscConfig+0xd8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x9c>
 8003f6e:	4b7f      	ldr	r3, [pc, #508]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7e      	ldr	r2, [pc, #504]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7b      	ldr	r2, [pc, #492]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e01d      	b.n	8003fc4 <HAL_RCC_OscConfig+0xd8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0xc0>
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a75      	ldr	r2, [pc, #468]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b73      	ldr	r3, [pc, #460]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a72      	ldr	r2, [pc, #456]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0xd8>
 8003fac:	4b6f      	ldr	r3, [pc, #444]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6e      	ldr	r2, [pc, #440]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6b      	ldr	r2, [pc, #428]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fb02 	bl	80025d4 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fe fafe 	bl	80025d4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e229      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b61      	ldr	r3, [pc, #388]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xe8>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe faee 	bl	80025d4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fe faea 	bl	80025d4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e215      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	4b57      	ldr	r3, [pc, #348]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x110>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d069      	beq.n	80040fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800402a:	4b50      	ldr	r3, [pc, #320]	; (800416c <HAL_RCC_OscConfig+0x280>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b4d      	ldr	r3, [pc, #308]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b08      	cmp	r3, #8
 8004040:	d11c      	bne.n	800407c <HAL_RCC_OscConfig+0x190>
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d116      	bne.n	800407c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x17a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1e9      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	493d      	ldr	r1, [pc, #244]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	e040      	b.n	80040fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d023      	beq.n	80040cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a38      	ldr	r2, [pc, #224]	; (800416c <HAL_RCC_OscConfig+0x280>)
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe faa0 	bl	80025d4 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004098:	f7fe fa9c 	bl	80025d4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1c7      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_RCC_OscConfig+0x280>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4929      	ldr	r1, [pc, #164]	; (800416c <HAL_RCC_OscConfig+0x280>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
 80040ca:	e018      	b.n	80040fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040cc:	4b27      	ldr	r3, [pc, #156]	; (800416c <HAL_RCC_OscConfig+0x280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <HAL_RCC_OscConfig+0x280>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fa7c 	bl	80025d4 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fe fa78 	bl	80025d4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1a3      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	4b1e      	ldr	r3, [pc, #120]	; (800416c <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d038      	beq.n	800417c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d019      	beq.n	8004146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411e:	f7fe fa59 	bl	80025d4 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004126:	f7fe fa55 	bl	80025d4 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e180      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RCC_OscConfig+0x280>)
 800413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x23a>
 8004144:	e01a      	b.n	800417c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_OscConfig+0x280>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <HAL_RCC_OscConfig+0x280>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004152:	f7fe fa3f 	bl	80025d4 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415a:	f7fe fa3b 	bl	80025d4 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d903      	bls.n	8004170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e166      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
 800416c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	4b92      	ldr	r3, [pc, #584]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a4 	beq.w	80042d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418a:	4b8c      	ldr	r3, [pc, #560]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004196:	4b89      	ldr	r3, [pc, #548]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a88      	ldr	r2, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800419c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b86      	ldr	r3, [pc, #536]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b2:	4b83      	ldr	r3, [pc, #524]	; (80043c0 <HAL_RCC_OscConfig+0x4d4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d118      	bne.n	80041f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041be:	4b80      	ldr	r3, [pc, #512]	; (80043c0 <HAL_RCC_OscConfig+0x4d4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7f      	ldr	r2, [pc, #508]	; (80043c0 <HAL_RCC_OscConfig+0x4d4>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ca:	f7fe fa03 	bl	80025d4 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fe f9ff 	bl	80025d4 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b64      	cmp	r3, #100	; 0x64
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e12a      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e4:	4b76      	ldr	r3, [pc, #472]	; (80043c0 <HAL_RCC_OscConfig+0x4d4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x31a>
 80041f8:	4b70      	ldr	r3, [pc, #448]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a6f      	ldr	r2, [pc, #444]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
 8004204:	e02d      	b.n	8004262 <HAL_RCC_OscConfig+0x376>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x33c>
 800420e:	4b6b      	ldr	r3, [pc, #428]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a6a      	ldr	r2, [pc, #424]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a67      	ldr	r2, [pc, #412]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
 8004226:	e01c      	b.n	8004262 <HAL_RCC_OscConfig+0x376>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d10c      	bne.n	800424a <HAL_RCC_OscConfig+0x35e>
 8004230:	4b62      	ldr	r3, [pc, #392]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a61      	ldr	r2, [pc, #388]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	e00b      	b.n	8004262 <HAL_RCC_OscConfig+0x376>
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a58      	ldr	r2, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d015      	beq.n	8004296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fe f9b3 	bl	80025d4 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fe f9af 	bl	80025d4 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0d8      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004288:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ee      	beq.n	8004272 <HAL_RCC_OscConfig+0x386>
 8004294:	e014      	b.n	80042c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fe f99d 	bl	80025d4 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fe f999 	bl	80025d4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0c2      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b4:	4b41      	ldr	r3, [pc, #260]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1ee      	bne.n	800429e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d105      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a3c      	ldr	r2, [pc, #240]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80ae 	beq.w	8004438 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d06d      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d14b      	bne.n	8004388 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b32      	ldr	r3, [pc, #200]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a31      	ldr	r2, [pc, #196]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe f96a 	bl	80025d4 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe f966 	bl	80025d4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e091      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b29      	ldr	r3, [pc, #164]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	3b01      	subs	r3, #1
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	491b      	ldr	r1, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800435a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe f938 	bl	80025d4 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe f934 	bl	80025d4 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e05f      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x47c>
 8004386:	e057      	b.n	8004438 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 800438e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fe f91e 	bl	80025d4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fe f91a 	bl	80025d4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e045      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_OscConfig+0x4d0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x4b0>
 80043ba:	e03d      	b.n	8004438 <HAL_RCC_OscConfig+0x54c>
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <HAL_RCC_OscConfig+0x558>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d030      	beq.n	8004434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d129      	bne.n	8004434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d122      	bne.n	8004434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d119      	bne.n	8004434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	3b01      	subs	r3, #1
 800440e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d10f      	bne.n	8004434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d107      	bne.n	8004434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800

08004448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0d0      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b67      	ldr	r3, [pc, #412]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 020f 	bic.w	r2, r3, #15
 8004476:	4965      	ldr	r1, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d040      	beq.n	800456c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d115      	bne.n	800452a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e073      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06b      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4936      	ldr	r1, [pc, #216]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453c:	f7fe f84a 	bl	80025d4 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fe f846 	bl	80025d4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e053      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d210      	bcs.n	800459c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	4922      	ldr	r1, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1cc>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1d0>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1d4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd ffa6 	bl	800254c <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	080093d8 	.word	0x080093d8
 8004618:	20000000 	.word	0x20000000
 800461c:	20000004 	.word	0x20000004

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b090      	sub	sp, #64	; 0x40
 8004626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	2300      	movs	r3, #0
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004630:	2300      	movs	r3, #0
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 8004644:	2b08      	cmp	r3, #8
 8004646:	f200 80a1 	bhi.w	800478c <HAL_RCC_GetSysClockFreq+0x16c>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x3a>
 8004652:	e09b      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004658:	e09b      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465e:	e098      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	2200      	movs	r2, #0
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	627a      	str	r2, [r7, #36]	; 0x24
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004688:	2100      	movs	r1, #0
 800468a:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800468c:	fb03 f201 	mul.w	r2, r3, r1
 8004690:	2300      	movs	r3, #0
 8004692:	fb00 f303 	mul.w	r3, r0, r3
 8004696:	4413      	add	r3, r2
 8004698:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800469a:	fba0 1202 	umull	r1, r2, r0, r2
 800469e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a0:	460a      	mov	r2, r1
 80046a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	4413      	add	r3, r2
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	2200      	movs	r2, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	61fa      	str	r2, [r7, #28]
 80046b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046ba:	f7fb fe19 	bl	80002f0 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4613      	mov	r3, r2
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	e053      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	2200      	movs	r2, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	617a      	str	r2, [r7, #20]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046da:	f04f 0b00 	mov.w	fp, #0
 80046de:	4652      	mov	r2, sl
 80046e0:	465b      	mov	r3, fp
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0159      	lsls	r1, r3, #5
 80046ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f0:	0150      	lsls	r0, r2, #5
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	ebb2 080a 	subs.w	r8, r2, sl
 80046fa:	eb63 090b 	sbc.w	r9, r3, fp
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800470a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800470e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004712:	ebb2 0408 	subs.w	r4, r2, r8
 8004716:	eb63 0509 	sbc.w	r5, r3, r9
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	00eb      	lsls	r3, r5, #3
 8004724:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004728:	00e2      	lsls	r2, r4, #3
 800472a:	4614      	mov	r4, r2
 800472c:	461d      	mov	r5, r3
 800472e:	eb14 030a 	adds.w	r3, r4, sl
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	eb45 030b 	adc.w	r3, r5, fp
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004746:	4629      	mov	r1, r5
 8004748:	028b      	lsls	r3, r1, #10
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004750:	4621      	mov	r1, r4
 8004752:	028a      	lsls	r2, r1, #10
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	2200      	movs	r2, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	60fa      	str	r2, [r7, #12]
 8004760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004764:	f7fb fdc4 	bl	80002f0 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004794:	4618      	mov	r0, r3
 8004796:	3740      	adds	r7, #64	; 0x40
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	017d7840 	.word	0x017d7840

080047ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000000 	.word	0x20000000

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff0 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	080093e8 	.word	0x080093e8

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047f0:	f7ff ffdc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0b5b      	lsrs	r3, r3, #13
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	080093e8 	.word	0x080093e8

08004814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d012      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800483c:	4b69      	ldr	r3, [pc, #420]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a68      	ldr	r2, [pc, #416]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004846:	6093      	str	r3, [r2, #8]
 8004848:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	4964      	ldr	r1, [pc, #400]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d017      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800486e:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	4959      	ldr	r1, [pc, #356]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488c:	d101      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048aa:	4b4e      	ldr	r3, [pc, #312]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	494a      	ldr	r1, [pc, #296]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c8:	d101      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 808b 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	4a39      	ldr	r2, [pc, #228]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6413      	str	r3, [r2, #64]	; 0x40
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a34      	ldr	r2, [pc, #208]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fd fe5a 	bl	80025d4 <HAL_GetTick>
 8004920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fd fe56 	bl	80025d4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e38f      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d035      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d02e      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004960:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004988:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d114      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fe1e 	bl	80025d4 <HAL_GetTick>
 8004998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499a:	e00a      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fd fe1a 	bl	80025d4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e351      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ee      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ca:	d111      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049da:	400b      	ands	r3, r1
 80049dc:	4901      	ldr	r1, [pc, #4]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
 80049e2:	e00b      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40007000 	.word	0x40007000
 80049ec:	0ffffcff 	.word	0x0ffffcff
 80049f0:	4bac      	ldr	r3, [pc, #688]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4aab      	ldr	r2, [pc, #684]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049fa:	6093      	str	r3, [r2, #8]
 80049fc:	4ba9      	ldr	r3, [pc, #676]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	49a6      	ldr	r1, [pc, #664]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d010      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a1a:	4ba2      	ldr	r3, [pc, #648]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	4aa0      	ldr	r2, [pc, #640]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a2a:	4b9e      	ldr	r3, [pc, #632]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	499b      	ldr	r1, [pc, #620]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a48:	4b96      	ldr	r3, [pc, #600]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a56:	4993      	ldr	r1, [pc, #588]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a6a:	4b8e      	ldr	r3, [pc, #568]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a78:	498a      	ldr	r1, [pc, #552]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a8c:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9a:	4982      	ldr	r1, [pc, #520]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aae:	4b7d      	ldr	r3, [pc, #500]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4979      	ldr	r1, [pc, #484]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad0:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	4971      	ldr	r1, [pc, #452]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af2:	4b6c      	ldr	r3, [pc, #432]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f023 020c 	bic.w	r2, r3, #12
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b00:	4968      	ldr	r1, [pc, #416]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b14:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	4960      	ldr	r1, [pc, #384]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b36:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	4957      	ldr	r1, [pc, #348]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b58:	4b52      	ldr	r3, [pc, #328]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	494f      	ldr	r1, [pc, #316]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	4946      	ldr	r1, [pc, #280]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b9c:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	493e      	ldr	r1, [pc, #248]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bcc:	4935      	ldr	r1, [pc, #212]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be0:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bee:	492d      	ldr	r1, [pc, #180]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d011      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c02:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c10:	4924      	ldr	r1, [pc, #144]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c20:	d101      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c42:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c50:	4914      	ldr	r1, [pc, #80]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c74:	490b      	ldr	r1, [pc, #44]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	4902      	ldr	r1, [pc, #8]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ca0:	e002      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00b      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cb4:	4b8a      	ldr	r3, [pc, #552]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	4986      	ldr	r1, [pc, #536]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cd8:	4b81      	ldr	r3, [pc, #516]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce8:	497d      	ldr	r1, [pc, #500]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d006      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80d6 	beq.w	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d04:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a75      	ldr	r2, [pc, #468]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d10:	f7fd fc60 	bl	80025d4 <HAL_GetTick>
 8004d14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d18:	f7fd fc5c 	bl	80025d4 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e195      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d11d      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d58:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5e:	0e1b      	lsrs	r3, r3, #24
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	019a      	lsls	r2, r3, #6
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	071b      	lsls	r3, r3, #28
 8004d7e:	4958      	ldr	r1, [pc, #352]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d02e      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db0:	d129      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004db2:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dc0:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc6:	0f1b      	lsrs	r3, r3, #28
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	019a      	lsls	r2, r3, #6
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	071b      	lsls	r3, r3, #28
 8004de6:	493e      	ldr	r1, [pc, #248]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dee:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df4:	f023 021f 	bic.w	r2, r3, #31
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4938      	ldr	r1, [pc, #224]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01d      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e12:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e20:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e26:	0f1b      	lsrs	r3, r3, #28
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	019a      	lsls	r2, r3, #6
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	061b      	lsls	r3, r3, #24
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	071b      	lsls	r3, r3, #28
 8004e46:	4926      	ldr	r1, [pc, #152]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d011      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	019a      	lsls	r2, r3, #6
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	041b      	lsls	r3, r3, #16
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	061b      	lsls	r3, r3, #24
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	071b      	lsls	r3, r3, #28
 8004e76:	491a      	ldr	r1, [pc, #104]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fd fba3 	bl	80025d4 <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e92:	f7fd fb9f 	bl	80025d4 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b64      	cmp	r3, #100	; 0x64
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0d8      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	f040 80ce 	bne.w	8005054 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd fb86 	bl	80025d4 <HAL_GetTick>
 8004ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eca:	e00b      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ecc:	f7fd fb82 	bl	80025d4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d904      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e0bb      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ee4:	4b5e      	ldr	r3, [pc, #376]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef0:	d0ec      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d02e      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d12a      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f1a:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f28:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	0f1b      	lsrs	r3, r3, #28
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	019a      	lsls	r2, r3, #6
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	4944      	ldr	r1, [pc, #272]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f56:	4b42      	ldr	r3, [pc, #264]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	493d      	ldr	r1, [pc, #244]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d022      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f84:	d11d      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	0e1b      	lsrs	r3, r3, #24
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f94:	4b32      	ldr	r3, [pc, #200]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	0f1b      	lsrs	r3, r3, #28
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	019a      	lsls	r2, r3, #6
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	061b      	lsls	r3, r3, #24
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	071b      	lsls	r3, r3, #28
 8004fba:	4929      	ldr	r1, [pc, #164]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d028      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	0e1b      	lsrs	r3, r3, #24
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fdc:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	019a      	lsls	r2, r3, #6
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	4917      	ldr	r1, [pc, #92]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800500a:	4b15      	ldr	r3, [pc, #84]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4911      	ldr	r1, [pc, #68]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502c:	f7fd fad2 	bl	80025d4 <HAL_GetTick>
 8005030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005034:	f7fd face 	bl	80025d4 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e007      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800504e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005052:	d1ef      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800

08005064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e049      	b.n	800510a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc ff80 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 fac0 	bl	8005628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e054      	b.n	80051d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d01d      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d115      	bne.n	80051c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_TIM_Base_Start_IT+0xec>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d015      	beq.n	80051d2 <HAL_TIM_Base_Start_IT+0xbe>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d011      	beq.n	80051d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	e008      	b.n	80051d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40010400 	.word	0x40010400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40001800 	.word	0x40001800
 8005200:	00010007 	.word	0x00010007

08005204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b02      	cmp	r3, #2
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0202 	mvn.w	r2, #2
 8005230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9d0 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f9c2 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9d3 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d122      	bne.n	80052b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d11b      	bne.n	80052b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0204 	mvn.w	r2, #4
 8005284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9a6 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f998 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9a9 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d122      	bne.n	8005308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d11b      	bne.n	8005308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0208 	mvn.w	r2, #8
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2204      	movs	r2, #4
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f97c 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f96e 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f97f 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d122      	bne.n	800535c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b10      	cmp	r3, #16
 8005322:	d11b      	bne.n	800535c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0210 	mvn.w	r2, #16
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2208      	movs	r2, #8
 8005332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f952 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f944 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f955 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0201 	mvn.w	r2, #1
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc fb62 	bl	8001a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fb0c 	bl	80059cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c2:	d10e      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d107      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 faff 	bl	80059e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f903 	bl	8005614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0220 	mvn.w	r2, #32
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fabf 	bl	80059b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIM_ConfigClockSource+0x1c>
 800545c:	2302      	movs	r3, #2
 800545e:	e0b4      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x186>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <HAL_TIM_ConfigClockSource+0x190>)
 800547c:	4013      	ands	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005498:	d03e      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0xd4>
 800549a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549e:	f200 8087 	bhi.w	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	f000 8086 	beq.w	80055b6 <HAL_TIM_ConfigClockSource+0x172>
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d87f      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b70      	cmp	r3, #112	; 0x70
 80054b2:	d01a      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0xa6>
 80054b4:	2b70      	cmp	r3, #112	; 0x70
 80054b6:	d87b      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b60      	cmp	r3, #96	; 0x60
 80054ba:	d050      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x11a>
 80054bc:	2b60      	cmp	r3, #96	; 0x60
 80054be:	d877      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b50      	cmp	r3, #80	; 0x50
 80054c2:	d03c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0xfa>
 80054c4:	2b50      	cmp	r3, #80	; 0x50
 80054c6:	d873      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d058      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x13a>
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d86f      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b30      	cmp	r3, #48	; 0x30
 80054d2:	d064      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b30      	cmp	r3, #48	; 0x30
 80054d6:	d86b      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d060      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x15a>
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d867      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d05c      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x15a>
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d05a      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x15a>
 80054e8:	e062      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6899      	ldr	r1, [r3, #8]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f000 f9af 	bl	800585c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800550c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	609a      	str	r2, [r3, #8]
      break;
 8005516:	e04f      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6899      	ldr	r1, [r3, #8]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f000 f998 	bl	800585c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800553a:	609a      	str	r2, [r3, #8]
      break;
 800553c:	e03c      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6859      	ldr	r1, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	461a      	mov	r2, r3
 800554c:	f000 f90c 	bl	8005768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2150      	movs	r1, #80	; 0x50
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f965 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 800555c:	e02c      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	461a      	mov	r2, r3
 800556c:	f000 f92b 	bl	80057c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2160      	movs	r1, #96	; 0x60
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f955 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 800557c:	e01c      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f000 f8ec 	bl	8005768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2140      	movs	r1, #64	; 0x40
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f945 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 800559c:	e00c      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f000 f93c 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 80055ae:	e003      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      break;
 80055b4:	e000      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	fffeff88 	.word	0xfffeff88

080055d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a40      	ldr	r2, [pc, #256]	; (800573c <TIM_Base_SetConfig+0x114>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005646:	d00f      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3d      	ldr	r2, [pc, #244]	; (8005740 <TIM_Base_SetConfig+0x118>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3c      	ldr	r2, [pc, #240]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3b      	ldr	r2, [pc, #236]	; (8005748 <TIM_Base_SetConfig+0x120>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3a      	ldr	r2, [pc, #232]	; (800574c <TIM_Base_SetConfig+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d108      	bne.n	800567a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2f      	ldr	r2, [pc, #188]	; (800573c <TIM_Base_SetConfig+0x114>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d02b      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d027      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2c      	ldr	r2, [pc, #176]	; (8005740 <TIM_Base_SetConfig+0x118>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d023      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01f      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <TIM_Base_SetConfig+0x120>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01b      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a29      	ldr	r2, [pc, #164]	; (800574c <TIM_Base_SetConfig+0x124>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d017      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a28      	ldr	r2, [pc, #160]	; (8005750 <TIM_Base_SetConfig+0x128>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a27      	ldr	r2, [pc, #156]	; (8005754 <TIM_Base_SetConfig+0x12c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <TIM_Base_SetConfig+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a25      	ldr	r2, [pc, #148]	; (800575c <TIM_Base_SetConfig+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a24      	ldr	r2, [pc, #144]	; (8005760 <TIM_Base_SetConfig+0x138>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a23      	ldr	r2, [pc, #140]	; (8005764 <TIM_Base_SetConfig+0x13c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d108      	bne.n	80056ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <TIM_Base_SetConfig+0x114>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0xf8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <TIM_Base_SetConfig+0x124>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	615a      	str	r2, [r3, #20]
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40010000 	.word	0x40010000
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40010400 	.word	0x40010400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800
 800575c:	40001800 	.word	0x40001800
 8005760:	40001c00 	.word	0x40001c00
 8005764:	40002000 	.word	0x40002000

08005768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0201 	bic.w	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 030a 	bic.w	r3, r3, #10
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0210 	bic.w	r2, r3, #16
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	f043 0307 	orr.w	r3, r3, #7
 8005848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	021a      	lsls	r2, r3, #8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	431a      	orrs	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e06d      	b.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a30      	ldr	r2, [pc, #192]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2f      	ldr	r2, [pc, #188]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d01d      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10c      	bne.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4313      	orrs	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40001800 	.word	0x40001800

080059b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e040      	b.n	8005a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fade 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f974 	bl	8005d20 <UART_SetConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e022      	b.n	8005a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fbcc 	bl	80061e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fc53 	bl	800632c <UART_CheckIdleState>
 8005a86:	4603      	mov	r3, r0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d171      	bne.n	8005b8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_UART_Transmit+0x24>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e06a      	b.n	8005b8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2221      	movs	r2, #33	; 0x21
 8005ac4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac6:	f7fc fd85 	bl	80025d4 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae4:	d108      	bne.n	8005af8 <HAL_UART_Transmit+0x68>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b00:	e02c      	b.n	8005b5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fc5a 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e038      	b.n	8005b8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3302      	adds	r3, #2
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e007      	b.n	8005b4a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1cc      	bne.n	8005b02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2140      	movs	r1, #64	; 0x40
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fc27 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e005      	b.n	8005b8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08a      	sub	sp, #40	; 0x28
 8005b9a:	af02      	add	r7, sp, #8
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	f040 80b1 	bne.w	8005d14 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Receive+0x28>
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e0a9      	b.n	8005d16 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2222      	movs	r2, #34	; 0x22
 8005bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd8:	f7fc fcfc 	bl	80025d4 <HAL_GetTick>
 8005bdc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	d10e      	bne.n	8005c16 <HAL_UART_Receive+0x80>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_UART_Receive+0x76>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c0a:	e02d      	b.n	8005c68 <HAL_UART_Receive+0xd2>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	22ff      	movs	r2, #255	; 0xff
 8005c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c14:	e028      	b.n	8005c68 <HAL_UART_Receive+0xd2>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <HAL_UART_Receive+0xa4>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Receive+0x9a>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c2e:	e01b      	b.n	8005c68 <HAL_UART_Receive+0xd2>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	227f      	movs	r2, #127	; 0x7f
 8005c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c38:	e016      	b.n	8005c68 <HAL_UART_Receive+0xd2>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c42:	d10d      	bne.n	8005c60 <HAL_UART_Receive+0xca>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_UART_Receive+0xc0>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	227f      	movs	r2, #127	; 0x7f
 8005c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c54:	e008      	b.n	8005c68 <HAL_UART_Receive+0xd2>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	223f      	movs	r2, #63	; 0x3f
 8005c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c5e:	e003      	b.n	8005c68 <HAL_UART_Receive+0xd2>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c78:	d108      	bne.n	8005c8c <HAL_UART_Receive+0xf6>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	e003      	b.n	8005c94 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c94:	e032      	b.n	8005cfc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2120      	movs	r1, #32
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fb90 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e032      	b.n	8005d16 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	8a7b      	ldrh	r3, [r7, #18]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	3302      	adds	r3, #2
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	e00c      	b.n	8005cea <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	8a7b      	ldrh	r3, [r7, #18]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4013      	ands	r3, r2
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1c6      	bne.n	8005c96 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4ba6      	ldr	r3, [pc, #664]	; (8005fe4 <UART_SetConfig+0x2c4>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a94      	ldr	r2, [pc, #592]	; (8005fe8 <UART_SetConfig+0x2c8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d120      	bne.n	8005dde <UART_SetConfig+0xbe>
 8005d9c:	4b93      	ldr	r3, [pc, #588]	; (8005fec <UART_SetConfig+0x2cc>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d816      	bhi.n	8005dd8 <UART_SetConfig+0xb8>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x90>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005dc7 	.word	0x08005dc7
 8005dbc:	08005dd3 	.word	0x08005dd3
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e150      	b.n	8006068 <UART_SetConfig+0x348>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e14d      	b.n	8006068 <UART_SetConfig+0x348>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e14a      	b.n	8006068 <UART_SetConfig+0x348>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e147      	b.n	8006068 <UART_SetConfig+0x348>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e144      	b.n	8006068 <UART_SetConfig+0x348>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a83      	ldr	r2, [pc, #524]	; (8005ff0 <UART_SetConfig+0x2d0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d132      	bne.n	8005e4e <UART_SetConfig+0x12e>
 8005de8:	4b80      	ldr	r3, [pc, #512]	; (8005fec <UART_SetConfig+0x2cc>)
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b0c      	cmp	r3, #12
 8005df4:	d828      	bhi.n	8005e48 <UART_SetConfig+0x128>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0xdc>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08005e49 	.word	0x08005e49
 8005e04:	08005e49 	.word	0x08005e49
 8005e08:	08005e49 	.word	0x08005e49
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e49 	.word	0x08005e49
 8005e14:	08005e49 	.word	0x08005e49
 8005e18:	08005e49 	.word	0x08005e49
 8005e1c:	08005e37 	.word	0x08005e37
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e49 	.word	0x08005e49
 8005e2c:	08005e43 	.word	0x08005e43
 8005e30:	2300      	movs	r3, #0
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e118      	b.n	8006068 <UART_SetConfig+0x348>
 8005e36:	2302      	movs	r3, #2
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e115      	b.n	8006068 <UART_SetConfig+0x348>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e112      	b.n	8006068 <UART_SetConfig+0x348>
 8005e42:	2308      	movs	r3, #8
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	e10f      	b.n	8006068 <UART_SetConfig+0x348>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e10c      	b.n	8006068 <UART_SetConfig+0x348>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a68      	ldr	r2, [pc, #416]	; (8005ff4 <UART_SetConfig+0x2d4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d120      	bne.n	8005e9a <UART_SetConfig+0x17a>
 8005e58:	4b64      	ldr	r3, [pc, #400]	; (8005fec <UART_SetConfig+0x2cc>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e62:	2b30      	cmp	r3, #48	; 0x30
 8005e64:	d013      	beq.n	8005e8e <UART_SetConfig+0x16e>
 8005e66:	2b30      	cmp	r3, #48	; 0x30
 8005e68:	d814      	bhi.n	8005e94 <UART_SetConfig+0x174>
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d009      	beq.n	8005e82 <UART_SetConfig+0x162>
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d810      	bhi.n	8005e94 <UART_SetConfig+0x174>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <UART_SetConfig+0x15c>
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d006      	beq.n	8005e88 <UART_SetConfig+0x168>
 8005e7a:	e00b      	b.n	8005e94 <UART_SetConfig+0x174>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e0f2      	b.n	8006068 <UART_SetConfig+0x348>
 8005e82:	2302      	movs	r3, #2
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e0ef      	b.n	8006068 <UART_SetConfig+0x348>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e0ec      	b.n	8006068 <UART_SetConfig+0x348>
 8005e8e:	2308      	movs	r3, #8
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e0e9      	b.n	8006068 <UART_SetConfig+0x348>
 8005e94:	2310      	movs	r3, #16
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e0e6      	b.n	8006068 <UART_SetConfig+0x348>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a56      	ldr	r2, [pc, #344]	; (8005ff8 <UART_SetConfig+0x2d8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d120      	bne.n	8005ee6 <UART_SetConfig+0x1c6>
 8005ea4:	4b51      	ldr	r3, [pc, #324]	; (8005fec <UART_SetConfig+0x2cc>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eae:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb0:	d013      	beq.n	8005eda <UART_SetConfig+0x1ba>
 8005eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb4:	d814      	bhi.n	8005ee0 <UART_SetConfig+0x1c0>
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d009      	beq.n	8005ece <UART_SetConfig+0x1ae>
 8005eba:	2b80      	cmp	r3, #128	; 0x80
 8005ebc:	d810      	bhi.n	8005ee0 <UART_SetConfig+0x1c0>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <UART_SetConfig+0x1a8>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d006      	beq.n	8005ed4 <UART_SetConfig+0x1b4>
 8005ec6:	e00b      	b.n	8005ee0 <UART_SetConfig+0x1c0>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e0cc      	b.n	8006068 <UART_SetConfig+0x348>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e0c9      	b.n	8006068 <UART_SetConfig+0x348>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e0c6      	b.n	8006068 <UART_SetConfig+0x348>
 8005eda:	2308      	movs	r3, #8
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e0c3      	b.n	8006068 <UART_SetConfig+0x348>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e0c0      	b.n	8006068 <UART_SetConfig+0x348>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a44      	ldr	r2, [pc, #272]	; (8005ffc <UART_SetConfig+0x2dc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d125      	bne.n	8005f3c <UART_SetConfig+0x21c>
 8005ef0:	4b3e      	ldr	r3, [pc, #248]	; (8005fec <UART_SetConfig+0x2cc>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005efe:	d017      	beq.n	8005f30 <UART_SetConfig+0x210>
 8005f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f04:	d817      	bhi.n	8005f36 <UART_SetConfig+0x216>
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0a:	d00b      	beq.n	8005f24 <UART_SetConfig+0x204>
 8005f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f10:	d811      	bhi.n	8005f36 <UART_SetConfig+0x216>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <UART_SetConfig+0x1fe>
 8005f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1a:	d006      	beq.n	8005f2a <UART_SetConfig+0x20a>
 8005f1c:	e00b      	b.n	8005f36 <UART_SetConfig+0x216>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e0a1      	b.n	8006068 <UART_SetConfig+0x348>
 8005f24:	2302      	movs	r3, #2
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e09e      	b.n	8006068 <UART_SetConfig+0x348>
 8005f2a:	2304      	movs	r3, #4
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e09b      	b.n	8006068 <UART_SetConfig+0x348>
 8005f30:	2308      	movs	r3, #8
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e098      	b.n	8006068 <UART_SetConfig+0x348>
 8005f36:	2310      	movs	r3, #16
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e095      	b.n	8006068 <UART_SetConfig+0x348>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a2f      	ldr	r2, [pc, #188]	; (8006000 <UART_SetConfig+0x2e0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d125      	bne.n	8005f92 <UART_SetConfig+0x272>
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <UART_SetConfig+0x2cc>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f54:	d017      	beq.n	8005f86 <UART_SetConfig+0x266>
 8005f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f5a:	d817      	bhi.n	8005f8c <UART_SetConfig+0x26c>
 8005f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f60:	d00b      	beq.n	8005f7a <UART_SetConfig+0x25a>
 8005f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f66:	d811      	bhi.n	8005f8c <UART_SetConfig+0x26c>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <UART_SetConfig+0x254>
 8005f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f70:	d006      	beq.n	8005f80 <UART_SetConfig+0x260>
 8005f72:	e00b      	b.n	8005f8c <UART_SetConfig+0x26c>
 8005f74:	2301      	movs	r3, #1
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e076      	b.n	8006068 <UART_SetConfig+0x348>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e073      	b.n	8006068 <UART_SetConfig+0x348>
 8005f80:	2304      	movs	r3, #4
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e070      	b.n	8006068 <UART_SetConfig+0x348>
 8005f86:	2308      	movs	r3, #8
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e06d      	b.n	8006068 <UART_SetConfig+0x348>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e06a      	b.n	8006068 <UART_SetConfig+0x348>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <UART_SetConfig+0x2e4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d138      	bne.n	800600e <UART_SetConfig+0x2ee>
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <UART_SetConfig+0x2cc>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005faa:	d017      	beq.n	8005fdc <UART_SetConfig+0x2bc>
 8005fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fb0:	d82a      	bhi.n	8006008 <UART_SetConfig+0x2e8>
 8005fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb6:	d00b      	beq.n	8005fd0 <UART_SetConfig+0x2b0>
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbc:	d824      	bhi.n	8006008 <UART_SetConfig+0x2e8>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <UART_SetConfig+0x2aa>
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc6:	d006      	beq.n	8005fd6 <UART_SetConfig+0x2b6>
 8005fc8:	e01e      	b.n	8006008 <UART_SetConfig+0x2e8>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	77fb      	strb	r3, [r7, #31]
 8005fce:	e04b      	b.n	8006068 <UART_SetConfig+0x348>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e048      	b.n	8006068 <UART_SetConfig+0x348>
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	77fb      	strb	r3, [r7, #31]
 8005fda:	e045      	b.n	8006068 <UART_SetConfig+0x348>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e042      	b.n	8006068 <UART_SetConfig+0x348>
 8005fe2:	bf00      	nop
 8005fe4:	efff69f3 	.word	0xefff69f3
 8005fe8:	40011000 	.word	0x40011000
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	40004400 	.word	0x40004400
 8005ff4:	40004800 	.word	0x40004800
 8005ff8:	40004c00 	.word	0x40004c00
 8005ffc:	40005000 	.word	0x40005000
 8006000:	40011400 	.word	0x40011400
 8006004:	40007800 	.word	0x40007800
 8006008:	2310      	movs	r3, #16
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e02c      	b.n	8006068 <UART_SetConfig+0x348>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a72      	ldr	r2, [pc, #456]	; (80061dc <UART_SetConfig+0x4bc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d125      	bne.n	8006064 <UART_SetConfig+0x344>
 8006018:	4b71      	ldr	r3, [pc, #452]	; (80061e0 <UART_SetConfig+0x4c0>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006022:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006026:	d017      	beq.n	8006058 <UART_SetConfig+0x338>
 8006028:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800602c:	d817      	bhi.n	800605e <UART_SetConfig+0x33e>
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d00b      	beq.n	800604c <UART_SetConfig+0x32c>
 8006034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006038:	d811      	bhi.n	800605e <UART_SetConfig+0x33e>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <UART_SetConfig+0x326>
 800603e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006042:	d006      	beq.n	8006052 <UART_SetConfig+0x332>
 8006044:	e00b      	b.n	800605e <UART_SetConfig+0x33e>
 8006046:	2300      	movs	r3, #0
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e00d      	b.n	8006068 <UART_SetConfig+0x348>
 800604c:	2302      	movs	r3, #2
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e00a      	b.n	8006068 <UART_SetConfig+0x348>
 8006052:	2304      	movs	r3, #4
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e007      	b.n	8006068 <UART_SetConfig+0x348>
 8006058:	2308      	movs	r3, #8
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e004      	b.n	8006068 <UART_SetConfig+0x348>
 800605e:	2310      	movs	r3, #16
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e001      	b.n	8006068 <UART_SetConfig+0x348>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006070:	d15b      	bne.n	800612a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006072:	7ffb      	ldrb	r3, [r7, #31]
 8006074:	2b08      	cmp	r3, #8
 8006076:	d828      	bhi.n	80060ca <UART_SetConfig+0x3aa>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x360>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060b5 	.word	0x080060b5
 800608c:	080060cb 	.word	0x080060cb
 8006090:	080060bb 	.word	0x080060bb
 8006094:	080060cb 	.word	0x080060cb
 8006098:	080060cb 	.word	0x080060cb
 800609c:	080060cb 	.word	0x080060cb
 80060a0:	080060c3 	.word	0x080060c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a4:	f7fe fb8e 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 80060a8:	61b8      	str	r0, [r7, #24]
        break;
 80060aa:	e013      	b.n	80060d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ac:	f7fe fb9e 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 80060b0:	61b8      	str	r0, [r7, #24]
        break;
 80060b2:	e00f      	b.n	80060d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b4:	4b4b      	ldr	r3, [pc, #300]	; (80061e4 <UART_SetConfig+0x4c4>)
 80060b6:	61bb      	str	r3, [r7, #24]
        break;
 80060b8:	e00c      	b.n	80060d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ba:	f7fe fab1 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80060be:	61b8      	str	r0, [r7, #24]
        break;
 80060c0:	e008      	b.n	80060d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c6:	61bb      	str	r3, [r7, #24]
        break;
 80060c8:	e004      	b.n	80060d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	77bb      	strb	r3, [r7, #30]
        break;
 80060d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d074      	beq.n	80061c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	005a      	lsls	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b0f      	cmp	r3, #15
 80060f4:	d916      	bls.n	8006124 <UART_SetConfig+0x404>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fc:	d212      	bcs.n	8006124 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f023 030f 	bic.w	r3, r3, #15
 8006106:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	b29a      	uxth	r2, r3
 8006114:	89fb      	ldrh	r3, [r7, #14]
 8006116:	4313      	orrs	r3, r2
 8006118:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	89fa      	ldrh	r2, [r7, #14]
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	e04f      	b.n	80061c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	77bb      	strb	r3, [r7, #30]
 8006128:	e04c      	b.n	80061c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800612a:	7ffb      	ldrb	r3, [r7, #31]
 800612c:	2b08      	cmp	r3, #8
 800612e:	d828      	bhi.n	8006182 <UART_SetConfig+0x462>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x418>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	0800615d 	.word	0x0800615d
 800613c:	08006165 	.word	0x08006165
 8006140:	0800616d 	.word	0x0800616d
 8006144:	08006183 	.word	0x08006183
 8006148:	08006173 	.word	0x08006173
 800614c:	08006183 	.word	0x08006183
 8006150:	08006183 	.word	0x08006183
 8006154:	08006183 	.word	0x08006183
 8006158:	0800617b 	.word	0x0800617b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fe fb32 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8006160:	61b8      	str	r0, [r7, #24]
        break;
 8006162:	e013      	b.n	800618c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fe fb42 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 8006168:	61b8      	str	r0, [r7, #24]
        break;
 800616a:	e00f      	b.n	800618c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800616c:	4b1d      	ldr	r3, [pc, #116]	; (80061e4 <UART_SetConfig+0x4c4>)
 800616e:	61bb      	str	r3, [r7, #24]
        break;
 8006170:	e00c      	b.n	800618c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006172:	f7fe fa55 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8006176:	61b8      	str	r0, [r7, #24]
        break;
 8006178:	e008      	b.n	800618c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	61bb      	str	r3, [r7, #24]
        break;
 8006180:	e004      	b.n	800618c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	77bb      	strb	r3, [r7, #30]
        break;
 800618a:	bf00      	nop
    }

    if (pclk != 0U)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d018      	beq.n	80061c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	085a      	lsrs	r2, r3, #1
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	441a      	add	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b0f      	cmp	r3, #15
 80061aa:	d909      	bls.n	80061c0 <UART_SetConfig+0x4a0>
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b2:	d205      	bcs.n	80061c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	e001      	b.n	80061c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40007c00 	.word	0x40007c00
 80061e0:	40023800 	.word	0x40023800
 80061e4:	00f42400 	.word	0x00f42400

080061e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01a      	beq.n	80062fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e6:	d10a      	bne.n	80062fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800633c:	f7fc f94a 	bl	80025d4 <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d10e      	bne.n	800636e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f831 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e027      	b.n	80063be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b04      	cmp	r3, #4
 800637a:	d10e      	bne.n	800639a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f81b 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e011      	b.n	80063be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b09c      	sub	sp, #112	; 0x70
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d6:	e0a7      	b.n	8006528 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063de:	f000 80a3 	beq.w	8006528 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fc f8f7 	bl	80025d4 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80063f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d13f      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800640c:	667b      	str	r3, [r7, #100]	; 0x64
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006418:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800641c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e6      	bne.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3308      	adds	r3, #8
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	663b      	str	r3, [r7, #96]	; 0x60
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3308      	adds	r3, #8
 8006448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800644a:	64ba      	str	r2, [r7, #72]	; 0x48
 800644c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e5      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e068      	b.n	800654a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d050      	beq.n	8006528 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006494:	d148      	bne.n	8006528 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800649e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
 80064c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	613b      	str	r3, [r7, #16]
   return(result);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064f2:	623a      	str	r2, [r7, #32]
 80064f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	69f9      	ldr	r1, [r7, #28]
 80064f8:	6a3a      	ldr	r2, [r7, #32]
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e010      	b.n	800654a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69da      	ldr	r2, [r3, #28]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4013      	ands	r3, r2
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	bf0c      	ite	eq
 8006538:	2301      	moveq	r3, #1
 800653a:	2300      	movne	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	429a      	cmp	r2, r3
 8006544:	f43f af48 	beq.w	80063d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3770      	adds	r7, #112	; 0x70
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <__errno>:
 8006554:	4b01      	ldr	r3, [pc, #4]	; (800655c <__errno+0x8>)
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	2000000c 	.word	0x2000000c

08006560 <__libc_init_array>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4d0d      	ldr	r5, [pc, #52]	; (8006598 <__libc_init_array+0x38>)
 8006564:	4c0d      	ldr	r4, [pc, #52]	; (800659c <__libc_init_array+0x3c>)
 8006566:	1b64      	subs	r4, r4, r5
 8006568:	10a4      	asrs	r4, r4, #2
 800656a:	2600      	movs	r6, #0
 800656c:	42a6      	cmp	r6, r4
 800656e:	d109      	bne.n	8006584 <__libc_init_array+0x24>
 8006570:	4d0b      	ldr	r5, [pc, #44]	; (80065a0 <__libc_init_array+0x40>)
 8006572:	4c0c      	ldr	r4, [pc, #48]	; (80065a4 <__libc_init_array+0x44>)
 8006574:	f002 febe 	bl	80092f4 <_init>
 8006578:	1b64      	subs	r4, r4, r5
 800657a:	10a4      	asrs	r4, r4, #2
 800657c:	2600      	movs	r6, #0
 800657e:	42a6      	cmp	r6, r4
 8006580:	d105      	bne.n	800658e <__libc_init_array+0x2e>
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f855 3b04 	ldr.w	r3, [r5], #4
 8006588:	4798      	blx	r3
 800658a:	3601      	adds	r6, #1
 800658c:	e7ee      	b.n	800656c <__libc_init_array+0xc>
 800658e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006592:	4798      	blx	r3
 8006594:	3601      	adds	r6, #1
 8006596:	e7f2      	b.n	800657e <__libc_init_array+0x1e>
 8006598:	080097dc 	.word	0x080097dc
 800659c:	080097dc 	.word	0x080097dc
 80065a0:	080097dc 	.word	0x080097dc
 80065a4:	080097e0 	.word	0x080097e0

080065a8 <memset>:
 80065a8:	4402      	add	r2, r0
 80065aa:	4603      	mov	r3, r0
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d100      	bne.n	80065b2 <memset+0xa>
 80065b0:	4770      	bx	lr
 80065b2:	f803 1b01 	strb.w	r1, [r3], #1
 80065b6:	e7f9      	b.n	80065ac <memset+0x4>

080065b8 <__cvt>:
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	ed2d 8b02 	vpush	{d8}
 80065be:	eeb0 8b40 	vmov.f64	d8, d0
 80065c2:	b085      	sub	sp, #20
 80065c4:	4617      	mov	r7, r2
 80065c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065ca:	ee18 2a90 	vmov	r2, s17
 80065ce:	f025 0520 	bic.w	r5, r5, #32
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	bfb6      	itet	lt
 80065d6:	222d      	movlt	r2, #45	; 0x2d
 80065d8:	2200      	movge	r2, #0
 80065da:	eeb1 8b40 	vneglt.f64	d8, d0
 80065de:	2d46      	cmp	r5, #70	; 0x46
 80065e0:	460c      	mov	r4, r1
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	d004      	beq.n	80065f0 <__cvt+0x38>
 80065e6:	2d45      	cmp	r5, #69	; 0x45
 80065e8:	d100      	bne.n	80065ec <__cvt+0x34>
 80065ea:	3401      	adds	r4, #1
 80065ec:	2102      	movs	r1, #2
 80065ee:	e000      	b.n	80065f2 <__cvt+0x3a>
 80065f0:	2103      	movs	r1, #3
 80065f2:	ab03      	add	r3, sp, #12
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	ab02      	add	r3, sp, #8
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	4622      	mov	r2, r4
 80065fc:	4633      	mov	r3, r6
 80065fe:	eeb0 0b48 	vmov.f64	d0, d8
 8006602:	f000 fd6d 	bl	80070e0 <_dtoa_r>
 8006606:	2d47      	cmp	r5, #71	; 0x47
 8006608:	d101      	bne.n	800660e <__cvt+0x56>
 800660a:	07fb      	lsls	r3, r7, #31
 800660c:	d51a      	bpl.n	8006644 <__cvt+0x8c>
 800660e:	2d46      	cmp	r5, #70	; 0x46
 8006610:	eb00 0204 	add.w	r2, r0, r4
 8006614:	d10c      	bne.n	8006630 <__cvt+0x78>
 8006616:	7803      	ldrb	r3, [r0, #0]
 8006618:	2b30      	cmp	r3, #48	; 0x30
 800661a:	d107      	bne.n	800662c <__cvt+0x74>
 800661c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006624:	bf1c      	itt	ne
 8006626:	f1c4 0401 	rsbne	r4, r4, #1
 800662a:	6034      	strne	r4, [r6, #0]
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	441a      	add	r2, r3
 8006630:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006638:	bf08      	it	eq
 800663a:	9203      	streq	r2, [sp, #12]
 800663c:	2130      	movs	r1, #48	; 0x30
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	4293      	cmp	r3, r2
 8006642:	d307      	bcc.n	8006654 <__cvt+0x9c>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006648:	1a1b      	subs	r3, r3, r0
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	b005      	add	sp, #20
 800664e:	ecbd 8b02 	vpop	{d8}
 8006652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006654:	1c5c      	adds	r4, r3, #1
 8006656:	9403      	str	r4, [sp, #12]
 8006658:	7019      	strb	r1, [r3, #0]
 800665a:	e7f0      	b.n	800663e <__cvt+0x86>

0800665c <__exponent>:
 800665c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665e:	4603      	mov	r3, r0
 8006660:	2900      	cmp	r1, #0
 8006662:	bfb8      	it	lt
 8006664:	4249      	neglt	r1, r1
 8006666:	f803 2b02 	strb.w	r2, [r3], #2
 800666a:	bfb4      	ite	lt
 800666c:	222d      	movlt	r2, #45	; 0x2d
 800666e:	222b      	movge	r2, #43	; 0x2b
 8006670:	2909      	cmp	r1, #9
 8006672:	7042      	strb	r2, [r0, #1]
 8006674:	dd2a      	ble.n	80066cc <__exponent+0x70>
 8006676:	f10d 0407 	add.w	r4, sp, #7
 800667a:	46a4      	mov	ip, r4
 800667c:	270a      	movs	r7, #10
 800667e:	46a6      	mov	lr, r4
 8006680:	460a      	mov	r2, r1
 8006682:	fb91 f6f7 	sdiv	r6, r1, r7
 8006686:	fb07 1516 	mls	r5, r7, r6, r1
 800668a:	3530      	adds	r5, #48	; 0x30
 800668c:	2a63      	cmp	r2, #99	; 0x63
 800668e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006692:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006696:	4631      	mov	r1, r6
 8006698:	dcf1      	bgt.n	800667e <__exponent+0x22>
 800669a:	3130      	adds	r1, #48	; 0x30
 800669c:	f1ae 0502 	sub.w	r5, lr, #2
 80066a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066a4:	1c44      	adds	r4, r0, #1
 80066a6:	4629      	mov	r1, r5
 80066a8:	4561      	cmp	r1, ip
 80066aa:	d30a      	bcc.n	80066c2 <__exponent+0x66>
 80066ac:	f10d 0209 	add.w	r2, sp, #9
 80066b0:	eba2 020e 	sub.w	r2, r2, lr
 80066b4:	4565      	cmp	r5, ip
 80066b6:	bf88      	it	hi
 80066b8:	2200      	movhi	r2, #0
 80066ba:	4413      	add	r3, r2
 80066bc:	1a18      	subs	r0, r3, r0
 80066be:	b003      	add	sp, #12
 80066c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066ca:	e7ed      	b.n	80066a8 <__exponent+0x4c>
 80066cc:	2330      	movs	r3, #48	; 0x30
 80066ce:	3130      	adds	r1, #48	; 0x30
 80066d0:	7083      	strb	r3, [r0, #2]
 80066d2:	70c1      	strb	r1, [r0, #3]
 80066d4:	1d03      	adds	r3, r0, #4
 80066d6:	e7f1      	b.n	80066bc <__exponent+0x60>

080066d8 <_printf_float>:
 80066d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	b08b      	sub	sp, #44	; 0x2c
 80066de:	460c      	mov	r4, r1
 80066e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80066e4:	4616      	mov	r6, r2
 80066e6:	461f      	mov	r7, r3
 80066e8:	4605      	mov	r5, r0
 80066ea:	f001 fc1f 	bl	8007f2c <_localeconv_r>
 80066ee:	f8d0 b000 	ldr.w	fp, [r0]
 80066f2:	4658      	mov	r0, fp
 80066f4:	f7f9 fda4 	bl	8000240 <strlen>
 80066f8:	2300      	movs	r3, #0
 80066fa:	9308      	str	r3, [sp, #32]
 80066fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006700:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	3307      	adds	r3, #7
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	f103 0108 	add.w	r1, r3, #8
 8006710:	f8c8 1000 	str.w	r1, [r8]
 8006714:	4682      	mov	sl, r0
 8006716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800671a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800671e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006980 <_printf_float+0x2a8>
 8006722:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006726:	eeb0 6bc0 	vabs.f64	d6, d0
 800672a:	eeb4 6b47 	vcmp.f64	d6, d7
 800672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006732:	dd24      	ble.n	800677e <_printf_float+0xa6>
 8006734:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	d502      	bpl.n	8006744 <_printf_float+0x6c>
 800673e:	232d      	movs	r3, #45	; 0x2d
 8006740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006744:	4b90      	ldr	r3, [pc, #576]	; (8006988 <_printf_float+0x2b0>)
 8006746:	4891      	ldr	r0, [pc, #580]	; (800698c <_printf_float+0x2b4>)
 8006748:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800674c:	bf94      	ite	ls
 800674e:	4698      	movls	r8, r3
 8006750:	4680      	movhi	r8, r0
 8006752:	2303      	movs	r3, #3
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	2300      	movs	r3, #0
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	9700      	str	r7, [sp, #0]
 8006762:	4633      	mov	r3, r6
 8006764:	aa09      	add	r2, sp, #36	; 0x24
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f9d3 	bl	8006b14 <_printf_common>
 800676e:	3001      	adds	r0, #1
 8006770:	f040 808a 	bne.w	8006888 <_printf_float+0x1b0>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006778:	b00b      	add	sp, #44	; 0x2c
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006786:	d709      	bvc.n	800679c <_printf_float+0xc4>
 8006788:	ee10 3a90 	vmov	r3, s1
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbc      	itt	lt
 8006790:	232d      	movlt	r3, #45	; 0x2d
 8006792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006796:	487e      	ldr	r0, [pc, #504]	; (8006990 <_printf_float+0x2b8>)
 8006798:	4b7e      	ldr	r3, [pc, #504]	; (8006994 <_printf_float+0x2bc>)
 800679a:	e7d5      	b.n	8006748 <_printf_float+0x70>
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067a2:	9104      	str	r1, [sp, #16]
 80067a4:	1c59      	adds	r1, r3, #1
 80067a6:	d13c      	bne.n	8006822 <_printf_float+0x14a>
 80067a8:	2306      	movs	r3, #6
 80067aa:	6063      	str	r3, [r4, #4]
 80067ac:	2300      	movs	r3, #0
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	ab08      	add	r3, sp, #32
 80067b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80067b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ba:	ab07      	add	r3, sp, #28
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	f10d 031b 	add.w	r3, sp, #27
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7ff fef6 	bl	80065b8 <__cvt>
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	9907      	ldr	r1, [sp, #28]
 80067d0:	2b47      	cmp	r3, #71	; 0x47
 80067d2:	4680      	mov	r8, r0
 80067d4:	d108      	bne.n	80067e8 <_printf_float+0x110>
 80067d6:	1cc8      	adds	r0, r1, #3
 80067d8:	db02      	blt.n	80067e0 <_printf_float+0x108>
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	4299      	cmp	r1, r3
 80067de:	dd41      	ble.n	8006864 <_printf_float+0x18c>
 80067e0:	f1a9 0902 	sub.w	r9, r9, #2
 80067e4:	fa5f f989 	uxtb.w	r9, r9
 80067e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067ec:	d820      	bhi.n	8006830 <_printf_float+0x158>
 80067ee:	3901      	subs	r1, #1
 80067f0:	464a      	mov	r2, r9
 80067f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067f6:	9107      	str	r1, [sp, #28]
 80067f8:	f7ff ff30 	bl	800665c <__exponent>
 80067fc:	9a08      	ldr	r2, [sp, #32]
 80067fe:	9004      	str	r0, [sp, #16]
 8006800:	1813      	adds	r3, r2, r0
 8006802:	2a01      	cmp	r2, #1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	dc02      	bgt.n	800680e <_printf_float+0x136>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	07d2      	lsls	r2, r2, #31
 800680c:	d501      	bpl.n	8006812 <_printf_float+0x13a>
 800680e:	3301      	adds	r3, #1
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0a2      	beq.n	8006760 <_printf_float+0x88>
 800681a:	232d      	movs	r3, #45	; 0x2d
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006820:	e79e      	b.n	8006760 <_printf_float+0x88>
 8006822:	9904      	ldr	r1, [sp, #16]
 8006824:	2947      	cmp	r1, #71	; 0x47
 8006826:	d1c1      	bne.n	80067ac <_printf_float+0xd4>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1bf      	bne.n	80067ac <_printf_float+0xd4>
 800682c:	2301      	movs	r3, #1
 800682e:	e7bc      	b.n	80067aa <_printf_float+0xd2>
 8006830:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006834:	d118      	bne.n	8006868 <_printf_float+0x190>
 8006836:	2900      	cmp	r1, #0
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	dd0b      	ble.n	8006854 <_printf_float+0x17c>
 800683c:	6121      	str	r1, [r4, #16]
 800683e:	b913      	cbnz	r3, 8006846 <_printf_float+0x16e>
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	07d0      	lsls	r0, r2, #31
 8006844:	d502      	bpl.n	800684c <_printf_float+0x174>
 8006846:	3301      	adds	r3, #1
 8006848:	440b      	add	r3, r1
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	2300      	movs	r3, #0
 800684e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	e7de      	b.n	8006812 <_printf_float+0x13a>
 8006854:	b913      	cbnz	r3, 800685c <_printf_float+0x184>
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	07d2      	lsls	r2, r2, #31
 800685a:	d501      	bpl.n	8006860 <_printf_float+0x188>
 800685c:	3302      	adds	r3, #2
 800685e:	e7f4      	b.n	800684a <_printf_float+0x172>
 8006860:	2301      	movs	r3, #1
 8006862:	e7f2      	b.n	800684a <_printf_float+0x172>
 8006864:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	4299      	cmp	r1, r3
 800686c:	db05      	blt.n	800687a <_printf_float+0x1a2>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6121      	str	r1, [r4, #16]
 8006872:	07d8      	lsls	r0, r3, #31
 8006874:	d5ea      	bpl.n	800684c <_printf_float+0x174>
 8006876:	1c4b      	adds	r3, r1, #1
 8006878:	e7e7      	b.n	800684a <_printf_float+0x172>
 800687a:	2900      	cmp	r1, #0
 800687c:	bfd4      	ite	le
 800687e:	f1c1 0202 	rsble	r2, r1, #2
 8006882:	2201      	movgt	r2, #1
 8006884:	4413      	add	r3, r2
 8006886:	e7e0      	b.n	800684a <_printf_float+0x172>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	055a      	lsls	r2, r3, #21
 800688c:	d407      	bmi.n	800689e <_printf_float+0x1c6>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	4642      	mov	r2, r8
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d12a      	bne.n	80068f2 <_printf_float+0x21a>
 800689c:	e76a      	b.n	8006774 <_printf_float+0x9c>
 800689e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068a2:	f240 80e2 	bls.w	8006a6a <_printf_float+0x392>
 80068a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80068aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	d133      	bne.n	800691c <_printf_float+0x244>
 80068b4:	4a38      	ldr	r2, [pc, #224]	; (8006998 <_printf_float+0x2c0>)
 80068b6:	2301      	movs	r3, #1
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af58 	beq.w	8006774 <_printf_float+0x9c>
 80068c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	db02      	blt.n	80068d2 <_printf_float+0x1fa>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	07d8      	lsls	r0, r3, #31
 80068d0:	d50f      	bpl.n	80068f2 <_printf_float+0x21a>
 80068d2:	4653      	mov	r3, sl
 80068d4:	465a      	mov	r2, fp
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f af49 	beq.w	8006774 <_printf_float+0x9c>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	f104 091a 	add.w	r9, r4, #26
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4543      	cmp	r3, r8
 80068f0:	dc09      	bgt.n	8006906 <_printf_float+0x22e>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	079b      	lsls	r3, r3, #30
 80068f6:	f100 8108 	bmi.w	8006b0a <_printf_float+0x432>
 80068fa:	68e0      	ldr	r0, [r4, #12]
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	4298      	cmp	r0, r3
 8006900:	bfb8      	it	lt
 8006902:	4618      	movlt	r0, r3
 8006904:	e738      	b.n	8006778 <_printf_float+0xa0>
 8006906:	2301      	movs	r3, #1
 8006908:	464a      	mov	r2, r9
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f af2f 	beq.w	8006774 <_printf_float+0x9c>
 8006916:	f108 0801 	add.w	r8, r8, #1
 800691a:	e7e6      	b.n	80068ea <_printf_float+0x212>
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dc3c      	bgt.n	800699c <_printf_float+0x2c4>
 8006922:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <_printf_float+0x2c0>)
 8006924:	2301      	movs	r3, #1
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f af21 	beq.w	8006774 <_printf_float+0x9c>
 8006932:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006936:	4313      	orrs	r3, r2
 8006938:	d102      	bne.n	8006940 <_printf_float+0x268>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d5d8      	bpl.n	80068f2 <_printf_float+0x21a>
 8006940:	4653      	mov	r3, sl
 8006942:	465a      	mov	r2, fp
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af12 	beq.w	8006774 <_printf_float+0x9c>
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	f104 0a1a 	add.w	sl, r4, #26
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	425b      	negs	r3, r3
 800695c:	454b      	cmp	r3, r9
 800695e:	dc01      	bgt.n	8006964 <_printf_float+0x28c>
 8006960:	9b08      	ldr	r3, [sp, #32]
 8006962:	e795      	b.n	8006890 <_printf_float+0x1b8>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af00 	beq.w	8006774 <_printf_float+0x9c>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	e7ee      	b.n	8006958 <_printf_float+0x280>
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w
 8006980:	ffffffff 	.word	0xffffffff
 8006984:	7fefffff 	.word	0x7fefffff
 8006988:	080093f4 	.word	0x080093f4
 800698c:	080093f8 	.word	0x080093f8
 8006990:	08009400 	.word	0x08009400
 8006994:	080093fc 	.word	0x080093fc
 8006998:	08009404 	.word	0x08009404
 800699c:	9a08      	ldr	r2, [sp, #32]
 800699e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a0:	429a      	cmp	r2, r3
 80069a2:	bfa8      	it	ge
 80069a4:	461a      	movge	r2, r3
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	4691      	mov	r9, r2
 80069aa:	dc38      	bgt.n	8006a1e <_printf_float+0x346>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069b4:	f104 021a 	add.w	r2, r4, #26
 80069b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ba:	9905      	ldr	r1, [sp, #20]
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	eba3 0309 	sub.w	r3, r3, r9
 80069c2:	428b      	cmp	r3, r1
 80069c4:	dc33      	bgt.n	8006a2e <_printf_float+0x356>
 80069c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	db3c      	blt.n	8006a48 <_printf_float+0x370>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	07da      	lsls	r2, r3, #31
 80069d2:	d439      	bmi.n	8006a48 <_printf_float+0x370>
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	9a04      	ldr	r2, [sp, #16]
 80069d8:	9907      	ldr	r1, [sp, #28]
 80069da:	1a9a      	subs	r2, r3, r2
 80069dc:	eba3 0901 	sub.w	r9, r3, r1
 80069e0:	4591      	cmp	r9, r2
 80069e2:	bfa8      	it	ge
 80069e4:	4691      	movge	r9, r2
 80069e6:	f1b9 0f00 	cmp.w	r9, #0
 80069ea:	dc35      	bgt.n	8006a58 <_printf_float+0x380>
 80069ec:	f04f 0800 	mov.w	r8, #0
 80069f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f4:	f104 0a1a 	add.w	sl, r4, #26
 80069f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	eba3 0309 	sub.w	r3, r3, r9
 8006a02:	4543      	cmp	r3, r8
 8006a04:	f77f af75 	ble.w	80068f2 <_printf_float+0x21a>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f aeae 	beq.w	8006774 <_printf_float+0x9c>
 8006a18:	f108 0801 	add.w	r8, r8, #1
 8006a1c:	e7ec      	b.n	80069f8 <_printf_float+0x320>
 8006a1e:	4613      	mov	r3, r2
 8006a20:	4631      	mov	r1, r6
 8006a22:	4642      	mov	r2, r8
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d1bf      	bne.n	80069ac <_printf_float+0x2d4>
 8006a2c:	e6a2      	b.n	8006774 <_printf_float+0x9c>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	9204      	str	r2, [sp, #16]
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae9b 	beq.w	8006774 <_printf_float+0x9c>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	9a04      	ldr	r2, [sp, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	9305      	str	r3, [sp, #20]
 8006a46:	e7b7      	b.n	80069b8 <_printf_float+0x2e0>
 8006a48:	4653      	mov	r3, sl
 8006a4a:	465a      	mov	r2, fp
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	d1be      	bne.n	80069d4 <_printf_float+0x2fc>
 8006a56:	e68d      	b.n	8006774 <_printf_float+0x9c>
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	4442      	add	r2, r8
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1c1      	bne.n	80069ec <_printf_float+0x314>
 8006a68:	e684      	b.n	8006774 <_printf_float+0x9c>
 8006a6a:	9a08      	ldr	r2, [sp, #32]
 8006a6c:	2a01      	cmp	r2, #1
 8006a6e:	dc01      	bgt.n	8006a74 <_printf_float+0x39c>
 8006a70:	07db      	lsls	r3, r3, #31
 8006a72:	d537      	bpl.n	8006ae4 <_printf_float+0x40c>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4642      	mov	r2, r8
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f ae78 	beq.w	8006774 <_printf_float+0x9c>
 8006a84:	4653      	mov	r3, sl
 8006a86:	465a      	mov	r2, fp
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	f43f ae70 	beq.w	8006774 <_printf_float+0x9c>
 8006a94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa0:	d01b      	beq.n	8006ada <_printf_float+0x402>
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	f108 0201 	add.w	r2, r8, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d10e      	bne.n	8006ad2 <_printf_float+0x3fa>
 8006ab4:	e65e      	b.n	8006774 <_printf_float+0x9c>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4631      	mov	r1, r6
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae57 	beq.w	8006774 <_printf_float+0x9c>
 8006ac6:	f108 0801 	add.w	r8, r8, #1
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4543      	cmp	r3, r8
 8006ad0:	dcf1      	bgt.n	8006ab6 <_printf_float+0x3de>
 8006ad2:	9b04      	ldr	r3, [sp, #16]
 8006ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ad8:	e6db      	b.n	8006892 <_printf_float+0x1ba>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	f104 091a 	add.w	r9, r4, #26
 8006ae2:	e7f2      	b.n	8006aca <_printf_float+0x3f2>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	e7df      	b.n	8006aaa <_printf_float+0x3d2>
 8006aea:	2301      	movs	r3, #1
 8006aec:	464a      	mov	r2, r9
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	f43f ae3d 	beq.w	8006774 <_printf_float+0x9c>
 8006afa:	f108 0801 	add.w	r8, r8, #1
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	4543      	cmp	r3, r8
 8006b06:	dcf0      	bgt.n	8006aea <_printf_float+0x412>
 8006b08:	e6f7      	b.n	80068fa <_printf_float+0x222>
 8006b0a:	f04f 0800 	mov.w	r8, #0
 8006b0e:	f104 0919 	add.w	r9, r4, #25
 8006b12:	e7f4      	b.n	8006afe <_printf_float+0x426>

08006b14 <_printf_common>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	4616      	mov	r6, r2
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	688a      	ldr	r2, [r1, #8]
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bfb8      	it	lt
 8006b28:	4613      	movlt	r3, r2
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b30:	4607      	mov	r7, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b10a      	cbz	r2, 8006b3a <_printf_common+0x26>
 8006b36:	3301      	adds	r3, #1
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	bf42      	ittt	mi
 8006b40:	6833      	ldrmi	r3, [r6, #0]
 8006b42:	3302      	addmi	r3, #2
 8006b44:	6033      	strmi	r3, [r6, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	f015 0506 	ands.w	r5, r5, #6
 8006b4c:	d106      	bne.n	8006b5c <_printf_common+0x48>
 8006b4e:	f104 0a19 	add.w	sl, r4, #25
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc26      	bgt.n	8006baa <_printf_common+0x96>
 8006b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b60:	1e13      	subs	r3, r2, #0
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	bf18      	it	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	0692      	lsls	r2, r2, #26
 8006b6a:	d42b      	bmi.n	8006bc4 <_printf_common+0xb0>
 8006b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b70:	4649      	mov	r1, r9
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	3001      	adds	r0, #1
 8006b78:	d01e      	beq.n	8006bb8 <_printf_common+0xa4>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	68e5      	ldr	r5, [r4, #12]
 8006b7e:	6832      	ldr	r2, [r6, #0]
 8006b80:	f003 0306 	and.w	r3, r3, #6
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	bf08      	it	eq
 8006b88:	1aad      	subeq	r5, r5, r2
 8006b8a:	68a3      	ldr	r3, [r4, #8]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	bf0c      	ite	eq
 8006b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b94:	2500      	movne	r5, #0
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bfc4      	itt	gt
 8006b9a:	1a9b      	subgt	r3, r3, r2
 8006b9c:	18ed      	addgt	r5, r5, r3
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	341a      	adds	r4, #26
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	d11a      	bne.n	8006bdc <_printf_common+0xc8>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e008      	b.n	8006bbc <_printf_common+0xa8>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4652      	mov	r2, sl
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	47c0      	blx	r8
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d103      	bne.n	8006bc0 <_printf_common+0xac>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7c6      	b.n	8006b52 <_printf_common+0x3e>
 8006bc4:	18e1      	adds	r1, r4, r3
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	2030      	movs	r0, #48	; 0x30
 8006bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bce:	4422      	add	r2, r4
 8006bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd8:	3302      	adds	r3, #2
 8006bda:	e7c7      	b.n	8006b6c <_printf_common+0x58>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4622      	mov	r2, r4
 8006be0:	4649      	mov	r1, r9
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0e6      	beq.n	8006bb8 <_printf_common+0xa4>
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7d9      	b.n	8006ba2 <_printf_common+0x8e>
	...

08006bf0 <_printf_i>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	7e0f      	ldrb	r7, [r1, #24]
 8006bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf8:	2f78      	cmp	r7, #120	; 0x78
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	469a      	mov	sl, r3
 8006c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c06:	d807      	bhi.n	8006c18 <_printf_i+0x28>
 8006c08:	2f62      	cmp	r7, #98	; 0x62
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x32>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f000 80d8 	beq.w	8006dc2 <_printf_i+0x1d2>
 8006c12:	2f58      	cmp	r7, #88	; 0x58
 8006c14:	f000 80a3 	beq.w	8006d5e <_printf_i+0x16e>
 8006c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c20:	e03a      	b.n	8006c98 <_printf_i+0xa8>
 8006c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c26:	2b15      	cmp	r3, #21
 8006c28:	d8f6      	bhi.n	8006c18 <_printf_i+0x28>
 8006c2a:	a101      	add	r1, pc, #4	; (adr r1, 8006c30 <_printf_i+0x40>)
 8006c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c19 	.word	0x08006c19
 8006c3c:	08006c19 	.word	0x08006c19
 8006c40:	08006c19 	.word	0x08006c19
 8006c44:	08006c19 	.word	0x08006c19
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c19 	.word	0x08006c19
 8006c50:	08006c19 	.word	0x08006c19
 8006c54:	08006c19 	.word	0x08006c19
 8006c58:	08006c19 	.word	0x08006c19
 8006c5c:	08006da9 	.word	0x08006da9
 8006c60:	08006ccd 	.word	0x08006ccd
 8006c64:	08006d8b 	.word	0x08006d8b
 8006c68:	08006c19 	.word	0x08006c19
 8006c6c:	08006c19 	.word	0x08006c19
 8006c70:	08006dcb 	.word	0x08006dcb
 8006c74:	08006c19 	.word	0x08006c19
 8006c78:	08006ccd 	.word	0x08006ccd
 8006c7c:	08006c19 	.word	0x08006c19
 8006c80:	08006c19 	.word	0x08006c19
 8006c84:	08006d93 	.word	0x08006d93
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0a3      	b.n	8006de4 <_printf_i+0x1f4>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	6829      	ldr	r1, [r5, #0]
 8006ca0:	0606      	lsls	r6, r0, #24
 8006ca2:	f101 0304 	add.w	r3, r1, #4
 8006ca6:	d50a      	bpl.n	8006cbe <_printf_i+0xce>
 8006ca8:	680e      	ldr	r6, [r1, #0]
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	da03      	bge.n	8006cb8 <_printf_i+0xc8>
 8006cb0:	232d      	movs	r3, #45	; 0x2d
 8006cb2:	4276      	negs	r6, r6
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb8:	485e      	ldr	r0, [pc, #376]	; (8006e34 <_printf_i+0x244>)
 8006cba:	230a      	movs	r3, #10
 8006cbc:	e019      	b.n	8006cf2 <_printf_i+0x102>
 8006cbe:	680e      	ldr	r6, [r1, #0]
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cc6:	bf18      	it	ne
 8006cc8:	b236      	sxthne	r6, r6
 8006cca:	e7ef      	b.n	8006cac <_printf_i+0xbc>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	1d19      	adds	r1, r3, #4
 8006cd2:	6029      	str	r1, [r5, #0]
 8006cd4:	0601      	lsls	r1, r0, #24
 8006cd6:	d501      	bpl.n	8006cdc <_printf_i+0xec>
 8006cd8:	681e      	ldr	r6, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <_printf_i+0xf2>
 8006cdc:	0646      	lsls	r6, r0, #25
 8006cde:	d5fb      	bpl.n	8006cd8 <_printf_i+0xe8>
 8006ce0:	881e      	ldrh	r6, [r3, #0]
 8006ce2:	4854      	ldr	r0, [pc, #336]	; (8006e34 <_printf_i+0x244>)
 8006ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ce6:	bf0c      	ite	eq
 8006ce8:	2308      	moveq	r3, #8
 8006cea:	230a      	movne	r3, #10
 8006cec:	2100      	movs	r1, #0
 8006cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cf2:	6865      	ldr	r5, [r4, #4]
 8006cf4:	60a5      	str	r5, [r4, #8]
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	bfa2      	ittt	ge
 8006cfa:	6821      	ldrge	r1, [r4, #0]
 8006cfc:	f021 0104 	bicge.w	r1, r1, #4
 8006d00:	6021      	strge	r1, [r4, #0]
 8006d02:	b90e      	cbnz	r6, 8006d08 <_printf_i+0x118>
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d04d      	beq.n	8006da4 <_printf_i+0x1b4>
 8006d08:	4615      	mov	r5, r2
 8006d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d12:	5dc7      	ldrb	r7, [r0, r7]
 8006d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d18:	4637      	mov	r7, r6
 8006d1a:	42bb      	cmp	r3, r7
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	d9f4      	bls.n	8006d0a <_printf_i+0x11a>
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d10b      	bne.n	8006d3c <_printf_i+0x14c>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07de      	lsls	r6, r3, #31
 8006d28:	d508      	bpl.n	8006d3c <_printf_i+0x14c>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	4299      	cmp	r1, r3
 8006d30:	bfde      	ittt	le
 8006d32:	2330      	movle	r3, #48	; 0x30
 8006d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d3c:	1b52      	subs	r2, r2, r5
 8006d3e:	6122      	str	r2, [r4, #16]
 8006d40:	f8cd a000 	str.w	sl, [sp]
 8006d44:	464b      	mov	r3, r9
 8006d46:	aa03      	add	r2, sp, #12
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7ff fee2 	bl	8006b14 <_printf_common>
 8006d50:	3001      	adds	r0, #1
 8006d52:	d14c      	bne.n	8006dee <_printf_i+0x1fe>
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d58:	b004      	add	sp, #16
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	4835      	ldr	r0, [pc, #212]	; (8006e34 <_printf_i+0x244>)
 8006d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d6c:	6029      	str	r1, [r5, #0]
 8006d6e:	061d      	lsls	r5, r3, #24
 8006d70:	d514      	bpl.n	8006d9c <_printf_i+0x1ac>
 8006d72:	07df      	lsls	r7, r3, #31
 8006d74:	bf44      	itt	mi
 8006d76:	f043 0320 	orrmi.w	r3, r3, #32
 8006d7a:	6023      	strmi	r3, [r4, #0]
 8006d7c:	b91e      	cbnz	r6, 8006d86 <_printf_i+0x196>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f023 0320 	bic.w	r3, r3, #32
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	2310      	movs	r3, #16
 8006d88:	e7b0      	b.n	8006cec <_printf_i+0xfc>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f043 0320 	orr.w	r3, r3, #32
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	2378      	movs	r3, #120	; 0x78
 8006d94:	4828      	ldr	r0, [pc, #160]	; (8006e38 <_printf_i+0x248>)
 8006d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d9a:	e7e3      	b.n	8006d64 <_printf_i+0x174>
 8006d9c:	0659      	lsls	r1, r3, #25
 8006d9e:	bf48      	it	mi
 8006da0:	b2b6      	uxthmi	r6, r6
 8006da2:	e7e6      	b.n	8006d72 <_printf_i+0x182>
 8006da4:	4615      	mov	r5, r2
 8006da6:	e7bb      	b.n	8006d20 <_printf_i+0x130>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	6826      	ldr	r6, [r4, #0]
 8006dac:	6961      	ldr	r1, [r4, #20]
 8006dae:	1d18      	adds	r0, r3, #4
 8006db0:	6028      	str	r0, [r5, #0]
 8006db2:	0635      	lsls	r5, r6, #24
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	d501      	bpl.n	8006dbc <_printf_i+0x1cc>
 8006db8:	6019      	str	r1, [r3, #0]
 8006dba:	e002      	b.n	8006dc2 <_printf_i+0x1d2>
 8006dbc:	0670      	lsls	r0, r6, #25
 8006dbe:	d5fb      	bpl.n	8006db8 <_printf_i+0x1c8>
 8006dc0:	8019      	strh	r1, [r3, #0]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	4615      	mov	r5, r2
 8006dc8:	e7ba      	b.n	8006d40 <_printf_i+0x150>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	602a      	str	r2, [r5, #0]
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7f9 fa3a 	bl	8000250 <memchr>
 8006ddc:	b108      	cbz	r0, 8006de2 <_printf_i+0x1f2>
 8006dde:	1b40      	subs	r0, r0, r5
 8006de0:	6060      	str	r0, [r4, #4]
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	2300      	movs	r3, #0
 8006de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dec:	e7a8      	b.n	8006d40 <_printf_i+0x150>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	462a      	mov	r2, r5
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0ab      	beq.n	8006d54 <_printf_i+0x164>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	079b      	lsls	r3, r3, #30
 8006e00:	d413      	bmi.n	8006e2a <_printf_i+0x23a>
 8006e02:	68e0      	ldr	r0, [r4, #12]
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	4298      	cmp	r0, r3
 8006e08:	bfb8      	it	lt
 8006e0a:	4618      	movlt	r0, r3
 8006e0c:	e7a4      	b.n	8006d58 <_printf_i+0x168>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4632      	mov	r2, r6
 8006e12:	4649      	mov	r1, r9
 8006e14:	4640      	mov	r0, r8
 8006e16:	47d0      	blx	sl
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d09b      	beq.n	8006d54 <_printf_i+0x164>
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	68e3      	ldr	r3, [r4, #12]
 8006e20:	9903      	ldr	r1, [sp, #12]
 8006e22:	1a5b      	subs	r3, r3, r1
 8006e24:	42ab      	cmp	r3, r5
 8006e26:	dcf2      	bgt.n	8006e0e <_printf_i+0x21e>
 8006e28:	e7eb      	b.n	8006e02 <_printf_i+0x212>
 8006e2a:	2500      	movs	r5, #0
 8006e2c:	f104 0619 	add.w	r6, r4, #25
 8006e30:	e7f5      	b.n	8006e1e <_printf_i+0x22e>
 8006e32:	bf00      	nop
 8006e34:	08009406 	.word	0x08009406
 8006e38:	08009417 	.word	0x08009417

08006e3c <setvbuf>:
 8006e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	461d      	mov	r5, r3
 8006e42:	4b5d      	ldr	r3, [pc, #372]	; (8006fb8 <setvbuf+0x17c>)
 8006e44:	681f      	ldr	r7, [r3, #0]
 8006e46:	4604      	mov	r4, r0
 8006e48:	460e      	mov	r6, r1
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	b127      	cbz	r7, 8006e58 <setvbuf+0x1c>
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	b913      	cbnz	r3, 8006e58 <setvbuf+0x1c>
 8006e52:	4638      	mov	r0, r7
 8006e54:	f000 ffcc 	bl	8007df0 <__sinit>
 8006e58:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <setvbuf+0x180>)
 8006e5a:	429c      	cmp	r4, r3
 8006e5c:	d167      	bne.n	8006f2e <setvbuf+0xf2>
 8006e5e:	687c      	ldr	r4, [r7, #4]
 8006e60:	f1b8 0f02 	cmp.w	r8, #2
 8006e64:	d006      	beq.n	8006e74 <setvbuf+0x38>
 8006e66:	f1b8 0f01 	cmp.w	r8, #1
 8006e6a:	f200 809f 	bhi.w	8006fac <setvbuf+0x170>
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	f2c0 809c 	blt.w	8006fac <setvbuf+0x170>
 8006e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e76:	07db      	lsls	r3, r3, #31
 8006e78:	d405      	bmi.n	8006e86 <setvbuf+0x4a>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	0598      	lsls	r0, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <setvbuf+0x4a>
 8006e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e82:	f001 f858 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f000 ff1d 	bl	8007cc8 <_fflush_r>
 8006e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e90:	b141      	cbz	r1, 8006ea4 <setvbuf+0x68>
 8006e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e96:	4299      	cmp	r1, r3
 8006e98:	d002      	beq.n	8006ea0 <setvbuf+0x64>
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f001 fc62 	bl	8008764 <_free_r>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61a3      	str	r3, [r4, #24]
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	0619      	lsls	r1, r3, #24
 8006eae:	d503      	bpl.n	8006eb8 <setvbuf+0x7c>
 8006eb0:	6921      	ldr	r1, [r4, #16]
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f001 fc56 	bl	8008764 <_free_r>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	f1b8 0f02 	cmp.w	r8, #2
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	d06c      	beq.n	8006fa4 <setvbuf+0x168>
 8006eca:	ab01      	add	r3, sp, #4
 8006ecc:	466a      	mov	r2, sp
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f001 f832 	bl	8007f3a <__swhatbuf_r>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	4318      	orrs	r0, r3
 8006eda:	81a0      	strh	r0, [r4, #12]
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	d130      	bne.n	8006f42 <setvbuf+0x106>
 8006ee0:	9d00      	ldr	r5, [sp, #0]
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f001 f88e 	bl	8008004 <malloc>
 8006ee8:	4606      	mov	r6, r0
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d155      	bne.n	8006f9a <setvbuf+0x15e>
 8006eee:	f8dd 9000 	ldr.w	r9, [sp]
 8006ef2:	45a9      	cmp	r9, r5
 8006ef4:	d14a      	bne.n	8006f8c <setvbuf+0x150>
 8006ef6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006efa:	2200      	movs	r2, #0
 8006efc:	60a2      	str	r2, [r4, #8]
 8006efe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	6122      	str	r2, [r4, #16]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0c:	6162      	str	r2, [r4, #20]
 8006f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f10:	f043 0302 	orr.w	r3, r3, #2
 8006f14:	07d2      	lsls	r2, r2, #31
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	d405      	bmi.n	8006f26 <setvbuf+0xea>
 8006f1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006f1e:	d102      	bne.n	8006f26 <setvbuf+0xea>
 8006f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f22:	f001 f809 	bl	8007f38 <__retarget_lock_release_recursive>
 8006f26:	4628      	mov	r0, r5
 8006f28:	b003      	add	sp, #12
 8006f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <setvbuf+0x184>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	d101      	bne.n	8006f38 <setvbuf+0xfc>
 8006f34:	68bc      	ldr	r4, [r7, #8]
 8006f36:	e793      	b.n	8006e60 <setvbuf+0x24>
 8006f38:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <setvbuf+0x188>)
 8006f3a:	429c      	cmp	r4, r3
 8006f3c:	bf08      	it	eq
 8006f3e:	68fc      	ldreq	r4, [r7, #12]
 8006f40:	e78e      	b.n	8006e60 <setvbuf+0x24>
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	d0cd      	beq.n	8006ee2 <setvbuf+0xa6>
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	b913      	cbnz	r3, 8006f50 <setvbuf+0x114>
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f000 ff50 	bl	8007df0 <__sinit>
 8006f50:	f1b8 0f01 	cmp.w	r8, #1
 8006f54:	bf08      	it	eq
 8006f56:	89a3      	ldrheq	r3, [r4, #12]
 8006f58:	6026      	str	r6, [r4, #0]
 8006f5a:	bf04      	itt	eq
 8006f5c:	f043 0301 	orreq.w	r3, r3, #1
 8006f60:	81a3      	strheq	r3, [r4, #12]
 8006f62:	89a2      	ldrh	r2, [r4, #12]
 8006f64:	f012 0308 	ands.w	r3, r2, #8
 8006f68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006f6c:	d01c      	beq.n	8006fa8 <setvbuf+0x16c>
 8006f6e:	07d3      	lsls	r3, r2, #31
 8006f70:	bf41      	itttt	mi
 8006f72:	2300      	movmi	r3, #0
 8006f74:	426d      	negmi	r5, r5
 8006f76:	60a3      	strmi	r3, [r4, #8]
 8006f78:	61a5      	strmi	r5, [r4, #24]
 8006f7a:	bf58      	it	pl
 8006f7c:	60a5      	strpl	r5, [r4, #8]
 8006f7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006f80:	f015 0501 	ands.w	r5, r5, #1
 8006f84:	d115      	bne.n	8006fb2 <setvbuf+0x176>
 8006f86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006f8a:	e7c8      	b.n	8006f1e <setvbuf+0xe2>
 8006f8c:	4648      	mov	r0, r9
 8006f8e:	f001 f839 	bl	8008004 <malloc>
 8006f92:	4606      	mov	r6, r0
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d0ae      	beq.n	8006ef6 <setvbuf+0xba>
 8006f98:	464d      	mov	r5, r9
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	e7d0      	b.n	8006f46 <setvbuf+0x10a>
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	e7a8      	b.n	8006efa <setvbuf+0xbe>
 8006fa8:	60a3      	str	r3, [r4, #8]
 8006faa:	e7e8      	b.n	8006f7e <setvbuf+0x142>
 8006fac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006fb0:	e7b9      	b.n	8006f26 <setvbuf+0xea>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	e7b7      	b.n	8006f26 <setvbuf+0xea>
 8006fb6:	bf00      	nop
 8006fb8:	2000000c 	.word	0x2000000c
 8006fbc:	080094d8 	.word	0x080094d8
 8006fc0:	080094f8 	.word	0x080094f8
 8006fc4:	080094b8 	.word	0x080094b8

08006fc8 <quorem>:
 8006fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	6903      	ldr	r3, [r0, #16]
 8006fce:	690c      	ldr	r4, [r1, #16]
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	f2c0 8081 	blt.w	80070da <quorem+0x112>
 8006fd8:	3c01      	subs	r4, #1
 8006fda:	f101 0814 	add.w	r8, r1, #20
 8006fde:	f100 0514 	add.w	r5, r0, #20
 8006fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ffc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007000:	d331      	bcc.n	8007066 <quorem+0x9e>
 8007002:	f04f 0e00 	mov.w	lr, #0
 8007006:	4640      	mov	r0, r8
 8007008:	46ac      	mov	ip, r5
 800700a:	46f2      	mov	sl, lr
 800700c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007010:	b293      	uxth	r3, r2
 8007012:	fb06 e303 	mla	r3, r6, r3, lr
 8007016:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800701a:	b29b      	uxth	r3, r3
 800701c:	ebaa 0303 	sub.w	r3, sl, r3
 8007020:	f8dc a000 	ldr.w	sl, [ip]
 8007024:	0c12      	lsrs	r2, r2, #16
 8007026:	fa13 f38a 	uxtah	r3, r3, sl
 800702a:	fb06 e202 	mla	r2, r6, r2, lr
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007036:	b292      	uxth	r2, r2
 8007038:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800703c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007040:	f8bd 3000 	ldrh.w	r3, [sp]
 8007044:	4581      	cmp	r9, r0
 8007046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800704a:	f84c 3b04 	str.w	r3, [ip], #4
 800704e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007052:	d2db      	bcs.n	800700c <quorem+0x44>
 8007054:	f855 300b 	ldr.w	r3, [r5, fp]
 8007058:	b92b      	cbnz	r3, 8007066 <quorem+0x9e>
 800705a:	9b01      	ldr	r3, [sp, #4]
 800705c:	3b04      	subs	r3, #4
 800705e:	429d      	cmp	r5, r3
 8007060:	461a      	mov	r2, r3
 8007062:	d32e      	bcc.n	80070c2 <quorem+0xfa>
 8007064:	613c      	str	r4, [r7, #16]
 8007066:	4638      	mov	r0, r7
 8007068:	f001 fa64 	bl	8008534 <__mcmp>
 800706c:	2800      	cmp	r0, #0
 800706e:	db24      	blt.n	80070ba <quorem+0xf2>
 8007070:	3601      	adds	r6, #1
 8007072:	4628      	mov	r0, r5
 8007074:	f04f 0c00 	mov.w	ip, #0
 8007078:	f858 2b04 	ldr.w	r2, [r8], #4
 800707c:	f8d0 e000 	ldr.w	lr, [r0]
 8007080:	b293      	uxth	r3, r2
 8007082:	ebac 0303 	sub.w	r3, ip, r3
 8007086:	0c12      	lsrs	r2, r2, #16
 8007088:	fa13 f38e 	uxtah	r3, r3, lr
 800708c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007094:	b29b      	uxth	r3, r3
 8007096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800709a:	45c1      	cmp	r9, r8
 800709c:	f840 3b04 	str.w	r3, [r0], #4
 80070a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070a4:	d2e8      	bcs.n	8007078 <quorem+0xb0>
 80070a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ae:	b922      	cbnz	r2, 80070ba <quorem+0xf2>
 80070b0:	3b04      	subs	r3, #4
 80070b2:	429d      	cmp	r5, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	d30a      	bcc.n	80070ce <quorem+0x106>
 80070b8:	613c      	str	r4, [r7, #16]
 80070ba:	4630      	mov	r0, r6
 80070bc:	b003      	add	sp, #12
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	6812      	ldr	r2, [r2, #0]
 80070c4:	3b04      	subs	r3, #4
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	d1cc      	bne.n	8007064 <quorem+0x9c>
 80070ca:	3c01      	subs	r4, #1
 80070cc:	e7c7      	b.n	800705e <quorem+0x96>
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1f0      	bne.n	80070b8 <quorem+0xf0>
 80070d6:	3c01      	subs	r4, #1
 80070d8:	e7eb      	b.n	80070b2 <quorem+0xea>
 80070da:	2000      	movs	r0, #0
 80070dc:	e7ee      	b.n	80070bc <quorem+0xf4>
	...

080070e0 <_dtoa_r>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070ea:	b091      	sub	sp, #68	; 0x44
 80070ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070f0:	ec59 8b10 	vmov	r8, r9, d0
 80070f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80070f6:	9106      	str	r1, [sp, #24]
 80070f8:	4606      	mov	r6, r0
 80070fa:	9208      	str	r2, [sp, #32]
 80070fc:	930c      	str	r3, [sp, #48]	; 0x30
 80070fe:	b975      	cbnz	r5, 800711e <_dtoa_r+0x3e>
 8007100:	2010      	movs	r0, #16
 8007102:	f000 ff7f 	bl	8008004 <malloc>
 8007106:	4602      	mov	r2, r0
 8007108:	6270      	str	r0, [r6, #36]	; 0x24
 800710a:	b920      	cbnz	r0, 8007116 <_dtoa_r+0x36>
 800710c:	4baa      	ldr	r3, [pc, #680]	; (80073b8 <_dtoa_r+0x2d8>)
 800710e:	21ea      	movs	r1, #234	; 0xea
 8007110:	48aa      	ldr	r0, [pc, #680]	; (80073bc <_dtoa_r+0x2dc>)
 8007112:	f001 fc6d 	bl	80089f0 <__assert_func>
 8007116:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800711a:	6005      	str	r5, [r0, #0]
 800711c:	60c5      	str	r5, [r0, #12]
 800711e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	b151      	cbz	r1, 800713a <_dtoa_r+0x5a>
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	604a      	str	r2, [r1, #4]
 8007128:	2301      	movs	r3, #1
 800712a:	4093      	lsls	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	4630      	mov	r0, r6
 8007130:	f000 ffbe 	bl	80080b0 <_Bfree>
 8007134:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	f1b9 0300 	subs.w	r3, r9, #0
 800713e:	bfbb      	ittet	lt
 8007140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007144:	9303      	strlt	r3, [sp, #12]
 8007146:	2300      	movge	r3, #0
 8007148:	2201      	movlt	r2, #1
 800714a:	bfac      	ite	ge
 800714c:	6023      	strge	r3, [r4, #0]
 800714e:	6022      	strlt	r2, [r4, #0]
 8007150:	4b9b      	ldr	r3, [pc, #620]	; (80073c0 <_dtoa_r+0x2e0>)
 8007152:	9c03      	ldr	r4, [sp, #12]
 8007154:	43a3      	bics	r3, r4
 8007156:	d11c      	bne.n	8007192 <_dtoa_r+0xb2>
 8007158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800715a:	f242 730f 	movw	r3, #9999	; 0x270f
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007164:	ea53 0308 	orrs.w	r3, r3, r8
 8007168:	f000 84fd 	beq.w	8007b66 <_dtoa_r+0xa86>
 800716c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800716e:	b963      	cbnz	r3, 800718a <_dtoa_r+0xaa>
 8007170:	4b94      	ldr	r3, [pc, #592]	; (80073c4 <_dtoa_r+0x2e4>)
 8007172:	e01f      	b.n	80071b4 <_dtoa_r+0xd4>
 8007174:	4b94      	ldr	r3, [pc, #592]	; (80073c8 <_dtoa_r+0x2e8>)
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	3308      	adds	r3, #8
 800717a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	9801      	ldr	r0, [sp, #4]
 8007180:	b011      	add	sp, #68	; 0x44
 8007182:	ecbd 8b02 	vpop	{d8}
 8007186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	4b8e      	ldr	r3, [pc, #568]	; (80073c4 <_dtoa_r+0x2e4>)
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	3303      	adds	r3, #3
 8007190:	e7f3      	b.n	800717a <_dtoa_r+0x9a>
 8007192:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007196:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	d10b      	bne.n	80071b8 <_dtoa_r+0xd8>
 80071a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a2:	2301      	movs	r3, #1
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 84d9 	beq.w	8007b60 <_dtoa_r+0xa80>
 80071ae:	4887      	ldr	r0, [pc, #540]	; (80073cc <_dtoa_r+0x2ec>)
 80071b0:	6018      	str	r0, [r3, #0]
 80071b2:	1e43      	subs	r3, r0, #1
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	e7e2      	b.n	800717e <_dtoa_r+0x9e>
 80071b8:	a90f      	add	r1, sp, #60	; 0x3c
 80071ba:	aa0e      	add	r2, sp, #56	; 0x38
 80071bc:	4630      	mov	r0, r6
 80071be:	eeb0 0b48 	vmov.f64	d0, d8
 80071c2:	f001 fa5d 	bl	8008680 <__d2b>
 80071c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80071ca:	4605      	mov	r5, r0
 80071cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071ce:	2900      	cmp	r1, #0
 80071d0:	d046      	beq.n	8007260 <_dtoa_r+0x180>
 80071d2:	ee18 4a90 	vmov	r4, s17
 80071d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80071da:	ec53 2b18 	vmov	r2, r3, d8
 80071de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80071e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80071ea:	2400      	movs	r4, #0
 80071ec:	ec43 2b16 	vmov	d6, r2, r3
 80071f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80071f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80073a0 <_dtoa_r+0x2c0>
 80071f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80071fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80073a8 <_dtoa_r+0x2c8>
 8007200:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007204:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80073b0 <_dtoa_r+0x2d0>
 8007208:	ee07 1a90 	vmov	s15, r1
 800720c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007210:	eeb0 7b46 	vmov.f64	d7, d6
 8007214:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007218:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800721c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007224:	ee16 ba90 	vmov	fp, s13
 8007228:	940a      	str	r4, [sp, #40]	; 0x28
 800722a:	d508      	bpl.n	800723e <_dtoa_r+0x15e>
 800722c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007230:	eeb4 6b47 	vcmp.f64	d6, d7
 8007234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007238:	bf18      	it	ne
 800723a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800723e:	f1bb 0f16 	cmp.w	fp, #22
 8007242:	d82f      	bhi.n	80072a4 <_dtoa_r+0x1c4>
 8007244:	4b62      	ldr	r3, [pc, #392]	; (80073d0 <_dtoa_r+0x2f0>)
 8007246:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800724a:	ed93 7b00 	vldr	d7, [r3]
 800724e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007256:	d501      	bpl.n	800725c <_dtoa_r+0x17c>
 8007258:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800725c:	2300      	movs	r3, #0
 800725e:	e022      	b.n	80072a6 <_dtoa_r+0x1c6>
 8007260:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007262:	4401      	add	r1, r0
 8007264:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007268:	2b20      	cmp	r3, #32
 800726a:	bfc1      	itttt	gt
 800726c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007270:	fa04 f303 	lslgt.w	r3, r4, r3
 8007274:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007278:	fa28 f804 	lsrgt.w	r8, r8, r4
 800727c:	bfd6      	itet	le
 800727e:	f1c3 0320 	rsble	r3, r3, #32
 8007282:	ea43 0808 	orrgt.w	r8, r3, r8
 8007286:	fa08 f803 	lslle.w	r8, r8, r3
 800728a:	ee07 8a90 	vmov	s15, r8
 800728e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007292:	3901      	subs	r1, #1
 8007294:	ee17 4a90 	vmov	r4, s15
 8007298:	ec53 2b17 	vmov	r2, r3, d7
 800729c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80072a0:	2401      	movs	r4, #1
 80072a2:	e7a3      	b.n	80071ec <_dtoa_r+0x10c>
 80072a4:	2301      	movs	r3, #1
 80072a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072a8:	1a43      	subs	r3, r0, r1
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	bf45      	ittet	mi
 80072ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80072b2:	9304      	strmi	r3, [sp, #16]
 80072b4:	2300      	movpl	r3, #0
 80072b6:	2300      	movmi	r3, #0
 80072b8:	9205      	str	r2, [sp, #20]
 80072ba:	bf54      	ite	pl
 80072bc:	9304      	strpl	r3, [sp, #16]
 80072be:	9305      	strmi	r3, [sp, #20]
 80072c0:	f1bb 0f00 	cmp.w	fp, #0
 80072c4:	db18      	blt.n	80072f8 <_dtoa_r+0x218>
 80072c6:	9b05      	ldr	r3, [sp, #20]
 80072c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80072cc:	445b      	add	r3, fp
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	2300      	movs	r3, #0
 80072d2:	9a06      	ldr	r2, [sp, #24]
 80072d4:	2a09      	cmp	r2, #9
 80072d6:	d849      	bhi.n	800736c <_dtoa_r+0x28c>
 80072d8:	2a05      	cmp	r2, #5
 80072da:	bfc4      	itt	gt
 80072dc:	3a04      	subgt	r2, #4
 80072de:	9206      	strgt	r2, [sp, #24]
 80072e0:	9a06      	ldr	r2, [sp, #24]
 80072e2:	f1a2 0202 	sub.w	r2, r2, #2
 80072e6:	bfcc      	ite	gt
 80072e8:	2400      	movgt	r4, #0
 80072ea:	2401      	movle	r4, #1
 80072ec:	2a03      	cmp	r2, #3
 80072ee:	d848      	bhi.n	8007382 <_dtoa_r+0x2a2>
 80072f0:	e8df f002 	tbb	[pc, r2]
 80072f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80072f8:	9b04      	ldr	r3, [sp, #16]
 80072fa:	2200      	movs	r2, #0
 80072fc:	eba3 030b 	sub.w	r3, r3, fp
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	9209      	str	r2, [sp, #36]	; 0x24
 8007304:	f1cb 0300 	rsb	r3, fp, #0
 8007308:	e7e3      	b.n	80072d2 <_dtoa_r+0x1f2>
 800730a:	2200      	movs	r2, #0
 800730c:	9207      	str	r2, [sp, #28]
 800730e:	9a08      	ldr	r2, [sp, #32]
 8007310:	2a00      	cmp	r2, #0
 8007312:	dc39      	bgt.n	8007388 <_dtoa_r+0x2a8>
 8007314:	f04f 0a01 	mov.w	sl, #1
 8007318:	46d1      	mov	r9, sl
 800731a:	4652      	mov	r2, sl
 800731c:	f8cd a020 	str.w	sl, [sp, #32]
 8007320:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007322:	2100      	movs	r1, #0
 8007324:	6079      	str	r1, [r7, #4]
 8007326:	2004      	movs	r0, #4
 8007328:	f100 0c14 	add.w	ip, r0, #20
 800732c:	4594      	cmp	ip, r2
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	d92f      	bls.n	8007392 <_dtoa_r+0x2b2>
 8007332:	4630      	mov	r0, r6
 8007334:	930d      	str	r3, [sp, #52]	; 0x34
 8007336:	f000 fe7b 	bl	8008030 <_Balloc>
 800733a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800733c:	9001      	str	r0, [sp, #4]
 800733e:	4602      	mov	r2, r0
 8007340:	2800      	cmp	r0, #0
 8007342:	d149      	bne.n	80073d8 <_dtoa_r+0x2f8>
 8007344:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <_dtoa_r+0x2f4>)
 8007346:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800734a:	e6e1      	b.n	8007110 <_dtoa_r+0x30>
 800734c:	2201      	movs	r2, #1
 800734e:	e7dd      	b.n	800730c <_dtoa_r+0x22c>
 8007350:	2200      	movs	r2, #0
 8007352:	9207      	str	r2, [sp, #28]
 8007354:	9a08      	ldr	r2, [sp, #32]
 8007356:	eb0b 0a02 	add.w	sl, fp, r2
 800735a:	f10a 0901 	add.w	r9, sl, #1
 800735e:	464a      	mov	r2, r9
 8007360:	2a01      	cmp	r2, #1
 8007362:	bfb8      	it	lt
 8007364:	2201      	movlt	r2, #1
 8007366:	e7db      	b.n	8007320 <_dtoa_r+0x240>
 8007368:	2201      	movs	r2, #1
 800736a:	e7f2      	b.n	8007352 <_dtoa_r+0x272>
 800736c:	2401      	movs	r4, #1
 800736e:	2200      	movs	r2, #0
 8007370:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007374:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007378:	2100      	movs	r1, #0
 800737a:	46d1      	mov	r9, sl
 800737c:	2212      	movs	r2, #18
 800737e:	9108      	str	r1, [sp, #32]
 8007380:	e7ce      	b.n	8007320 <_dtoa_r+0x240>
 8007382:	2201      	movs	r2, #1
 8007384:	9207      	str	r2, [sp, #28]
 8007386:	e7f5      	b.n	8007374 <_dtoa_r+0x294>
 8007388:	f8dd a020 	ldr.w	sl, [sp, #32]
 800738c:	46d1      	mov	r9, sl
 800738e:	4652      	mov	r2, sl
 8007390:	e7c6      	b.n	8007320 <_dtoa_r+0x240>
 8007392:	3101      	adds	r1, #1
 8007394:	6079      	str	r1, [r7, #4]
 8007396:	0040      	lsls	r0, r0, #1
 8007398:	e7c6      	b.n	8007328 <_dtoa_r+0x248>
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w
 80073a0:	636f4361 	.word	0x636f4361
 80073a4:	3fd287a7 	.word	0x3fd287a7
 80073a8:	8b60c8b3 	.word	0x8b60c8b3
 80073ac:	3fc68a28 	.word	0x3fc68a28
 80073b0:	509f79fb 	.word	0x509f79fb
 80073b4:	3fd34413 	.word	0x3fd34413
 80073b8:	08009435 	.word	0x08009435
 80073bc:	0800944c 	.word	0x0800944c
 80073c0:	7ff00000 	.word	0x7ff00000
 80073c4:	08009431 	.word	0x08009431
 80073c8:	08009428 	.word	0x08009428
 80073cc:	08009405 	.word	0x08009405
 80073d0:	080095a0 	.word	0x080095a0
 80073d4:	080094a7 	.word	0x080094a7
 80073d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80073da:	9901      	ldr	r1, [sp, #4]
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	f1b9 0f0e 	cmp.w	r9, #14
 80073e2:	d86c      	bhi.n	80074be <_dtoa_r+0x3de>
 80073e4:	2c00      	cmp	r4, #0
 80073e6:	d06a      	beq.n	80074be <_dtoa_r+0x3de>
 80073e8:	f1bb 0f00 	cmp.w	fp, #0
 80073ec:	f340 80a0 	ble.w	8007530 <_dtoa_r+0x450>
 80073f0:	49c1      	ldr	r1, [pc, #772]	; (80076f8 <_dtoa_r+0x618>)
 80073f2:	f00b 020f 	and.w	r2, fp, #15
 80073f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80073fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073fe:	ed92 7b00 	vldr	d7, [r2]
 8007402:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007406:	f000 8087 	beq.w	8007518 <_dtoa_r+0x438>
 800740a:	4abc      	ldr	r2, [pc, #752]	; (80076fc <_dtoa_r+0x61c>)
 800740c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007410:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007414:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007418:	f001 010f 	and.w	r1, r1, #15
 800741c:	2203      	movs	r2, #3
 800741e:	48b7      	ldr	r0, [pc, #732]	; (80076fc <_dtoa_r+0x61c>)
 8007420:	2900      	cmp	r1, #0
 8007422:	d17b      	bne.n	800751c <_dtoa_r+0x43c>
 8007424:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007428:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800742c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007432:	2900      	cmp	r1, #0
 8007434:	f000 80a2 	beq.w	800757c <_dtoa_r+0x49c>
 8007438:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800743c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007440:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	f140 8098 	bpl.w	800757c <_dtoa_r+0x49c>
 800744c:	f1b9 0f00 	cmp.w	r9, #0
 8007450:	f000 8094 	beq.w	800757c <_dtoa_r+0x49c>
 8007454:	f1ba 0f00 	cmp.w	sl, #0
 8007458:	dd2f      	ble.n	80074ba <_dtoa_r+0x3da>
 800745a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800745e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007462:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007466:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800746a:	3201      	adds	r2, #1
 800746c:	4650      	mov	r0, sl
 800746e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007472:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007476:	ee07 2a90 	vmov	s15, r2
 800747a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800747e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007482:	ee15 4a90 	vmov	r4, s11
 8007486:	ec52 1b15 	vmov	r1, r2, d5
 800748a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800748e:	2800      	cmp	r0, #0
 8007490:	d177      	bne.n	8007582 <_dtoa_r+0x4a2>
 8007492:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007496:	ee36 6b47 	vsub.f64	d6, d6, d7
 800749a:	ec42 1b17 	vmov	d7, r1, r2
 800749e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a6:	f300 8263 	bgt.w	8007970 <_dtoa_r+0x890>
 80074aa:	eeb1 7b47 	vneg.f64	d7, d7
 80074ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	f100 8258 	bmi.w	800796a <_dtoa_r+0x88a>
 80074ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80074be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074c0:	2a00      	cmp	r2, #0
 80074c2:	f2c0 811d 	blt.w	8007700 <_dtoa_r+0x620>
 80074c6:	f1bb 0f0e 	cmp.w	fp, #14
 80074ca:	f300 8119 	bgt.w	8007700 <_dtoa_r+0x620>
 80074ce:	4b8a      	ldr	r3, [pc, #552]	; (80076f8 <_dtoa_r+0x618>)
 80074d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074d4:	ed93 6b00 	vldr	d6, [r3]
 80074d8:	9b08      	ldr	r3, [sp, #32]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f280 80b7 	bge.w	800764e <_dtoa_r+0x56e>
 80074e0:	f1b9 0f00 	cmp.w	r9, #0
 80074e4:	f300 80b3 	bgt.w	800764e <_dtoa_r+0x56e>
 80074e8:	f040 823f 	bne.w	800796a <_dtoa_r+0x88a>
 80074ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80074f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80074f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	464c      	mov	r4, r9
 8007502:	464f      	mov	r7, r9
 8007504:	f280 8215 	bge.w	8007932 <_dtoa_r+0x852>
 8007508:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800750c:	2331      	movs	r3, #49	; 0x31
 800750e:	f808 3b01 	strb.w	r3, [r8], #1
 8007512:	f10b 0b01 	add.w	fp, fp, #1
 8007516:	e211      	b.n	800793c <_dtoa_r+0x85c>
 8007518:	2202      	movs	r2, #2
 800751a:	e780      	b.n	800741e <_dtoa_r+0x33e>
 800751c:	07cc      	lsls	r4, r1, #31
 800751e:	d504      	bpl.n	800752a <_dtoa_r+0x44a>
 8007520:	ed90 6b00 	vldr	d6, [r0]
 8007524:	3201      	adds	r2, #1
 8007526:	ee27 7b06 	vmul.f64	d7, d7, d6
 800752a:	1049      	asrs	r1, r1, #1
 800752c:	3008      	adds	r0, #8
 800752e:	e777      	b.n	8007420 <_dtoa_r+0x340>
 8007530:	d022      	beq.n	8007578 <_dtoa_r+0x498>
 8007532:	f1cb 0100 	rsb	r1, fp, #0
 8007536:	4a70      	ldr	r2, [pc, #448]	; (80076f8 <_dtoa_r+0x618>)
 8007538:	f001 000f 	and.w	r0, r1, #15
 800753c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007540:	ed92 7b00 	vldr	d7, [r2]
 8007544:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007548:	ed8d 7b02 	vstr	d7, [sp, #8]
 800754c:	486b      	ldr	r0, [pc, #428]	; (80076fc <_dtoa_r+0x61c>)
 800754e:	1109      	asrs	r1, r1, #4
 8007550:	2400      	movs	r4, #0
 8007552:	2202      	movs	r2, #2
 8007554:	b929      	cbnz	r1, 8007562 <_dtoa_r+0x482>
 8007556:	2c00      	cmp	r4, #0
 8007558:	f43f af6a 	beq.w	8007430 <_dtoa_r+0x350>
 800755c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007560:	e766      	b.n	8007430 <_dtoa_r+0x350>
 8007562:	07cf      	lsls	r7, r1, #31
 8007564:	d505      	bpl.n	8007572 <_dtoa_r+0x492>
 8007566:	ed90 6b00 	vldr	d6, [r0]
 800756a:	3201      	adds	r2, #1
 800756c:	2401      	movs	r4, #1
 800756e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007572:	1049      	asrs	r1, r1, #1
 8007574:	3008      	adds	r0, #8
 8007576:	e7ed      	b.n	8007554 <_dtoa_r+0x474>
 8007578:	2202      	movs	r2, #2
 800757a:	e759      	b.n	8007430 <_dtoa_r+0x350>
 800757c:	465f      	mov	r7, fp
 800757e:	4648      	mov	r0, r9
 8007580:	e775      	b.n	800746e <_dtoa_r+0x38e>
 8007582:	ec42 1b17 	vmov	d7, r1, r2
 8007586:	4a5c      	ldr	r2, [pc, #368]	; (80076f8 <_dtoa_r+0x618>)
 8007588:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800758c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007590:	9a01      	ldr	r2, [sp, #4]
 8007592:	1814      	adds	r4, r2, r0
 8007594:	9a07      	ldr	r2, [sp, #28]
 8007596:	b352      	cbz	r2, 80075ee <_dtoa_r+0x50e>
 8007598:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800759c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80075a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80075a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80075ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80075b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80075b4:	ee14 2a90 	vmov	r2, s9
 80075b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80075bc:	3230      	adds	r2, #48	; 0x30
 80075be:	ee36 6b45 	vsub.f64	d6, d6, d5
 80075c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ca:	f808 2b01 	strb.w	r2, [r8], #1
 80075ce:	d439      	bmi.n	8007644 <_dtoa_r+0x564>
 80075d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80075d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80075d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075dc:	d472      	bmi.n	80076c4 <_dtoa_r+0x5e4>
 80075de:	45a0      	cmp	r8, r4
 80075e0:	f43f af6b 	beq.w	80074ba <_dtoa_r+0x3da>
 80075e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80075e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80075ec:	e7e0      	b.n	80075b0 <_dtoa_r+0x4d0>
 80075ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075f6:	4621      	mov	r1, r4
 80075f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80075fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007600:	ee14 2a90 	vmov	r2, s9
 8007604:	3230      	adds	r2, #48	; 0x30
 8007606:	f808 2b01 	strb.w	r2, [r8], #1
 800760a:	45a0      	cmp	r8, r4
 800760c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007610:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007614:	d118      	bne.n	8007648 <_dtoa_r+0x568>
 8007616:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800761a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800761e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007626:	dc4d      	bgt.n	80076c4 <_dtoa_r+0x5e4>
 8007628:	ee35 7b47 	vsub.f64	d7, d5, d7
 800762c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007634:	f57f af41 	bpl.w	80074ba <_dtoa_r+0x3da>
 8007638:	4688      	mov	r8, r1
 800763a:	3901      	subs	r1, #1
 800763c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007640:	2b30      	cmp	r3, #48	; 0x30
 8007642:	d0f9      	beq.n	8007638 <_dtoa_r+0x558>
 8007644:	46bb      	mov	fp, r7
 8007646:	e02a      	b.n	800769e <_dtoa_r+0x5be>
 8007648:	ee26 6b03 	vmul.f64	d6, d6, d3
 800764c:	e7d6      	b.n	80075fc <_dtoa_r+0x51c>
 800764e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007652:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007656:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800765a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800765e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007662:	ee15 3a10 	vmov	r3, s10
 8007666:	3330      	adds	r3, #48	; 0x30
 8007668:	f808 3b01 	strb.w	r3, [r8], #1
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	eba8 0303 	sub.w	r3, r8, r3
 8007672:	4599      	cmp	r9, r3
 8007674:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007678:	eea3 7b46 	vfms.f64	d7, d3, d6
 800767c:	d133      	bne.n	80076e6 <_dtoa_r+0x606>
 800767e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768a:	dc1a      	bgt.n	80076c2 <_dtoa_r+0x5e2>
 800768c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007694:	d103      	bne.n	800769e <_dtoa_r+0x5be>
 8007696:	ee15 3a10 	vmov	r3, s10
 800769a:	07d9      	lsls	r1, r3, #31
 800769c:	d411      	bmi.n	80076c2 <_dtoa_r+0x5e2>
 800769e:	4629      	mov	r1, r5
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 fd05 	bl	80080b0 <_Bfree>
 80076a6:	2300      	movs	r3, #0
 80076a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076aa:	f888 3000 	strb.w	r3, [r8]
 80076ae:	f10b 0301 	add.w	r3, fp, #1
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f43f ad61 	beq.w	800717e <_dtoa_r+0x9e>
 80076bc:	f8c3 8000 	str.w	r8, [r3]
 80076c0:	e55d      	b.n	800717e <_dtoa_r+0x9e>
 80076c2:	465f      	mov	r7, fp
 80076c4:	4643      	mov	r3, r8
 80076c6:	4698      	mov	r8, r3
 80076c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076cc:	2a39      	cmp	r2, #57	; 0x39
 80076ce:	d106      	bne.n	80076de <_dtoa_r+0x5fe>
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d1f7      	bne.n	80076c6 <_dtoa_r+0x5e6>
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	2230      	movs	r2, #48	; 0x30
 80076da:	3701      	adds	r7, #1
 80076dc:	700a      	strb	r2, [r1, #0]
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	3201      	adds	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e7ae      	b.n	8007644 <_dtoa_r+0x564>
 80076e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	d1b2      	bne.n	800765a <_dtoa_r+0x57a>
 80076f4:	e7d3      	b.n	800769e <_dtoa_r+0x5be>
 80076f6:	bf00      	nop
 80076f8:	080095a0 	.word	0x080095a0
 80076fc:	08009578 	.word	0x08009578
 8007700:	9907      	ldr	r1, [sp, #28]
 8007702:	2900      	cmp	r1, #0
 8007704:	f000 80d0 	beq.w	80078a8 <_dtoa_r+0x7c8>
 8007708:	9906      	ldr	r1, [sp, #24]
 800770a:	2901      	cmp	r1, #1
 800770c:	f300 80b4 	bgt.w	8007878 <_dtoa_r+0x798>
 8007710:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007712:	2900      	cmp	r1, #0
 8007714:	f000 80ac 	beq.w	8007870 <_dtoa_r+0x790>
 8007718:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800771c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007720:	461c      	mov	r4, r3
 8007722:	930a      	str	r3, [sp, #40]	; 0x28
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	4413      	add	r3, r2
 8007728:	9304      	str	r3, [sp, #16]
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	2101      	movs	r1, #1
 800772e:	4413      	add	r3, r2
 8007730:	4630      	mov	r0, r6
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	f000 fd74 	bl	8008220 <__i2b>
 8007738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773a:	4607      	mov	r7, r0
 800773c:	f1b8 0f00 	cmp.w	r8, #0
 8007740:	dd0d      	ble.n	800775e <_dtoa_r+0x67e>
 8007742:	9a05      	ldr	r2, [sp, #20]
 8007744:	2a00      	cmp	r2, #0
 8007746:	dd0a      	ble.n	800775e <_dtoa_r+0x67e>
 8007748:	4542      	cmp	r2, r8
 800774a:	9904      	ldr	r1, [sp, #16]
 800774c:	bfa8      	it	ge
 800774e:	4642      	movge	r2, r8
 8007750:	1a89      	subs	r1, r1, r2
 8007752:	9104      	str	r1, [sp, #16]
 8007754:	9905      	ldr	r1, [sp, #20]
 8007756:	eba8 0802 	sub.w	r8, r8, r2
 800775a:	1a8a      	subs	r2, r1, r2
 800775c:	9205      	str	r2, [sp, #20]
 800775e:	b303      	cbz	r3, 80077a2 <_dtoa_r+0x6c2>
 8007760:	9a07      	ldr	r2, [sp, #28]
 8007762:	2a00      	cmp	r2, #0
 8007764:	f000 80a5 	beq.w	80078b2 <_dtoa_r+0x7d2>
 8007768:	2c00      	cmp	r4, #0
 800776a:	dd13      	ble.n	8007794 <_dtoa_r+0x6b4>
 800776c:	4639      	mov	r1, r7
 800776e:	4622      	mov	r2, r4
 8007770:	4630      	mov	r0, r6
 8007772:	930d      	str	r3, [sp, #52]	; 0x34
 8007774:	f000 fe14 	bl	80083a0 <__pow5mult>
 8007778:	462a      	mov	r2, r5
 800777a:	4601      	mov	r1, r0
 800777c:	4607      	mov	r7, r0
 800777e:	4630      	mov	r0, r6
 8007780:	f000 fd64 	bl	800824c <__multiply>
 8007784:	4629      	mov	r1, r5
 8007786:	900a      	str	r0, [sp, #40]	; 0x28
 8007788:	4630      	mov	r0, r6
 800778a:	f000 fc91 	bl	80080b0 <_Bfree>
 800778e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007792:	4615      	mov	r5, r2
 8007794:	1b1a      	subs	r2, r3, r4
 8007796:	d004      	beq.n	80077a2 <_dtoa_r+0x6c2>
 8007798:	4629      	mov	r1, r5
 800779a:	4630      	mov	r0, r6
 800779c:	f000 fe00 	bl	80083a0 <__pow5mult>
 80077a0:	4605      	mov	r5, r0
 80077a2:	2101      	movs	r1, #1
 80077a4:	4630      	mov	r0, r6
 80077a6:	f000 fd3b 	bl	8008220 <__i2b>
 80077aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	4604      	mov	r4, r0
 80077b0:	f340 8081 	ble.w	80078b6 <_dtoa_r+0x7d6>
 80077b4:	461a      	mov	r2, r3
 80077b6:	4601      	mov	r1, r0
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 fdf1 	bl	80083a0 <__pow5mult>
 80077be:	9b06      	ldr	r3, [sp, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	4604      	mov	r4, r0
 80077c4:	dd7a      	ble.n	80078bc <_dtoa_r+0x7dc>
 80077c6:	2300      	movs	r3, #0
 80077c8:	930a      	str	r3, [sp, #40]	; 0x28
 80077ca:	6922      	ldr	r2, [r4, #16]
 80077cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80077d0:	6910      	ldr	r0, [r2, #16]
 80077d2:	f000 fcd5 	bl	8008180 <__hi0bits>
 80077d6:	f1c0 0020 	rsb	r0, r0, #32
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	4418      	add	r0, r3
 80077de:	f010 001f 	ands.w	r0, r0, #31
 80077e2:	f000 808c 	beq.w	80078fe <_dtoa_r+0x81e>
 80077e6:	f1c0 0220 	rsb	r2, r0, #32
 80077ea:	2a04      	cmp	r2, #4
 80077ec:	f340 8085 	ble.w	80078fa <_dtoa_r+0x81a>
 80077f0:	f1c0 001c 	rsb	r0, r0, #28
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	4403      	add	r3, r0
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	4403      	add	r3, r0
 80077fe:	4480      	add	r8, r0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd05      	ble.n	8007814 <_dtoa_r+0x734>
 8007808:	4629      	mov	r1, r5
 800780a:	461a      	mov	r2, r3
 800780c:	4630      	mov	r0, r6
 800780e:	f000 fe21 	bl	8008454 <__lshift>
 8007812:	4605      	mov	r5, r0
 8007814:	9b05      	ldr	r3, [sp, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd05      	ble.n	8007826 <_dtoa_r+0x746>
 800781a:	4621      	mov	r1, r4
 800781c:	461a      	mov	r2, r3
 800781e:	4630      	mov	r0, r6
 8007820:	f000 fe18 	bl	8008454 <__lshift>
 8007824:	4604      	mov	r4, r0
 8007826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d06a      	beq.n	8007902 <_dtoa_r+0x822>
 800782c:	4621      	mov	r1, r4
 800782e:	4628      	mov	r0, r5
 8007830:	f000 fe80 	bl	8008534 <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	da64      	bge.n	8007902 <_dtoa_r+0x822>
 8007838:	2300      	movs	r3, #0
 800783a:	4629      	mov	r1, r5
 800783c:	220a      	movs	r2, #10
 800783e:	4630      	mov	r0, r6
 8007840:	f000 fc58 	bl	80080f4 <__multadd>
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800784a:	4605      	mov	r5, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8191 	beq.w	8007b74 <_dtoa_r+0xa94>
 8007852:	4639      	mov	r1, r7
 8007854:	2300      	movs	r3, #0
 8007856:	220a      	movs	r2, #10
 8007858:	4630      	mov	r0, r6
 800785a:	f000 fc4b 	bl	80080f4 <__multadd>
 800785e:	f1ba 0f00 	cmp.w	sl, #0
 8007862:	4607      	mov	r7, r0
 8007864:	f300 808d 	bgt.w	8007982 <_dtoa_r+0x8a2>
 8007868:	9b06      	ldr	r3, [sp, #24]
 800786a:	2b02      	cmp	r3, #2
 800786c:	dc50      	bgt.n	8007910 <_dtoa_r+0x830>
 800786e:	e088      	b.n	8007982 <_dtoa_r+0x8a2>
 8007870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007872:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007876:	e751      	b.n	800771c <_dtoa_r+0x63c>
 8007878:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800787c:	42a3      	cmp	r3, r4
 800787e:	bfbf      	itttt	lt
 8007880:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007882:	1ae3      	sublt	r3, r4, r3
 8007884:	18d2      	addlt	r2, r2, r3
 8007886:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007888:	bfb6      	itet	lt
 800788a:	4623      	movlt	r3, r4
 800788c:	1b1c      	subge	r4, r3, r4
 800788e:	2400      	movlt	r4, #0
 8007890:	f1b9 0f00 	cmp.w	r9, #0
 8007894:	bfb5      	itete	lt
 8007896:	9a04      	ldrlt	r2, [sp, #16]
 8007898:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800789c:	eba2 0809 	sublt.w	r8, r2, r9
 80078a0:	464a      	movge	r2, r9
 80078a2:	bfb8      	it	lt
 80078a4:	2200      	movlt	r2, #0
 80078a6:	e73c      	b.n	8007722 <_dtoa_r+0x642>
 80078a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80078ac:	9f07      	ldr	r7, [sp, #28]
 80078ae:	461c      	mov	r4, r3
 80078b0:	e744      	b.n	800773c <_dtoa_r+0x65c>
 80078b2:	461a      	mov	r2, r3
 80078b4:	e770      	b.n	8007798 <_dtoa_r+0x6b8>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	dc18      	bgt.n	80078ee <_dtoa_r+0x80e>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	b9b3      	cbnz	r3, 80078ee <_dtoa_r+0x80e>
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80078c6:	b9a2      	cbnz	r2, 80078f2 <_dtoa_r+0x812>
 80078c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078cc:	0d12      	lsrs	r2, r2, #20
 80078ce:	0512      	lsls	r2, r2, #20
 80078d0:	b18a      	cbz	r2, 80078f6 <_dtoa_r+0x816>
 80078d2:	9b04      	ldr	r3, [sp, #16]
 80078d4:	3301      	adds	r3, #1
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	9b05      	ldr	r3, [sp, #20]
 80078da:	3301      	adds	r3, #1
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	2301      	movs	r3, #1
 80078e0:	930a      	str	r3, [sp, #40]	; 0x28
 80078e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f af70 	bne.w	80077ca <_dtoa_r+0x6ea>
 80078ea:	2001      	movs	r0, #1
 80078ec:	e775      	b.n	80077da <_dtoa_r+0x6fa>
 80078ee:	2300      	movs	r3, #0
 80078f0:	e7f6      	b.n	80078e0 <_dtoa_r+0x800>
 80078f2:	9b02      	ldr	r3, [sp, #8]
 80078f4:	e7f4      	b.n	80078e0 <_dtoa_r+0x800>
 80078f6:	920a      	str	r2, [sp, #40]	; 0x28
 80078f8:	e7f3      	b.n	80078e2 <_dtoa_r+0x802>
 80078fa:	d082      	beq.n	8007802 <_dtoa_r+0x722>
 80078fc:	4610      	mov	r0, r2
 80078fe:	301c      	adds	r0, #28
 8007900:	e778      	b.n	80077f4 <_dtoa_r+0x714>
 8007902:	f1b9 0f00 	cmp.w	r9, #0
 8007906:	dc37      	bgt.n	8007978 <_dtoa_r+0x898>
 8007908:	9b06      	ldr	r3, [sp, #24]
 800790a:	2b02      	cmp	r3, #2
 800790c:	dd34      	ble.n	8007978 <_dtoa_r+0x898>
 800790e:	46ca      	mov	sl, r9
 8007910:	f1ba 0f00 	cmp.w	sl, #0
 8007914:	d10d      	bne.n	8007932 <_dtoa_r+0x852>
 8007916:	4621      	mov	r1, r4
 8007918:	4653      	mov	r3, sl
 800791a:	2205      	movs	r2, #5
 800791c:	4630      	mov	r0, r6
 800791e:	f000 fbe9 	bl	80080f4 <__multadd>
 8007922:	4601      	mov	r1, r0
 8007924:	4604      	mov	r4, r0
 8007926:	4628      	mov	r0, r5
 8007928:	f000 fe04 	bl	8008534 <__mcmp>
 800792c:	2800      	cmp	r0, #0
 800792e:	f73f adeb 	bgt.w	8007508 <_dtoa_r+0x428>
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007938:	ea6f 0b03 	mvn.w	fp, r3
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	4621      	mov	r1, r4
 8007942:	4630      	mov	r0, r6
 8007944:	f000 fbb4 	bl	80080b0 <_Bfree>
 8007948:	2f00      	cmp	r7, #0
 800794a:	f43f aea8 	beq.w	800769e <_dtoa_r+0x5be>
 800794e:	f1b9 0f00 	cmp.w	r9, #0
 8007952:	d005      	beq.n	8007960 <_dtoa_r+0x880>
 8007954:	45b9      	cmp	r9, r7
 8007956:	d003      	beq.n	8007960 <_dtoa_r+0x880>
 8007958:	4649      	mov	r1, r9
 800795a:	4630      	mov	r0, r6
 800795c:	f000 fba8 	bl	80080b0 <_Bfree>
 8007960:	4639      	mov	r1, r7
 8007962:	4630      	mov	r0, r6
 8007964:	f000 fba4 	bl	80080b0 <_Bfree>
 8007968:	e699      	b.n	800769e <_dtoa_r+0x5be>
 800796a:	2400      	movs	r4, #0
 800796c:	4627      	mov	r7, r4
 800796e:	e7e0      	b.n	8007932 <_dtoa_r+0x852>
 8007970:	46bb      	mov	fp, r7
 8007972:	4604      	mov	r4, r0
 8007974:	4607      	mov	r7, r0
 8007976:	e5c7      	b.n	8007508 <_dtoa_r+0x428>
 8007978:	9b07      	ldr	r3, [sp, #28]
 800797a:	46ca      	mov	sl, r9
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8100 	beq.w	8007b82 <_dtoa_r+0xaa2>
 8007982:	f1b8 0f00 	cmp.w	r8, #0
 8007986:	dd05      	ble.n	8007994 <_dtoa_r+0x8b4>
 8007988:	4639      	mov	r1, r7
 800798a:	4642      	mov	r2, r8
 800798c:	4630      	mov	r0, r6
 800798e:	f000 fd61 	bl	8008454 <__lshift>
 8007992:	4607      	mov	r7, r0
 8007994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d05d      	beq.n	8007a56 <_dtoa_r+0x976>
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4630      	mov	r0, r6
 800799e:	f000 fb47 	bl	8008030 <_Balloc>
 80079a2:	4680      	mov	r8, r0
 80079a4:	b928      	cbnz	r0, 80079b2 <_dtoa_r+0x8d2>
 80079a6:	4b82      	ldr	r3, [pc, #520]	; (8007bb0 <_dtoa_r+0xad0>)
 80079a8:	4602      	mov	r2, r0
 80079aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ae:	f7ff bbaf 	b.w	8007110 <_dtoa_r+0x30>
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	3202      	adds	r2, #2
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	f107 010c 	add.w	r1, r7, #12
 80079bc:	300c      	adds	r0, #12
 80079be:	f000 fb29 	bl	8008014 <memcpy>
 80079c2:	2201      	movs	r2, #1
 80079c4:	4641      	mov	r1, r8
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 fd44 	bl	8008454 <__lshift>
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	3301      	adds	r3, #1
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	4453      	add	r3, sl
 80079d6:	9308      	str	r3, [sp, #32]
 80079d8:	9b02      	ldr	r3, [sp, #8]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	46b9      	mov	r9, r7
 80079e0:	9307      	str	r3, [sp, #28]
 80079e2:	4607      	mov	r7, r0
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	4621      	mov	r1, r4
 80079e8:	3b01      	subs	r3, #1
 80079ea:	4628      	mov	r0, r5
 80079ec:	9302      	str	r3, [sp, #8]
 80079ee:	f7ff faeb 	bl	8006fc8 <quorem>
 80079f2:	4603      	mov	r3, r0
 80079f4:	3330      	adds	r3, #48	; 0x30
 80079f6:	9005      	str	r0, [sp, #20]
 80079f8:	4649      	mov	r1, r9
 80079fa:	4628      	mov	r0, r5
 80079fc:	9309      	str	r3, [sp, #36]	; 0x24
 80079fe:	f000 fd99 	bl	8008534 <__mcmp>
 8007a02:	463a      	mov	r2, r7
 8007a04:	4682      	mov	sl, r0
 8007a06:	4621      	mov	r1, r4
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f000 fdaf 	bl	800856c <__mdiff>
 8007a0e:	68c2      	ldr	r2, [r0, #12]
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	4680      	mov	r8, r0
 8007a14:	bb0a      	cbnz	r2, 8007a5a <_dtoa_r+0x97a>
 8007a16:	4601      	mov	r1, r0
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 fd8b 	bl	8008534 <__mcmp>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a20:	4602      	mov	r2, r0
 8007a22:	4641      	mov	r1, r8
 8007a24:	4630      	mov	r0, r6
 8007a26:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007a2a:	f000 fb41 	bl	80080b0 <_Bfree>
 8007a2e:	9b06      	ldr	r3, [sp, #24]
 8007a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a32:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a36:	ea43 0102 	orr.w	r1, r3, r2
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a40:	d10d      	bne.n	8007a5e <_dtoa_r+0x97e>
 8007a42:	2b39      	cmp	r3, #57	; 0x39
 8007a44:	d029      	beq.n	8007a9a <_dtoa_r+0x9ba>
 8007a46:	f1ba 0f00 	cmp.w	sl, #0
 8007a4a:	dd01      	ble.n	8007a50 <_dtoa_r+0x970>
 8007a4c:	9b05      	ldr	r3, [sp, #20]
 8007a4e:	3331      	adds	r3, #49	; 0x31
 8007a50:	9a02      	ldr	r2, [sp, #8]
 8007a52:	7013      	strb	r3, [r2, #0]
 8007a54:	e774      	b.n	8007940 <_dtoa_r+0x860>
 8007a56:	4638      	mov	r0, r7
 8007a58:	e7b8      	b.n	80079cc <_dtoa_r+0x8ec>
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	e7e1      	b.n	8007a22 <_dtoa_r+0x942>
 8007a5e:	f1ba 0f00 	cmp.w	sl, #0
 8007a62:	db06      	blt.n	8007a72 <_dtoa_r+0x992>
 8007a64:	9906      	ldr	r1, [sp, #24]
 8007a66:	ea41 0a0a 	orr.w	sl, r1, sl
 8007a6a:	9907      	ldr	r1, [sp, #28]
 8007a6c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007a70:	d120      	bne.n	8007ab4 <_dtoa_r+0x9d4>
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	ddec      	ble.n	8007a50 <_dtoa_r+0x970>
 8007a76:	4629      	mov	r1, r5
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	f000 fce9 	bl	8008454 <__lshift>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4605      	mov	r5, r0
 8007a86:	f000 fd55 	bl	8008534 <__mcmp>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	dc02      	bgt.n	8007a96 <_dtoa_r+0x9b6>
 8007a90:	d1de      	bne.n	8007a50 <_dtoa_r+0x970>
 8007a92:	07da      	lsls	r2, r3, #31
 8007a94:	d5dc      	bpl.n	8007a50 <_dtoa_r+0x970>
 8007a96:	2b39      	cmp	r3, #57	; 0x39
 8007a98:	d1d8      	bne.n	8007a4c <_dtoa_r+0x96c>
 8007a9a:	9a02      	ldr	r2, [sp, #8]
 8007a9c:	2339      	movs	r3, #57	; 0x39
 8007a9e:	7013      	strb	r3, [r2, #0]
 8007aa0:	4643      	mov	r3, r8
 8007aa2:	4698      	mov	r8, r3
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007aaa:	2a39      	cmp	r2, #57	; 0x39
 8007aac:	d051      	beq.n	8007b52 <_dtoa_r+0xa72>
 8007aae:	3201      	adds	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e745      	b.n	8007940 <_dtoa_r+0x860>
 8007ab4:	2a00      	cmp	r2, #0
 8007ab6:	dd03      	ble.n	8007ac0 <_dtoa_r+0x9e0>
 8007ab8:	2b39      	cmp	r3, #57	; 0x39
 8007aba:	d0ee      	beq.n	8007a9a <_dtoa_r+0x9ba>
 8007abc:	3301      	adds	r3, #1
 8007abe:	e7c7      	b.n	8007a50 <_dtoa_r+0x970>
 8007ac0:	9a04      	ldr	r2, [sp, #16]
 8007ac2:	9908      	ldr	r1, [sp, #32]
 8007ac4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ac8:	428a      	cmp	r2, r1
 8007aca:	d02b      	beq.n	8007b24 <_dtoa_r+0xa44>
 8007acc:	4629      	mov	r1, r5
 8007ace:	2300      	movs	r3, #0
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 fb0e 	bl	80080f4 <__multadd>
 8007ad8:	45b9      	cmp	r9, r7
 8007ada:	4605      	mov	r5, r0
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	f04f 020a 	mov.w	r2, #10
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	d107      	bne.n	8007afa <_dtoa_r+0xa1a>
 8007aea:	f000 fb03 	bl	80080f4 <__multadd>
 8007aee:	4681      	mov	r9, r0
 8007af0:	4607      	mov	r7, r0
 8007af2:	9b04      	ldr	r3, [sp, #16]
 8007af4:	3301      	adds	r3, #1
 8007af6:	9304      	str	r3, [sp, #16]
 8007af8:	e774      	b.n	80079e4 <_dtoa_r+0x904>
 8007afa:	f000 fafb 	bl	80080f4 <__multadd>
 8007afe:	4639      	mov	r1, r7
 8007b00:	4681      	mov	r9, r0
 8007b02:	2300      	movs	r3, #0
 8007b04:	220a      	movs	r2, #10
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 faf4 	bl	80080f4 <__multadd>
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	e7f0      	b.n	8007af2 <_dtoa_r+0xa12>
 8007b10:	f1ba 0f00 	cmp.w	sl, #0
 8007b14:	9a01      	ldr	r2, [sp, #4]
 8007b16:	bfcc      	ite	gt
 8007b18:	46d0      	movgt	r8, sl
 8007b1a:	f04f 0801 	movle.w	r8, #1
 8007b1e:	4490      	add	r8, r2
 8007b20:	f04f 0900 	mov.w	r9, #0
 8007b24:	4629      	mov	r1, r5
 8007b26:	2201      	movs	r2, #1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	9302      	str	r3, [sp, #8]
 8007b2c:	f000 fc92 	bl	8008454 <__lshift>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4605      	mov	r5, r0
 8007b34:	f000 fcfe 	bl	8008534 <__mcmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dcb1      	bgt.n	8007aa0 <_dtoa_r+0x9c0>
 8007b3c:	d102      	bne.n	8007b44 <_dtoa_r+0xa64>
 8007b3e:	9b02      	ldr	r3, [sp, #8]
 8007b40:	07db      	lsls	r3, r3, #31
 8007b42:	d4ad      	bmi.n	8007aa0 <_dtoa_r+0x9c0>
 8007b44:	4643      	mov	r3, r8
 8007b46:	4698      	mov	r8, r3
 8007b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b4c:	2a30      	cmp	r2, #48	; 0x30
 8007b4e:	d0fa      	beq.n	8007b46 <_dtoa_r+0xa66>
 8007b50:	e6f6      	b.n	8007940 <_dtoa_r+0x860>
 8007b52:	9a01      	ldr	r2, [sp, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d1a4      	bne.n	8007aa2 <_dtoa_r+0x9c2>
 8007b58:	f10b 0b01 	add.w	fp, fp, #1
 8007b5c:	2331      	movs	r3, #49	; 0x31
 8007b5e:	e778      	b.n	8007a52 <_dtoa_r+0x972>
 8007b60:	4b14      	ldr	r3, [pc, #80]	; (8007bb4 <_dtoa_r+0xad4>)
 8007b62:	f7ff bb27 	b.w	80071b4 <_dtoa_r+0xd4>
 8007b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f47f ab03 	bne.w	8007174 <_dtoa_r+0x94>
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <_dtoa_r+0xad8>)
 8007b70:	f7ff bb20 	b.w	80071b4 <_dtoa_r+0xd4>
 8007b74:	f1ba 0f00 	cmp.w	sl, #0
 8007b78:	dc03      	bgt.n	8007b82 <_dtoa_r+0xaa2>
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f73f aec7 	bgt.w	8007910 <_dtoa_r+0x830>
 8007b82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f7ff fa1d 	bl	8006fc8 <quorem>
 8007b8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b92:	f808 3b01 	strb.w	r3, [r8], #1
 8007b96:	9a01      	ldr	r2, [sp, #4]
 8007b98:	eba8 0202 	sub.w	r2, r8, r2
 8007b9c:	4592      	cmp	sl, r2
 8007b9e:	ddb7      	ble.n	8007b10 <_dtoa_r+0xa30>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 faa4 	bl	80080f4 <__multadd>
 8007bac:	4605      	mov	r5, r0
 8007bae:	e7ea      	b.n	8007b86 <_dtoa_r+0xaa6>
 8007bb0:	080094a7 	.word	0x080094a7
 8007bb4:	08009404 	.word	0x08009404
 8007bb8:	08009428 	.word	0x08009428

08007bbc <__sflush_r>:
 8007bbc:	898a      	ldrh	r2, [r1, #12]
 8007bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	0710      	lsls	r0, r2, #28
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	d458      	bmi.n	8007c7c <__sflush_r+0xc0>
 8007bca:	684b      	ldr	r3, [r1, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dc05      	bgt.n	8007bdc <__sflush_r+0x20>
 8007bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dc02      	bgt.n	8007bdc <__sflush_r+0x20>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bde:	2e00      	cmp	r6, #0
 8007be0:	d0f9      	beq.n	8007bd6 <__sflush_r+0x1a>
 8007be2:	2300      	movs	r3, #0
 8007be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007be8:	682f      	ldr	r7, [r5, #0]
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	d032      	beq.n	8007c54 <__sflush_r+0x98>
 8007bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	075a      	lsls	r2, r3, #29
 8007bf4:	d505      	bpl.n	8007c02 <__sflush_r+0x46>
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	1ac0      	subs	r0, r0, r3
 8007bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bfc:	b10b      	cbz	r3, 8007c02 <__sflush_r+0x46>
 8007bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c00:	1ac0      	subs	r0, r0, r3
 8007c02:	2300      	movs	r3, #0
 8007c04:	4602      	mov	r2, r0
 8007c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c08:	6a21      	ldr	r1, [r4, #32]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b0      	blx	r6
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	d106      	bne.n	8007c22 <__sflush_r+0x66>
 8007c14:	6829      	ldr	r1, [r5, #0]
 8007c16:	291d      	cmp	r1, #29
 8007c18:	d82c      	bhi.n	8007c74 <__sflush_r+0xb8>
 8007c1a:	4a2a      	ldr	r2, [pc, #168]	; (8007cc4 <__sflush_r+0x108>)
 8007c1c:	40ca      	lsrs	r2, r1
 8007c1e:	07d6      	lsls	r6, r2, #31
 8007c20:	d528      	bpl.n	8007c74 <__sflush_r+0xb8>
 8007c22:	2200      	movs	r2, #0
 8007c24:	6062      	str	r2, [r4, #4]
 8007c26:	04d9      	lsls	r1, r3, #19
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	6022      	str	r2, [r4, #0]
 8007c2c:	d504      	bpl.n	8007c38 <__sflush_r+0x7c>
 8007c2e:	1c42      	adds	r2, r0, #1
 8007c30:	d101      	bne.n	8007c36 <__sflush_r+0x7a>
 8007c32:	682b      	ldr	r3, [r5, #0]
 8007c34:	b903      	cbnz	r3, 8007c38 <__sflush_r+0x7c>
 8007c36:	6560      	str	r0, [r4, #84]	; 0x54
 8007c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c3a:	602f      	str	r7, [r5, #0]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d0ca      	beq.n	8007bd6 <__sflush_r+0x1a>
 8007c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c44:	4299      	cmp	r1, r3
 8007c46:	d002      	beq.n	8007c4e <__sflush_r+0x92>
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 fd8b 	bl	8008764 <_free_r>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	6360      	str	r0, [r4, #52]	; 0x34
 8007c52:	e7c1      	b.n	8007bd8 <__sflush_r+0x1c>
 8007c54:	6a21      	ldr	r1, [r4, #32]
 8007c56:	2301      	movs	r3, #1
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b0      	blx	r6
 8007c5c:	1c41      	adds	r1, r0, #1
 8007c5e:	d1c7      	bne.n	8007bf0 <__sflush_r+0x34>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0c4      	beq.n	8007bf0 <__sflush_r+0x34>
 8007c66:	2b1d      	cmp	r3, #29
 8007c68:	d001      	beq.n	8007c6e <__sflush_r+0xb2>
 8007c6a:	2b16      	cmp	r3, #22
 8007c6c:	d101      	bne.n	8007c72 <__sflush_r+0xb6>
 8007c6e:	602f      	str	r7, [r5, #0]
 8007c70:	e7b1      	b.n	8007bd6 <__sflush_r+0x1a>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	e7ad      	b.n	8007bd8 <__sflush_r+0x1c>
 8007c7c:	690f      	ldr	r7, [r1, #16]
 8007c7e:	2f00      	cmp	r7, #0
 8007c80:	d0a9      	beq.n	8007bd6 <__sflush_r+0x1a>
 8007c82:	0793      	lsls	r3, r2, #30
 8007c84:	680e      	ldr	r6, [r1, #0]
 8007c86:	bf08      	it	eq
 8007c88:	694b      	ldreq	r3, [r1, #20]
 8007c8a:	600f      	str	r7, [r1, #0]
 8007c8c:	bf18      	it	ne
 8007c8e:	2300      	movne	r3, #0
 8007c90:	eba6 0807 	sub.w	r8, r6, r7
 8007c94:	608b      	str	r3, [r1, #8]
 8007c96:	f1b8 0f00 	cmp.w	r8, #0
 8007c9a:	dd9c      	ble.n	8007bd6 <__sflush_r+0x1a>
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	463a      	mov	r2, r7
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b0      	blx	r6
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	dc06      	bgt.n	8007cba <__sflush_r+0xfe>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cb8:	e78e      	b.n	8007bd8 <__sflush_r+0x1c>
 8007cba:	4407      	add	r7, r0
 8007cbc:	eba8 0800 	sub.w	r8, r8, r0
 8007cc0:	e7e9      	b.n	8007c96 <__sflush_r+0xda>
 8007cc2:	bf00      	nop
 8007cc4:	20400001 	.word	0x20400001

08007cc8 <_fflush_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	690b      	ldr	r3, [r1, #16]
 8007ccc:	4605      	mov	r5, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	b913      	cbnz	r3, 8007cd8 <_fflush_r+0x10>
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	b118      	cbz	r0, 8007ce2 <_fflush_r+0x1a>
 8007cda:	6983      	ldr	r3, [r0, #24]
 8007cdc:	b90b      	cbnz	r3, 8007ce2 <_fflush_r+0x1a>
 8007cde:	f000 f887 	bl	8007df0 <__sinit>
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <_fflush_r+0x6c>)
 8007ce4:	429c      	cmp	r4, r3
 8007ce6:	d11b      	bne.n	8007d20 <_fflush_r+0x58>
 8007ce8:	686c      	ldr	r4, [r5, #4]
 8007cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0ef      	beq.n	8007cd2 <_fflush_r+0xa>
 8007cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cf4:	07d0      	lsls	r0, r2, #31
 8007cf6:	d404      	bmi.n	8007d02 <_fflush_r+0x3a>
 8007cf8:	0599      	lsls	r1, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_fflush_r+0x3a>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfe:	f000 f91a 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8007d02:	4628      	mov	r0, r5
 8007d04:	4621      	mov	r1, r4
 8007d06:	f7ff ff59 	bl	8007bbc <__sflush_r>
 8007d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d0c:	07da      	lsls	r2, r3, #31
 8007d0e:	4605      	mov	r5, r0
 8007d10:	d4e0      	bmi.n	8007cd4 <_fflush_r+0xc>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	059b      	lsls	r3, r3, #22
 8007d16:	d4dd      	bmi.n	8007cd4 <_fflush_r+0xc>
 8007d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1a:	f000 f90d 	bl	8007f38 <__retarget_lock_release_recursive>
 8007d1e:	e7d9      	b.n	8007cd4 <_fflush_r+0xc>
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <_fflush_r+0x70>)
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d101      	bne.n	8007d2a <_fflush_r+0x62>
 8007d26:	68ac      	ldr	r4, [r5, #8]
 8007d28:	e7df      	b.n	8007cea <_fflush_r+0x22>
 8007d2a:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <_fflush_r+0x74>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	bf08      	it	eq
 8007d30:	68ec      	ldreq	r4, [r5, #12]
 8007d32:	e7da      	b.n	8007cea <_fflush_r+0x22>
 8007d34:	080094d8 	.word	0x080094d8
 8007d38:	080094f8 	.word	0x080094f8
 8007d3c:	080094b8 	.word	0x080094b8

08007d40 <std>:
 8007d40:	2300      	movs	r3, #0
 8007d42:	b510      	push	{r4, lr}
 8007d44:	4604      	mov	r4, r0
 8007d46:	e9c0 3300 	strd	r3, r3, [r0]
 8007d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d4e:	6083      	str	r3, [r0, #8]
 8007d50:	8181      	strh	r1, [r0, #12]
 8007d52:	6643      	str	r3, [r0, #100]	; 0x64
 8007d54:	81c2      	strh	r2, [r0, #14]
 8007d56:	6183      	str	r3, [r0, #24]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	305c      	adds	r0, #92	; 0x5c
 8007d5e:	f7fe fc23 	bl	80065a8 <memset>
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <std+0x38>)
 8007d64:	6263      	str	r3, [r4, #36]	; 0x24
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <std+0x3c>)
 8007d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <std+0x40>)
 8007d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <std+0x44>)
 8007d70:	6224      	str	r4, [r4, #32]
 8007d72:	6323      	str	r3, [r4, #48]	; 0x30
 8007d74:	bd10      	pop	{r4, pc}
 8007d76:	bf00      	nop
 8007d78:	08008945 	.word	0x08008945
 8007d7c:	08008967 	.word	0x08008967
 8007d80:	0800899f 	.word	0x0800899f
 8007d84:	080089c3 	.word	0x080089c3

08007d88 <_cleanup_r>:
 8007d88:	4901      	ldr	r1, [pc, #4]	; (8007d90 <_cleanup_r+0x8>)
 8007d8a:	f000 b8af 	b.w	8007eec <_fwalk_reent>
 8007d8e:	bf00      	nop
 8007d90:	08007cc9 	.word	0x08007cc9

08007d94 <__sfmoreglue>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	2268      	movs	r2, #104	; 0x68
 8007d98:	1e4d      	subs	r5, r1, #1
 8007d9a:	4355      	muls	r5, r2
 8007d9c:	460e      	mov	r6, r1
 8007d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007da2:	f000 fd4b 	bl	800883c <_malloc_r>
 8007da6:	4604      	mov	r4, r0
 8007da8:	b140      	cbz	r0, 8007dbc <__sfmoreglue+0x28>
 8007daa:	2100      	movs	r1, #0
 8007dac:	e9c0 1600 	strd	r1, r6, [r0]
 8007db0:	300c      	adds	r0, #12
 8007db2:	60a0      	str	r0, [r4, #8]
 8007db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007db8:	f7fe fbf6 	bl	80065a8 <memset>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}

08007dc0 <__sfp_lock_acquire>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	; (8007dc8 <__sfp_lock_acquire+0x8>)
 8007dc2:	f000 b8b8 	b.w	8007f36 <__retarget_lock_acquire_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20000485 	.word	0x20000485

08007dcc <__sfp_lock_release>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__sfp_lock_release+0x8>)
 8007dce:	f000 b8b3 	b.w	8007f38 <__retarget_lock_release_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	20000485 	.word	0x20000485

08007dd8 <__sinit_lock_acquire>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__sinit_lock_acquire+0x8>)
 8007dda:	f000 b8ac 	b.w	8007f36 <__retarget_lock_acquire_recursive>
 8007dde:	bf00      	nop
 8007de0:	20000486 	.word	0x20000486

08007de4 <__sinit_lock_release>:
 8007de4:	4801      	ldr	r0, [pc, #4]	; (8007dec <__sinit_lock_release+0x8>)
 8007de6:	f000 b8a7 	b.w	8007f38 <__retarget_lock_release_recursive>
 8007dea:	bf00      	nop
 8007dec:	20000486 	.word	0x20000486

08007df0 <__sinit>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	4604      	mov	r4, r0
 8007df4:	f7ff fff0 	bl	8007dd8 <__sinit_lock_acquire>
 8007df8:	69a3      	ldr	r3, [r4, #24]
 8007dfa:	b11b      	cbz	r3, 8007e04 <__sinit+0x14>
 8007dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e00:	f7ff bff0 	b.w	8007de4 <__sinit_lock_release>
 8007e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e08:	6523      	str	r3, [r4, #80]	; 0x50
 8007e0a:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <__sinit+0x68>)
 8007e0c:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <__sinit+0x6c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	bf04      	itt	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	61a3      	streq	r3, [r4, #24]
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 f820 	bl	8007e60 <__sfp>
 8007e20:	6060      	str	r0, [r4, #4]
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f81c 	bl	8007e60 <__sfp>
 8007e28:	60a0      	str	r0, [r4, #8]
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 f818 	bl	8007e60 <__sfp>
 8007e30:	2200      	movs	r2, #0
 8007e32:	60e0      	str	r0, [r4, #12]
 8007e34:	2104      	movs	r1, #4
 8007e36:	6860      	ldr	r0, [r4, #4]
 8007e38:	f7ff ff82 	bl	8007d40 <std>
 8007e3c:	68a0      	ldr	r0, [r4, #8]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	2109      	movs	r1, #9
 8007e42:	f7ff ff7d 	bl	8007d40 <std>
 8007e46:	68e0      	ldr	r0, [r4, #12]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	2112      	movs	r1, #18
 8007e4c:	f7ff ff78 	bl	8007d40 <std>
 8007e50:	2301      	movs	r3, #1
 8007e52:	61a3      	str	r3, [r4, #24]
 8007e54:	e7d2      	b.n	8007dfc <__sinit+0xc>
 8007e56:	bf00      	nop
 8007e58:	080093f0 	.word	0x080093f0
 8007e5c:	08007d89 	.word	0x08007d89

08007e60 <__sfp>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	4607      	mov	r7, r0
 8007e64:	f7ff ffac 	bl	8007dc0 <__sfp_lock_acquire>
 8007e68:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <__sfp+0x84>)
 8007e6a:	681e      	ldr	r6, [r3, #0]
 8007e6c:	69b3      	ldr	r3, [r6, #24]
 8007e6e:	b913      	cbnz	r3, 8007e76 <__sfp+0x16>
 8007e70:	4630      	mov	r0, r6
 8007e72:	f7ff ffbd 	bl	8007df0 <__sinit>
 8007e76:	3648      	adds	r6, #72	; 0x48
 8007e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	d503      	bpl.n	8007e88 <__sfp+0x28>
 8007e80:	6833      	ldr	r3, [r6, #0]
 8007e82:	b30b      	cbz	r3, 8007ec8 <__sfp+0x68>
 8007e84:	6836      	ldr	r6, [r6, #0]
 8007e86:	e7f7      	b.n	8007e78 <__sfp+0x18>
 8007e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e8c:	b9d5      	cbnz	r5, 8007ec4 <__sfp+0x64>
 8007e8e:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <__sfp+0x88>)
 8007e90:	60e3      	str	r3, [r4, #12]
 8007e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e96:	6665      	str	r5, [r4, #100]	; 0x64
 8007e98:	f000 f84c 	bl	8007f34 <__retarget_lock_init_recursive>
 8007e9c:	f7ff ff96 	bl	8007dcc <__sfp_lock_release>
 8007ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ea8:	6025      	str	r5, [r4, #0]
 8007eaa:	61a5      	str	r5, [r4, #24]
 8007eac:	2208      	movs	r2, #8
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eb4:	f7fe fb78 	bl	80065a8 <memset>
 8007eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec4:	3468      	adds	r4, #104	; 0x68
 8007ec6:	e7d9      	b.n	8007e7c <__sfp+0x1c>
 8007ec8:	2104      	movs	r1, #4
 8007eca:	4638      	mov	r0, r7
 8007ecc:	f7ff ff62 	bl	8007d94 <__sfmoreglue>
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	6030      	str	r0, [r6, #0]
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d1d5      	bne.n	8007e84 <__sfp+0x24>
 8007ed8:	f7ff ff78 	bl	8007dcc <__sfp_lock_release>
 8007edc:	230c      	movs	r3, #12
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	e7ee      	b.n	8007ec0 <__sfp+0x60>
 8007ee2:	bf00      	nop
 8007ee4:	080093f0 	.word	0x080093f0
 8007ee8:	ffff0001 	.word	0xffff0001

08007eec <_fwalk_reent>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	4688      	mov	r8, r1
 8007ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ef8:	2700      	movs	r7, #0
 8007efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007efe:	f1b9 0901 	subs.w	r9, r9, #1
 8007f02:	d505      	bpl.n	8007f10 <_fwalk_reent+0x24>
 8007f04:	6824      	ldr	r4, [r4, #0]
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	d1f7      	bne.n	8007efa <_fwalk_reent+0xe>
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f10:	89ab      	ldrh	r3, [r5, #12]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d907      	bls.n	8007f26 <_fwalk_reent+0x3a>
 8007f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	d003      	beq.n	8007f26 <_fwalk_reent+0x3a>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4630      	mov	r0, r6
 8007f22:	47c0      	blx	r8
 8007f24:	4307      	orrs	r7, r0
 8007f26:	3568      	adds	r5, #104	; 0x68
 8007f28:	e7e9      	b.n	8007efe <_fwalk_reent+0x12>
	...

08007f2c <_localeconv_r>:
 8007f2c:	4800      	ldr	r0, [pc, #0]	; (8007f30 <_localeconv_r+0x4>)
 8007f2e:	4770      	bx	lr
 8007f30:	20000160 	.word	0x20000160

08007f34 <__retarget_lock_init_recursive>:
 8007f34:	4770      	bx	lr

08007f36 <__retarget_lock_acquire_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <__retarget_lock_release_recursive>:
 8007f38:	4770      	bx	lr

08007f3a <__swhatbuf_r>:
 8007f3a:	b570      	push	{r4, r5, r6, lr}
 8007f3c:	460e      	mov	r6, r1
 8007f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f42:	2900      	cmp	r1, #0
 8007f44:	b096      	sub	sp, #88	; 0x58
 8007f46:	4614      	mov	r4, r2
 8007f48:	461d      	mov	r5, r3
 8007f4a:	da08      	bge.n	8007f5e <__swhatbuf_r+0x24>
 8007f4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	602a      	str	r2, [r5, #0]
 8007f54:	061a      	lsls	r2, r3, #24
 8007f56:	d410      	bmi.n	8007f7a <__swhatbuf_r+0x40>
 8007f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f5c:	e00e      	b.n	8007f7c <__swhatbuf_r+0x42>
 8007f5e:	466a      	mov	r2, sp
 8007f60:	f000 fd86 	bl	8008a70 <_fstat_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dbf1      	blt.n	8007f4c <__swhatbuf_r+0x12>
 8007f68:	9a01      	ldr	r2, [sp, #4]
 8007f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f72:	425a      	negs	r2, r3
 8007f74:	415a      	adcs	r2, r3
 8007f76:	602a      	str	r2, [r5, #0]
 8007f78:	e7ee      	b.n	8007f58 <__swhatbuf_r+0x1e>
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	b016      	add	sp, #88	; 0x58
 8007f82:	bd70      	pop	{r4, r5, r6, pc}

08007f84 <__smakebuf_r>:
 8007f84:	898b      	ldrh	r3, [r1, #12]
 8007f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f88:	079d      	lsls	r5, r3, #30
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	d507      	bpl.n	8007fa0 <__smakebuf_r+0x1c>
 8007f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	6163      	str	r3, [r4, #20]
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	ab01      	add	r3, sp, #4
 8007fa2:	466a      	mov	r2, sp
 8007fa4:	f7ff ffc9 	bl	8007f3a <__swhatbuf_r>
 8007fa8:	9900      	ldr	r1, [sp, #0]
 8007faa:	4605      	mov	r5, r0
 8007fac:	4630      	mov	r0, r6
 8007fae:	f000 fc45 	bl	800883c <_malloc_r>
 8007fb2:	b948      	cbnz	r0, 8007fc8 <__smakebuf_r+0x44>
 8007fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb8:	059a      	lsls	r2, r3, #22
 8007fba:	d4ef      	bmi.n	8007f9c <__smakebuf_r+0x18>
 8007fbc:	f023 0303 	bic.w	r3, r3, #3
 8007fc0:	f043 0302 	orr.w	r3, r3, #2
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	e7e3      	b.n	8007f90 <__smakebuf_r+0xc>
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <__smakebuf_r+0x7c>)
 8007fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	6020      	str	r0, [r4, #0]
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	6163      	str	r3, [r4, #20]
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	6120      	str	r0, [r4, #16]
 8007fde:	b15b      	cbz	r3, 8007ff8 <__smakebuf_r+0x74>
 8007fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f000 fd55 	bl	8008a94 <_isatty_r>
 8007fea:	b128      	cbz	r0, 8007ff8 <__smakebuf_r+0x74>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f023 0303 	bic.w	r3, r3, #3
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	89a0      	ldrh	r0, [r4, #12]
 8007ffa:	4305      	orrs	r5, r0
 8007ffc:	81a5      	strh	r5, [r4, #12]
 8007ffe:	e7cd      	b.n	8007f9c <__smakebuf_r+0x18>
 8008000:	08007d89 	.word	0x08007d89

08008004 <malloc>:
 8008004:	4b02      	ldr	r3, [pc, #8]	; (8008010 <malloc+0xc>)
 8008006:	4601      	mov	r1, r0
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	f000 bc17 	b.w	800883c <_malloc_r>
 800800e:	bf00      	nop
 8008010:	2000000c 	.word	0x2000000c

08008014 <memcpy>:
 8008014:	440a      	add	r2, r1
 8008016:	4291      	cmp	r1, r2
 8008018:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800801c:	d100      	bne.n	8008020 <memcpy+0xc>
 800801e:	4770      	bx	lr
 8008020:	b510      	push	{r4, lr}
 8008022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802a:	4291      	cmp	r1, r2
 800802c:	d1f9      	bne.n	8008022 <memcpy+0xe>
 800802e:	bd10      	pop	{r4, pc}

08008030 <_Balloc>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008034:	4604      	mov	r4, r0
 8008036:	460d      	mov	r5, r1
 8008038:	b976      	cbnz	r6, 8008058 <_Balloc+0x28>
 800803a:	2010      	movs	r0, #16
 800803c:	f7ff ffe2 	bl	8008004 <malloc>
 8008040:	4602      	mov	r2, r0
 8008042:	6260      	str	r0, [r4, #36]	; 0x24
 8008044:	b920      	cbnz	r0, 8008050 <_Balloc+0x20>
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <_Balloc+0x78>)
 8008048:	4818      	ldr	r0, [pc, #96]	; (80080ac <_Balloc+0x7c>)
 800804a:	2166      	movs	r1, #102	; 0x66
 800804c:	f000 fcd0 	bl	80089f0 <__assert_func>
 8008050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008054:	6006      	str	r6, [r0, #0]
 8008056:	60c6      	str	r6, [r0, #12]
 8008058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800805a:	68f3      	ldr	r3, [r6, #12]
 800805c:	b183      	cbz	r3, 8008080 <_Balloc+0x50>
 800805e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008066:	b9b8      	cbnz	r0, 8008098 <_Balloc+0x68>
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f605 	lsl.w	r6, r1, r5
 800806e:	1d72      	adds	r2, r6, #5
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fb60 	bl	8008738 <_calloc_r>
 8008078:	b160      	cbz	r0, 8008094 <_Balloc+0x64>
 800807a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800807e:	e00e      	b.n	800809e <_Balloc+0x6e>
 8008080:	2221      	movs	r2, #33	; 0x21
 8008082:	2104      	movs	r1, #4
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fb57 	bl	8008738 <_calloc_r>
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	60f0      	str	r0, [r6, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e4      	bne.n	800805e <_Balloc+0x2e>
 8008094:	2000      	movs	r0, #0
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	6802      	ldr	r2, [r0, #0]
 800809a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800809e:	2300      	movs	r3, #0
 80080a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080a4:	e7f7      	b.n	8008096 <_Balloc+0x66>
 80080a6:	bf00      	nop
 80080a8:	08009435 	.word	0x08009435
 80080ac:	08009518 	.word	0x08009518

080080b0 <_Bfree>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b976      	cbnz	r6, 80080d8 <_Bfree+0x28>
 80080ba:	2010      	movs	r0, #16
 80080bc:	f7ff ffa2 	bl	8008004 <malloc>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6268      	str	r0, [r5, #36]	; 0x24
 80080c4:	b920      	cbnz	r0, 80080d0 <_Bfree+0x20>
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <_Bfree+0x3c>)
 80080c8:	4809      	ldr	r0, [pc, #36]	; (80080f0 <_Bfree+0x40>)
 80080ca:	218a      	movs	r1, #138	; 0x8a
 80080cc:	f000 fc90 	bl	80089f0 <__assert_func>
 80080d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080d4:	6006      	str	r6, [r0, #0]
 80080d6:	60c6      	str	r6, [r0, #12]
 80080d8:	b13c      	cbz	r4, 80080ea <_Bfree+0x3a>
 80080da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080dc:	6862      	ldr	r2, [r4, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080e4:	6021      	str	r1, [r4, #0]
 80080e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	08009435 	.word	0x08009435
 80080f0:	08009518 	.word	0x08009518

080080f4 <__multadd>:
 80080f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	690d      	ldr	r5, [r1, #16]
 80080fa:	4607      	mov	r7, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	461e      	mov	r6, r3
 8008100:	f101 0c14 	add.w	ip, r1, #20
 8008104:	2000      	movs	r0, #0
 8008106:	f8dc 3000 	ldr.w	r3, [ip]
 800810a:	b299      	uxth	r1, r3
 800810c:	fb02 6101 	mla	r1, r2, r1, r6
 8008110:	0c1e      	lsrs	r6, r3, #16
 8008112:	0c0b      	lsrs	r3, r1, #16
 8008114:	fb02 3306 	mla	r3, r2, r6, r3
 8008118:	b289      	uxth	r1, r1
 800811a:	3001      	adds	r0, #1
 800811c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008120:	4285      	cmp	r5, r0
 8008122:	f84c 1b04 	str.w	r1, [ip], #4
 8008126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800812a:	dcec      	bgt.n	8008106 <__multadd+0x12>
 800812c:	b30e      	cbz	r6, 8008172 <__multadd+0x7e>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	42ab      	cmp	r3, r5
 8008132:	dc19      	bgt.n	8008168 <__multadd+0x74>
 8008134:	6861      	ldr	r1, [r4, #4]
 8008136:	4638      	mov	r0, r7
 8008138:	3101      	adds	r1, #1
 800813a:	f7ff ff79 	bl	8008030 <_Balloc>
 800813e:	4680      	mov	r8, r0
 8008140:	b928      	cbnz	r0, 800814e <__multadd+0x5a>
 8008142:	4602      	mov	r2, r0
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <__multadd+0x84>)
 8008146:	480d      	ldr	r0, [pc, #52]	; (800817c <__multadd+0x88>)
 8008148:	21b5      	movs	r1, #181	; 0xb5
 800814a:	f000 fc51 	bl	80089f0 <__assert_func>
 800814e:	6922      	ldr	r2, [r4, #16]
 8008150:	3202      	adds	r2, #2
 8008152:	f104 010c 	add.w	r1, r4, #12
 8008156:	0092      	lsls	r2, r2, #2
 8008158:	300c      	adds	r0, #12
 800815a:	f7ff ff5b 	bl	8008014 <memcpy>
 800815e:	4621      	mov	r1, r4
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ffa5 	bl	80080b0 <_Bfree>
 8008166:	4644      	mov	r4, r8
 8008168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800816c:	3501      	adds	r5, #1
 800816e:	615e      	str	r6, [r3, #20]
 8008170:	6125      	str	r5, [r4, #16]
 8008172:	4620      	mov	r0, r4
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	080094a7 	.word	0x080094a7
 800817c:	08009518 	.word	0x08009518

08008180 <__hi0bits>:
 8008180:	0c03      	lsrs	r3, r0, #16
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	b9d3      	cbnz	r3, 80081bc <__hi0bits+0x3c>
 8008186:	0400      	lsls	r0, r0, #16
 8008188:	2310      	movs	r3, #16
 800818a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800818e:	bf04      	itt	eq
 8008190:	0200      	lsleq	r0, r0, #8
 8008192:	3308      	addeq	r3, #8
 8008194:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008198:	bf04      	itt	eq
 800819a:	0100      	lsleq	r0, r0, #4
 800819c:	3304      	addeq	r3, #4
 800819e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081a2:	bf04      	itt	eq
 80081a4:	0080      	lsleq	r0, r0, #2
 80081a6:	3302      	addeq	r3, #2
 80081a8:	2800      	cmp	r0, #0
 80081aa:	db05      	blt.n	80081b8 <__hi0bits+0x38>
 80081ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081b0:	f103 0301 	add.w	r3, r3, #1
 80081b4:	bf08      	it	eq
 80081b6:	2320      	moveq	r3, #32
 80081b8:	4618      	mov	r0, r3
 80081ba:	4770      	bx	lr
 80081bc:	2300      	movs	r3, #0
 80081be:	e7e4      	b.n	800818a <__hi0bits+0xa>

080081c0 <__lo0bits>:
 80081c0:	6803      	ldr	r3, [r0, #0]
 80081c2:	f013 0207 	ands.w	r2, r3, #7
 80081c6:	4601      	mov	r1, r0
 80081c8:	d00b      	beq.n	80081e2 <__lo0bits+0x22>
 80081ca:	07da      	lsls	r2, r3, #31
 80081cc:	d423      	bmi.n	8008216 <__lo0bits+0x56>
 80081ce:	0798      	lsls	r0, r3, #30
 80081d0:	bf49      	itett	mi
 80081d2:	085b      	lsrmi	r3, r3, #1
 80081d4:	089b      	lsrpl	r3, r3, #2
 80081d6:	2001      	movmi	r0, #1
 80081d8:	600b      	strmi	r3, [r1, #0]
 80081da:	bf5c      	itt	pl
 80081dc:	600b      	strpl	r3, [r1, #0]
 80081de:	2002      	movpl	r0, #2
 80081e0:	4770      	bx	lr
 80081e2:	b298      	uxth	r0, r3
 80081e4:	b9a8      	cbnz	r0, 8008212 <__lo0bits+0x52>
 80081e6:	0c1b      	lsrs	r3, r3, #16
 80081e8:	2010      	movs	r0, #16
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	b90a      	cbnz	r2, 80081f2 <__lo0bits+0x32>
 80081ee:	3008      	adds	r0, #8
 80081f0:	0a1b      	lsrs	r3, r3, #8
 80081f2:	071a      	lsls	r2, r3, #28
 80081f4:	bf04      	itt	eq
 80081f6:	091b      	lsreq	r3, r3, #4
 80081f8:	3004      	addeq	r0, #4
 80081fa:	079a      	lsls	r2, r3, #30
 80081fc:	bf04      	itt	eq
 80081fe:	089b      	lsreq	r3, r3, #2
 8008200:	3002      	addeq	r0, #2
 8008202:	07da      	lsls	r2, r3, #31
 8008204:	d403      	bmi.n	800820e <__lo0bits+0x4e>
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	f100 0001 	add.w	r0, r0, #1
 800820c:	d005      	beq.n	800821a <__lo0bits+0x5a>
 800820e:	600b      	str	r3, [r1, #0]
 8008210:	4770      	bx	lr
 8008212:	4610      	mov	r0, r2
 8008214:	e7e9      	b.n	80081ea <__lo0bits+0x2a>
 8008216:	2000      	movs	r0, #0
 8008218:	4770      	bx	lr
 800821a:	2020      	movs	r0, #32
 800821c:	4770      	bx	lr
	...

08008220 <__i2b>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	2101      	movs	r1, #1
 8008226:	f7ff ff03 	bl	8008030 <_Balloc>
 800822a:	4602      	mov	r2, r0
 800822c:	b928      	cbnz	r0, 800823a <__i2b+0x1a>
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <__i2b+0x24>)
 8008230:	4805      	ldr	r0, [pc, #20]	; (8008248 <__i2b+0x28>)
 8008232:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008236:	f000 fbdb 	bl	80089f0 <__assert_func>
 800823a:	2301      	movs	r3, #1
 800823c:	6144      	str	r4, [r0, #20]
 800823e:	6103      	str	r3, [r0, #16]
 8008240:	bd10      	pop	{r4, pc}
 8008242:	bf00      	nop
 8008244:	080094a7 	.word	0x080094a7
 8008248:	08009518 	.word	0x08009518

0800824c <__multiply>:
 800824c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	4691      	mov	r9, r2
 8008252:	690a      	ldr	r2, [r1, #16]
 8008254:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	bfb8      	it	lt
 800825c:	460b      	movlt	r3, r1
 800825e:	460c      	mov	r4, r1
 8008260:	bfbc      	itt	lt
 8008262:	464c      	movlt	r4, r9
 8008264:	4699      	movlt	r9, r3
 8008266:	6927      	ldr	r7, [r4, #16]
 8008268:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800826c:	68a3      	ldr	r3, [r4, #8]
 800826e:	6861      	ldr	r1, [r4, #4]
 8008270:	eb07 060a 	add.w	r6, r7, sl
 8008274:	42b3      	cmp	r3, r6
 8008276:	b085      	sub	sp, #20
 8008278:	bfb8      	it	lt
 800827a:	3101      	addlt	r1, #1
 800827c:	f7ff fed8 	bl	8008030 <_Balloc>
 8008280:	b930      	cbnz	r0, 8008290 <__multiply+0x44>
 8008282:	4602      	mov	r2, r0
 8008284:	4b44      	ldr	r3, [pc, #272]	; (8008398 <__multiply+0x14c>)
 8008286:	4845      	ldr	r0, [pc, #276]	; (800839c <__multiply+0x150>)
 8008288:	f240 115d 	movw	r1, #349	; 0x15d
 800828c:	f000 fbb0 	bl	80089f0 <__assert_func>
 8008290:	f100 0514 	add.w	r5, r0, #20
 8008294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008298:	462b      	mov	r3, r5
 800829a:	2200      	movs	r2, #0
 800829c:	4543      	cmp	r3, r8
 800829e:	d321      	bcc.n	80082e4 <__multiply+0x98>
 80082a0:	f104 0314 	add.w	r3, r4, #20
 80082a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082a8:	f109 0314 	add.w	r3, r9, #20
 80082ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082b0:	9202      	str	r2, [sp, #8]
 80082b2:	1b3a      	subs	r2, r7, r4
 80082b4:	3a15      	subs	r2, #21
 80082b6:	f022 0203 	bic.w	r2, r2, #3
 80082ba:	3204      	adds	r2, #4
 80082bc:	f104 0115 	add.w	r1, r4, #21
 80082c0:	428f      	cmp	r7, r1
 80082c2:	bf38      	it	cc
 80082c4:	2204      	movcc	r2, #4
 80082c6:	9201      	str	r2, [sp, #4]
 80082c8:	9a02      	ldr	r2, [sp, #8]
 80082ca:	9303      	str	r3, [sp, #12]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d80c      	bhi.n	80082ea <__multiply+0x9e>
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	dd03      	ble.n	80082dc <__multiply+0x90>
 80082d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d05a      	beq.n	8008392 <__multiply+0x146>
 80082dc:	6106      	str	r6, [r0, #16]
 80082de:	b005      	add	sp, #20
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	f843 2b04 	str.w	r2, [r3], #4
 80082e8:	e7d8      	b.n	800829c <__multiply+0x50>
 80082ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80082ee:	f1ba 0f00 	cmp.w	sl, #0
 80082f2:	d024      	beq.n	800833e <__multiply+0xf2>
 80082f4:	f104 0e14 	add.w	lr, r4, #20
 80082f8:	46a9      	mov	r9, r5
 80082fa:	f04f 0c00 	mov.w	ip, #0
 80082fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008302:	f8d9 1000 	ldr.w	r1, [r9]
 8008306:	fa1f fb82 	uxth.w	fp, r2
 800830a:	b289      	uxth	r1, r1
 800830c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008310:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008314:	f8d9 2000 	ldr.w	r2, [r9]
 8008318:	4461      	add	r1, ip
 800831a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800831e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008326:	b289      	uxth	r1, r1
 8008328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800832c:	4577      	cmp	r7, lr
 800832e:	f849 1b04 	str.w	r1, [r9], #4
 8008332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008336:	d8e2      	bhi.n	80082fe <__multiply+0xb2>
 8008338:	9a01      	ldr	r2, [sp, #4]
 800833a:	f845 c002 	str.w	ip, [r5, r2]
 800833e:	9a03      	ldr	r2, [sp, #12]
 8008340:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008344:	3304      	adds	r3, #4
 8008346:	f1b9 0f00 	cmp.w	r9, #0
 800834a:	d020      	beq.n	800838e <__multiply+0x142>
 800834c:	6829      	ldr	r1, [r5, #0]
 800834e:	f104 0c14 	add.w	ip, r4, #20
 8008352:	46ae      	mov	lr, r5
 8008354:	f04f 0a00 	mov.w	sl, #0
 8008358:	f8bc b000 	ldrh.w	fp, [ip]
 800835c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008360:	fb09 220b 	mla	r2, r9, fp, r2
 8008364:	4492      	add	sl, r2
 8008366:	b289      	uxth	r1, r1
 8008368:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800836c:	f84e 1b04 	str.w	r1, [lr], #4
 8008370:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008374:	f8be 1000 	ldrh.w	r1, [lr]
 8008378:	0c12      	lsrs	r2, r2, #16
 800837a:	fb09 1102 	mla	r1, r9, r2, r1
 800837e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008382:	4567      	cmp	r7, ip
 8008384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008388:	d8e6      	bhi.n	8008358 <__multiply+0x10c>
 800838a:	9a01      	ldr	r2, [sp, #4]
 800838c:	50a9      	str	r1, [r5, r2]
 800838e:	3504      	adds	r5, #4
 8008390:	e79a      	b.n	80082c8 <__multiply+0x7c>
 8008392:	3e01      	subs	r6, #1
 8008394:	e79c      	b.n	80082d0 <__multiply+0x84>
 8008396:	bf00      	nop
 8008398:	080094a7 	.word	0x080094a7
 800839c:	08009518 	.word	0x08009518

080083a0 <__pow5mult>:
 80083a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a4:	4615      	mov	r5, r2
 80083a6:	f012 0203 	ands.w	r2, r2, #3
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	d007      	beq.n	80083c0 <__pow5mult+0x20>
 80083b0:	4c25      	ldr	r4, [pc, #148]	; (8008448 <__pow5mult+0xa8>)
 80083b2:	3a01      	subs	r2, #1
 80083b4:	2300      	movs	r3, #0
 80083b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ba:	f7ff fe9b 	bl	80080f4 <__multadd>
 80083be:	4607      	mov	r7, r0
 80083c0:	10ad      	asrs	r5, r5, #2
 80083c2:	d03d      	beq.n	8008440 <__pow5mult+0xa0>
 80083c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083c6:	b97c      	cbnz	r4, 80083e8 <__pow5mult+0x48>
 80083c8:	2010      	movs	r0, #16
 80083ca:	f7ff fe1b 	bl	8008004 <malloc>
 80083ce:	4602      	mov	r2, r0
 80083d0:	6270      	str	r0, [r6, #36]	; 0x24
 80083d2:	b928      	cbnz	r0, 80083e0 <__pow5mult+0x40>
 80083d4:	4b1d      	ldr	r3, [pc, #116]	; (800844c <__pow5mult+0xac>)
 80083d6:	481e      	ldr	r0, [pc, #120]	; (8008450 <__pow5mult+0xb0>)
 80083d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083dc:	f000 fb08 	bl	80089f0 <__assert_func>
 80083e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083e4:	6004      	str	r4, [r0, #0]
 80083e6:	60c4      	str	r4, [r0, #12]
 80083e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083f0:	b94c      	cbnz	r4, 8008406 <__pow5mult+0x66>
 80083f2:	f240 2171 	movw	r1, #625	; 0x271
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ff12 	bl	8008220 <__i2b>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008402:	4604      	mov	r4, r0
 8008404:	6003      	str	r3, [r0, #0]
 8008406:	f04f 0900 	mov.w	r9, #0
 800840a:	07eb      	lsls	r3, r5, #31
 800840c:	d50a      	bpl.n	8008424 <__pow5mult+0x84>
 800840e:	4639      	mov	r1, r7
 8008410:	4622      	mov	r2, r4
 8008412:	4630      	mov	r0, r6
 8008414:	f7ff ff1a 	bl	800824c <__multiply>
 8008418:	4639      	mov	r1, r7
 800841a:	4680      	mov	r8, r0
 800841c:	4630      	mov	r0, r6
 800841e:	f7ff fe47 	bl	80080b0 <_Bfree>
 8008422:	4647      	mov	r7, r8
 8008424:	106d      	asrs	r5, r5, #1
 8008426:	d00b      	beq.n	8008440 <__pow5mult+0xa0>
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	b938      	cbnz	r0, 800843c <__pow5mult+0x9c>
 800842c:	4622      	mov	r2, r4
 800842e:	4621      	mov	r1, r4
 8008430:	4630      	mov	r0, r6
 8008432:	f7ff ff0b 	bl	800824c <__multiply>
 8008436:	6020      	str	r0, [r4, #0]
 8008438:	f8c0 9000 	str.w	r9, [r0]
 800843c:	4604      	mov	r4, r0
 800843e:	e7e4      	b.n	800840a <__pow5mult+0x6a>
 8008440:	4638      	mov	r0, r7
 8008442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008446:	bf00      	nop
 8008448:	08009668 	.word	0x08009668
 800844c:	08009435 	.word	0x08009435
 8008450:	08009518 	.word	0x08009518

08008454 <__lshift>:
 8008454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	460c      	mov	r4, r1
 800845a:	6849      	ldr	r1, [r1, #4]
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008462:	68a3      	ldr	r3, [r4, #8]
 8008464:	4607      	mov	r7, r0
 8008466:	4691      	mov	r9, r2
 8008468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800846c:	f108 0601 	add.w	r6, r8, #1
 8008470:	42b3      	cmp	r3, r6
 8008472:	db0b      	blt.n	800848c <__lshift+0x38>
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff fddb 	bl	8008030 <_Balloc>
 800847a:	4605      	mov	r5, r0
 800847c:	b948      	cbnz	r0, 8008492 <__lshift+0x3e>
 800847e:	4602      	mov	r2, r0
 8008480:	4b2a      	ldr	r3, [pc, #168]	; (800852c <__lshift+0xd8>)
 8008482:	482b      	ldr	r0, [pc, #172]	; (8008530 <__lshift+0xdc>)
 8008484:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008488:	f000 fab2 	bl	80089f0 <__assert_func>
 800848c:	3101      	adds	r1, #1
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	e7ee      	b.n	8008470 <__lshift+0x1c>
 8008492:	2300      	movs	r3, #0
 8008494:	f100 0114 	add.w	r1, r0, #20
 8008498:	f100 0210 	add.w	r2, r0, #16
 800849c:	4618      	mov	r0, r3
 800849e:	4553      	cmp	r3, sl
 80084a0:	db37      	blt.n	8008512 <__lshift+0xbe>
 80084a2:	6920      	ldr	r0, [r4, #16]
 80084a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084a8:	f104 0314 	add.w	r3, r4, #20
 80084ac:	f019 091f 	ands.w	r9, r9, #31
 80084b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084b8:	d02f      	beq.n	800851a <__lshift+0xc6>
 80084ba:	f1c9 0e20 	rsb	lr, r9, #32
 80084be:	468a      	mov	sl, r1
 80084c0:	f04f 0c00 	mov.w	ip, #0
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	fa02 f209 	lsl.w	r2, r2, r9
 80084ca:	ea42 020c 	orr.w	r2, r2, ip
 80084ce:	f84a 2b04 	str.w	r2, [sl], #4
 80084d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d6:	4298      	cmp	r0, r3
 80084d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084dc:	d8f2      	bhi.n	80084c4 <__lshift+0x70>
 80084de:	1b03      	subs	r3, r0, r4
 80084e0:	3b15      	subs	r3, #21
 80084e2:	f023 0303 	bic.w	r3, r3, #3
 80084e6:	3304      	adds	r3, #4
 80084e8:	f104 0215 	add.w	r2, r4, #21
 80084ec:	4290      	cmp	r0, r2
 80084ee:	bf38      	it	cc
 80084f0:	2304      	movcc	r3, #4
 80084f2:	f841 c003 	str.w	ip, [r1, r3]
 80084f6:	f1bc 0f00 	cmp.w	ip, #0
 80084fa:	d001      	beq.n	8008500 <__lshift+0xac>
 80084fc:	f108 0602 	add.w	r6, r8, #2
 8008500:	3e01      	subs	r6, #1
 8008502:	4638      	mov	r0, r7
 8008504:	612e      	str	r6, [r5, #16]
 8008506:	4621      	mov	r1, r4
 8008508:	f7ff fdd2 	bl	80080b0 <_Bfree>
 800850c:	4628      	mov	r0, r5
 800850e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008512:	f842 0f04 	str.w	r0, [r2, #4]!
 8008516:	3301      	adds	r3, #1
 8008518:	e7c1      	b.n	800849e <__lshift+0x4a>
 800851a:	3904      	subs	r1, #4
 800851c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008520:	f841 2f04 	str.w	r2, [r1, #4]!
 8008524:	4298      	cmp	r0, r3
 8008526:	d8f9      	bhi.n	800851c <__lshift+0xc8>
 8008528:	e7ea      	b.n	8008500 <__lshift+0xac>
 800852a:	bf00      	nop
 800852c:	080094a7 	.word	0x080094a7
 8008530:	08009518 	.word	0x08009518

08008534 <__mcmp>:
 8008534:	b530      	push	{r4, r5, lr}
 8008536:	6902      	ldr	r2, [r0, #16]
 8008538:	690c      	ldr	r4, [r1, #16]
 800853a:	1b12      	subs	r2, r2, r4
 800853c:	d10e      	bne.n	800855c <__mcmp+0x28>
 800853e:	f100 0314 	add.w	r3, r0, #20
 8008542:	3114      	adds	r1, #20
 8008544:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800854c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008550:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008554:	42a5      	cmp	r5, r4
 8008556:	d003      	beq.n	8008560 <__mcmp+0x2c>
 8008558:	d305      	bcc.n	8008566 <__mcmp+0x32>
 800855a:	2201      	movs	r2, #1
 800855c:	4610      	mov	r0, r2
 800855e:	bd30      	pop	{r4, r5, pc}
 8008560:	4283      	cmp	r3, r0
 8008562:	d3f3      	bcc.n	800854c <__mcmp+0x18>
 8008564:	e7fa      	b.n	800855c <__mcmp+0x28>
 8008566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800856a:	e7f7      	b.n	800855c <__mcmp+0x28>

0800856c <__mdiff>:
 800856c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	460c      	mov	r4, r1
 8008572:	4606      	mov	r6, r0
 8008574:	4611      	mov	r1, r2
 8008576:	4620      	mov	r0, r4
 8008578:	4690      	mov	r8, r2
 800857a:	f7ff ffdb 	bl	8008534 <__mcmp>
 800857e:	1e05      	subs	r5, r0, #0
 8008580:	d110      	bne.n	80085a4 <__mdiff+0x38>
 8008582:	4629      	mov	r1, r5
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff fd53 	bl	8008030 <_Balloc>
 800858a:	b930      	cbnz	r0, 800859a <__mdiff+0x2e>
 800858c:	4b3a      	ldr	r3, [pc, #232]	; (8008678 <__mdiff+0x10c>)
 800858e:	4602      	mov	r2, r0
 8008590:	f240 2132 	movw	r1, #562	; 0x232
 8008594:	4839      	ldr	r0, [pc, #228]	; (800867c <__mdiff+0x110>)
 8008596:	f000 fa2b 	bl	80089f0 <__assert_func>
 800859a:	2301      	movs	r3, #1
 800859c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a4:	bfa4      	itt	ge
 80085a6:	4643      	movge	r3, r8
 80085a8:	46a0      	movge	r8, r4
 80085aa:	4630      	mov	r0, r6
 80085ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085b0:	bfa6      	itte	ge
 80085b2:	461c      	movge	r4, r3
 80085b4:	2500      	movge	r5, #0
 80085b6:	2501      	movlt	r5, #1
 80085b8:	f7ff fd3a 	bl	8008030 <_Balloc>
 80085bc:	b920      	cbnz	r0, 80085c8 <__mdiff+0x5c>
 80085be:	4b2e      	ldr	r3, [pc, #184]	; (8008678 <__mdiff+0x10c>)
 80085c0:	4602      	mov	r2, r0
 80085c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085c6:	e7e5      	b.n	8008594 <__mdiff+0x28>
 80085c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085cc:	6926      	ldr	r6, [r4, #16]
 80085ce:	60c5      	str	r5, [r0, #12]
 80085d0:	f104 0914 	add.w	r9, r4, #20
 80085d4:	f108 0514 	add.w	r5, r8, #20
 80085d8:	f100 0e14 	add.w	lr, r0, #20
 80085dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085e4:	f108 0210 	add.w	r2, r8, #16
 80085e8:	46f2      	mov	sl, lr
 80085ea:	2100      	movs	r1, #0
 80085ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80085f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085f4:	fa1f f883 	uxth.w	r8, r3
 80085f8:	fa11 f18b 	uxtah	r1, r1, fp
 80085fc:	0c1b      	lsrs	r3, r3, #16
 80085fe:	eba1 0808 	sub.w	r8, r1, r8
 8008602:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008606:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800860a:	fa1f f888 	uxth.w	r8, r8
 800860e:	1419      	asrs	r1, r3, #16
 8008610:	454e      	cmp	r6, r9
 8008612:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008616:	f84a 3b04 	str.w	r3, [sl], #4
 800861a:	d8e7      	bhi.n	80085ec <__mdiff+0x80>
 800861c:	1b33      	subs	r3, r6, r4
 800861e:	3b15      	subs	r3, #21
 8008620:	f023 0303 	bic.w	r3, r3, #3
 8008624:	3304      	adds	r3, #4
 8008626:	3415      	adds	r4, #21
 8008628:	42a6      	cmp	r6, r4
 800862a:	bf38      	it	cc
 800862c:	2304      	movcc	r3, #4
 800862e:	441d      	add	r5, r3
 8008630:	4473      	add	r3, lr
 8008632:	469e      	mov	lr, r3
 8008634:	462e      	mov	r6, r5
 8008636:	4566      	cmp	r6, ip
 8008638:	d30e      	bcc.n	8008658 <__mdiff+0xec>
 800863a:	f10c 0203 	add.w	r2, ip, #3
 800863e:	1b52      	subs	r2, r2, r5
 8008640:	f022 0203 	bic.w	r2, r2, #3
 8008644:	3d03      	subs	r5, #3
 8008646:	45ac      	cmp	ip, r5
 8008648:	bf38      	it	cc
 800864a:	2200      	movcc	r2, #0
 800864c:	441a      	add	r2, r3
 800864e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008652:	b17b      	cbz	r3, 8008674 <__mdiff+0x108>
 8008654:	6107      	str	r7, [r0, #16]
 8008656:	e7a3      	b.n	80085a0 <__mdiff+0x34>
 8008658:	f856 8b04 	ldr.w	r8, [r6], #4
 800865c:	fa11 f288 	uxtah	r2, r1, r8
 8008660:	1414      	asrs	r4, r2, #16
 8008662:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008666:	b292      	uxth	r2, r2
 8008668:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800866c:	f84e 2b04 	str.w	r2, [lr], #4
 8008670:	1421      	asrs	r1, r4, #16
 8008672:	e7e0      	b.n	8008636 <__mdiff+0xca>
 8008674:	3f01      	subs	r7, #1
 8008676:	e7ea      	b.n	800864e <__mdiff+0xe2>
 8008678:	080094a7 	.word	0x080094a7
 800867c:	08009518 	.word	0x08009518

08008680 <__d2b>:
 8008680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008684:	4689      	mov	r9, r1
 8008686:	2101      	movs	r1, #1
 8008688:	ec57 6b10 	vmov	r6, r7, d0
 800868c:	4690      	mov	r8, r2
 800868e:	f7ff fccf 	bl	8008030 <_Balloc>
 8008692:	4604      	mov	r4, r0
 8008694:	b930      	cbnz	r0, 80086a4 <__d2b+0x24>
 8008696:	4602      	mov	r2, r0
 8008698:	4b25      	ldr	r3, [pc, #148]	; (8008730 <__d2b+0xb0>)
 800869a:	4826      	ldr	r0, [pc, #152]	; (8008734 <__d2b+0xb4>)
 800869c:	f240 310a 	movw	r1, #778	; 0x30a
 80086a0:	f000 f9a6 	bl	80089f0 <__assert_func>
 80086a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086ac:	bb35      	cbnz	r5, 80086fc <__d2b+0x7c>
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	d028      	beq.n	8008706 <__d2b+0x86>
 80086b4:	4668      	mov	r0, sp
 80086b6:	9600      	str	r6, [sp, #0]
 80086b8:	f7ff fd82 	bl	80081c0 <__lo0bits>
 80086bc:	9900      	ldr	r1, [sp, #0]
 80086be:	b300      	cbz	r0, 8008702 <__d2b+0x82>
 80086c0:	9a01      	ldr	r2, [sp, #4]
 80086c2:	f1c0 0320 	rsb	r3, r0, #32
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	430b      	orrs	r3, r1
 80086cc:	40c2      	lsrs	r2, r0
 80086ce:	6163      	str	r3, [r4, #20]
 80086d0:	9201      	str	r2, [sp, #4]
 80086d2:	9b01      	ldr	r3, [sp, #4]
 80086d4:	61a3      	str	r3, [r4, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2202      	movne	r2, #2
 80086dc:	2201      	moveq	r2, #1
 80086de:	6122      	str	r2, [r4, #16]
 80086e0:	b1d5      	cbz	r5, 8008718 <__d2b+0x98>
 80086e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086e6:	4405      	add	r5, r0
 80086e8:	f8c9 5000 	str.w	r5, [r9]
 80086ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086f0:	f8c8 0000 	str.w	r0, [r8]
 80086f4:	4620      	mov	r0, r4
 80086f6:	b003      	add	sp, #12
 80086f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008700:	e7d5      	b.n	80086ae <__d2b+0x2e>
 8008702:	6161      	str	r1, [r4, #20]
 8008704:	e7e5      	b.n	80086d2 <__d2b+0x52>
 8008706:	a801      	add	r0, sp, #4
 8008708:	f7ff fd5a 	bl	80081c0 <__lo0bits>
 800870c:	9b01      	ldr	r3, [sp, #4]
 800870e:	6163      	str	r3, [r4, #20]
 8008710:	2201      	movs	r2, #1
 8008712:	6122      	str	r2, [r4, #16]
 8008714:	3020      	adds	r0, #32
 8008716:	e7e3      	b.n	80086e0 <__d2b+0x60>
 8008718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800871c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008720:	f8c9 0000 	str.w	r0, [r9]
 8008724:	6918      	ldr	r0, [r3, #16]
 8008726:	f7ff fd2b 	bl	8008180 <__hi0bits>
 800872a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800872e:	e7df      	b.n	80086f0 <__d2b+0x70>
 8008730:	080094a7 	.word	0x080094a7
 8008734:	08009518 	.word	0x08009518

08008738 <_calloc_r>:
 8008738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800873a:	fba1 2402 	umull	r2, r4, r1, r2
 800873e:	b94c      	cbnz	r4, 8008754 <_calloc_r+0x1c>
 8008740:	4611      	mov	r1, r2
 8008742:	9201      	str	r2, [sp, #4]
 8008744:	f000 f87a 	bl	800883c <_malloc_r>
 8008748:	9a01      	ldr	r2, [sp, #4]
 800874a:	4605      	mov	r5, r0
 800874c:	b930      	cbnz	r0, 800875c <_calloc_r+0x24>
 800874e:	4628      	mov	r0, r5
 8008750:	b003      	add	sp, #12
 8008752:	bd30      	pop	{r4, r5, pc}
 8008754:	220c      	movs	r2, #12
 8008756:	6002      	str	r2, [r0, #0]
 8008758:	2500      	movs	r5, #0
 800875a:	e7f8      	b.n	800874e <_calloc_r+0x16>
 800875c:	4621      	mov	r1, r4
 800875e:	f7fd ff23 	bl	80065a8 <memset>
 8008762:	e7f4      	b.n	800874e <_calloc_r+0x16>

08008764 <_free_r>:
 8008764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008766:	2900      	cmp	r1, #0
 8008768:	d044      	beq.n	80087f4 <_free_r+0x90>
 800876a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800876e:	9001      	str	r0, [sp, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f1a1 0404 	sub.w	r4, r1, #4
 8008776:	bfb8      	it	lt
 8008778:	18e4      	addlt	r4, r4, r3
 800877a:	f000 f9bf 	bl	8008afc <__malloc_lock>
 800877e:	4a1e      	ldr	r2, [pc, #120]	; (80087f8 <_free_r+0x94>)
 8008780:	9801      	ldr	r0, [sp, #4]
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	b933      	cbnz	r3, 8008794 <_free_r+0x30>
 8008786:	6063      	str	r3, [r4, #4]
 8008788:	6014      	str	r4, [r2, #0]
 800878a:	b003      	add	sp, #12
 800878c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008790:	f000 b9ba 	b.w	8008b08 <__malloc_unlock>
 8008794:	42a3      	cmp	r3, r4
 8008796:	d908      	bls.n	80087aa <_free_r+0x46>
 8008798:	6825      	ldr	r5, [r4, #0]
 800879a:	1961      	adds	r1, r4, r5
 800879c:	428b      	cmp	r3, r1
 800879e:	bf01      	itttt	eq
 80087a0:	6819      	ldreq	r1, [r3, #0]
 80087a2:	685b      	ldreq	r3, [r3, #4]
 80087a4:	1949      	addeq	r1, r1, r5
 80087a6:	6021      	streq	r1, [r4, #0]
 80087a8:	e7ed      	b.n	8008786 <_free_r+0x22>
 80087aa:	461a      	mov	r2, r3
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	b10b      	cbz	r3, 80087b4 <_free_r+0x50>
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	d9fa      	bls.n	80087aa <_free_r+0x46>
 80087b4:	6811      	ldr	r1, [r2, #0]
 80087b6:	1855      	adds	r5, r2, r1
 80087b8:	42a5      	cmp	r5, r4
 80087ba:	d10b      	bne.n	80087d4 <_free_r+0x70>
 80087bc:	6824      	ldr	r4, [r4, #0]
 80087be:	4421      	add	r1, r4
 80087c0:	1854      	adds	r4, r2, r1
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	d1e0      	bne.n	800878a <_free_r+0x26>
 80087c8:	681c      	ldr	r4, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	6053      	str	r3, [r2, #4]
 80087ce:	4421      	add	r1, r4
 80087d0:	6011      	str	r1, [r2, #0]
 80087d2:	e7da      	b.n	800878a <_free_r+0x26>
 80087d4:	d902      	bls.n	80087dc <_free_r+0x78>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	e7d6      	b.n	800878a <_free_r+0x26>
 80087dc:	6825      	ldr	r5, [r4, #0]
 80087de:	1961      	adds	r1, r4, r5
 80087e0:	428b      	cmp	r3, r1
 80087e2:	bf04      	itt	eq
 80087e4:	6819      	ldreq	r1, [r3, #0]
 80087e6:	685b      	ldreq	r3, [r3, #4]
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	bf04      	itt	eq
 80087ec:	1949      	addeq	r1, r1, r5
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	6054      	str	r4, [r2, #4]
 80087f2:	e7ca      	b.n	800878a <_free_r+0x26>
 80087f4:	b003      	add	sp, #12
 80087f6:	bd30      	pop	{r4, r5, pc}
 80087f8:	20000488 	.word	0x20000488

080087fc <sbrk_aligned>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	4e0e      	ldr	r6, [pc, #56]	; (8008838 <sbrk_aligned+0x3c>)
 8008800:	460c      	mov	r4, r1
 8008802:	6831      	ldr	r1, [r6, #0]
 8008804:	4605      	mov	r5, r0
 8008806:	b911      	cbnz	r1, 800880e <sbrk_aligned+0x12>
 8008808:	f000 f88c 	bl	8008924 <_sbrk_r>
 800880c:	6030      	str	r0, [r6, #0]
 800880e:	4621      	mov	r1, r4
 8008810:	4628      	mov	r0, r5
 8008812:	f000 f887 	bl	8008924 <_sbrk_r>
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	d00a      	beq.n	8008830 <sbrk_aligned+0x34>
 800881a:	1cc4      	adds	r4, r0, #3
 800881c:	f024 0403 	bic.w	r4, r4, #3
 8008820:	42a0      	cmp	r0, r4
 8008822:	d007      	beq.n	8008834 <sbrk_aligned+0x38>
 8008824:	1a21      	subs	r1, r4, r0
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f87c 	bl	8008924 <_sbrk_r>
 800882c:	3001      	adds	r0, #1
 800882e:	d101      	bne.n	8008834 <sbrk_aligned+0x38>
 8008830:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008834:	4620      	mov	r0, r4
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	2000048c 	.word	0x2000048c

0800883c <_malloc_r>:
 800883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008840:	1ccd      	adds	r5, r1, #3
 8008842:	f025 0503 	bic.w	r5, r5, #3
 8008846:	3508      	adds	r5, #8
 8008848:	2d0c      	cmp	r5, #12
 800884a:	bf38      	it	cc
 800884c:	250c      	movcc	r5, #12
 800884e:	2d00      	cmp	r5, #0
 8008850:	4607      	mov	r7, r0
 8008852:	db01      	blt.n	8008858 <_malloc_r+0x1c>
 8008854:	42a9      	cmp	r1, r5
 8008856:	d905      	bls.n	8008864 <_malloc_r+0x28>
 8008858:	230c      	movs	r3, #12
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	2600      	movs	r6, #0
 800885e:	4630      	mov	r0, r6
 8008860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008864:	4e2e      	ldr	r6, [pc, #184]	; (8008920 <_malloc_r+0xe4>)
 8008866:	f000 f949 	bl	8008afc <__malloc_lock>
 800886a:	6833      	ldr	r3, [r6, #0]
 800886c:	461c      	mov	r4, r3
 800886e:	bb34      	cbnz	r4, 80088be <_malloc_r+0x82>
 8008870:	4629      	mov	r1, r5
 8008872:	4638      	mov	r0, r7
 8008874:	f7ff ffc2 	bl	80087fc <sbrk_aligned>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	4604      	mov	r4, r0
 800887c:	d14d      	bne.n	800891a <_malloc_r+0xde>
 800887e:	6834      	ldr	r4, [r6, #0]
 8008880:	4626      	mov	r6, r4
 8008882:	2e00      	cmp	r6, #0
 8008884:	d140      	bne.n	8008908 <_malloc_r+0xcc>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	4631      	mov	r1, r6
 800888a:	4638      	mov	r0, r7
 800888c:	eb04 0803 	add.w	r8, r4, r3
 8008890:	f000 f848 	bl	8008924 <_sbrk_r>
 8008894:	4580      	cmp	r8, r0
 8008896:	d13a      	bne.n	800890e <_malloc_r+0xd2>
 8008898:	6821      	ldr	r1, [r4, #0]
 800889a:	3503      	adds	r5, #3
 800889c:	1a6d      	subs	r5, r5, r1
 800889e:	f025 0503 	bic.w	r5, r5, #3
 80088a2:	3508      	adds	r5, #8
 80088a4:	2d0c      	cmp	r5, #12
 80088a6:	bf38      	it	cc
 80088a8:	250c      	movcc	r5, #12
 80088aa:	4629      	mov	r1, r5
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff ffa5 	bl	80087fc <sbrk_aligned>
 80088b2:	3001      	adds	r0, #1
 80088b4:	d02b      	beq.n	800890e <_malloc_r+0xd2>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	442b      	add	r3, r5
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	e00e      	b.n	80088dc <_malloc_r+0xa0>
 80088be:	6822      	ldr	r2, [r4, #0]
 80088c0:	1b52      	subs	r2, r2, r5
 80088c2:	d41e      	bmi.n	8008902 <_malloc_r+0xc6>
 80088c4:	2a0b      	cmp	r2, #11
 80088c6:	d916      	bls.n	80088f6 <_malloc_r+0xba>
 80088c8:	1961      	adds	r1, r4, r5
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	6025      	str	r5, [r4, #0]
 80088ce:	bf18      	it	ne
 80088d0:	6059      	strne	r1, [r3, #4]
 80088d2:	6863      	ldr	r3, [r4, #4]
 80088d4:	bf08      	it	eq
 80088d6:	6031      	streq	r1, [r6, #0]
 80088d8:	5162      	str	r2, [r4, r5]
 80088da:	604b      	str	r3, [r1, #4]
 80088dc:	4638      	mov	r0, r7
 80088de:	f104 060b 	add.w	r6, r4, #11
 80088e2:	f000 f911 	bl	8008b08 <__malloc_unlock>
 80088e6:	f026 0607 	bic.w	r6, r6, #7
 80088ea:	1d23      	adds	r3, r4, #4
 80088ec:	1af2      	subs	r2, r6, r3
 80088ee:	d0b6      	beq.n	800885e <_malloc_r+0x22>
 80088f0:	1b9b      	subs	r3, r3, r6
 80088f2:	50a3      	str	r3, [r4, r2]
 80088f4:	e7b3      	b.n	800885e <_malloc_r+0x22>
 80088f6:	6862      	ldr	r2, [r4, #4]
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	bf0c      	ite	eq
 80088fc:	6032      	streq	r2, [r6, #0]
 80088fe:	605a      	strne	r2, [r3, #4]
 8008900:	e7ec      	b.n	80088dc <_malloc_r+0xa0>
 8008902:	4623      	mov	r3, r4
 8008904:	6864      	ldr	r4, [r4, #4]
 8008906:	e7b2      	b.n	800886e <_malloc_r+0x32>
 8008908:	4634      	mov	r4, r6
 800890a:	6876      	ldr	r6, [r6, #4]
 800890c:	e7b9      	b.n	8008882 <_malloc_r+0x46>
 800890e:	230c      	movs	r3, #12
 8008910:	603b      	str	r3, [r7, #0]
 8008912:	4638      	mov	r0, r7
 8008914:	f000 f8f8 	bl	8008b08 <__malloc_unlock>
 8008918:	e7a1      	b.n	800885e <_malloc_r+0x22>
 800891a:	6025      	str	r5, [r4, #0]
 800891c:	e7de      	b.n	80088dc <_malloc_r+0xa0>
 800891e:	bf00      	nop
 8008920:	20000488 	.word	0x20000488

08008924 <_sbrk_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_sbrk_r+0x1c>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7f9 fc00 	bl	8002134 <_sbrk>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_sbrk_r+0x1a>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_sbrk_r+0x1a>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20000490 	.word	0x20000490

08008944 <__sread>:
 8008944:	b510      	push	{r4, lr}
 8008946:	460c      	mov	r4, r1
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	f000 fa3c 	bl	8008dc8 <_read_r>
 8008950:	2800      	cmp	r0, #0
 8008952:	bfab      	itete	ge
 8008954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008956:	89a3      	ldrhlt	r3, [r4, #12]
 8008958:	181b      	addge	r3, r3, r0
 800895a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800895e:	bfac      	ite	ge
 8008960:	6563      	strge	r3, [r4, #84]	; 0x54
 8008962:	81a3      	strhlt	r3, [r4, #12]
 8008964:	bd10      	pop	{r4, pc}

08008966 <__swrite>:
 8008966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	461f      	mov	r7, r3
 800896c:	898b      	ldrh	r3, [r1, #12]
 800896e:	05db      	lsls	r3, r3, #23
 8008970:	4605      	mov	r5, r0
 8008972:	460c      	mov	r4, r1
 8008974:	4616      	mov	r6, r2
 8008976:	d505      	bpl.n	8008984 <__swrite+0x1e>
 8008978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897c:	2302      	movs	r3, #2
 800897e:	2200      	movs	r2, #0
 8008980:	f000 f898 	bl	8008ab4 <_lseek_r>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800898a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	4632      	mov	r2, r6
 8008992:	463b      	mov	r3, r7
 8008994:	4628      	mov	r0, r5
 8008996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	f000 b817 	b.w	80089cc <_write_r>

0800899e <__sseek>:
 800899e:	b510      	push	{r4, lr}
 80089a0:	460c      	mov	r4, r1
 80089a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a6:	f000 f885 	bl	8008ab4 <_lseek_r>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	bf15      	itete	ne
 80089b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ba:	81a3      	strheq	r3, [r4, #12]
 80089bc:	bf18      	it	ne
 80089be:	81a3      	strhne	r3, [r4, #12]
 80089c0:	bd10      	pop	{r4, pc}

080089c2 <__sclose>:
 80089c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c6:	f000 b831 	b.w	8008a2c <_close_r>
	...

080089cc <_write_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d07      	ldr	r5, [pc, #28]	; (80089ec <_write_r+0x20>)
 80089d0:	4604      	mov	r4, r0
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	602a      	str	r2, [r5, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f7f9 f95e 	bl	8001c9c <_write>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_write_r+0x1e>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_write_r+0x1e>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000490 	.word	0x20000490

080089f0 <__assert_func>:
 80089f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089f2:	4614      	mov	r4, r2
 80089f4:	461a      	mov	r2, r3
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <__assert_func+0x2c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4605      	mov	r5, r0
 80089fc:	68d8      	ldr	r0, [r3, #12]
 80089fe:	b14c      	cbz	r4, 8008a14 <__assert_func+0x24>
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <__assert_func+0x30>)
 8008a02:	9100      	str	r1, [sp, #0]
 8008a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a08:	4906      	ldr	r1, [pc, #24]	; (8008a24 <__assert_func+0x34>)
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	f000 f81e 	bl	8008a4c <fiprintf>
 8008a10:	f000 faba 	bl	8008f88 <abort>
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <__assert_func+0x38>)
 8008a16:	461c      	mov	r4, r3
 8008a18:	e7f3      	b.n	8008a02 <__assert_func+0x12>
 8008a1a:	bf00      	nop
 8008a1c:	2000000c 	.word	0x2000000c
 8008a20:	08009674 	.word	0x08009674
 8008a24:	08009681 	.word	0x08009681
 8008a28:	080096af 	.word	0x080096af

08008a2c <_close_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_close_r+0x1c>)
 8008a30:	2300      	movs	r3, #0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7f9 f95a 	bl	8001cf0 <_close>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_close_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_close_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	20000490 	.word	0x20000490

08008a4c <fiprintf>:
 8008a4c:	b40e      	push	{r1, r2, r3}
 8008a4e:	b503      	push	{r0, r1, lr}
 8008a50:	4601      	mov	r1, r0
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	4805      	ldr	r0, [pc, #20]	; (8008a6c <fiprintf+0x20>)
 8008a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	f000 f883 	bl	8008b68 <_vfiprintf_r>
 8008a62:	b002      	add	sp, #8
 8008a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a68:	b003      	add	sp, #12
 8008a6a:	4770      	bx	lr
 8008a6c:	2000000c 	.word	0x2000000c

08008a70 <_fstat_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d07      	ldr	r5, [pc, #28]	; (8008a90 <_fstat_r+0x20>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	602b      	str	r3, [r5, #0]
 8008a7e:	f7f9 f987 	bl	8001d90 <_fstat>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	d102      	bne.n	8008a8c <_fstat_r+0x1c>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	b103      	cbz	r3, 8008a8c <_fstat_r+0x1c>
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	bd38      	pop	{r3, r4, r5, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000490 	.word	0x20000490

08008a94 <_isatty_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d06      	ldr	r5, [pc, #24]	; (8008ab0 <_isatty_r+0x1c>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7f9 f8e6 	bl	8001c70 <_isatty>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_isatty_r+0x1a>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_isatty_r+0x1a>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20000490 	.word	0x20000490

08008ab4 <_lseek_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d07      	ldr	r5, [pc, #28]	; (8008ad4 <_lseek_r+0x20>)
 8008ab8:	4604      	mov	r4, r0
 8008aba:	4608      	mov	r0, r1
 8008abc:	4611      	mov	r1, r2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	602a      	str	r2, [r5, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f7f9 f92b 	bl	8001d1e <_lseek>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_lseek_r+0x1e>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_lseek_r+0x1e>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	20000490 	.word	0x20000490

08008ad8 <__ascii_mbtowc>:
 8008ad8:	b082      	sub	sp, #8
 8008ada:	b901      	cbnz	r1, 8008ade <__ascii_mbtowc+0x6>
 8008adc:	a901      	add	r1, sp, #4
 8008ade:	b142      	cbz	r2, 8008af2 <__ascii_mbtowc+0x1a>
 8008ae0:	b14b      	cbz	r3, 8008af6 <__ascii_mbtowc+0x1e>
 8008ae2:	7813      	ldrb	r3, [r2, #0]
 8008ae4:	600b      	str	r3, [r1, #0]
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	1e10      	subs	r0, r2, #0
 8008aea:	bf18      	it	ne
 8008aec:	2001      	movne	r0, #1
 8008aee:	b002      	add	sp, #8
 8008af0:	4770      	bx	lr
 8008af2:	4610      	mov	r0, r2
 8008af4:	e7fb      	b.n	8008aee <__ascii_mbtowc+0x16>
 8008af6:	f06f 0001 	mvn.w	r0, #1
 8008afa:	e7f8      	b.n	8008aee <__ascii_mbtowc+0x16>

08008afc <__malloc_lock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_lock+0x8>)
 8008afe:	f7ff ba1a 	b.w	8007f36 <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	20000484 	.word	0x20000484

08008b08 <__malloc_unlock>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__malloc_unlock+0x8>)
 8008b0a:	f7ff ba15 	b.w	8007f38 <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20000484 	.word	0x20000484

08008b14 <__sfputc_r>:
 8008b14:	6893      	ldr	r3, [r2, #8]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	b410      	push	{r4}
 8008b1c:	6093      	str	r3, [r2, #8]
 8008b1e:	da08      	bge.n	8008b32 <__sfputc_r+0x1e>
 8008b20:	6994      	ldr	r4, [r2, #24]
 8008b22:	42a3      	cmp	r3, r4
 8008b24:	db01      	blt.n	8008b2a <__sfputc_r+0x16>
 8008b26:	290a      	cmp	r1, #10
 8008b28:	d103      	bne.n	8008b32 <__sfputc_r+0x1e>
 8008b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b2e:	f000 b95d 	b.w	8008dec <__swbuf_r>
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	1c58      	adds	r0, r3, #1
 8008b36:	6010      	str	r0, [r2, #0]
 8008b38:	7019      	strb	r1, [r3, #0]
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <__sfputs_r>:
 8008b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	4614      	mov	r4, r2
 8008b4a:	18d5      	adds	r5, r2, r3
 8008b4c:	42ac      	cmp	r4, r5
 8008b4e:	d101      	bne.n	8008b54 <__sfputs_r+0x12>
 8008b50:	2000      	movs	r0, #0
 8008b52:	e007      	b.n	8008b64 <__sfputs_r+0x22>
 8008b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b58:	463a      	mov	r2, r7
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ffda 	bl	8008b14 <__sfputc_r>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d1f3      	bne.n	8008b4c <__sfputs_r+0xa>
 8008b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b68 <_vfiprintf_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	b09d      	sub	sp, #116	; 0x74
 8008b70:	4614      	mov	r4, r2
 8008b72:	4698      	mov	r8, r3
 8008b74:	4606      	mov	r6, r0
 8008b76:	b118      	cbz	r0, 8008b80 <_vfiprintf_r+0x18>
 8008b78:	6983      	ldr	r3, [r0, #24]
 8008b7a:	b90b      	cbnz	r3, 8008b80 <_vfiprintf_r+0x18>
 8008b7c:	f7ff f938 	bl	8007df0 <__sinit>
 8008b80:	4b89      	ldr	r3, [pc, #548]	; (8008da8 <_vfiprintf_r+0x240>)
 8008b82:	429d      	cmp	r5, r3
 8008b84:	d11b      	bne.n	8008bbe <_vfiprintf_r+0x56>
 8008b86:	6875      	ldr	r5, [r6, #4]
 8008b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	d405      	bmi.n	8008b9a <_vfiprintf_r+0x32>
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	059a      	lsls	r2, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_vfiprintf_r+0x32>
 8008b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b96:	f7ff f9ce 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	071b      	lsls	r3, r3, #28
 8008b9e:	d501      	bpl.n	8008ba4 <_vfiprintf_r+0x3c>
 8008ba0:	692b      	ldr	r3, [r5, #16]
 8008ba2:	b9eb      	cbnz	r3, 8008be0 <_vfiprintf_r+0x78>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 f980 	bl	8008eac <__swsetup_r>
 8008bac:	b1c0      	cbz	r0, 8008be0 <_vfiprintf_r+0x78>
 8008bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb0:	07dc      	lsls	r4, r3, #31
 8008bb2:	d50e      	bpl.n	8008bd2 <_vfiprintf_r+0x6a>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb8:	b01d      	add	sp, #116	; 0x74
 8008bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbe:	4b7b      	ldr	r3, [pc, #492]	; (8008dac <_vfiprintf_r+0x244>)
 8008bc0:	429d      	cmp	r5, r3
 8008bc2:	d101      	bne.n	8008bc8 <_vfiprintf_r+0x60>
 8008bc4:	68b5      	ldr	r5, [r6, #8]
 8008bc6:	e7df      	b.n	8008b88 <_vfiprintf_r+0x20>
 8008bc8:	4b79      	ldr	r3, [pc, #484]	; (8008db0 <_vfiprintf_r+0x248>)
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	bf08      	it	eq
 8008bce:	68f5      	ldreq	r5, [r6, #12]
 8008bd0:	e7da      	b.n	8008b88 <_vfiprintf_r+0x20>
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	0598      	lsls	r0, r3, #22
 8008bd6:	d4ed      	bmi.n	8008bb4 <_vfiprintf_r+0x4c>
 8008bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bda:	f7ff f9ad 	bl	8007f38 <__retarget_lock_release_recursive>
 8008bde:	e7e9      	b.n	8008bb4 <_vfiprintf_r+0x4c>
 8008be0:	2300      	movs	r3, #0
 8008be2:	9309      	str	r3, [sp, #36]	; 0x24
 8008be4:	2320      	movs	r3, #32
 8008be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bee:	2330      	movs	r3, #48	; 0x30
 8008bf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008db4 <_vfiprintf_r+0x24c>
 8008bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bf8:	f04f 0901 	mov.w	r9, #1
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	469a      	mov	sl, r3
 8008c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c04:	b10a      	cbz	r2, 8008c0a <_vfiprintf_r+0xa2>
 8008c06:	2a25      	cmp	r2, #37	; 0x25
 8008c08:	d1f9      	bne.n	8008bfe <_vfiprintf_r+0x96>
 8008c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c0e:	d00b      	beq.n	8008c28 <_vfiprintf_r+0xc0>
 8008c10:	465b      	mov	r3, fp
 8008c12:	4622      	mov	r2, r4
 8008c14:	4629      	mov	r1, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	f7ff ff93 	bl	8008b42 <__sfputs_r>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f000 80aa 	beq.w	8008d76 <_vfiprintf_r+0x20e>
 8008c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c24:	445a      	add	r2, fp
 8008c26:	9209      	str	r2, [sp, #36]	; 0x24
 8008c28:	f89a 3000 	ldrb.w	r3, [sl]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80a2 	beq.w	8008d76 <_vfiprintf_r+0x20e>
 8008c32:	2300      	movs	r3, #0
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c3c:	f10a 0a01 	add.w	sl, sl, #1
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c48:	931a      	str	r3, [sp, #104]	; 0x68
 8008c4a:	4654      	mov	r4, sl
 8008c4c:	2205      	movs	r2, #5
 8008c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c52:	4858      	ldr	r0, [pc, #352]	; (8008db4 <_vfiprintf_r+0x24c>)
 8008c54:	f7f7 fafc 	bl	8000250 <memchr>
 8008c58:	9a04      	ldr	r2, [sp, #16]
 8008c5a:	b9d8      	cbnz	r0, 8008c94 <_vfiprintf_r+0x12c>
 8008c5c:	06d1      	lsls	r1, r2, #27
 8008c5e:	bf44      	itt	mi
 8008c60:	2320      	movmi	r3, #32
 8008c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c66:	0713      	lsls	r3, r2, #28
 8008c68:	bf44      	itt	mi
 8008c6a:	232b      	movmi	r3, #43	; 0x2b
 8008c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c70:	f89a 3000 	ldrb.w	r3, [sl]
 8008c74:	2b2a      	cmp	r3, #42	; 0x2a
 8008c76:	d015      	beq.n	8008ca4 <_vfiprintf_r+0x13c>
 8008c78:	9a07      	ldr	r2, [sp, #28]
 8008c7a:	4654      	mov	r4, sl
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	f04f 0c0a 	mov.w	ip, #10
 8008c82:	4621      	mov	r1, r4
 8008c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c88:	3b30      	subs	r3, #48	; 0x30
 8008c8a:	2b09      	cmp	r3, #9
 8008c8c:	d94e      	bls.n	8008d2c <_vfiprintf_r+0x1c4>
 8008c8e:	b1b0      	cbz	r0, 8008cbe <_vfiprintf_r+0x156>
 8008c90:	9207      	str	r2, [sp, #28]
 8008c92:	e014      	b.n	8008cbe <_vfiprintf_r+0x156>
 8008c94:	eba0 0308 	sub.w	r3, r0, r8
 8008c98:	fa09 f303 	lsl.w	r3, r9, r3
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	46a2      	mov	sl, r4
 8008ca2:	e7d2      	b.n	8008c4a <_vfiprintf_r+0xe2>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	1d19      	adds	r1, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	9103      	str	r1, [sp, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bfbb      	ittet	lt
 8008cb0:	425b      	neglt	r3, r3
 8008cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb6:	9307      	strge	r3, [sp, #28]
 8008cb8:	9307      	strlt	r3, [sp, #28]
 8008cba:	bfb8      	it	lt
 8008cbc:	9204      	strlt	r2, [sp, #16]
 8008cbe:	7823      	ldrb	r3, [r4, #0]
 8008cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cc2:	d10c      	bne.n	8008cde <_vfiprintf_r+0x176>
 8008cc4:	7863      	ldrb	r3, [r4, #1]
 8008cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc8:	d135      	bne.n	8008d36 <_vfiprintf_r+0x1ce>
 8008cca:	9b03      	ldr	r3, [sp, #12]
 8008ccc:	1d1a      	adds	r2, r3, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	9203      	str	r2, [sp, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bfb8      	it	lt
 8008cd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cda:	3402      	adds	r4, #2
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dc4 <_vfiprintf_r+0x25c>
 8008ce2:	7821      	ldrb	r1, [r4, #0]
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	f7f7 fab2 	bl	8000250 <memchr>
 8008cec:	b140      	cbz	r0, 8008d00 <_vfiprintf_r+0x198>
 8008cee:	2340      	movs	r3, #64	; 0x40
 8008cf0:	eba0 000a 	sub.w	r0, r0, sl
 8008cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	4303      	orrs	r3, r0
 8008cfc:	3401      	adds	r4, #1
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	482c      	ldr	r0, [pc, #176]	; (8008db8 <_vfiprintf_r+0x250>)
 8008d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d0a:	2206      	movs	r2, #6
 8008d0c:	f7f7 faa0 	bl	8000250 <memchr>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d03f      	beq.n	8008d94 <_vfiprintf_r+0x22c>
 8008d14:	4b29      	ldr	r3, [pc, #164]	; (8008dbc <_vfiprintf_r+0x254>)
 8008d16:	bb1b      	cbnz	r3, 8008d60 <_vfiprintf_r+0x1f8>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	3307      	adds	r3, #7
 8008d1c:	f023 0307 	bic.w	r3, r3, #7
 8008d20:	3308      	adds	r3, #8
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d26:	443b      	add	r3, r7
 8008d28:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2a:	e767      	b.n	8008bfc <_vfiprintf_r+0x94>
 8008d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d30:	460c      	mov	r4, r1
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7a5      	b.n	8008c82 <_vfiprintf_r+0x11a>
 8008d36:	2300      	movs	r3, #0
 8008d38:	3401      	adds	r4, #1
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f04f 0c0a 	mov.w	ip, #10
 8008d42:	4620      	mov	r0, r4
 8008d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d48:	3a30      	subs	r2, #48	; 0x30
 8008d4a:	2a09      	cmp	r2, #9
 8008d4c:	d903      	bls.n	8008d56 <_vfiprintf_r+0x1ee>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0c5      	beq.n	8008cde <_vfiprintf_r+0x176>
 8008d52:	9105      	str	r1, [sp, #20]
 8008d54:	e7c3      	b.n	8008cde <_vfiprintf_r+0x176>
 8008d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e7f0      	b.n	8008d42 <_vfiprintf_r+0x1da>
 8008d60:	ab03      	add	r3, sp, #12
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	462a      	mov	r2, r5
 8008d66:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <_vfiprintf_r+0x258>)
 8008d68:	a904      	add	r1, sp, #16
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	f7fd fcb4 	bl	80066d8 <_printf_float>
 8008d70:	4607      	mov	r7, r0
 8008d72:	1c78      	adds	r0, r7, #1
 8008d74:	d1d6      	bne.n	8008d24 <_vfiprintf_r+0x1bc>
 8008d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d78:	07d9      	lsls	r1, r3, #31
 8008d7a:	d405      	bmi.n	8008d88 <_vfiprintf_r+0x220>
 8008d7c:	89ab      	ldrh	r3, [r5, #12]
 8008d7e:	059a      	lsls	r2, r3, #22
 8008d80:	d402      	bmi.n	8008d88 <_vfiprintf_r+0x220>
 8008d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d84:	f7ff f8d8 	bl	8007f38 <__retarget_lock_release_recursive>
 8008d88:	89ab      	ldrh	r3, [r5, #12]
 8008d8a:	065b      	lsls	r3, r3, #25
 8008d8c:	f53f af12 	bmi.w	8008bb4 <_vfiprintf_r+0x4c>
 8008d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d92:	e711      	b.n	8008bb8 <_vfiprintf_r+0x50>
 8008d94:	ab03      	add	r3, sp, #12
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	462a      	mov	r2, r5
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <_vfiprintf_r+0x258>)
 8008d9c:	a904      	add	r1, sp, #16
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7fd ff26 	bl	8006bf0 <_printf_i>
 8008da4:	e7e4      	b.n	8008d70 <_vfiprintf_r+0x208>
 8008da6:	bf00      	nop
 8008da8:	080094d8 	.word	0x080094d8
 8008dac:	080094f8 	.word	0x080094f8
 8008db0:	080094b8 	.word	0x080094b8
 8008db4:	080096ba 	.word	0x080096ba
 8008db8:	080096c4 	.word	0x080096c4
 8008dbc:	080066d9 	.word	0x080066d9
 8008dc0:	08008b43 	.word	0x08008b43
 8008dc4:	080096c0 	.word	0x080096c0

08008dc8 <_read_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4d07      	ldr	r5, [pc, #28]	; (8008de8 <_read_r+0x20>)
 8008dcc:	4604      	mov	r4, r0
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	602a      	str	r2, [r5, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f7f8 ffb2 	bl	8001d40 <_read>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_read_r+0x1e>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_read_r+0x1e>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	20000490 	.word	0x20000490

08008dec <__swbuf_r>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	460e      	mov	r6, r1
 8008df0:	4614      	mov	r4, r2
 8008df2:	4605      	mov	r5, r0
 8008df4:	b118      	cbz	r0, 8008dfe <__swbuf_r+0x12>
 8008df6:	6983      	ldr	r3, [r0, #24]
 8008df8:	b90b      	cbnz	r3, 8008dfe <__swbuf_r+0x12>
 8008dfa:	f7fe fff9 	bl	8007df0 <__sinit>
 8008dfe:	4b21      	ldr	r3, [pc, #132]	; (8008e84 <__swbuf_r+0x98>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	d12b      	bne.n	8008e5c <__swbuf_r+0x70>
 8008e04:	686c      	ldr	r4, [r5, #4]
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	071a      	lsls	r2, r3, #28
 8008e0e:	d52f      	bpl.n	8008e70 <__swbuf_r+0x84>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b36b      	cbz	r3, 8008e70 <__swbuf_r+0x84>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	1ac0      	subs	r0, r0, r3
 8008e1a:	6963      	ldr	r3, [r4, #20]
 8008e1c:	b2f6      	uxtb	r6, r6
 8008e1e:	4283      	cmp	r3, r0
 8008e20:	4637      	mov	r7, r6
 8008e22:	dc04      	bgt.n	8008e2e <__swbuf_r+0x42>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	f7fe ff4e 	bl	8007cc8 <_fflush_r>
 8008e2c:	bb30      	cbnz	r0, 8008e7c <__swbuf_r+0x90>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6963      	ldr	r3, [r4, #20]
 8008e3e:	3001      	adds	r0, #1
 8008e40:	4283      	cmp	r3, r0
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x62>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d506      	bpl.n	8008e58 <__swbuf_r+0x6c>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d104      	bne.n	8008e58 <__swbuf_r+0x6c>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7fe ff39 	bl	8007cc8 <_fflush_r>
 8008e56:	b988      	cbnz	r0, 8008e7c <__swbuf_r+0x90>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <__swbuf_r+0x9c>)
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d101      	bne.n	8008e66 <__swbuf_r+0x7a>
 8008e62:	68ac      	ldr	r4, [r5, #8]
 8008e64:	e7cf      	b.n	8008e06 <__swbuf_r+0x1a>
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <__swbuf_r+0xa0>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	bf08      	it	eq
 8008e6c:	68ec      	ldreq	r4, [r5, #12]
 8008e6e:	e7ca      	b.n	8008e06 <__swbuf_r+0x1a>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f81a 	bl	8008eac <__swsetup_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0cb      	beq.n	8008e14 <__swbuf_r+0x28>
 8008e7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e80:	e7ea      	b.n	8008e58 <__swbuf_r+0x6c>
 8008e82:	bf00      	nop
 8008e84:	080094d8 	.word	0x080094d8
 8008e88:	080094f8 	.word	0x080094f8
 8008e8c:	080094b8 	.word	0x080094b8

08008e90 <__ascii_wctomb>:
 8008e90:	b149      	cbz	r1, 8008ea6 <__ascii_wctomb+0x16>
 8008e92:	2aff      	cmp	r2, #255	; 0xff
 8008e94:	bf85      	ittet	hi
 8008e96:	238a      	movhi	r3, #138	; 0x8a
 8008e98:	6003      	strhi	r3, [r0, #0]
 8008e9a:	700a      	strbls	r2, [r1, #0]
 8008e9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008ea0:	bf98      	it	ls
 8008ea2:	2001      	movls	r0, #1
 8008ea4:	4770      	bx	lr
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4770      	bx	lr
	...

08008eac <__swsetup_r>:
 8008eac:	4b32      	ldr	r3, [pc, #200]	; (8008f78 <__swsetup_r+0xcc>)
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	681d      	ldr	r5, [r3, #0]
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	b125      	cbz	r5, 8008ec2 <__swsetup_r+0x16>
 8008eb8:	69ab      	ldr	r3, [r5, #24]
 8008eba:	b913      	cbnz	r3, 8008ec2 <__swsetup_r+0x16>
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f7fe ff97 	bl	8007df0 <__sinit>
 8008ec2:	4b2e      	ldr	r3, [pc, #184]	; (8008f7c <__swsetup_r+0xd0>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	d10f      	bne.n	8008ee8 <__swsetup_r+0x3c>
 8008ec8:	686c      	ldr	r4, [r5, #4]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed0:	0719      	lsls	r1, r3, #28
 8008ed2:	d42c      	bmi.n	8008f2e <__swsetup_r+0x82>
 8008ed4:	06dd      	lsls	r5, r3, #27
 8008ed6:	d411      	bmi.n	8008efc <__swsetup_r+0x50>
 8008ed8:	2309      	movs	r3, #9
 8008eda:	6033      	str	r3, [r6, #0]
 8008edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee6:	e03e      	b.n	8008f66 <__swsetup_r+0xba>
 8008ee8:	4b25      	ldr	r3, [pc, #148]	; (8008f80 <__swsetup_r+0xd4>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d101      	bne.n	8008ef2 <__swsetup_r+0x46>
 8008eee:	68ac      	ldr	r4, [r5, #8]
 8008ef0:	e7eb      	b.n	8008eca <__swsetup_r+0x1e>
 8008ef2:	4b24      	ldr	r3, [pc, #144]	; (8008f84 <__swsetup_r+0xd8>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	bf08      	it	eq
 8008ef8:	68ec      	ldreq	r4, [r5, #12]
 8008efa:	e7e6      	b.n	8008eca <__swsetup_r+0x1e>
 8008efc:	0758      	lsls	r0, r3, #29
 8008efe:	d512      	bpl.n	8008f26 <__swsetup_r+0x7a>
 8008f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f02:	b141      	cbz	r1, 8008f16 <__swsetup_r+0x6a>
 8008f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	d002      	beq.n	8008f12 <__swsetup_r+0x66>
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff fc29 	bl	8008764 <_free_r>
 8008f12:	2300      	movs	r3, #0
 8008f14:	6363      	str	r3, [r4, #52]	; 0x34
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	f043 0308 	orr.w	r3, r3, #8
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	b94b      	cbnz	r3, 8008f46 <__swsetup_r+0x9a>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f3c:	d003      	beq.n	8008f46 <__swsetup_r+0x9a>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7ff f81f 	bl	8007f84 <__smakebuf_r>
 8008f46:	89a0      	ldrh	r0, [r4, #12]
 8008f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f4c:	f010 0301 	ands.w	r3, r0, #1
 8008f50:	d00a      	beq.n	8008f68 <__swsetup_r+0xbc>
 8008f52:	2300      	movs	r3, #0
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	6963      	ldr	r3, [r4, #20]
 8008f58:	425b      	negs	r3, r3
 8008f5a:	61a3      	str	r3, [r4, #24]
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	b943      	cbnz	r3, 8008f72 <__swsetup_r+0xc6>
 8008f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f64:	d1ba      	bne.n	8008edc <__swsetup_r+0x30>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	0781      	lsls	r1, r0, #30
 8008f6a:	bf58      	it	pl
 8008f6c:	6963      	ldrpl	r3, [r4, #20]
 8008f6e:	60a3      	str	r3, [r4, #8]
 8008f70:	e7f4      	b.n	8008f5c <__swsetup_r+0xb0>
 8008f72:	2000      	movs	r0, #0
 8008f74:	e7f7      	b.n	8008f66 <__swsetup_r+0xba>
 8008f76:	bf00      	nop
 8008f78:	2000000c 	.word	0x2000000c
 8008f7c:	080094d8 	.word	0x080094d8
 8008f80:	080094f8 	.word	0x080094f8
 8008f84:	080094b8 	.word	0x080094b8

08008f88 <abort>:
 8008f88:	b508      	push	{r3, lr}
 8008f8a:	2006      	movs	r0, #6
 8008f8c:	f000 f82c 	bl	8008fe8 <raise>
 8008f90:	2001      	movs	r0, #1
 8008f92:	f000 f9ad 	bl	80092f0 <_exit>

08008f96 <_raise_r>:
 8008f96:	291f      	cmp	r1, #31
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	d904      	bls.n	8008faa <_raise_r+0x14>
 8008fa0:	2316      	movs	r3, #22
 8008fa2:	6003      	str	r3, [r0, #0]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fac:	b112      	cbz	r2, 8008fb4 <_raise_r+0x1e>
 8008fae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fb2:	b94b      	cbnz	r3, 8008fc8 <_raise_r+0x32>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 f831 	bl	800901c <_getpid_r>
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc4:	f000 b818 	b.w	8008ff8 <_kill_r>
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d00a      	beq.n	8008fe2 <_raise_r+0x4c>
 8008fcc:	1c59      	adds	r1, r3, #1
 8008fce:	d103      	bne.n	8008fd8 <_raise_r+0x42>
 8008fd0:	2316      	movs	r3, #22
 8008fd2:	6003      	str	r3, [r0, #0]
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	e7e7      	b.n	8008fa8 <_raise_r+0x12>
 8008fd8:	2400      	movs	r4, #0
 8008fda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4798      	blx	r3
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e7e0      	b.n	8008fa8 <_raise_r+0x12>
	...

08008fe8 <raise>:
 8008fe8:	4b02      	ldr	r3, [pc, #8]	; (8008ff4 <raise+0xc>)
 8008fea:	4601      	mov	r1, r0
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f7ff bfd2 	b.w	8008f96 <_raise_r>
 8008ff2:	bf00      	nop
 8008ff4:	2000000c 	.word	0x2000000c

08008ff8 <_kill_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_kill_r+0x20>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f000 f96b 	bl	80092e0 <_kill>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d102      	bne.n	8009014 <_kill_r+0x1c>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b103      	cbz	r3, 8009014 <_kill_r+0x1c>
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	20000490 	.word	0x20000490

0800901c <_getpid_r>:
 800901c:	f000 b958 	b.w	80092d0 <_getpid>

08009020 <floorf>:
 8009020:	ee10 3a10 	vmov	r3, s0
 8009024:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009028:	3a7f      	subs	r2, #127	; 0x7f
 800902a:	2a16      	cmp	r2, #22
 800902c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009030:	dc2a      	bgt.n	8009088 <floorf+0x68>
 8009032:	2a00      	cmp	r2, #0
 8009034:	da11      	bge.n	800905a <floorf+0x3a>
 8009036:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009098 <floorf+0x78>
 800903a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800903e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	dd05      	ble.n	8009054 <floorf+0x34>
 8009048:	2b00      	cmp	r3, #0
 800904a:	da23      	bge.n	8009094 <floorf+0x74>
 800904c:	4a13      	ldr	r2, [pc, #76]	; (800909c <floorf+0x7c>)
 800904e:	2900      	cmp	r1, #0
 8009050:	bf18      	it	ne
 8009052:	4613      	movne	r3, r2
 8009054:	ee00 3a10 	vmov	s0, r3
 8009058:	4770      	bx	lr
 800905a:	4911      	ldr	r1, [pc, #68]	; (80090a0 <floorf+0x80>)
 800905c:	4111      	asrs	r1, r2
 800905e:	420b      	tst	r3, r1
 8009060:	d0fa      	beq.n	8009058 <floorf+0x38>
 8009062:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009098 <floorf+0x78>
 8009066:	ee30 0a27 	vadd.f32	s0, s0, s15
 800906a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800906e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009072:	ddef      	ble.n	8009054 <floorf+0x34>
 8009074:	2b00      	cmp	r3, #0
 8009076:	bfbe      	ittt	lt
 8009078:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800907c:	fa40 f202 	asrlt.w	r2, r0, r2
 8009080:	189b      	addlt	r3, r3, r2
 8009082:	ea23 0301 	bic.w	r3, r3, r1
 8009086:	e7e5      	b.n	8009054 <floorf+0x34>
 8009088:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800908c:	d3e4      	bcc.n	8009058 <floorf+0x38>
 800908e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009092:	4770      	bx	lr
 8009094:	2300      	movs	r3, #0
 8009096:	e7dd      	b.n	8009054 <floorf+0x34>
 8009098:	7149f2ca 	.word	0x7149f2ca
 800909c:	bf800000 	.word	0xbf800000
 80090a0:	007fffff 	.word	0x007fffff

080090a4 <fmaxf>:
 80090a4:	b508      	push	{r3, lr}
 80090a6:	ed2d 8b02 	vpush	{d8}
 80090aa:	eeb0 8a40 	vmov.f32	s16, s0
 80090ae:	eef0 8a60 	vmov.f32	s17, s1
 80090b2:	f000 f82d 	bl	8009110 <__fpclassifyf>
 80090b6:	b148      	cbz	r0, 80090cc <fmaxf+0x28>
 80090b8:	eeb0 0a68 	vmov.f32	s0, s17
 80090bc:	f000 f828 	bl	8009110 <__fpclassifyf>
 80090c0:	b130      	cbz	r0, 80090d0 <fmaxf+0x2c>
 80090c2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80090c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ca:	dc01      	bgt.n	80090d0 <fmaxf+0x2c>
 80090cc:	eeb0 8a68 	vmov.f32	s16, s17
 80090d0:	eeb0 0a48 	vmov.f32	s0, s16
 80090d4:	ecbd 8b02 	vpop	{d8}
 80090d8:	bd08      	pop	{r3, pc}

080090da <fminf>:
 80090da:	b508      	push	{r3, lr}
 80090dc:	ed2d 8b02 	vpush	{d8}
 80090e0:	eeb0 8a40 	vmov.f32	s16, s0
 80090e4:	eef0 8a60 	vmov.f32	s17, s1
 80090e8:	f000 f812 	bl	8009110 <__fpclassifyf>
 80090ec:	b148      	cbz	r0, 8009102 <fminf+0x28>
 80090ee:	eeb0 0a68 	vmov.f32	s0, s17
 80090f2:	f000 f80d 	bl	8009110 <__fpclassifyf>
 80090f6:	b130      	cbz	r0, 8009106 <fminf+0x2c>
 80090f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80090fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009100:	d401      	bmi.n	8009106 <fminf+0x2c>
 8009102:	eeb0 8a68 	vmov.f32	s16, s17
 8009106:	eeb0 0a48 	vmov.f32	s0, s16
 800910a:	ecbd 8b02 	vpop	{d8}
 800910e:	bd08      	pop	{r3, pc}

08009110 <__fpclassifyf>:
 8009110:	ee10 3a10 	vmov	r3, s0
 8009114:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009118:	d00d      	beq.n	8009136 <__fpclassifyf+0x26>
 800911a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800911e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009122:	d30a      	bcc.n	800913a <__fpclassifyf+0x2a>
 8009124:	4b07      	ldr	r3, [pc, #28]	; (8009144 <__fpclassifyf+0x34>)
 8009126:	1e42      	subs	r2, r0, #1
 8009128:	429a      	cmp	r2, r3
 800912a:	d908      	bls.n	800913e <__fpclassifyf+0x2e>
 800912c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8009130:	4258      	negs	r0, r3
 8009132:	4158      	adcs	r0, r3
 8009134:	4770      	bx	lr
 8009136:	2002      	movs	r0, #2
 8009138:	4770      	bx	lr
 800913a:	2004      	movs	r0, #4
 800913c:	4770      	bx	lr
 800913e:	2003      	movs	r0, #3
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	007ffffe 	.word	0x007ffffe

08009148 <fmodf>:
 8009148:	b508      	push	{r3, lr}
 800914a:	ed2d 8b02 	vpush	{d8}
 800914e:	eef0 8a40 	vmov.f32	s17, s0
 8009152:	eeb0 8a60 	vmov.f32	s16, s1
 8009156:	f000 f835 	bl	80091c4 <__ieee754_fmodf>
 800915a:	eef4 8a48 	vcmp.f32	s17, s16
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	d60c      	bvs.n	800917e <fmodf+0x36>
 8009164:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009184 <fmodf+0x3c>
 8009168:	eeb4 8a68 	vcmp.f32	s16, s17
 800916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009170:	d105      	bne.n	800917e <fmodf+0x36>
 8009172:	f7fd f9ef 	bl	8006554 <__errno>
 8009176:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800917a:	2321      	movs	r3, #33	; 0x21
 800917c:	6003      	str	r3, [r0, #0]
 800917e:	ecbd 8b02 	vpop	{d8}
 8009182:	bd08      	pop	{r3, pc}
 8009184:	00000000 	.word	0x00000000

08009188 <sqrtf>:
 8009188:	b508      	push	{r3, lr}
 800918a:	ed2d 8b02 	vpush	{d8}
 800918e:	eeb0 8a40 	vmov.f32	s16, s0
 8009192:	f000 f899 	bl	80092c8 <__ieee754_sqrtf>
 8009196:	eeb4 8a48 	vcmp.f32	s16, s16
 800919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919e:	d60c      	bvs.n	80091ba <sqrtf+0x32>
 80091a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80091c0 <sqrtf+0x38>
 80091a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80091a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ac:	d505      	bpl.n	80091ba <sqrtf+0x32>
 80091ae:	f7fd f9d1 	bl	8006554 <__errno>
 80091b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80091b6:	2321      	movs	r3, #33	; 0x21
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	ecbd 8b02 	vpop	{d8}
 80091be:	bd08      	pop	{r3, pc}
 80091c0:	00000000 	.word	0x00000000

080091c4 <__ieee754_fmodf>:
 80091c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091c6:	ee10 5a90 	vmov	r5, s1
 80091ca:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80091ce:	d009      	beq.n	80091e4 <__ieee754_fmodf+0x20>
 80091d0:	ee10 2a10 	vmov	r2, s0
 80091d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80091d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80091dc:	da02      	bge.n	80091e4 <__ieee754_fmodf+0x20>
 80091de:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80091e2:	dd04      	ble.n	80091ee <__ieee754_fmodf+0x2a>
 80091e4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80091e8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80091ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	dbfc      	blt.n	80091ec <__ieee754_fmodf+0x28>
 80091f2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80091f6:	d105      	bne.n	8009204 <__ieee754_fmodf+0x40>
 80091f8:	4b32      	ldr	r3, [pc, #200]	; (80092c4 <__ieee754_fmodf+0x100>)
 80091fa:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80091fe:	ed93 0a00 	vldr	s0, [r3]
 8009202:	e7f3      	b.n	80091ec <__ieee754_fmodf+0x28>
 8009204:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8009208:	d13f      	bne.n	800928a <__ieee754_fmodf+0xc6>
 800920a:	0219      	lsls	r1, r3, #8
 800920c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009210:	2900      	cmp	r1, #0
 8009212:	dc37      	bgt.n	8009284 <__ieee754_fmodf+0xc0>
 8009214:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8009218:	d13d      	bne.n	8009296 <__ieee754_fmodf+0xd2>
 800921a:	0227      	lsls	r7, r4, #8
 800921c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8009220:	2f00      	cmp	r7, #0
 8009222:	da35      	bge.n	8009290 <__ieee754_fmodf+0xcc>
 8009224:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009228:	bfbb      	ittet	lt
 800922a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800922e:	1a12      	sublt	r2, r2, r0
 8009230:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8009234:	4093      	lsllt	r3, r2
 8009236:	bfa8      	it	ge
 8009238:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800923c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009240:	bfb5      	itete	lt
 8009242:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8009246:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800924a:	1a52      	sublt	r2, r2, r1
 800924c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8009250:	bfb8      	it	lt
 8009252:	4094      	lsllt	r4, r2
 8009254:	1a40      	subs	r0, r0, r1
 8009256:	1b1a      	subs	r2, r3, r4
 8009258:	bb00      	cbnz	r0, 800929c <__ieee754_fmodf+0xd8>
 800925a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800925e:	bf38      	it	cc
 8009260:	4613      	movcc	r3, r2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0c8      	beq.n	80091f8 <__ieee754_fmodf+0x34>
 8009266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926a:	db1f      	blt.n	80092ac <__ieee754_fmodf+0xe8>
 800926c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009270:	db1f      	blt.n	80092b2 <__ieee754_fmodf+0xee>
 8009272:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009276:	317f      	adds	r1, #127	; 0x7f
 8009278:	4333      	orrs	r3, r6
 800927a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800927e:	ee00 3a10 	vmov	s0, r3
 8009282:	e7b3      	b.n	80091ec <__ieee754_fmodf+0x28>
 8009284:	3801      	subs	r0, #1
 8009286:	0049      	lsls	r1, r1, #1
 8009288:	e7c2      	b.n	8009210 <__ieee754_fmodf+0x4c>
 800928a:	15d8      	asrs	r0, r3, #23
 800928c:	387f      	subs	r0, #127	; 0x7f
 800928e:	e7c1      	b.n	8009214 <__ieee754_fmodf+0x50>
 8009290:	3901      	subs	r1, #1
 8009292:	007f      	lsls	r7, r7, #1
 8009294:	e7c4      	b.n	8009220 <__ieee754_fmodf+0x5c>
 8009296:	15e1      	asrs	r1, r4, #23
 8009298:	397f      	subs	r1, #127	; 0x7f
 800929a:	e7c3      	b.n	8009224 <__ieee754_fmodf+0x60>
 800929c:	2a00      	cmp	r2, #0
 800929e:	da02      	bge.n	80092a6 <__ieee754_fmodf+0xe2>
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	3801      	subs	r0, #1
 80092a4:	e7d7      	b.n	8009256 <__ieee754_fmodf+0x92>
 80092a6:	d0a7      	beq.n	80091f8 <__ieee754_fmodf+0x34>
 80092a8:	0053      	lsls	r3, r2, #1
 80092aa:	e7fa      	b.n	80092a2 <__ieee754_fmodf+0xde>
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	3901      	subs	r1, #1
 80092b0:	e7d9      	b.n	8009266 <__ieee754_fmodf+0xa2>
 80092b2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80092b6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80092ba:	3182      	adds	r1, #130	; 0x82
 80092bc:	410b      	asrs	r3, r1
 80092be:	4333      	orrs	r3, r6
 80092c0:	e7dd      	b.n	800927e <__ieee754_fmodf+0xba>
 80092c2:	bf00      	nop
 80092c4:	080097cc 	.word	0x080097cc

080092c8 <__ieee754_sqrtf>:
 80092c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80092cc:	4770      	bx	lr
	...

080092d0 <_getpid>:
 80092d0:	4b02      	ldr	r3, [pc, #8]	; (80092dc <_getpid+0xc>)
 80092d2:	2258      	movs	r2, #88	; 0x58
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092da:	4770      	bx	lr
 80092dc:	20000490 	.word	0x20000490

080092e0 <_kill>:
 80092e0:	4b02      	ldr	r3, [pc, #8]	; (80092ec <_kill+0xc>)
 80092e2:	2258      	movs	r2, #88	; 0x58
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092ea:	4770      	bx	lr
 80092ec:	20000490 	.word	0x20000490

080092f0 <_exit>:
 80092f0:	e7fe      	b.n	80092f0 <_exit>
	...

080092f4 <_init>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr

08009300 <_fini>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr
