
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009178  08009178  00019178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095dc  080095dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e4  080095e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001e0  080097c8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080097c8  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d5d  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a6  00000000  00000000  00034f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00037710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051c5  00000000  00000000  000395d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001477e  00000000  00000000  0003e795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107388  00000000  00000000  00052f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a29b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000520c  00000000  00000000  0015a2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0015f4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0015f534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800915c 	.word	0x0800915c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800915c 	.word	0x0800915c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <look1_iflf_binlxpw>:
/* Real-time model */
static RT_MODEL_controller_T controller_M_;
RT_MODEL_controller_T *const controller_M = &controller_M_;
real32_T look1_iflf_binlxpw(real32_T u0, const real32_T bp0[], const real32_T
  table[], uint32_T maxIndex)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80005fe:	60b8      	str	r0, [r7, #8]
 8000600:	6079      	str	r1, [r7, #4]
 8000602:	603a      	str	r2, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	ed97 7a03 	vldr	s14, [r7, #12]
 800060e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d816      	bhi.n	8000646 <look1_iflf_binlxpw+0x52>
    iLeft = 0U;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	ed97 7a03 	vldr	s14, [r7, #12]
 8000626:	ee77 6a67 	vsub.f32	s13, s14, s15
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	3304      	adds	r3, #4
 800062e:	ed93 7a00 	vldr	s14, [r3]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8000644:	e073      	b.n	800072e <look1_iflf_binlxpw+0x13a>
  } else if (u0 < bp0[maxIndex]) {
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4413      	add	r3, r2
 800064e:	edd3 7a00 	vldr	s15, [r3]
 8000652:	ed97 7a03 	vldr	s14, [r7, #12]
 8000656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065e:	d541      	bpl.n	80006e4 <look1_iflf_binlxpw+0xf0>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
    iLeft = 0U;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
    iRght = maxIndex;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U) {
 800066e:	e016      	b.n	800069e <look1_iflf_binlxpw+0xaa>
      if (u0 < bp0[bpIdx]) {
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	4413      	add	r3, r2
 8000678:	edd3 7a00 	vldr	s15, [r3]
 800067c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000688:	d502      	bpl.n	8000690 <look1_iflf_binlxpw+0x9c>
        iRght = bpIdx;
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	e001      	b.n	8000694 <look1_iflf_binlxpw+0xa0>
      } else {
        iLeft = bpIdx;
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	623b      	str	r3, [r7, #32]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000694:	69ba      	ldr	r2, [r7, #24]
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	4413      	add	r3, r2
 800069a:	085b      	lsrs	r3, r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d8e3      	bhi.n	8000670 <look1_iflf_binlxpw+0x7c>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	3301      	adds	r3, #1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	4413      	add	r3, r2
 80006c6:	ed93 7a00 	vldr	s14, [r3]
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	4413      	add	r3, r2
 80006d2:	edd3 7a00 	vldr	s15, [r3]
 80006d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80006e2:	e024      	b.n	800072e <look1_iflf_binlxpw+0x13a>
  } else {
    iLeft = maxIndex - 1U;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	623b      	str	r3, [r7, #32]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80006f0:	4413      	add	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	4413      	add	r3, r2
 80006f8:	edd3 7a00 	vldr	s15, [r3]
 80006fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000700:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	ed93 7a00 	vldr	s14, [r3]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	4413      	add	r3, r2
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800072a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  yL_0d0 = table[iLeft];
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	617b      	str	r3, [r7, #20]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	3301      	adds	r3, #1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	ed93 7a00 	vldr	s14, [r3]
 8000748:	edd7 7a05 	vldr	s15, [r7, #20]
 800074c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000750:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000758:	edd7 7a05 	vldr	s15, [r7, #20]
 800075c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000760:	eeb0 0a67 	vmov.f32	s0, s15
 8000764:	372c      	adds	r7, #44	; 0x2c
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <controller_step>:

/* Model step function */
void controller_step(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
  /* Chart: '<S3>/Chart' incorporates:
   *  Delay: '<S3>/Delay'
   *  Delay: '<S3>/Delay1'
   *  Delay: '<S3>/Delay2'
   */
  if (controller_DW.is_active_c3_governor_lib == 0U) {
 8000776:	4b97      	ldr	r3, [pc, #604]	; (80009d4 <controller_step+0x264>)
 8000778:	7c1b      	ldrb	r3, [r3, #16]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10f      	bne.n	800079e <controller_step+0x2e>
    controller_DW.is_active_c3_governor_lib = 1U;
 800077e:	4b95      	ldr	r3, [pc, #596]	; (80009d4 <controller_step+0x264>)
 8000780:	2201      	movs	r2, #1
 8000782:	741a      	strb	r2, [r3, #16]
    controller_DW.is_c3_governor_lib = controlle_IN_Initialize_outputs;
 8000784:	4b93      	ldr	r3, [pc, #588]	; (80009d4 <controller_step+0x264>)
 8000786:	2201      	movs	r2, #1
 8000788:	731a      	strb	r2, [r3, #12]
    controller_B.GOV_e_miCmd = CMD_INIT;
 800078a:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <controller_step+0x268>)
 800078c:	2200      	movs	r2, #0
 800078e:	725a      	strb	r2, [r3, #9]
    controller_B.GOV_e_diCmd = DI_CMD_INIT;
 8000790:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <controller_step+0x268>)
 8000792:	2200      	movs	r2, #0
 8000794:	729a      	strb	r2, [r3, #10]
    controller_DW.motorStartCount = 0U;
 8000796:	4b8f      	ldr	r3, [pc, #572]	; (80009d4 <controller_step+0x264>)
 8000798:	2200      	movs	r2, #0
 800079a:	809a      	strh	r2, [r3, #4]
 800079c:	e0e5      	b.n	800096a <controller_step+0x1fa>
  } else {
    switch (controller_DW.is_c3_governor_lib) {
 800079e:	4b8d      	ldr	r3, [pc, #564]	; (80009d4 <controller_step+0x264>)
 80007a0:	7b1b      	ldrb	r3, [r3, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	f200 80bf 	bhi.w	8000928 <controller_step+0x1b8>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <controller_step+0x40>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	080007d5 	.word	0x080007d5
 80007b8:	0800080f 	.word	0x0800080f
 80007bc:	08000827 	.word	0x08000827
     case controlle_IN_Initialize_outputs:
      controller_B.GOV_e_diCmd = DI_CMD_INIT;
 80007c0:	4b85      	ldr	r3, [pc, #532]	; (80009d8 <controller_step+0x268>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	729a      	strb	r2, [r3, #10]
      controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 80007c6:	4b83      	ldr	r3, [pc, #524]	; (80009d4 <controller_step+0x264>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	731a      	strb	r2, [r3, #12]
      controller_DW.is_STARTUP = controller_IN_HV_startup;
 80007cc:	4b81      	ldr	r3, [pc, #516]	; (80009d4 <controller_step+0x264>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	735a      	strb	r2, [r3, #13]
      break;
 80007d2:	e0ca      	b.n	800096a <controller_step+0x1fa>

     case controller_IN_RUNNING:
      if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 80007d4:	4b7f      	ldr	r3, [pc, #508]	; (80009d4 <controller_step+0x264>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d109      	bne.n	80007f0 <controller_step+0x80>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 80007dc:	4b7d      	ldr	r3, [pc, #500]	; (80009d4 <controller_step+0x264>)
 80007de:	2203      	movs	r2, #3
 80007e0:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_HV_run_error;
 80007e2:	4b7c      	ldr	r3, [pc, #496]	; (80009d4 <controller_step+0x264>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007e8:	4b7b      	ldr	r3, [pc, #492]	; (80009d8 <controller_step+0x268>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	729a      	strb	r2, [r3, #10]
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 80007ee:	e0bb      	b.n	8000968 <controller_step+0x1f8>
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 80007f0:	4b78      	ldr	r3, [pc, #480]	; (80009d4 <controller_step+0x264>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	f040 80b7 	bne.w	8000968 <controller_step+0x1f8>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 80007fa:	4b76      	ldr	r3, [pc, #472]	; (80009d4 <controller_step+0x264>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
 8000800:	4b74      	ldr	r3, [pc, #464]	; (80009d4 <controller_step+0x264>)
 8000802:	2202      	movs	r2, #2
 8000804:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <controller_step+0x268>)
 8000808:	2202      	movs	r2, #2
 800080a:	729a      	strb	r2, [r3, #10]
      break;
 800080c:	e0ac      	b.n	8000968 <controller_step+0x1f8>

     case controller_IN_RUNNING_ERROR:
      if (controller_DW.is_RUNNING_ERROR == controller_IN_HV_run_error) {
 800080e:	4b71      	ldr	r3, [pc, #452]	; (80009d4 <controller_step+0x264>)
 8000810:	7bdb      	ldrb	r3, [r3, #15]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d103      	bne.n	800081e <controller_step+0xae>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 8000816:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <controller_step+0x268>)
 8000818:	2202      	movs	r2, #2
 800081a:	729a      	strb	r2, [r3, #10]
      } else {
        /* case IN_Motor_run_error: */
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 800081c:	e0a5      	b.n	800096a <controller_step+0x1fa>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 800081e:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <controller_step+0x268>)
 8000820:	2202      	movs	r2, #2
 8000822:	729a      	strb	r2, [r3, #10]
      break;
 8000824:	e0a1      	b.n	800096a <controller_step+0x1fa>

     case controller_IN_STARTUP:
      {
        if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 8000826:	4b6b      	ldr	r3, [pc, #428]	; (80009d4 <controller_step+0x264>)
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	2b08      	cmp	r3, #8
 800082c:	d109      	bne.n	8000842 <controller_step+0xd2>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800082e:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <controller_step+0x264>)
 8000830:	2200      	movs	r2, #0
 8000832:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000834:	4b67      	ldr	r3, [pc, #412]	; (80009d4 <controller_step+0x264>)
 8000836:	2205      	movs	r2, #5
 8000838:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = controller_IN_HV_startup_error;
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <controller_step+0x264>)
 800083c:	2203      	movs	r2, #3
 800083e:	739a      	strb	r2, [r3, #14]
            }
            break;
          }
        }
      }
      break;
 8000840:	e093      	b.n	800096a <controller_step+0x1fa>
        } else if (controller_DW.Delay2_DSTATE == DI_ERROR) {
 8000842:	4b64      	ldr	r3, [pc, #400]	; (80009d4 <controller_step+0x264>)
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d109      	bne.n	800085e <controller_step+0xee>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800084a:	4b62      	ldr	r3, [pc, #392]	; (80009d4 <controller_step+0x264>)
 800084c:	2200      	movs	r2, #0
 800084e:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <controller_step+0x264>)
 8000852:	2205      	movs	r2, #5
 8000854:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = contro_IN_DriverInterface_Error;
 8000856:	4b5f      	ldr	r3, [pc, #380]	; (80009d4 <controller_step+0x264>)
 8000858:	2201      	movs	r2, #1
 800085a:	739a      	strb	r2, [r3, #14]
      break;
 800085c:	e085      	b.n	800096a <controller_step+0x1fa>
        } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <controller_step+0x264>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b05      	cmp	r3, #5
 8000864:	d11a      	bne.n	800089c <controller_step+0x12c>
          if (controller_DW.motorStartCount >= 5) {
 8000866:	4b5b      	ldr	r3, [pc, #364]	; (80009d4 <controller_step+0x264>)
 8000868:	889b      	ldrh	r3, [r3, #4]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d90c      	bls.n	8000888 <controller_step+0x118>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800086e:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <controller_step+0x264>)
 8000870:	2200      	movs	r2, #0
 8000872:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000874:	4b57      	ldr	r3, [pc, #348]	; (80009d4 <controller_step+0x264>)
 8000876:	2205      	movs	r2, #5
 8000878:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Motor_faulted;
 800087a:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <controller_step+0x264>)
 800087c:	2204      	movs	r2, #4
 800087e:	739a      	strb	r2, [r3, #14]
            controller_B.GOV_e_miCmd = CMD_SHUTDOWN;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <controller_step+0x268>)
 8000882:	2203      	movs	r2, #3
 8000884:	725a      	strb	r2, [r3, #9]
      break;
 8000886:	e070      	b.n	800096a <controller_step+0x1fa>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 8000888:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <controller_step+0x264>)
 800088a:	2200      	movs	r2, #0
 800088c:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 800088e:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <controller_step+0x264>)
 8000890:	2205      	movs	r2, #5
 8000892:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Err_reset;
 8000894:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <controller_step+0x264>)
 8000896:	2202      	movs	r2, #2
 8000898:	739a      	strb	r2, [r3, #14]
      break;
 800089a:	e066      	b.n	800096a <controller_step+0x1fa>
          switch (controller_DW.is_STARTUP) {
 800089c:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <controller_step+0x264>)
 800089e:	7b5b      	ldrb	r3, [r3, #13]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d002      	beq.n	80008aa <controller_step+0x13a>
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d00f      	beq.n	80008c8 <controller_step+0x158>
 80008a8:	e02a      	b.n	8000900 <controller_step+0x190>
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <controller_step+0x264>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d134      	bne.n	800091c <controller_step+0x1ac>
                (controller_DW.Delay2_DSTATE == DRV_START_REQ)) {
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <controller_step+0x264>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d130      	bne.n	800091c <controller_step+0x1ac>
              controller_DW.is_STARTUP = controller_IN_Send_ReadyToDrive;
 80008ba:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <controller_step+0x264>)
 80008bc:	2203      	movs	r2, #3
 80008be:	735a      	strb	r2, [r3, #13]
              controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 80008c0:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <controller_step+0x268>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	729a      	strb	r2, [r3, #10]
            break;
 80008c6:	e029      	b.n	800091c <controller_step+0x1ac>
              if (controller_DW.Delay_DSTATE_f == BM_RUNNING) {
 80008c8:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <controller_step+0x264>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	d127      	bne.n	8000920 <controller_step+0x1b0>
                controller_DW.is_STARTUP = contro_IN_Command_motor_startup;
 80008d0:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <controller_step+0x264>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	735a      	strb	r2, [r3, #13]
                controller_B.GOV_e_miCmd = CMD_STARTUP;
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <controller_step+0x268>)
 80008d8:	2202      	movs	r2, #2
 80008da:	725a      	strb	r2, [r3, #9]
                tmp = controller_DW.motorStartCount + 1U;
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <controller_step+0x264>)
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
                if (controller_DW.motorStartCount + 1U > 65535U) {
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <controller_step+0x264>)
 80008e6:	889b      	ldrh	r3, [r3, #4]
 80008e8:	3301      	adds	r3, #1
 80008ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ee:	d302      	bcc.n	80008f6 <controller_step+0x186>
                  tmp = 65535U;
 80008f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f4:	60bb      	str	r3, [r7, #8]
                controller_DW.motorStartCount = (uint16_T)tmp;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <controller_step+0x264>)
 80008fc:	809a      	strh	r2, [r3, #4]
            break;
 80008fe:	e00f      	b.n	8000920 <controller_step+0x1b0>
            controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 8000900:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <controller_step+0x268>)
 8000902:	2201      	movs	r2, #1
 8000904:	729a      	strb	r2, [r3, #10]
            if (controller_DW.Delay2_DSTATE == DI_RUNNING) {
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <controller_step+0x264>)
 8000908:	789b      	ldrb	r3, [r3, #2]
 800090a:	2b06      	cmp	r3, #6
 800090c:	d10a      	bne.n	8000924 <controller_step+0x1b4>
              controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <controller_step+0x264>)
 8000910:	2200      	movs	r2, #0
 8000912:	735a      	strb	r2, [r3, #13]
              controller_DW.is_c3_governor_lib = controller_IN_RUNNING;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <controller_step+0x264>)
 8000916:	2202      	movs	r2, #2
 8000918:	731a      	strb	r2, [r3, #12]
            break;
 800091a:	e003      	b.n	8000924 <controller_step+0x1b4>
            break;
 800091c:	bf00      	nop
 800091e:	e024      	b.n	800096a <controller_step+0x1fa>
            break;
 8000920:	bf00      	nop
 8000922:	e022      	b.n	800096a <controller_step+0x1fa>
            break;
 8000924:	bf00      	nop
      break;
 8000926:	e020      	b.n	800096a <controller_step+0x1fa>

     default:
      /* case IN_STARTUP_ERROR: */
      switch (controller_DW.is_STARTUP_ERROR) {
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <controller_step+0x264>)
 800092a:	7b9b      	ldrb	r3, [r3, #14]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d017      	beq.n	8000960 <controller_step+0x1f0>
 8000930:	2b03      	cmp	r3, #3
 8000932:	dc17      	bgt.n	8000964 <controller_step+0x1f4>
 8000934:	2b01      	cmp	r3, #1
 8000936:	d013      	beq.n	8000960 <controller_step+0x1f0>
 8000938:	2b02      	cmp	r3, #2
 800093a:	d113      	bne.n	8000964 <controller_step+0x1f4>
       case contro_IN_DriverInterface_Error:
       case controller_IN_HV_startup_error:
        break;

       case controller_IN_Err_reset:
        if (controller_DW.Delay1_DSTATE == OFF) {
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <controller_step+0x264>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b06      	cmp	r3, #6
 8000942:	d109      	bne.n	8000958 <controller_step+0x1e8>
          controller_DW.is_STARTUP_ERROR = controller_IN_NO_ACTIVE_CHILD;
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <controller_step+0x264>)
 8000946:	2200      	movs	r2, #0
 8000948:	739a      	strb	r2, [r3, #14]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <controller_step+0x264>)
 800094c:	2204      	movs	r2, #4
 800094e:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP = controller_IN_HV_startup;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <controller_step+0x264>)
 8000952:	2202      	movs	r2, #2
 8000954:	735a      	strb	r2, [r3, #13]
        } else {
          controller_B.GOV_e_miCmd = ERR_RESET;
        }
        break;
 8000956:	e006      	b.n	8000966 <controller_step+0x1f6>
          controller_B.GOV_e_miCmd = ERR_RESET;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <controller_step+0x268>)
 800095a:	2204      	movs	r2, #4
 800095c:	725a      	strb	r2, [r3, #9]
        break;
 800095e:	e002      	b.n	8000966 <controller_step+0x1f6>
        break;
 8000960:	bf00      	nop
 8000962:	e002      	b.n	800096a <controller_step+0x1fa>

       default:
        /* case IN_Motor_faulted: */
        break;
 8000964:	bf00      	nop
      }
      break;
 8000966:	e000      	b.n	800096a <controller_step+0x1fa>
      break;
 8000968:	bf00      	nop

  /* Chart: '<S2>/Chart' incorporates:
   *  Delay: '<S3>/Delay2'
   *  Inport: '<Root>/DI_b_DriverButton'
   */
  if (controller_DW.temporalCounter_i1_a < 15U) {
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <controller_step+0x264>)
 800096c:	7d5b      	ldrb	r3, [r3, #21]
 800096e:	2b0e      	cmp	r3, #14
 8000970:	d805      	bhi.n	800097e <controller_step+0x20e>
    controller_DW.temporalCounter_i1_a++;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <controller_step+0x264>)
 8000974:	7d5b      	ldrb	r3, [r3, #21]
 8000976:	3301      	adds	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <controller_step+0x264>)
 800097c:	755a      	strb	r2, [r3, #21]
  }

  if (controller_DW.is_active_c3_driver_interface_l == 0U) {
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <controller_step+0x264>)
 8000980:	7d1b      	ldrb	r3, [r3, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10f      	bne.n	80009a6 <controller_step+0x236>
    controller_DW.is_active_c3_driver_interface_l = 1U;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <controller_step+0x264>)
 8000988:	2201      	movs	r2, #1
 800098a:	751a      	strb	r2, [r3, #20]
    controller_DW.is_c3_driver_interface_lib = controller_IN_INIT;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <controller_step+0x264>)
 800098e:	2203      	movs	r2, #3
 8000990:	745a      	strb	r2, [r3, #17]
    controller_DW.Delay2_DSTATE = DI_STS_INIT;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <controller_step+0x264>)
 8000994:	2201      	movs	r2, #1
 8000996:	709a      	strb	r2, [r3, #2]
    controller_B.b_ReadyToDrive = false;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <controller_step+0x268>)
 800099a:	2200      	movs	r2, #0
 800099c:	72da      	strb	r2, [r3, #11]

    /* Outport: '<Root>/DI_b_driverSpeaker' incorporates:
     *  Delay: '<S3>/Delay2'
     */
    controller_Y.DI_b_driverSpeaker = false;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <controller_step+0x26c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	711a      	strb	r2, [r3, #4]
 80009a4:	e097      	b.n	8000ad6 <controller_step+0x366>
  } else {
    switch (controller_DW.is_c3_driver_interface_lib) {
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <controller_step+0x264>)
 80009a8:	7c5b      	ldrb	r3, [r3, #17]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d07c      	beq.n	8000aa8 <controller_step+0x338>
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	f300 808a 	bgt.w	8000ac8 <controller_step+0x358>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d002      	beq.n	80009be <controller_step+0x24e>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d004      	beq.n	80009c6 <controller_step+0x256>
 80009bc:	e084      	b.n	8000ac8 <controller_step+0x358>
     case controller_IN_DI_error:
      controller_DW.Delay2_DSTATE = DI_ERROR;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <controller_step+0x264>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	709a      	strb	r2, [r3, #2]
      break;
 80009c4:	e087      	b.n	8000ad6 <controller_step+0x366>

     case controller_IN_DI_running:
      switch (controller_DW.is_DI_running) {
 80009c6:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <controller_step+0x264>)
 80009c8:	7c9b      	ldrb	r3, [r3, #18]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d008      	beq.n	80009e0 <controller_step+0x270>
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d020      	beq.n	8000a14 <controller_step+0x2a4>
 80009d2:	e04f      	b.n	8000a74 <controller_step+0x304>
 80009d4:	20000208 	.word	0x20000208
 80009d8:	200001fc 	.word	0x200001fc
 80009dc:	20000278 	.word	0x20000278
       case contr_IN_Driver_requested_start:
        controller_DW.Delay2_DSTATE = DRV_START_REQ;
 80009e0:	4bc1      	ldr	r3, [pc, #772]	; (8000ce8 <controller_step+0x578>)
 80009e2:	2205      	movs	r2, #5
 80009e4:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == READY_TO_DRIVE) {
 80009e6:	4bc1      	ldr	r3, [pc, #772]	; (8000cec <controller_step+0x57c>)
 80009e8:	7a9b      	ldrb	r3, [r3, #10]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d156      	bne.n	8000a9c <controller_step+0x32c>
          controller_DW.is_DI_running = controller_IN_Ready_to_drive;
 80009ee:	4bbe      	ldr	r3, [pc, #760]	; (8000ce8 <controller_step+0x578>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	749a      	strb	r2, [r3, #18]
          controller_B.b_ReadyToDrive = true;
 80009f4:	4bbd      	ldr	r3, [pc, #756]	; (8000cec <controller_step+0x57c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	72da      	strb	r2, [r3, #11]
          controller_DW.Delay2_DSTATE = DI_RUNNING;
 80009fa:	4bbb      	ldr	r3, [pc, #748]	; (8000ce8 <controller_step+0x578>)
 80009fc:	2206      	movs	r2, #6
 80009fe:	709a      	strb	r2, [r3, #2]
          controller_DW.is_Ready_to_drive = controller_IN_SpeakerOn_;
 8000a00:	4bb9      	ldr	r3, [pc, #740]	; (8000ce8 <controller_step+0x578>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	74da      	strb	r2, [r3, #19]
          controller_DW.temporalCounter_i1_a = 0U;
 8000a06:	4bb8      	ldr	r3, [pc, #736]	; (8000ce8 <controller_step+0x578>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	755a      	strb	r2, [r3, #21]

          /* Outport: '<Root>/DI_b_driverSpeaker' */
          controller_Y.DI_b_driverSpeaker = true;
 8000a0c:	4bb8      	ldr	r3, [pc, #736]	; (8000cf0 <controller_step+0x580>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000a12:	e043      	b.n	8000a9c <controller_step+0x32c>

       case controller_IN_Ready_to_drive:
        controller_B.b_ReadyToDrive = true;
 8000a14:	4bb5      	ldr	r3, [pc, #724]	; (8000cec <controller_step+0x57c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	72da      	strb	r2, [r3, #11]
        controller_DW.Delay2_DSTATE = DI_RUNNING;
 8000a1a:	4bb3      	ldr	r3, [pc, #716]	; (8000ce8 <controller_step+0x578>)
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == SYSTEM_ERROR) {
 8000a20:	4bb2      	ldr	r3, [pc, #712]	; (8000cec <controller_step+0x57c>)
 8000a22:	7a9b      	ldrb	r3, [r3, #10]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d10f      	bne.n	8000a48 <controller_step+0x2d8>
          controller_DW.is_Ready_to_drive = controller_IN_NO_ACTIVE_CHILD;
 8000a28:	4baf      	ldr	r3, [pc, #700]	; (8000ce8 <controller_step+0x578>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	74da      	strb	r2, [r3, #19]
          controller_DW.is_DI_running = controller_IN_NO_ACTIVE_CHILD;
 8000a2e:	4bae      	ldr	r3, [pc, #696]	; (8000ce8 <controller_step+0x578>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	749a      	strb	r2, [r3, #18]
          controller_DW.is_c3_driver_interface_lib =
 8000a34:	4bac      	ldr	r3, [pc, #688]	; (8000ce8 <controller_step+0x578>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	745a      	strb	r2, [r3, #17]
            controller_IN_Vehicle_coasting;
          controller_B.b_ReadyToDrive = false;
 8000a3a:	4bac      	ldr	r3, [pc, #688]	; (8000cec <controller_step+0x57c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	72da      	strb	r2, [r3, #11]
          controller_DW.Delay2_DSTATE = DI_IDLE;
 8000a40:	4ba9      	ldr	r3, [pc, #676]	; (8000ce8 <controller_step+0x578>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	709a      	strb	r2, [r3, #2]

            /* Outport: '<Root>/DI_b_driverSpeaker' */
            controller_Y.DI_b_driverSpeaker = false;
          }
        }
        break;
 8000a46:	e02b      	b.n	8000aa0 <controller_step+0x330>
        } else if (controller_DW.is_Ready_to_drive == controller_IN_SpeakerOff)
 8000a48:	4ba7      	ldr	r3, [pc, #668]	; (8000ce8 <controller_step+0x578>)
 8000a4a:	7cdb      	ldrb	r3, [r3, #19]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d103      	bne.n	8000a58 <controller_step+0x2e8>
          controller_Y.DI_b_driverSpeaker = false;
 8000a50:	4ba7      	ldr	r3, [pc, #668]	; (8000cf0 <controller_step+0x580>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	711a      	strb	r2, [r3, #4]
        break;
 8000a56:	e023      	b.n	8000aa0 <controller_step+0x330>
          controller_Y.DI_b_driverSpeaker = true;
 8000a58:	4ba5      	ldr	r3, [pc, #660]	; (8000cf0 <controller_step+0x580>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	711a      	strb	r2, [r3, #4]
          if (controller_DW.temporalCounter_i1_a >= 10U) {
 8000a5e:	4ba2      	ldr	r3, [pc, #648]	; (8000ce8 <controller_step+0x578>)
 8000a60:	7d5b      	ldrb	r3, [r3, #21]
 8000a62:	2b09      	cmp	r3, #9
 8000a64:	d91c      	bls.n	8000aa0 <controller_step+0x330>
            controller_DW.is_Ready_to_drive = controller_IN_SpeakerOff;
 8000a66:	4ba0      	ldr	r3, [pc, #640]	; (8000ce8 <controller_step+0x578>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	74da      	strb	r2, [r3, #19]
            controller_Y.DI_b_driverSpeaker = false;
 8000a6c:	4ba0      	ldr	r3, [pc, #640]	; (8000cf0 <controller_step+0x580>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	711a      	strb	r2, [r3, #4]
        break;
 8000a72:	e015      	b.n	8000aa0 <controller_step+0x330>

       default:
        /* case IN_Waiting_for_driver: */
        controller_DW.Delay2_DSTATE = WAITING_FOR_DRVR;
 8000a74:	4b9c      	ldr	r3, [pc, #624]	; (8000ce8 <controller_step+0x578>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	709a      	strb	r2, [r3, #2]
        if (controller_U.DI_b_DriverButton == 1.0) {
 8000a7a:	4b9e      	ldr	r3, [pc, #632]	; (8000cf4 <controller_step+0x584>)
 8000a7c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a84:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8c:	d10a      	bne.n	8000aa4 <controller_step+0x334>
          controller_DW.is_DI_running = contr_IN_Driver_requested_start;
 8000a8e:	4b96      	ldr	r3, [pc, #600]	; (8000ce8 <controller_step+0x578>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	749a      	strb	r2, [r3, #18]
          controller_DW.Delay2_DSTATE = DRV_START_REQ;
 8000a94:	4b94      	ldr	r3, [pc, #592]	; (8000ce8 <controller_step+0x578>)
 8000a96:	2205      	movs	r2, #5
 8000a98:	709a      	strb	r2, [r3, #2]
        }
        break;
 8000a9a:	e003      	b.n	8000aa4 <controller_step+0x334>
        break;
 8000a9c:	bf00      	nop
 8000a9e:	e01a      	b.n	8000ad6 <controller_step+0x366>
        break;
 8000aa0:	bf00      	nop
 8000aa2:	e018      	b.n	8000ad6 <controller_step+0x366>
        break;
 8000aa4:	bf00      	nop
      }
      break;
 8000aa6:	e016      	b.n	8000ad6 <controller_step+0x366>

     case controller_IN_INIT:
      controller_B.b_ReadyToDrive = false;
 8000aa8:	4b90      	ldr	r3, [pc, #576]	; (8000cec <controller_step+0x57c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	72da      	strb	r2, [r3, #11]

      /* Outport: '<Root>/DI_b_driverSpeaker' */
      controller_Y.DI_b_driverSpeaker = false;
 8000aae:	4b90      	ldr	r3, [pc, #576]	; (8000cf0 <controller_step+0x580>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
      controller_DW.is_c3_driver_interface_lib = controller_IN_DI_running;
 8000ab4:	4b8c      	ldr	r3, [pc, #560]	; (8000ce8 <controller_step+0x578>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	745a      	strb	r2, [r3, #17]
      controller_DW.is_DI_running = controlle_IN_Waiting_for_driver;
 8000aba:	4b8b      	ldr	r3, [pc, #556]	; (8000ce8 <controller_step+0x578>)
 8000abc:	2203      	movs	r2, #3
 8000abe:	749a      	strb	r2, [r3, #18]
      controller_DW.Delay2_DSTATE = WAITING_FOR_DRVR;
 8000ac0:	4b89      	ldr	r3, [pc, #548]	; (8000ce8 <controller_step+0x578>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	709a      	strb	r2, [r3, #2]
      break;
 8000ac6:	e006      	b.n	8000ad6 <controller_step+0x366>

     default:
      /* case IN_Vehicle_coasting: */
      controller_B.b_ReadyToDrive = false;
 8000ac8:	4b88      	ldr	r3, [pc, #544]	; (8000cec <controller_step+0x57c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	72da      	strb	r2, [r3, #11]
      controller_DW.Delay2_DSTATE = DI_IDLE;
 8000ace:	4b86      	ldr	r3, [pc, #536]	; (8000ce8 <controller_step+0x578>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	709a      	strb	r2, [r3, #2]
      break;
 8000ad4:	bf00      	nop
   *  Product: '<S20>/Divide'
   *  RelationalOperator: '<S19>/Lower Test'
   *  RelationalOperator: '<S19>/Upper Test'
   *  Sum: '<S20>/Subtract'
   */
  if ((controller_U.DI_V_BrakePedalPos >= 0.0F) &&
 8000ad6:	4b87      	ldr	r3, [pc, #540]	; (8000cf4 <controller_step+0x584>)
 8000ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae4:	db0d      	blt.n	8000b02 <controller_step+0x392>
      (controller_U.DI_V_BrakePedalPos <= 1024.0F)) {
 8000ae6:	4b83      	ldr	r3, [pc, #524]	; (8000cf4 <controller_step+0x584>)
 8000ae8:	edd3 7a02 	vldr	s15, [r3, #8]
  if ((controller_U.DI_V_BrakePedalPos >= 0.0F) &&
 8000aec:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000cf8 <controller_step+0x588>
 8000af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	d803      	bhi.n	8000b02 <controller_step+0x392>
    rtb_Switch2 = 0.0F;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e010      	b.n	8000b24 <controller_step+0x3b4>
  } else {
    rtb_Switch2 = (controller_U.DI_V_BrakePedalPos - 1024.0F) / 1024.0F * 100.0F;
 8000b02:	4b7c      	ldr	r3, [pc, #496]	; (8000cf4 <controller_step+0x584>)
 8000b04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b08:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8000cf8 <controller_step+0x588>
 8000b0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b10:	eddf 6a79 	vldr	s13, [pc, #484]	; 8000cf8 <controller_step+0x588>
 8000b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b18:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8000cfc <controller_step+0x58c>
 8000b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b20:	edc7 7a03 	vstr	s15, [r7, #12]
   *  Gain: '<S5>/convertToAmps3'
   *  Inport: '<Root>/AMK_ActualVelocity'
   *  Inport: '<Root>/AMK_MagnetizingCurrent'
   */
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
    controller_U.AMK_MagnetizingCurrent, 0.0F);
 8000b24:	4b73      	ldr	r3, [pc, #460]	; (8000cf4 <controller_step+0x584>)
 8000b26:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b32:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000d00 <controller_step+0x590>
 8000b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3a:	eddf 0a72 	vldr	s1, [pc, #456]	; 8000d04 <controller_step+0x594>
 8000b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b42:	f008 fa85 	bl	8009050 <fmaxf>
 8000b46:	ed87 0a01 	vstr	s0, [r7, #4]
  a = fminf(controller_ConstB.Gain1, 52.0F);
 8000b4a:	4b6f      	ldr	r3, [pc, #444]	; (8000d08 <controller_step+0x598>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8000d0c <controller_step+0x59c>
 8000b54:	eeb0 0a67 	vmov.f32	s0, s15
 8000b58:	f008 fa95 	bl	8009086 <fminf>
 8000b5c:	ed87 0a00 	vstr	s0, [r7]
  rtb_TorqueLimit = fminf(fmaxf(fmaxf(sqrtf(a * a - rtb_TorqueLimit *
 8000b60:	edd7 7a00 	vldr	s15, [r7]
 8000b64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b74:	eeb0 0a67 	vmov.f32	s0, s15
 8000b78:	f008 fabc 	bl	80090f4 <sqrtf>
 8000b7c:	eef0 7a40 	vmov.f32	s15, s0
 8000b80:	eddf 0a60 	vldr	s1, [pc, #384]	; 8000d04 <controller_step+0x594>
 8000b84:	eeb0 0a67 	vmov.f32	s0, s15
 8000b88:	f008 fa62 	bl	8009050 <fmaxf>
 8000b8c:	eef0 7a40 	vmov.f32	s15, s0
    rtb_TorqueLimit), 0.0F) * 600.0F / ((real32_T)
 8000b90:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000d10 <controller_step+0x5a0>
 8000b94:	ee27 7a87 	vmul.f32	s14, s15, s14
    controller_U.AMK_ActualVelocity * 3.14159274F / 30.0F), 0.0F), 27.0F);
 8000b98:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <controller_step+0x584>)
 8000b9a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
    rtb_TorqueLimit), 0.0F) * 600.0F / ((real32_T)
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    controller_U.AMK_ActualVelocity * 3.14159274F / 30.0F), 0.0F), 27.0F);
 8000ba6:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8000d14 <controller_step+0x5a4>
 8000baa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000bae:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8000bb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
  rtb_TorqueLimit = fminf(fmaxf(fmaxf(sqrtf(a * a - rtb_TorqueLimit *
 8000bb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000bba:	eddf 0a52 	vldr	s1, [pc, #328]	; 8000d04 <controller_step+0x594>
 8000bbe:	eeb0 0a66 	vmov.f32	s0, s13
 8000bc2:	f008 fa45 	bl	8009050 <fmaxf>
 8000bc6:	eef0 7a40 	vmov.f32	s15, s0
 8000bca:	eef3 0a0b 	vmov.f32	s1, #59	; 0x41d80000  27.0
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	f008 fa58 	bl	8009086 <fminf>
 8000bd6:	ed87 0a01 	vstr	s0, [r7, #4]
   *  MinMax: '<S5>/Min'
   *  Product: '<S5>/Divide'
   *  RelationalOperator: '<S17>/Lower Test'
   *  RelationalOperator: '<S17>/Upper Test'
   */
  if (rtb_Switch2 > 0.0F) {
 8000bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	dd03      	ble.n	8000bf0 <controller_step+0x480>
    rtb_Switch2 = 0.0F;
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e04b      	b.n	8000c88 <controller_step+0x518>
  } else {
    if (!controller_B.b_ReadyToDrive) {
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <controller_step+0x57c>)
 8000bf2:	7adb      	ldrb	r3, [r3, #11]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d103      	bne.n	8000c00 <controller_step+0x490>
       */
      /* If: '<S2>/If' incorporates:
       *  Constant: '<S2>/Constant'
       *  SignalConversion generated from: '<S8>/In1'
       */
      rtb_Switch2 = 0.0F;
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e034      	b.n	8000c6a <controller_step+0x4fa>

      /* End of Outputs for SubSystem: '<S2>/If Action Subsystem' */
    } else if ((controller_U.DI_V_AccelPedalPos2 >= 0.0F) &&
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <controller_step+0x584>)
 8000c02:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	db1b      	blt.n	8000c48 <controller_step+0x4d8>
               (controller_U.DI_V_AccelPedalPos2 <= 1024.0F)) {
 8000c10:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <controller_step+0x584>)
 8000c12:	edd3 7a07 	vldr	s15, [r3, #28]
    } else if ((controller_U.DI_V_AccelPedalPos2 >= 0.0F) &&
 8000c16:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000cf8 <controller_step+0x588>
 8000c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c22:	d811      	bhi.n	8000c48 <controller_step+0x4d8>
       *  Gain: '<S12>/Gain'
       *  Inport: '<Root>/DI_V_AccelPedalPos2'
       *  Product: '<S18>/Divide'
       *  Sum: '<S18>/Subtract'
       */
      rtb_Switch2 = (controller_U.DI_V_AccelPedalPos2 - 1024.0F) / 1024.0F *
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <controller_step+0x584>)
 8000c26:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c2a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000cf8 <controller_step+0x588>
 8000c2e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000c32:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000cf8 <controller_step+0x588>
 8000c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000cfc <controller_step+0x58c>
 8000c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c42:	edc7 7a03 	vstr	s15, [r7, #12]
 8000c46:	e010      	b.n	8000c6a <controller_step+0x4fa>
       *  Gain: '<S11>/Gain'
       *  Inport: '<Root>/DI_V_AccelPedalPos1'
       *  Product: '<S16>/Divide'
       *  Sum: '<S16>/Subtract'
       */
      rtb_Switch2 = (controller_U.DI_V_AccelPedalPos1 - 1024.0F) / 1024.0F *
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <controller_step+0x584>)
 8000c4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000cf8 <controller_step+0x588>
 8000c52:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000c56:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000cf8 <controller_step+0x588>
 8000c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000cfc <controller_step+0x58c>
 8000c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c66:	edc7 7a03 	vstr	s15, [r7, #12]
        100.0F;
    }

    rtb_Switch2 = look1_iflf_binlxpw(rtb_Switch2, controller_ConstP.pooled3,
 8000c6a:	2214      	movs	r2, #20
 8000c6c:	492a      	ldr	r1, [pc, #168]	; (8000d18 <controller_step+0x5a8>)
 8000c6e:	482a      	ldr	r0, [pc, #168]	; (8000d18 <controller_step+0x5a8>)
 8000c70:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c74:	f7ff fcbe 	bl	80005f4 <look1_iflf_binlxpw>
 8000c78:	eeb0 7a40 	vmov.f32	s14, s0
      controller_ConstP.pooled3, 20U) * fminf(rtb_TorqueLimit, rtb_TorqueLimit);
 8000c7c:	edd7 7a01 	vldr	s15, [r7, #4]
    rtb_Switch2 = look1_iflf_binlxpw(rtb_Switch2, controller_ConstP.pooled3,
 8000c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c84:	edc7 7a03 	vstr	s15, [r7, #12]
   *  Inport: '<Root>/AMK_bInverterOn'
   *  Inport: '<Root>/AMK_bQuitDcOn'
   *  Inport: '<Root>/AMK_bQuitInverterOn'
   *  Inport: '<Root>/AMK_bSystemReady'
   */
  if (controller_DW.temporalCounter_i1 < 7U) {
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <controller_step+0x578>)
 8000c8a:	7adb      	ldrb	r3, [r3, #11]
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	d805      	bhi.n	8000c9c <controller_step+0x52c>
    controller_DW.temporalCounter_i1++;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <controller_step+0x578>)
 8000c92:	7adb      	ldrb	r3, [r3, #11]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <controller_step+0x578>)
 8000c9a:	72da      	strb	r2, [r3, #11]
  }

  if (controller_DW.is_active_c3_motor_interface_li == 0U) {
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <controller_step+0x578>)
 8000c9e:	7a9b      	ldrb	r3, [r3, #10]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d13b      	bne.n	8000d1c <controller_step+0x5ac>
    controller_DW.is_active_c3_motor_interface_li = 1U;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <controller_step+0x578>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	729a      	strb	r2, [r3, #10]
    controller_DW.is_c3_motor_interface_lib = contr_IN_motorOff_waitingForGov;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <controller_step+0x578>)
 8000cac:	2206      	movs	r2, #6
 8000cae:	719a      	strb	r2, [r3, #6]
    controller_B.MI_motorStatus = OFF;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <controller_step+0x57c>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	721a      	strb	r2, [r3, #8]

    /* Outport: '<Root>/AMK_bInverterOn_tx' */
    controller_Y.AMK_bInverterOn_tx = 0U;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <controller_step+0x580>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	715a      	strb	r2, [r3, #5]

    /* Outport: '<Root>/AMK_bDcOn_tx' */
    controller_Y.AMK_bDcOn_tx = 0U;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <controller_step+0x580>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	719a      	strb	r2, [r3, #6]

    /* Outport: '<Root>/AMK_bEnable' */
    controller_Y.AMK_bEnable = 0U;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <controller_step+0x580>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	71da      	strb	r2, [r3, #7]

    /* Outport: '<Root>/AMK_bErrorReset' */
    controller_Y.AMK_bErrorReset = 0U;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <controller_step+0x580>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	721a      	strb	r2, [r3, #8]

    /* Outport: '<Root>/AMK_TargetVelocity' */
    controller_Y.AMK_TargetVelocity = 0.0F;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <controller_step+0x580>)
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
    controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <controller_step+0x57c>)
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
    controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <controller_step+0x57c>)
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	e236      	b.n	8001156 <controller_step+0x9e6>
 8000ce8:	20000208 	.word	0x20000208
 8000cec:	200001fc 	.word	0x200001fc
 8000cf0:	20000278 	.word	0x20000278
 8000cf4:	20000228 	.word	0x20000228
 8000cf8:	44800000 	.word	0x44800000
 8000cfc:	42c80000 	.word	0x42c80000
 8000d00:	3dcccc00 	.word	0x3dcccc00
 8000d04:	00000000 	.word	0x00000000
 8000d08:	08009194 	.word	0x08009194
 8000d0c:	42500000 	.word	0x42500000
 8000d10:	44160000 	.word	0x44160000
 8000d14:	40490fdb 	.word	0x40490fdb
 8000d18:	08009198 	.word	0x08009198
  } else {
    switch (controller_DW.is_c3_motor_interface_lib) {
 8000d1c:	4ba9      	ldr	r3, [pc, #676]	; (8000fc4 <controller_step+0x854>)
 8000d1e:	799b      	ldrb	r3, [r3, #6]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	f200 81fa 	bhi.w	800111c <controller_step+0x9ac>
 8000d28:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <controller_step+0x5c0>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000d45 	.word	0x08000d45
 8000d34:	08000d7b 	.word	0x08000d7b
 8000d38:	08000e51 	.word	0x08000e51
 8000d3c:	08000ebf 	.word	0x08000ebf
 8000d40:	08000fdd 	.word	0x08000fdd
     case controller_IN_AMK_errorDetected:
      if (controller_B.GOV_e_miCmd == ERR_RESET) {
 8000d44:	4ba0      	ldr	r3, [pc, #640]	; (8000fc8 <controller_step+0x858>)
 8000d46:	7a5b      	ldrb	r3, [r3, #9]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	f040 8201 	bne.w	8001150 <controller_step+0x9e0>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_errorReset;
 8000d4e:	4b9d      	ldr	r3, [pc, #628]	; (8000fc4 <controller_step+0x854>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_errorReset = contr_IN_enforceSetpointsZero_p;
 8000d54:	4b9b      	ldr	r3, [pc, #620]	; (8000fc4 <controller_step+0x854>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	721a      	strb	r2, [r3, #8]

        /* Outport: '<Root>/AMK_TargetVelocity' */
        controller_Y.AMK_TargetVelocity = 0.0F;
 8000d5a:	4b9c      	ldr	r3, [pc, #624]	; (8000fcc <controller_step+0x85c>)
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
        controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000d62:	4b99      	ldr	r3, [pc, #612]	; (8000fc8 <controller_step+0x858>)
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000d6a:	4b97      	ldr	r3, [pc, #604]	; (8000fc8 <controller_step+0x858>)
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000d72:	4b96      	ldr	r3, [pc, #600]	; (8000fcc <controller_step+0x85c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	715a      	strb	r2, [r3, #5]
      }
      break;
 8000d78:	e1ea      	b.n	8001150 <controller_step+0x9e0>

     case controller_IN_AMK_errorReset:
      switch (controller_DW.is_AMK_errorReset) {
 8000d7a:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <controller_step+0x854>)
 8000d7c:	7a1b      	ldrb	r3, [r3, #8]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d026      	beq.n	8000dd0 <controller_step+0x660>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	dc35      	bgt.n	8000df2 <controller_step+0x682>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <controller_step+0x620>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d012      	beq.n	8000db4 <controller_step+0x644>
 8000d8e:	e030      	b.n	8000df2 <controller_step+0x682>
       case contr_IN_enforceSetpointsZero_p:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000d90:	4b8e      	ldr	r3, [pc, #568]	; (8000fcc <controller_step+0x85c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000d96:	4b8e      	ldr	r3, [pc, #568]	; (8000fd0 <controller_step+0x860>)
 8000d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14f      	bne.n	8000e40 <controller_step+0x6d0>
          controller_DW.is_AMK_errorReset = controller_IN_toggleEnable;
 8000da0:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <controller_step+0x854>)
 8000da2:	2203      	movs	r2, #3
 8000da4:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000da6:	4b87      	ldr	r3, [pc, #540]	; (8000fc4 <controller_step+0x854>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000dac:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <controller_step+0x85c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	71da      	strb	r2, [r3, #7]
        }
        break;
 8000db2:	e045      	b.n	8000e40 <controller_step+0x6d0>

       case controller_IN_sendReset:
        /* Outport: '<Root>/AMK_bErrorReset' */
        controller_Y.AMK_bErrorReset = 1U;
 8000db4:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <controller_step+0x85c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	721a      	strb	r2, [r3, #8]
        if (controller_DW.temporalCounter_i1 >= 3U) {
 8000dba:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <controller_step+0x854>)
 8000dbc:	7adb      	ldrb	r3, [r3, #11]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d940      	bls.n	8000e44 <controller_step+0x6d4>
          controller_DW.is_AMK_errorReset = controller_IN_toggleReset;
 8000dc2:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <controller_step+0x854>)
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <controller_step+0x85c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000dce:	e039      	b.n	8000e44 <controller_step+0x6d4>

       case controller_IN_toggleEnable:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000dd0:	4b7e      	ldr	r3, [pc, #504]	; (8000fcc <controller_step+0x85c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	71da      	strb	r2, [r3, #7]
        if (controller_DW.temporalCounter_i1 >= 3U) {
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <controller_step+0x854>)
 8000dd8:	7adb      	ldrb	r3, [r3, #11]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d934      	bls.n	8000e48 <controller_step+0x6d8>
          controller_DW.is_AMK_errorReset = controller_IN_sendReset;
 8000dde:	4b79      	ldr	r3, [pc, #484]	; (8000fc4 <controller_step+0x854>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000de4:	4b77      	ldr	r3, [pc, #476]	; (8000fc4 <controller_step+0x854>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 1U;
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <controller_step+0x85c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000df0:	e02a      	b.n	8000e48 <controller_step+0x6d8>

       default:
        /* Outport: '<Root>/AMK_bErrorReset' */
        /* case IN_toggleReset: */
        controller_Y.AMK_bErrorReset = 0U;
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <controller_step+0x85c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	721a      	strb	r2, [r3, #8]
        if (controller_U.AMK_bSystemReady) {
 8000df8:	4b75      	ldr	r3, [pc, #468]	; (8000fd0 <controller_step+0x860>)
 8000dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d024      	beq.n	8000e4c <controller_step+0x6dc>
          controller_DW.is_AMK_errorReset = controller_IN_NO_ACTIVE_CHILD;
 8000e02:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <controller_step+0x854>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	721a      	strb	r2, [r3, #8]
          controller_DW.is_c3_motor_interface_lib =
 8000e08:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <controller_step+0x854>)
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000e0e:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <controller_step+0x858>)
 8000e10:	2206      	movs	r2, #6
 8000e12:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000e14:	4b6d      	ldr	r3, [pc, #436]	; (8000fcc <controller_step+0x85c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000e1a:	4b6c      	ldr	r3, [pc, #432]	; (8000fcc <controller_step+0x85c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	719a      	strb	r2, [r3, #6]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000e20:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <controller_step+0x85c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0.0F;
 8000e26:	4b69      	ldr	r3, [pc, #420]	; (8000fcc <controller_step+0x85c>)
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
          controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000e2e:	4b66      	ldr	r3, [pc, #408]	; (8000fc8 <controller_step+0x858>)
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
          controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000e36:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <controller_step+0x858>)
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
        }
        break;
 8000e3e:	e005      	b.n	8000e4c <controller_step+0x6dc>
        break;
 8000e40:	bf00      	nop
 8000e42:	e188      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000e44:	bf00      	nop
 8000e46:	e186      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000e48:	bf00      	nop
 8000e4a:	e184      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000e4c:	bf00      	nop
      }
      break;
 8000e4e:	e182      	b.n	8001156 <controller_step+0x9e6>

     case controller_IN_AMK_running:
      if (controller_U.AMK_bError) {
 8000e50:	4b5f      	ldr	r3, [pc, #380]	; (8000fd0 <controller_step+0x860>)
 8000e52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <controller_step+0x6f8>
        controller_DW.is_c3_motor_interface_lib =
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <controller_step+0x854>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	719a      	strb	r2, [r3, #6]
          controller_IN_AMK_errorDetected;
        controller_B.MI_motorStatus = MI_STS_ERROR;
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <controller_step+0x858>)
 8000e62:	2205      	movs	r2, #5
 8000e64:	721a      	strb	r2, [r3, #8]
         */
        controller_Y.AMK_TargetVelocity = 20000.0F;
        controller_B.AMK_TorqueLimitPositiv = rtb_Switch2;
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
      }
      break;
 8000e66:	e176      	b.n	8001156 <controller_step+0x9e6>
      } else if (controller_B.GOV_e_miCmd == CMD_SHUTDOWN) {
 8000e68:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <controller_step+0x858>)
 8000e6a:	7a5b      	ldrb	r3, [r3, #9]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d118      	bne.n	8000ea2 <controller_step+0x732>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_shutdown;
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <controller_step+0x854>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_shutdown = control_IN_enforceSetpointsZero;
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <controller_step+0x854>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	725a      	strb	r2, [r3, #9]
        controller_B.MI_motorStatus = SHUTDOWN;
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <controller_step+0x858>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	721a      	strb	r2, [r3, #8]
        controller_Y.AMK_TargetVelocity = 0.0F;
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <controller_step+0x85c>)
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
        controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <controller_step+0x858>)
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <controller_step+0x858>)
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <controller_step+0x85c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	715a      	strb	r2, [r3, #5]
      break;
 8000ea0:	e159      	b.n	8001156 <controller_step+0x9e6>
        controller_B.MI_motorStatus = RUNNING;
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <controller_step+0x858>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	721a      	strb	r2, [r3, #8]
        controller_Y.AMK_TargetVelocity = 20000.0F;
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <controller_step+0x85c>)
 8000eaa:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <controller_step+0x864>)
 8000eac:	60da      	str	r2, [r3, #12]
        controller_B.AMK_TorqueLimitPositiv = rtb_Switch2;
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <controller_step+0x858>)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6013      	str	r3, [r2, #0]
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <controller_step+0x858>)
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
      break;
 8000ebc:	e14b      	b.n	8001156 <controller_step+0x9e6>

     case controller_IN_AMK_shutdown:
      switch (controller_DW.is_AMK_shutdown) {
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <controller_step+0x854>)
 8000ec0:	7a5b      	ldrb	r3, [r3, #9]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d002      	beq.n	8000ecc <controller_step+0x75c>
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d01e      	beq.n	8000f08 <controller_step+0x798>
 8000eca:	e03b      	b.n	8000f44 <controller_step+0x7d4>
       case controller_IN_commandOff:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <controller_step+0x85c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	71da      	strb	r2, [r3, #7]
        if (!controller_U.AMK_bQuitDcOn) {
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <controller_step+0x860>)
 8000ed4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <controller_step+0x77a>
          controller_DW.is_AMK_shutdown = controller_IN_toggleDCon;
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <controller_step+0x854>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <controller_step+0x85c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000ee8:	e067      	b.n	8000fba <controller_step+0x84a>
        } else if (controller_U.AMK_bError) {
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <controller_step+0x860>)
 8000eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d062      	beq.n	8000fba <controller_step+0x84a>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <controller_step+0x854>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000efa:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <controller_step+0x854>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <controller_step+0x858>)
 8000f02:	2205      	movs	r2, #5
 8000f04:	721a      	strb	r2, [r3, #8]
        break;
 8000f06:	e058      	b.n	8000fba <controller_step+0x84a>

       case control_IN_enforceSetpointsZero:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <controller_step+0x85c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <controller_step+0x860>)
 8000f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <controller_step+0x7b6>
          controller_DW.is_AMK_shutdown = controller_IN_commandOff;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <controller_step+0x854>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <controller_step+0x85c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	71da      	strb	r2, [r3, #7]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f24:	e04b      	b.n	8000fbe <controller_step+0x84e>
        } else if (controller_U.AMK_bError) {
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <controller_step+0x860>)
 8000f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d046      	beq.n	8000fbe <controller_step+0x84e>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <controller_step+0x854>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <controller_step+0x854>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <controller_step+0x858>)
 8000f3e:	2205      	movs	r2, #5
 8000f40:	721a      	strb	r2, [r3, #8]
        break;
 8000f42:	e03c      	b.n	8000fbe <controller_step+0x84e>

       default:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        /* case IN_toggleDCon: */
        controller_Y.AMK_bDcOn_tx = 0U;
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <controller_step+0x85c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	719a      	strb	r2, [r3, #6]
        if ((!controller_U.AMK_bDcOn) && (!controller_U.AMK_bQuitDcOn)) {
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <controller_step+0x860>)
 8000f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d123      	bne.n	8000f9c <controller_step+0x82c>
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <controller_step+0x860>)
 8000f56:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11e      	bne.n	8000f9c <controller_step+0x82c>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <controller_step+0x854>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <controller_step+0x854>)
 8000f66:	2206      	movs	r2, #6
 8000f68:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <controller_step+0x858>)
 8000f6c:	2206      	movs	r2, #6
 8000f6e:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <controller_step+0x85c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <controller_step+0x85c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <controller_step+0x85c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0.0F;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <controller_step+0x85c>)
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
          controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <controller_step+0x858>)
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
          controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <controller_step+0x858>)
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f9a:	e01d      	b.n	8000fd8 <controller_step+0x868>
        } else if (controller_U.AMK_bError) {
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <controller_step+0x860>)
 8000f9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d018      	beq.n	8000fd8 <controller_step+0x868>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <controller_step+0x854>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <controller_step+0x854>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <controller_step+0x858>)
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	721a      	strb	r2, [r3, #8]
        break;
 8000fb8:	e00e      	b.n	8000fd8 <controller_step+0x868>
        break;
 8000fba:	bf00      	nop
 8000fbc:	e0cb      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000fbe:	bf00      	nop
 8000fc0:	e0c9      	b.n	8001156 <controller_step+0x9e6>
 8000fc2:	bf00      	nop
 8000fc4:	20000208 	.word	0x20000208
 8000fc8:	200001fc 	.word	0x200001fc
 8000fcc:	20000278 	.word	0x20000278
 8000fd0:	20000228 	.word	0x20000228
 8000fd4:	469c4000 	.word	0x469c4000
        break;
 8000fd8:	bf00      	nop
      }
      break;
 8000fda:	e0bc      	b.n	8001156 <controller_step+0x9e6>

     case controller_IN_AMK_startup:
      switch (controller_DW.is_AMK_startup) {
 8000fdc:	4ba3      	ldr	r3, [pc, #652]	; (800126c <controller_step+0xafc>)
 8000fde:	79db      	ldrb	r3, [r3, #7]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d049      	beq.n	8001078 <controller_step+0x908>
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	dc76      	bgt.n	80010d6 <controller_step+0x966>
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d002      	beq.n	8000ff2 <controller_step+0x882>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d026      	beq.n	800103e <controller_step+0x8ce>
 8000ff0:	e071      	b.n	80010d6 <controller_step+0x966>
       case controller_IN_commandOn:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 1U;
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	; (8001270 <controller_step+0xb00>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	71da      	strb	r2, [r3, #7]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 1U;
 8000ff8:	4b9d      	ldr	r3, [pc, #628]	; (8001270 <controller_step+0xb00>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	715a      	strb	r2, [r3, #5]
        if (controller_U.AMK_bInverterOn && controller_U.AMK_bQuitInverterOn) {
 8000ffe:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <controller_step+0xb04>)
 8001000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <controller_step+0x8b0>
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <controller_step+0xb04>)
 800100a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <controller_step+0x8b0>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8001012:	4b96      	ldr	r3, [pc, #600]	; (800126c <controller_step+0xafc>)
 8001014:	2200      	movs	r2, #0
 8001016:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_running;
 8001018:	4b94      	ldr	r3, [pc, #592]	; (800126c <controller_step+0xafc>)
 800101a:	2203      	movs	r2, #3
 800101c:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 800101e:	e075      	b.n	800110c <controller_step+0x99c>
        } else if (controller_U.AMK_bError) {
 8001020:	4b94      	ldr	r3, [pc, #592]	; (8001274 <controller_step+0xb04>)
 8001022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001026:	2b00      	cmp	r3, #0
 8001028:	d070      	beq.n	800110c <controller_step+0x99c>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 800102a:	4b90      	ldr	r3, [pc, #576]	; (800126c <controller_step+0xafc>)
 800102c:	2200      	movs	r2, #0
 800102e:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8001030:	4b8e      	ldr	r3, [pc, #568]	; (800126c <controller_step+0xafc>)
 8001032:	2201      	movs	r2, #1
 8001034:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001036:	4b90      	ldr	r3, [pc, #576]	; (8001278 <controller_step+0xb08>)
 8001038:	2205      	movs	r2, #5
 800103a:	721a      	strb	r2, [r3, #8]
        break;
 800103c:	e066      	b.n	800110c <controller_step+0x99c>

       case control_IN_enforceSetpointsZero:
        if (controller_DW.temporalCounter_i1 >= 5U) {
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <controller_step+0xafc>)
 8001040:	7adb      	ldrb	r3, [r3, #11]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d909      	bls.n	800105a <controller_step+0x8ea>
          controller_DW.is_AMK_startup = controller_IN_commandOn;
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <controller_step+0xafc>)
 8001048:	2201      	movs	r2, #1
 800104a:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 1U;
 800104c:	4b88      	ldr	r3, [pc, #544]	; (8001270 <controller_step+0xb00>)
 800104e:	2201      	movs	r2, #1
 8001050:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 1U;
 8001052:	4b87      	ldr	r3, [pc, #540]	; (8001270 <controller_step+0xb00>)
 8001054:	2201      	movs	r2, #1
 8001056:	715a      	strb	r2, [r3, #5]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8001058:	e05a      	b.n	8001110 <controller_step+0x9a0>
        } else if (controller_U.AMK_bError) {
 800105a:	4b86      	ldr	r3, [pc, #536]	; (8001274 <controller_step+0xb04>)
 800105c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001060:	2b00      	cmp	r3, #0
 8001062:	d055      	beq.n	8001110 <controller_step+0x9a0>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8001064:	4b81      	ldr	r3, [pc, #516]	; (800126c <controller_step+0xafc>)
 8001066:	2200      	movs	r2, #0
 8001068:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 800106a:	4b80      	ldr	r3, [pc, #512]	; (800126c <controller_step+0xafc>)
 800106c:	2201      	movs	r2, #1
 800106e:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <controller_step+0xb08>)
 8001072:	2205      	movs	r2, #5
 8001074:	721a      	strb	r2, [r3, #8]
        break;
 8001076:	e04b      	b.n	8001110 <controller_step+0x9a0>

       case controller_IN_toggleDCon:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        controller_Y.AMK_bDcOn_tx = 1U;
 8001078:	4b7d      	ldr	r3, [pc, #500]	; (8001270 <controller_step+0xb00>)
 800107a:	2201      	movs	r2, #1
 800107c:	719a      	strb	r2, [r3, #6]
        if (controller_U.AMK_bDcOn && controller_U.AMK_bQuitDcOn) {
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <controller_step+0xb04>)
 8001080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d017      	beq.n	80010b8 <controller_step+0x948>
 8001088:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <controller_step+0xb04>)
 800108a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800108e:	2b00      	cmp	r3, #0
 8001090:	d012      	beq.n	80010b8 <controller_step+0x948>
          controller_DW.is_AMK_startup = control_IN_enforceSetpointsZero;
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <controller_step+0xafc>)
 8001094:	2202      	movs	r2, #2
 8001096:	71da      	strb	r2, [r3, #7]
          controller_DW.temporalCounter_i1 = 0U;
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <controller_step+0xafc>)
 800109a:	2200      	movs	r2, #0
 800109c:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0.0F;
 800109e:	4b74      	ldr	r3, [pc, #464]	; (8001270 <controller_step+0xb00>)
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
          controller_B.AMK_TorqueLimitPositiv = 0.0F;
 80010a6:	4b74      	ldr	r3, [pc, #464]	; (8001278 <controller_step+0xb08>)
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
          controller_B.AMK_TorqueLimitNegativ = 0.0F;
 80010ae:	4b72      	ldr	r3, [pc, #456]	; (8001278 <controller_step+0xb08>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 80010b6:	e02d      	b.n	8001114 <controller_step+0x9a4>
        } else if (controller_U.AMK_bError) {
 80010b8:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <controller_step+0xb04>)
 80010ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d028      	beq.n	8001114 <controller_step+0x9a4>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 80010c2:	4b6a      	ldr	r3, [pc, #424]	; (800126c <controller_step+0xafc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <controller_step+0xafc>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 80010ce:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <controller_step+0xb08>)
 80010d0:	2205      	movs	r2, #5
 80010d2:	721a      	strb	r2, [r3, #8]
        break;
 80010d4:	e01e      	b.n	8001114 <controller_step+0x9a4>

       default:
        /* case IN_waiting_sysReady: */
        if (controller_U.AMK_bSystemReady) {
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <controller_step+0xb04>)
 80010d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <controller_step+0x97e>
          controller_DW.is_AMK_startup = controller_IN_toggleDCon;
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <controller_step+0xafc>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 1U;
 80010e6:	4b62      	ldr	r3, [pc, #392]	; (8001270 <controller_step+0xb00>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 80010ec:	e014      	b.n	8001118 <controller_step+0x9a8>
        } else if (controller_U.AMK_bError) {
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <controller_step+0xb04>)
 80010f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00f      	beq.n	8001118 <controller_step+0x9a8>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 80010f8:	4b5c      	ldr	r3, [pc, #368]	; (800126c <controller_step+0xafc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <controller_step+0xafc>)
 8001100:	2201      	movs	r2, #1
 8001102:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001104:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <controller_step+0xb08>)
 8001106:	2205      	movs	r2, #5
 8001108:	721a      	strb	r2, [r3, #8]
        break;
 800110a:	e005      	b.n	8001118 <controller_step+0x9a8>
        break;
 800110c:	bf00      	nop
 800110e:	e022      	b.n	8001156 <controller_step+0x9e6>
        break;
 8001110:	bf00      	nop
 8001112:	e020      	b.n	8001156 <controller_step+0x9e6>
        break;
 8001114:	bf00      	nop
 8001116:	e01e      	b.n	8001156 <controller_step+0x9e6>
        break;
 8001118:	bf00      	nop
      }
      break;
 800111a:	e01c      	b.n	8001156 <controller_step+0x9e6>

     default:
      /* Outport: '<Root>/AMK_bInverterOn_tx' */
      /* case IN_motorOff_waitingForGov: */
      controller_Y.AMK_bInverterOn_tx = 0U;
 800111c:	4b54      	ldr	r3, [pc, #336]	; (8001270 <controller_step+0xb00>)
 800111e:	2200      	movs	r2, #0
 8001120:	715a      	strb	r2, [r3, #5]

      /* Outport: '<Root>/AMK_bDcOn_tx' */
      controller_Y.AMK_bDcOn_tx = 0U;
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <controller_step+0xb00>)
 8001124:	2200      	movs	r2, #0
 8001126:	719a      	strb	r2, [r3, #6]

      /* Outport: '<Root>/AMK_bEnable' */
      controller_Y.AMK_bEnable = 0U;
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <controller_step+0xb00>)
 800112a:	2200      	movs	r2, #0
 800112c:	71da      	strb	r2, [r3, #7]

      /* Outport: '<Root>/AMK_bErrorReset' */
      controller_Y.AMK_bErrorReset = 0U;
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <controller_step+0xb00>)
 8001130:	2200      	movs	r2, #0
 8001132:	721a      	strb	r2, [r3, #8]
      if (controller_B.GOV_e_miCmd == CMD_STARTUP) {
 8001134:	4b50      	ldr	r3, [pc, #320]	; (8001278 <controller_step+0xb08>)
 8001136:	7a5b      	ldrb	r3, [r3, #9]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d10b      	bne.n	8001154 <controller_step+0x9e4>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_startup;
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <controller_step+0xafc>)
 800113e:	2205      	movs	r2, #5
 8001140:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_startup = controller_IN_waiting_sysReady;
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <controller_step+0xafc>)
 8001144:	2204      	movs	r2, #4
 8001146:	71da      	strb	r2, [r3, #7]
        controller_B.MI_motorStatus = STARTUP;
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <controller_step+0xb08>)
 800114a:	2202      	movs	r2, #2
 800114c:	721a      	strb	r2, [r3, #8]
      }
      break;
 800114e:	e001      	b.n	8001154 <controller_step+0x9e4>
      break;
 8001150:	bf00      	nop
 8001152:	e000      	b.n	8001156 <controller_step+0x9e6>
      break;
 8001154:	bf00      	nop

  /* Outport: '<Root>/AMK_TorqueLimitPositiv' incorporates:
   *  Gain: '<S4>/Gain'
   */
  controller_Y.AMK_TorqueLimitPositiv = 1000.0F *
    controller_B.AMK_TorqueLimitPositiv;
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <controller_step+0xb08>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
  controller_Y.AMK_TorqueLimitPositiv = 1000.0F *
 800115c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800127c <controller_step+0xb0c>
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <controller_step+0xb00>)
 8001166:	edc3 7a04 	vstr	s15, [r3, #16]

  /* Outport: '<Root>/AMK_TorqueLimitNegativ' incorporates:
   *  Gain: '<S4>/Gain1'
   */
  controller_Y.AMK_TorqueLimitNegativ = 1000.0F *
    controller_B.AMK_TorqueLimitNegativ;
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <controller_step+0xb08>)
 800116c:	edd3 7a01 	vldr	s15, [r3, #4]
  controller_Y.AMK_TorqueLimitNegativ = 1000.0F *
 8001170:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800127c <controller_step+0xb0c>
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <controller_step+0xb00>)
 800117a:	edc3 7a05 	vstr	s15, [r3, #20]
   *  Delay: '<S3>/Delay'
   *  Inport: '<Root>/BM_b_HVnegContactorSts'
   *  Inport: '<Root>/BM_b_HVposContactorSts'
   *  Inport: '<Root>/BM_b_prechrgContactorSts'
   */
  if (controller_DW.temporalCounter_i1_p < 7U) {
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <controller_step+0xafc>)
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b06      	cmp	r3, #6
 8001184:	d805      	bhi.n	8001192 <controller_step+0xa22>
    controller_DW.temporalCounter_i1_p++;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <controller_step+0xafc>)
 8001188:	7e1b      	ldrb	r3, [r3, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <controller_step+0xafc>)
 8001190:	761a      	strb	r2, [r3, #24]
  }

  if (controller_DW.is_active_c3_battery_monitor_li == 0U) {
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <controller_step+0xafc>)
 8001194:	7ddb      	ldrb	r3, [r3, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <controller_step+0xa3e>
    controller_DW.is_active_c3_battery_monitor_li = 1U;
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <controller_step+0xafc>)
 800119c:	2201      	movs	r2, #1
 800119e:	75da      	strb	r2, [r3, #23]
    controller_DW.is_c3_battery_monitor_lib = controller_IN_InitialState;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <controller_step+0xafc>)
 80011a2:	2208      	movs	r2, #8
 80011a4:	759a      	strb	r2, [r3, #22]
    controller_DW.Delay_DSTATE_f = BM_INIT;
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <controller_step+0xafc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	705a      	strb	r2, [r3, #1]
 80011ac:	e22a      	b.n	8001604 <controller_step+0xe94>
  } else {
    switch (controller_DW.is_c3_battery_monitor_lib) {
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <controller_step+0xafc>)
 80011b0:	7d9b      	ldrb	r3, [r3, #22]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	f200 81f3 	bhi.w	80015a0 <controller_step+0xe30>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <controller_step+0xa50>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011f1 	.word	0x080011f1
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	08001201 	.word	0x08001201
 80011cc:	08001209 	.word	0x08001209
 80011d0:	08001211 	.word	0x08001211
 80011d4:	08001219 	.word	0x08001219
 80011d8:	08001221 	.word	0x08001221
 80011dc:	08001229 	.word	0x08001229
 80011e0:	080013ef 	.word	0x080013ef
 80011e4:	0800145d 	.word	0x0800145d
 80011e8:	080014c7 	.word	0x080014c7
 80011ec:	08001539 	.word	0x08001539
     case controll_IN_ErrorAllClosedState:
      controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <controller_step+0xafc>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	705a      	strb	r2, [r3, #1]
      break;
 80011f6:	e205      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_ErrorHVPositive:
      controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <controller_step+0xafc>)
 80011fa:	220d      	movs	r2, #13
 80011fc:	705a      	strb	r2, [r3, #1]
      break;
 80011fe:	e201      	b.n	8001604 <controller_step+0xe94>

     case IN_ErrorInitializePrechargeStat:
      controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <controller_step+0xafc>)
 8001202:	2209      	movs	r2, #9
 8001204:	705a      	strb	r2, [r3, #1]
      break;
 8001206:	e1fd      	b.n	8001604 <controller_step+0xe94>

     case co_IN_ErrorPrechargeClosedState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <controller_step+0xafc>)
 800120a:	2207      	movs	r2, #7
 800120c:	705a      	strb	r2, [r3, #1]
      break;
 800120e:	e1f9      	b.n	8001604 <controller_step+0xe94>

     case controll_IN_ErrorPrechargeState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <controller_step+0xafc>)
 8001212:	220a      	movs	r2, #10
 8001214:	705a      	strb	r2, [r3, #1]
      break;
 8001216:	e1f5      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_ErrorRunningState:
      controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <controller_step+0xafc>)
 800121a:	220b      	movs	r2, #11
 800121c:	705a      	strb	r2, [r3, #1]
      break;
 800121e:	e1f1      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_ErrorStartupState:
      controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <controller_step+0xafc>)
 8001222:	2208      	movs	r2, #8
 8001224:	705a      	strb	r2, [r3, #1]
      break;
 8001226:	e1ed      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_InitialState:
      controller_DW.Delay_DSTATE_f = BM_INIT;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <controller_step+0xafc>)
 800122a:	2201      	movs	r2, #1
 800122c:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <controller_step+0xb04>)
 8001230:	ed93 7b08 	vldr	d7, [r3, #32]
 8001234:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123c:	d120      	bne.n	8001280 <controller_step+0xb10>
          (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <controller_step+0xb04>)
 8001240:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001244:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d118      	bne.n	8001280 <controller_step+0xb10>
          (controller_U.BM_b_HVposContactorSts == 0.0)) {
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <controller_step+0xb04>)
 8001250:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 8001254:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d110      	bne.n	8001280 <controller_step+0xb10>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState1;
 800125e:	4b03      	ldr	r3, [pc, #12]	; (800126c <controller_step+0xafc>)
 8001260:	220d      	movs	r2, #13
 8001262:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = BM_IDLE;
 8001264:	4b01      	ldr	r3, [pc, #4]	; (800126c <controller_step+0xafc>)
 8001266:	2202      	movs	r2, #2
 8001268:	705a      	strb	r2, [r3, #1]
 800126a:	e0bf      	b.n	80013ec <controller_step+0xc7c>
 800126c:	20000208 	.word	0x20000208
 8001270:	20000278 	.word	0x20000278
 8001274:	20000228 	.word	0x20000228
 8001278:	200001fc 	.word	0x200001fc
 800127c:	447a0000 	.word	0x447a0000
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 8001280:	4bab      	ldr	r3, [pc, #684]	; (8001530 <controller_step+0xdc0>)
 8001282:	ed93 7b08 	vldr	d7, [r3, #32]
 8001286:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800128a:	eeb4 7b46 	vcmp.f64	d7, d6
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d116      	bne.n	80012c2 <controller_step+0xb52>
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 8001294:	4ba6      	ldr	r3, [pc, #664]	; (8001530 <controller_step+0xdc0>)
 8001296:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800129a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d10e      	bne.n	80012c2 <controller_step+0xb52>
                 (controller_U.BM_b_HVposContactorSts == 0.0)) {
 80012a4:	4ba2      	ldr	r3, [pc, #648]	; (8001530 <controller_step+0xdc0>)
 80012a6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 80012aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d106      	bne.n	80012c2 <controller_step+0xb52>
        controller_DW.is_c3_battery_monitor_lib =
 80012b4:	4b9f      	ldr	r3, [pc, #636]	; (8001534 <controller_step+0xdc4>)
 80012b6:	2204      	movs	r2, #4
 80012b8:	759a      	strb	r2, [r3, #22]
          co_IN_ErrorPrechargeClosedState;
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 80012ba:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <controller_step+0xdc4>)
 80012bc:	2207      	movs	r2, #7
 80012be:	705a      	strb	r2, [r3, #1]
 80012c0:	e094      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 80012c2:	4b9b      	ldr	r3, [pc, #620]	; (8001530 <controller_step+0xdc0>)
 80012c4:	ed93 7b08 	vldr	d7, [r3, #32]
 80012c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d11a      	bne.n	800130c <controller_step+0xb9c>
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80012d6:	4b96      	ldr	r3, [pc, #600]	; (8001530 <controller_step+0xdc0>)
 80012d8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 80012dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d110      	bne.n	800130c <controller_step+0xb9c>
                 (controller_U.BM_b_HVposContactorSts == 1.0)) {
 80012ea:	4b91      	ldr	r3, [pc, #580]	; (8001530 <controller_step+0xdc0>)
 80012ec:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80012f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012f4:	eeb4 7b46 	vcmp.f64	d7, d6
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d106      	bne.n	800130c <controller_step+0xb9c>
        controller_DW.is_c3_battery_monitor_lib =
 80012fe:	4b8d      	ldr	r3, [pc, #564]	; (8001534 <controller_step+0xdc4>)
 8001300:	2201      	movs	r2, #1
 8001302:	759a      	strb	r2, [r3, #22]
          controll_IN_ErrorAllClosedState;
        controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 8001304:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <controller_step+0xdc4>)
 8001306:	220c      	movs	r2, #12
 8001308:	705a      	strb	r2, [r3, #1]
 800130a:	e06f      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <controller_step+0xdc0>)
 800130e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d118      	bne.n	800134e <controller_step+0xbde>
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 800131c:	4b84      	ldr	r3, [pc, #528]	; (8001530 <controller_step+0xdc0>)
 800131e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d110      	bne.n	800134e <controller_step+0xbde>
                 (controller_U.BM_b_HVposContactorSts == 1.0)) {
 800132c:	4b80      	ldr	r3, [pc, #512]	; (8001530 <controller_step+0xdc0>)
 800132e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 8001332:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001336:	eeb4 7b46 	vcmp.f64	d7, d6
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d106      	bne.n	800134e <controller_step+0xbde>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_ErrorHVPositive;
 8001340:	4b7c      	ldr	r3, [pc, #496]	; (8001534 <controller_step+0xdc4>)
 8001342:	2202      	movs	r2, #2
 8001344:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 8001346:	4b7b      	ldr	r3, [pc, #492]	; (8001534 <controller_step+0xdc4>)
 8001348:	220d      	movs	r2, #13
 800134a:	705a      	strb	r2, [r3, #1]
 800134c:	e04e      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <controller_step+0xdc0>)
 8001350:	ed93 7b08 	vldr	d7, [r3, #32]
 8001354:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001358:	eeb4 7b46 	vcmp.f64	d7, d6
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d11b      	bne.n	800139a <controller_step+0xc2a>
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001362:	4b73      	ldr	r3, [pc, #460]	; (8001530 <controller_step+0xdc0>)
 8001364:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 8001368:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800136c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d111      	bne.n	800139a <controller_step+0xc2a>
                 (controller_U.BM_b_HVposContactorSts == 0.0)) {
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <controller_step+0xdc0>)
 8001378:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 800137c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d109      	bne.n	800139a <controller_step+0xc2a>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_PrechargeState;
 8001386:	4b6b      	ldr	r3, [pc, #428]	; (8001534 <controller_step+0xdc4>)
 8001388:	220a      	movs	r2, #10
 800138a:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <controller_step+0xdc4>)
 800138e:	2200      	movs	r2, #0
 8001390:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = PRECHARGE;
 8001392:	4b68      	ldr	r3, [pc, #416]	; (8001534 <controller_step+0xdc4>)
 8001394:	2205      	movs	r2, #5
 8001396:	705a      	strb	r2, [r3, #1]
 8001398:	e028      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 800139a:	4b65      	ldr	r3, [pc, #404]	; (8001530 <controller_step+0xdc0>)
 800139c:	ed93 7b08 	vldr	d7, [r3, #32]
 80013a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	f040 8121 	bne.w	80015ee <controller_step+0xe7e>
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80013ac:	4b60      	ldr	r3, [pc, #384]	; (8001530 <controller_step+0xdc0>)
 80013ae:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80013b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013b6:	eeb4 7b46 	vcmp.f64	d7, d6
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	f040 8116 	bne.w	80015ee <controller_step+0xe7e>
                 (controller_U.BM_b_HVposContactorSts == 1.0)) {
 80013c2:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <controller_step+0xdc0>)
 80013c4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80013c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	f040 810b 	bne.w	80015ee <controller_step+0xe7e>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <controller_step+0xdc4>)
 80013da:	220b      	movs	r2, #11
 80013dc:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <controller_step+0xdc4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <controller_step+0xdc4>)
 80013e6:	2206      	movs	r2, #6
 80013e8:	705a      	strb	r2, [r3, #1]
      }
      break;
 80013ea:	e100      	b.n	80015ee <controller_step+0xe7e>
 80013ec:	e0ff      	b.n	80015ee <controller_step+0xe7e>

     case con_IN_InitializePrechargeState:
      controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <controller_step+0xdc4>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <controller_step+0xdc0>)
 80013f6:	ed93 7b08 	vldr	d7, [r3, #32]
 80013fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013fe:	eeb4 7b46 	vcmp.f64	d7, d6
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d11d      	bne.n	8001444 <controller_step+0xcd4>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <controller_step+0xdc0>)
 800140a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800140e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001412:	eeb4 7b46 	vcmp.f64	d7, d6
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d113      	bne.n	8001444 <controller_step+0xcd4>
          (controller_U.BM_b_HVposContactorSts == 1.0)) {
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <controller_step+0xdc0>)
 800141e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001422:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001426:	eeb4 7b46 	vcmp.f64	d7, d6
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d109      	bne.n	8001444 <controller_step+0xcd4>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_PrechargeState;
 8001430:	4b40      	ldr	r3, [pc, #256]	; (8001534 <controller_step+0xdc4>)
 8001432:	220a      	movs	r2, #10
 8001434:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <controller_step+0xdc4>)
 8001438:	2200      	movs	r2, #0
 800143a:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = PRECHARGE;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <controller_step+0xdc4>)
 800143e:	2205      	movs	r2, #5
 8001440:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          IN_ErrorInitializePrechargeStat;
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
      }
      break;
 8001442:	e0d6      	b.n	80015f2 <controller_step+0xe82>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <controller_step+0xdc4>)
 8001446:	7e1b      	ldrb	r3, [r3, #24]
 8001448:	2b04      	cmp	r3, #4
 800144a:	f240 80d2 	bls.w	80015f2 <controller_step+0xe82>
        controller_DW.is_c3_battery_monitor_lib =
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <controller_step+0xdc4>)
 8001450:	2203      	movs	r2, #3
 8001452:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <controller_step+0xdc4>)
 8001456:	2209      	movs	r2, #9
 8001458:	705a      	strb	r2, [r3, #1]
      break;
 800145a:	e0ca      	b.n	80015f2 <controller_step+0xe82>

     case controller_IN_PrechargeState:
      controller_DW.Delay_DSTATE_f = PRECHARGE;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <controller_step+0xdc4>)
 800145e:	2205      	movs	r2, #5
 8001460:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <controller_step+0xdc0>)
 8001464:	ed93 7b08 	vldr	d7, [r3, #32]
 8001468:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	d11d      	bne.n	80014ae <controller_step+0xd3e>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <controller_step+0xdc0>)
 8001474:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001478:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800147c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d113      	bne.n	80014ae <controller_step+0xd3e>
          (controller_U.BM_b_HVposContactorSts == 1.0)) {
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <controller_step+0xdc0>)
 8001488:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 800148c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001490:	eeb4 7b46 	vcmp.f64	d7, d6
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d109      	bne.n	80014ae <controller_step+0xd3e>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <controller_step+0xdc4>)
 800149c:	220b      	movs	r2, #11
 800149e:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <controller_step+0xdc4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <controller_step+0xdc4>)
 80014a8:	2206      	movs	r2, #6
 80014aa:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          controll_IN_ErrorPrechargeState;
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
      }
      break;
 80014ac:	e0a3      	b.n	80015f6 <controller_step+0xe86>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <controller_step+0xdc4>)
 80014b0:	7e1b      	ldrb	r3, [r3, #24]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	f240 809f 	bls.w	80015f6 <controller_step+0xe86>
        controller_DW.is_c3_battery_monitor_lib =
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <controller_step+0xdc4>)
 80014ba:	2205      	movs	r2, #5
 80014bc:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <controller_step+0xdc4>)
 80014c0:	220a      	movs	r2, #10
 80014c2:	705a      	strb	r2, [r3, #1]
      break;
 80014c4:	e097      	b.n	80015f6 <controller_step+0xe86>

     case controller_IN_RunningState:
      controller_DW.Delay_DSTATE_f = BM_RUNNING;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <controller_step+0xdc4>)
 80014c8:	2206      	movs	r2, #6
 80014ca:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <controller_step+0xdc0>)
 80014ce:	ed93 7b08 	vldr	d7, [r3, #32]
 80014d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d11d      	bne.n	8001518 <controller_step+0xda8>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <controller_step+0xdc0>)
 80014de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80014e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d113      	bne.n	8001518 <controller_step+0xda8>
          (controller_U.BM_b_HVposContactorSts == 1.0)) {
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <controller_step+0xdc0>)
 80014f2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80014f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d109      	bne.n	8001518 <controller_step+0xda8>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <controller_step+0xdc4>)
 8001506:	220b      	movs	r2, #11
 8001508:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <controller_step+0xdc4>)
 800150c:	2200      	movs	r2, #0
 800150e:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <controller_step+0xdc4>)
 8001512:	2206      	movs	r2, #6
 8001514:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorRunningState;
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
      }
      break;
 8001516:	e070      	b.n	80015fa <controller_step+0xe8a>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <controller_step+0xdc4>)
 800151a:	7e1b      	ldrb	r3, [r3, #24]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d96c      	bls.n	80015fa <controller_step+0xe8a>
        controller_DW.is_c3_battery_monitor_lib =
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <controller_step+0xdc4>)
 8001522:	2206      	movs	r2, #6
 8001524:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <controller_step+0xdc4>)
 8001528:	220b      	movs	r2, #11
 800152a:	705a      	strb	r2, [r3, #1]
      break;
 800152c:	e065      	b.n	80015fa <controller_step+0xe8a>
 800152e:	bf00      	nop
 8001530:	20000228 	.word	0x20000228
 8001534:	20000208 	.word	0x20000208

     case controller_IN_StartupState:
      controller_DW.Delay_DSTATE_f = BM_STARTUP;
 8001538:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <controller_step+0xeb4>)
 800153a:	2203      	movs	r2, #3
 800153c:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <controller_step+0xeb8>)
 8001540:	ed93 7b08 	vldr	d7, [r3, #32]
 8001544:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001548:	eeb4 7b46 	vcmp.f64	d7, d6
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d11b      	bne.n	800158a <controller_step+0xe1a>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <controller_step+0xeb8>)
 8001554:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 8001558:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800155c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d111      	bne.n	800158a <controller_step+0xe1a>
          (controller_U.BM_b_HVposContactorSts == 0.0)) {
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <controller_step+0xeb8>)
 8001568:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 800156c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d109      	bne.n	800158a <controller_step+0xe1a>
        controller_DW.is_c3_battery_monitor_lib =
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <controller_step+0xeb4>)
 8001578:	2209      	movs	r2, #9
 800157a:	759a      	strb	r2, [r3, #22]
          con_IN_InitializePrechargeState;
        controller_DW.temporalCounter_i1_p = 0U;
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <controller_step+0xeb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <controller_step+0xeb4>)
 8001584:	2204      	movs	r2, #4
 8001586:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorStartupState;
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
      }
      break;
 8001588:	e039      	b.n	80015fe <controller_step+0xe8e>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <controller_step+0xeb4>)
 800158c:	7e1b      	ldrb	r3, [r3, #24]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d935      	bls.n	80015fe <controller_step+0xe8e>
        controller_DW.is_c3_battery_monitor_lib =
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <controller_step+0xeb4>)
 8001594:	2207      	movs	r2, #7
 8001596:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <controller_step+0xeb4>)
 800159a:	2208      	movs	r2, #8
 800159c:	705a      	strb	r2, [r3, #1]
      break;
 800159e:	e02e      	b.n	80015fe <controller_step+0xe8e>

     default:
      /* case IN_StartupState1: */
      controller_DW.Delay_DSTATE_f = BM_IDLE;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <controller_step+0xeb4>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <controller_step+0xeb8>)
 80015a8:	ed93 7b08 	vldr	d7, [r3, #32]
 80015ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	d125      	bne.n	8001602 <controller_step+0xe92>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <controller_step+0xeb8>)
 80015b8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80015bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d11b      	bne.n	8001602 <controller_step+0xe92>
          (controller_U.BM_b_HVposContactorSts == 0.0)) {
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <controller_step+0xeb8>)
 80015cc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80015d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	d113      	bne.n	8001602 <controller_step+0xe92>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <controller_step+0xeb4>)
 80015dc:	220c      	movs	r2, #12
 80015de:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <controller_step+0xeb4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_STARTUP;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <controller_step+0xeb4>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	705a      	strb	r2, [r3, #1]
      }
      break;
 80015ec:	e009      	b.n	8001602 <controller_step+0xe92>
      break;
 80015ee:	bf00      	nop
 80015f0:	e008      	b.n	8001604 <controller_step+0xe94>
      break;
 80015f2:	bf00      	nop
 80015f4:	e006      	b.n	8001604 <controller_step+0xe94>
      break;
 80015f6:	bf00      	nop
 80015f8:	e004      	b.n	8001604 <controller_step+0xe94>
      break;
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <controller_step+0xe94>
      break;
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <controller_step+0xe94>
      break;
 8001602:	bf00      	nop
   *  Constant: '<S4>/Constant1'
   *  Delay: '<S3>/Delay1'
   *  RelationalOperator: '<S4>/motorErrorActive'
   *  Switch: '<S4>/Switch1'
   */
  if (controller_B.MI_motorStatus == MI_STS_ERROR) {
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <controller_step+0xebc>)
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d103      	bne.n	8001614 <controller_step+0xea4>
    controller_DW.Delay1_DSTATE = MI_STS_ERROR;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <controller_step+0xeb4>)
 800160e:	2205      	movs	r2, #5
 8001610:	701a      	strb	r2, [r3, #0]
  } else {
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
  }

  /* End of Switch: '<S4>/Switch' */
}
 8001612:	e003      	b.n	800161c <controller_step+0xeac>
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <controller_step+0xebc>)
 8001616:	7a1a      	ldrb	r2, [r3, #8]
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <controller_step+0xeb4>)
 800161a:	701a      	strb	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000208 	.word	0x20000208
 8001628:	20000228 	.word	0x20000228
 800162c:	200001fc 	.word	0x200001fc

08001630 <rt_OneStep>:
 * example code indicates where these should take place relative to executing
 * the generated code step function.  Overrun behavior should be tailored to
 * your application needs.  This example simply sets an error status in the
 * real-time model and returns from rt_OneStep.
 */
void rt_OneStep(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <rt_OneStep+0x28>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <rt_OneStep+0x16>
    rtmSetErrorStatus(controller_M, "Overrun");
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <rt_OneStep+0x2c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <rt_OneStep+0x30>)
 8001642:	601a      	str	r2, [r3, #0]
    return;
 8001644:	e007      	b.n	8001656 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <rt_OneStep+0x28>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  controller_step();
 800164c:	f7ff f890 	bl	8000770 <controller_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <rt_OneStep+0x28>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000294 	.word	0x20000294
 800165c:	08009190 	.word	0x08009190
 8001660:	08009178 	.word	0x08009178

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b099      	sub	sp, #100	; 0x64
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 800166a:	f000 ffea 	bl	8002642 <HAL_Init>
  TIM_HandleTypeDef htime2;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 f8ff 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 fabb 	bl	8001bec <MX_GPIO_Init>
  MX_CAN1_Init();
 8001676:	f000 f9fb 	bl	8001a70 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 800167a:	f000 fa87 	bl	8001b8c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800167e:	f000 f953 	bl	8001928 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001682:	f000 f9a3 	bl	80019cc <MX_ADC2_Init>
  MX_TIM2_Init();
 8001686:	f000 fa29 	bl	8001adc <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  // Start 0.2s timer interrupt
  HAL_TIM_Base_Start_IT(&htime2);
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fd56 	bl	8005140 <HAL_TIM_Base_Start_IT>

  UART_st uart3 = {
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <main+0x1e8>)
 8001696:	463c      	mov	r4, r7
 8001698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  .mode = UART_TX_RX,
	  .datasize = UART_Datasize_8,
	  .uart_num = 3
  };

  Printf_Init(&uart3);
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fb4b 	bl	8001d3c <Printf_Init>

  CAN_Config();
 80016a6:	f000 faf9 	bl	8001c9c <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80016aa:	2102      	movs	r1, #2
 80016ac:	4868      	ldr	r0, [pc, #416]	; (8001850 <main+0x1ec>)
 80016ae:	f001 feeb 	bl	8003488 <HAL_CAN_ActivateNotification>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <main+0x58>
	{
	  Error_Handler();
 80016b8:	f000 fb3a 	bl	8001d30 <Error_Handler>
	}

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80016bc:	2101      	movs	r1, #1
 80016be:	4864      	ldr	r0, [pc, #400]	; (8001850 <main+0x1ec>)
 80016c0:	f001 fee2 	bl	8003488 <HAL_CAN_ActivateNotification>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <main+0x6a>
  {
	  Error_Handler();
 80016ca:	f000 fb31 	bl	8001d30 <Error_Handler>
  }

  TxHeader.DLC = 8;
 80016ce:	4b61      	ldr	r3, [pc, #388]	; (8001854 <main+0x1f0>)
 80016d0:	2208      	movs	r2, #8
 80016d2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80016d4:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <main+0x1f0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80016da:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <main+0x1f0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x184;
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <main+0x1f0>)
 80016e2:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80016e6:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80016e8:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <main+0x1f0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	751a      	strb	r2, [r3, #20]

  TxHeader2.DLC = 8;
 80016ee:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <main+0x1f4>)
 80016f0:	2208      	movs	r2, #8
 80016f2:	611a      	str	r2, [r3, #16]
  TxHeader2.IDE = CAN_ID_STD;
 80016f4:	4b58      	ldr	r3, [pc, #352]	; (8001858 <main+0x1f4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 80016fa:	4b57      	ldr	r3, [pc, #348]	; (8001858 <main+0x1f4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x185;
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <main+0x1f4>)
 8001702:	f240 1285 	movw	r2, #389	; 0x185
 8001706:	601a      	str	r2, [r3, #0]
  TxHeader2.TransmitGlobalTime = DISABLE;
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <main+0x1f4>)
 800170a:	2200      	movs	r2, #0
 800170c:	751a      	strb	r2, [r3, #20]

  TxHeader3.DLC = 8;
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <main+0x1f8>)
 8001710:	2208      	movs	r2, #8
 8001712:	611a      	str	r2, [r3, #16]
  TxHeader3.IDE = CAN_ID_STD;
 8001714:	4b51      	ldr	r3, [pc, #324]	; (800185c <main+0x1f8>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  TxHeader3.RTR = CAN_RTR_DATA;
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <main+0x1f8>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  TxHeader3.StdId = 0x500;
 8001720:	4b4e      	ldr	r3, [pc, #312]	; (800185c <main+0x1f8>)
 8001722:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001726:	601a      	str	r2, [r3, #0]
  TxHeader3.TransmitGlobalTime = DISABLE;
 8001728:	4b4c      	ldr	r3, [pc, #304]	; (800185c <main+0x1f8>)
 800172a:	2200      	movs	r2, #0
 800172c:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x00;
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <main+0x1fc>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 8001734:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <main+0x1fc>)
 8001736:	2202      	movs	r2, #2
 8001738:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x00;
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <main+0x1fc>)
 800173c:	2200      	movs	r2, #0
 800173e:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x00;
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <main+0x1fc>)
 8001742:	2200      	movs	r2, #0
 8001744:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x00;
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <main+0x1fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x00;
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <main+0x1fc>)
 800174e:	2200      	movs	r2, #0
 8001750:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x00;
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <main+0x1fc>)
 8001754:	2200      	movs	r2, #0
 8001756:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x00;
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <main+0x1fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	71da      	strb	r2, [r3, #7]

  TxData2[0] = 0x00;
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <main+0x200>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
  TxData2[1] = 0x05;
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <main+0x200>)
 8001766:	2205      	movs	r2, #5
 8001768:	705a      	strb	r2, [r3, #1]
  TxData2[2] = 0x00;
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <main+0x200>)
 800176c:	2200      	movs	r2, #0
 800176e:	709a      	strb	r2, [r3, #2]
  TxData2[3] = 0x00;
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <main+0x200>)
 8001772:	2200      	movs	r2, #0
 8001774:	70da      	strb	r2, [r3, #3]
  TxData2[4] = 0x00;
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <main+0x200>)
 8001778:	2200      	movs	r2, #0
 800177a:	711a      	strb	r2, [r3, #4]
  TxData2[5] = 0x00;
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <main+0x200>)
 800177e:	2200      	movs	r2, #0
 8001780:	715a      	strb	r2, [r3, #5]
  TxData2[6] = 0x00;
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <main+0x200>)
 8001784:	2200      	movs	r2, #0
 8001786:	719a      	strb	r2, [r3, #6]
  TxData2[7] = 0x00;
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <main+0x200>)
 800178a:	2200      	movs	r2, #0
 800178c:	71da      	strb	r2, [r3, #7]

  TxData3[0] = 0x00;
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <main+0x204>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
  TxData3[1] = 0x07;
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <main+0x204>)
 8001796:	2207      	movs	r2, #7
 8001798:	705a      	strb	r2, [r3, #1]
  TxData3[2] = 0x00;
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <main+0x204>)
 800179c:	2200      	movs	r2, #0
 800179e:	709a      	strb	r2, [r3, #2]
  TxData3[3] = 0x00;
 80017a0:	4b31      	ldr	r3, [pc, #196]	; (8001868 <main+0x204>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	70da      	strb	r2, [r3, #3]
  TxData3[4] = 0x00;
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <main+0x204>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	711a      	strb	r2, [r3, #4]
  TxData3[5] = 0x00;
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <main+0x204>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	715a      	strb	r2, [r3, #5]
  TxData3[6] = 0x00;
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <main+0x204>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	719a      	strb	r2, [r3, #6]
  TxData3[7] = 0x00;
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <main+0x204>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	71da      	strb	r2, [r3, #7]

  // Init adc 1 and 2
  MX_ADC1_Init();
 80017be:	f000 f8b3 	bl	8001928 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017c2:	f000 f903 	bl	80019cc <MX_ADC2_Init>
//	controller_U.DI_V_AccelPedalPos1 = raw;

	  //this is where dumb shit goes down


	  for(uint8_t i = 0;i<250; i++){
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80017cc:	e00d      	b.n	80017ea <main+0x186>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <main+0x208>)
 80017d0:	4a23      	ldr	r2, [pc, #140]	; (8001860 <main+0x1fc>)
 80017d2:	4920      	ldr	r1, [pc, #128]	; (8001854 <main+0x1f0>)
 80017d4:	481e      	ldr	r0, [pc, #120]	; (8001850 <main+0x1ec>)
 80017d6:	f001 fc75 	bl	80030c4 <HAL_CAN_AddTxMessage>
		  HAL_Delay(50);
 80017da:	2032      	movs	r0, #50	; 0x32
 80017dc:	f000 ff8e 	bl	80026fc <HAL_Delay>
	  for(uint8_t i = 0;i<250; i++){
 80017e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80017ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80017ee:	2bf9      	cmp	r3, #249	; 0xf9
 80017f0:	d9ed      	bls.n	80017ce <main+0x16a>
	  }

	  for(uint8_t i = 0;i<250; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80017f8:	e00d      	b.n	8001816 <main+0x1b2>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData2, &TxMailbox);
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <main+0x208>)
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <main+0x200>)
 80017fe:	4915      	ldr	r1, [pc, #84]	; (8001854 <main+0x1f0>)
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <main+0x1ec>)
 8001802:	f001 fc5f 	bl	80030c4 <HAL_CAN_AddTxMessage>
		  HAL_Delay(50);
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f000 ff78 	bl	80026fc <HAL_Delay>
	  for(uint8_t i = 0;i<250; i++){
 800180c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001810:	3301      	adds	r3, #1
 8001812:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001816:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800181a:	2bf9      	cmp	r3, #249	; 0xf9
 800181c:	d9ed      	bls.n	80017fa <main+0x196>
	  }


	  for(uint8_t i = 0;i<250; i++){
 800181e:	2300      	movs	r3, #0
 8001820:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001824:	e00d      	b.n	8001842 <main+0x1de>
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData3, &TxMailbox);
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <main+0x208>)
 8001828:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <main+0x204>)
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <main+0x1f0>)
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <main+0x1ec>)
 800182e:	f001 fc49 	bl	80030c4 <HAL_CAN_AddTxMessage>
		  HAL_Delay(50);
 8001832:	2032      	movs	r0, #50	; 0x32
 8001834:	f000 ff62 	bl	80026fc <HAL_Delay>
	  for(uint8_t i = 0;i<250; i++){
 8001838:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800183c:	3301      	adds	r3, #1
 800183e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001842:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001846:	2bf9      	cmp	r3, #249	; 0xf9
 8001848:	d9ed      	bls.n	8001826 <main+0x1c2>
	  for(uint8_t i = 0;i<250; i++){
 800184a:	e7bc      	b.n	80017c6 <main+0x162>
 800184c:	08009180 	.word	0x08009180
 8001850:	20000328 	.word	0x20000328
 8001854:	20000424 	.word	0x20000424
 8001858:	2000043c 	.word	0x2000043c
 800185c:	20000454 	.word	0x20000454
 8001860:	20000488 	.word	0x20000488
 8001864:	20000490 	.word	0x20000490
 8001868:	20000498 	.word	0x20000498
 800186c:	200004a8 	.word	0x200004a8

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2234      	movs	r2, #52	; 0x34
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f004 fea8 	bl	80065d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <SystemClock_Config+0xb0>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a21      	ldr	r2, [pc, #132]	; (8001920 <SystemClock_Config+0xb0>)
 800189a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <SystemClock_Config+0xb0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <SystemClock_Config+0xb4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <SystemClock_Config+0xb4>)
 80018b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <SystemClock_Config+0xb4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d0:	2310      	movs	r3, #16
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fb1b 	bl	8003f18 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80018e8:	f000 fa22 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ec:	230f      	movs	r3, #15
 80018ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fdb4 	bl	8004474 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001912:	f000 fa0d 	bl	8001d30 <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_ADC1_Init+0x98>)
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <MX_ADC1_Init+0x9c>)
 800193e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_ADC1_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_ADC1_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <MX_ADC1_Init+0xa0>)
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_ADC1_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001974:	2201      	movs	r2, #1
 8001976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_ADC1_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001982:	2201      	movs	r2, #1
 8001984:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001986:	480e      	ldr	r0, [pc, #56]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001988:	f000 fedc 	bl	8002744 <HAL_ADC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001992:	f000 f9cd 	bl	8001d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800199a:	2301      	movs	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_ADC1_Init+0x98>)
 80019a8:	f000 ff10 	bl	80027cc <HAL_ADC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f000 f9bd 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000298 	.word	0x20000298
 80019c4:	40012000 	.word	0x40012000
 80019c8:	0f000001 	.word	0x0f000001

080019cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
 {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_ADC2_Init+0x98>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_ADC2_Init+0x9c>)
 80019e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_ADC2_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_ADC2_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_ADC2_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_ADC2_Init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_ADC2_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a0c:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <MX_ADC2_Init+0xa0>)
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a2a:	480e      	ldr	r0, [pc, #56]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a2c:	f000 fe8a 	bl	8002744 <HAL_ADC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f000 f97b 	bl	8001d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_ADC2_Init+0x98>)
 8001a4c:	f000 febe 	bl	80027cc <HAL_ADC_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001a56:	f000 f96b 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200002e0 	.word	0x200002e0
 8001a68:	40012100 	.word	0x40012100
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <MX_CAN1_Init+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a7c:	220a      	movs	r2, #10
 8001a7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a8e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001a92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ac2:	f001 f8d3 	bl	8002c6c <HAL_CAN_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001acc:	f000 f930 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000328 	.word	0x20000328
 8001ad8:	40006400 	.word	0x40006400

08001adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b12:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b26:	f003 fab3 	bl	8005090 <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b30:	f000 f8fe 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b42:	f003 fc95 	bl	8005470 <HAL_TIM_ConfigClockSource>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001b4c:	f000 f8f0 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_TIM2_Init+0x98>)
 8001b5e:	f003 feb3 	bl	80058c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b68:	f000 f8e2 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000350 	.word	0x20000350

08001b78 <HAL_TIM_PeriodElapsedCallback>:

// Callback function for 0.2ms time based IRQ to run control system
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  rt_OneStep();
 8001b80:	f7ff fd56 	bl	8001630 <rt_OneStep>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <MX_USART3_UART_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART3_UART_Init+0x58>)
 8001bd0:	f003 ff26 	bl	8005a20 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001bda:	f000 f8a9 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000039c 	.word	0x2000039c
 8001be8:	40004800 	.word	0x40004800

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_GPIO_Init+0xa8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001c68:	480b      	ldr	r0, [pc, #44]	; (8001c98 <MX_GPIO_Init+0xac>)
 8001c6a:	f002 f921 	bl	8003eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001c6e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xac>)
 8001c88:	f001 ff66 	bl	8003b58 <HAL_GPIO_Init>

}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400

08001c9c <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <CAN_Config+0x5c>)
 8001cd0:	f001 f8c8 	bl	8002e64 <HAL_CAN_ConfigFilter>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001cda:	f000 f829 	bl	8001d30 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001cde:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <CAN_Config+0x5c>)
 8001ce0:	f001 f9ac 	bl	800303c <HAL_CAN_Start>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8001cea:	f000 f821 	bl	8001d30 <Error_Handler>
	}
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000328 	.word	0x20000328

08001cfc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001d0c:	f001 faaa 	bl	8003264 <HAL_CAN_GetRxMessage>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8001d16:	f000 f80b 	bl	8001d30 <Error_Handler>
	}

//	IncomingCANMessageHandler(&RxHeader.StdId, RxData);
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200004a0 	.word	0x200004a0
 8001d28:	2000046c 	.word	0x2000046c
 8001d2c:	20000328 	.word	0x20000328

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <Printf_Init>:

// Must be global
UART_st* Printer;


UART_Return_et Printf_Init(UART_st* uart) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  UART_Return_et response;

  // Set global to selected UART
  Printer = uart;
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <Printf_Init+0x3c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  response = UART_Init(uart);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fbcf 	bl	80024ee <UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]

  if (response != UART_OK) {
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <Printf_Init+0x22>
      return response;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	e008      	b.n	8001d70 <Printf_Init+0x34>
  }

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */

  setvbuf(stdout, NULL, _IONBF, 0);
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <Printf_Init+0x40>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6898      	ldr	r0, [r3, #8]
 8001d64:	2300      	movs	r3, #0
 8001d66:	2202      	movs	r2, #2
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f005 f87f 	bl	8006e6c <setvbuf>

  return UART_OK;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200004ac 	.word	0x200004ac
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <_isatty>:


int _isatty(int fd) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db04      	blt.n	8001d98 <_isatty+0x18>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	dc01      	bgt.n	8001d98 <_isatty+0x18>
    return 1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e005      	b.n	8001da4 <_isatty+0x24>

  errno = EBADF;
 8001d98:	f004 fbf2 	bl	8006580 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2209      	movs	r2, #9
 8001da0:	601a      	str	r2, [r3, #0]
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_write>:

int _write(int fd, char* ptr, int len) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d002      	beq.n	8001dc4 <_write+0x18>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d110      	bne.n	8001de6 <_write+0x3a>
    response = UART_Transmit(Printer, (uint8_t*) ptr, len);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <_write+0x50>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fbd5 	bl	800257e <UART_Transmit>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]

    if (response == UART_OK)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <_write+0x36>
      return len;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e008      	b.n	8001df4 <_write+0x48>
    else
      return EIO;
 8001de2:	2305      	movs	r3, #5
 8001de4:	e006      	b.n	8001df4 <_write+0x48>
  }

  errno = EBADF;
 8001de6:	f004 fbcb 	bl	8006580 <__errno>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2209      	movs	r2, #9
 8001dee:	601a      	str	r2, [r3, #0]
  return -1;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200004ac 	.word	0x200004ac

08001e00 <_close>:


int _close(int fd) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db04      	blt.n	8001e18 <_close+0x18>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	dc01      	bgt.n	8001e18 <_close+0x18>
    return 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e006      	b.n	8001e26 <_close+0x26>

  errno = EBADF;
 8001e18:	f004 fbb2 	bl	8006580 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2209      	movs	r2, #9
 8001e20:	601a      	str	r2, [r3, #0]
  return -1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]

  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 8001e3a:	f004 fba1 	bl	8006580 <__errno>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2209      	movs	r2, #9
 8001e42:	601a      	str	r2, [r3, #0]
  return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_read>:

int _read(int fd, char* ptr, int len) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDIN_FILENO) {
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d110      	bne.n	8001e84 <_read+0x34>
    response = UART_Receive(Printer, (uint8_t*) ptr, len);
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <_read+0x4c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fba2 	bl	80025b6 <UART_Receive>
 8001e72:	4603      	mov	r3, r0
 8001e74:	75fb      	strb	r3, [r7, #23]
    if (response == UART_OK)
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <_read+0x30>
      return 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e008      	b.n	8001e92 <_read+0x42>
    else
      return EIO;
 8001e80:	2305      	movs	r3, #5
 8001e82:	e006      	b.n	8001e92 <_read+0x42>
  }

  errno = EBADF;
 8001e84:	f004 fb7c 	bl	8006580 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2209      	movs	r2, #9
 8001e8c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200004ac 	.word	0x200004ac

08001ea0 <_fstat>:


int _fstat(int fd, struct stat* st) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db08      	blt.n	8001ec2 <_fstat+0x22>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	dc05      	bgt.n	8001ec2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebc:	605a      	str	r2, [r3, #4]
    return 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e005      	b.n	8001ece <_fstat+0x2e>
  }

  errno = EBADF;
 8001ec2:	f004 fb5d 	bl	8006580 <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2209      	movs	r2, #9
 8001eca:	601a      	str	r2, [r3, #0]
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x44>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x44>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x44>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_ADC_MspInit+0xc8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d124      	bne.n	8001f8c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a29      	ldr	r2, [pc, #164]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <HAL_ADC_MspInit+0xd0>)
 8001f86:	f001 fde7 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f8a:	e028      	b.n	8001fde <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_ADC_MspInit+0xd4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d123      	bne.n	8001fde <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_ADC_MspInit+0xcc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <HAL_ADC_MspInit+0xd0>)
 8001fda:	f001 fdbd 	bl	8003b58 <HAL_GPIO_Init>
}
 8001fde:	bf00      	nop
 8001fe0:	3730      	adds	r7, #48	; 0x30
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40012000 	.word	0x40012000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40012100 	.word	0x40012100

08001ff8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_CAN_MspInit+0x9c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d137      	bne.n	800208a <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_CAN_MspInit+0xa0>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_CAN_MspInit+0xa0>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_CAN_MspInit+0xa0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_CAN_MspInit+0xa0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_CAN_MspInit+0xa0>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_CAN_MspInit+0xa0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800204a:	2303      	movs	r3, #3
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800205a:	2309      	movs	r3, #9
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <HAL_CAN_MspInit+0xa4>)
 8002066:	f001 fd77 	bl	8003b58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	2013      	movs	r0, #19
 8002070:	f001 fd3b 	bl	8003aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002074:	2013      	movs	r0, #19
 8002076:	f001 fd54 	bl	8003b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2014      	movs	r0, #20
 8002080:	f001 fd33 	bl	8003aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002084:	2014      	movs	r0, #20
 8002086:	f001 fd4c 	bl	8003b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40006400 	.word	0x40006400
 8002098:	40023800 	.word	0x40023800
 800209c:	40020c00 	.word	0x40020c00

080020a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d113      	bne.n	80020da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_TIM_Base_MspInit+0x44>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_TIM_Base_MspInit+0x44>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_TIM_Base_MspInit+0x44>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	201c      	movs	r0, #28
 80020d0:	f001 fd0b 	bl	8003aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d4:	201c      	movs	r0, #28
 80020d6:	f001 fd24 	bl	8003b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0ae      	sub	sp, #184	; 0xb8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2290      	movs	r2, #144	; 0x90
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fa63 	bl	80065d4 <memset>
  if(huart->Instance==USART3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_UART_MspInit+0xb4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d13c      	bne.n	8002192 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800211e:	2300      	movs	r3, #0
 8002120:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fb8a 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002132:	f7ff fdfd 	bl	8001d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_UART_MspInit+0xb8>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0xb8>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_UART_MspInit+0xb8>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_UART_MspInit+0xb8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_UART_MspInit+0xb8>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_UART_MspInit+0xb8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002180:	2307      	movs	r3, #7
 8002182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002186:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	; (80021a4 <HAL_UART_MspInit+0xbc>)
 800218e:	f001 fce3 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	37b8      	adds	r7, #184	; 0xb8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40004800 	.word	0x40004800
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020c00 	.word	0x40020c00

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f000 fa62 	bl	80026bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <CAN1_TX_IRQHandler+0x18>)
 8002206:	f001 fe6c 	bl	8003ee2 <HAL_GPIO_TogglePin>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800220a:	4803      	ldr	r0, [pc, #12]	; (8002218 <CAN1_TX_IRQHandler+0x1c>)
 800220c:	f001 f962 	bl	80034d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40020400 	.word	0x40020400
 8002218:	20000328 	.word	0x20000328

0800221c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <CAN1_RX0_IRQHandler+0x10>)
 8002222:	f001 f957 	bl	80034d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000328 	.word	0x20000328

08002230 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM2_IRQHandler+0x10>)
 8002236:	f002 fffb 	bl	8005230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000350 	.word	0x20000350

08002244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <_sbrk+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <_sbrk+0x60>)
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <_sbrk+0x64>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <_sbrk+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d207      	bcs.n	8002284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002274:	f004 f984 	bl	8006580 <__errno>
 8002278:	4603      	mov	r3, r0
 800227a:	220c      	movs	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002282:	e009      	b.n	8002298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <_sbrk+0x64>)
 8002294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20080000 	.word	0x20080000
 80022a4:	00000400 	.word	0x00000400
 80022a8:	200004b0 	.word	0x200004b0
 80022ac:	200004c8 	.word	0x200004c8

080022b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <SystemInit+0x20>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <SystemInit+0x20>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <UART_Select>:

/*------------- PRIVATE FUNCTION DEFINITIONS ------------ */

// UART_Select configures the corresponding UART number from a UART_st
static UART_Return_et UART_Select(UART_st* uart)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	// Switch case for selection of 8 UARTS
	switch(uart->uart_num)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	2b07      	cmp	r3, #7
 80022e4:	d83a      	bhi.n	800235c <UART_Select+0x88>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <UART_Select+0x18>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	0800230d 	.word	0x0800230d
 80022f0:	08002317 	.word	0x08002317
 80022f4:	08002321 	.word	0x08002321
 80022f8:	0800232b 	.word	0x0800232b
 80022fc:	08002335 	.word	0x08002335
 8002300:	0800233f 	.word	0x0800233f
 8002304:	08002349 	.word	0x08002349
 8002308:	08002353 	.word	0x08002353
	{
		case 1:
			uart->huart -> Instance = USART1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <UART_Select+0x9c>)
 8002312:	601a      	str	r2, [r3, #0]
			break;
 8002314:	e024      	b.n	8002360 <UART_Select+0x8c>
		case 2:
			uart->huart -> Instance = USART2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <UART_Select+0xa0>)
 800231c:	601a      	str	r2, [r3, #0]
			break;
 800231e:	e01f      	b.n	8002360 <UART_Select+0x8c>
		case 3:
			uart->huart -> Instance = USART3;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <UART_Select+0xa4>)
 8002326:	601a      	str	r2, [r3, #0]
			break;
 8002328:	e01a      	b.n	8002360 <UART_Select+0x8c>
		case 4:
			uart->huart -> Instance = UART4;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <UART_Select+0xa8>)
 8002330:	601a      	str	r2, [r3, #0]
			break;
 8002332:	e015      	b.n	8002360 <UART_Select+0x8c>
		case 5:
			uart->huart -> Instance = UART5;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <UART_Select+0xac>)
 800233a:	601a      	str	r2, [r3, #0]
			break;
 800233c:	e010      	b.n	8002360 <UART_Select+0x8c>
		case 6:
			uart->huart -> Instance = USART6;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <UART_Select+0xb0>)
 8002344:	601a      	str	r2, [r3, #0]
			break;
 8002346:	e00b      	b.n	8002360 <UART_Select+0x8c>
		case 7:
			uart->huart -> Instance = UART7;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <UART_Select+0xb4>)
 800234e:	601a      	str	r2, [r3, #0]
			break;
 8002350:	e006      	b.n	8002360 <UART_Select+0x8c>
		case 8:
			uart->huart -> Instance = UART8;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <UART_Select+0xb8>)
 8002358:	601a      	str	r2, [r3, #0]
			break;
 800235a:	e001      	b.n	8002360 <UART_Select+0x8c>
		default:
			return INVALID_UART_NUM;
 800235c:	2305      	movs	r3, #5
 800235e:	e000      	b.n	8002362 <UART_Select+0x8e>
	}

	return UART_OK;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40011000 	.word	0x40011000
 8002374:	40004400 	.word	0x40004400
 8002378:	40004800 	.word	0x40004800
 800237c:	40004c00 	.word	0x40004c00
 8002380:	40005000 	.word	0x40005000
 8002384:	40011400 	.word	0x40011400
 8002388:	40007800 	.word	0x40007800
 800238c:	40007c00 	.word	0x40007c00

08002390 <UART_Baud_Rate_Select>:

// UART_Baud_Rate_Select configures the baud rate from the one specified in baudrate
static UART_Return_et UART_Baud_Rate_Select(UART_st* uart)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	// Baud rate must be between 123 Bits/s and 500 KBits/s, stated in .ioc requirements
	if(uart->baudrate < MIN_UART_BAUDRATE || uart->baudrate > MAX_UART_BAUDRATE){
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b7a      	cmp	r3, #122	; 0x7a
 800239e:	d904      	bls.n	80023aa <UART_Baud_Rate_Select+0x1a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <UART_Baud_Rate_Select+0x38>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <UART_Baud_Rate_Select+0x1e>
		return BAUDRATE_OUT_OF_BOUNDS;
 80023aa:	2302      	movs	r3, #2
 80023ac:	e005      	b.n	80023ba <UART_Baud_Rate_Select+0x2a>
	}

	uart->huart->Init.BaudRate = uart->baudrate;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6892      	ldr	r2, [r2, #8]
 80023b6:	605a      	str	r2, [r3, #4]

	return UART_OK;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	0007a120 	.word	0x0007a120

080023cc <UART_Datasize_Select>:

// UART_Datasize_Select configures the data size from a UART_Datasize_et
static UART_Return_et UART_Datasize_Select(UART_st* uart)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	switch(uart->datasize)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	2b09      	cmp	r3, #9
 80023da:	d011      	beq.n	8002400 <UART_Datasize_Select+0x34>
 80023dc:	2b09      	cmp	r3, #9
 80023de:	dc15      	bgt.n	800240c <UART_Datasize_Select+0x40>
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	d002      	beq.n	80023ea <UART_Datasize_Select+0x1e>
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d006      	beq.n	80023f6 <UART_Datasize_Select+0x2a>
 80023e8:	e010      	b.n	800240c <UART_Datasize_Select+0x40>
	{
		case UART_Datasize_7:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_7B;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f2:	609a      	str	r2, [r3, #8]
			break;
 80023f4:	e00c      	b.n	8002410 <UART_Datasize_Select+0x44>
		case UART_Datasize_8:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
			break;
 80023fe:	e007      	b.n	8002410 <UART_Datasize_Select+0x44>
		case UART_Datasize_9:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_9B;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002408:	609a      	str	r2, [r3, #8]
			break;
 800240a:	e001      	b.n	8002410 <UART_Datasize_Select+0x44>
		default:
			return INVALID_DATASIZE;
 800240c:	2306      	movs	r3, #6
 800240e:	e000      	b.n	8002412 <UART_Datasize_Select+0x46>
	}

	return UART_OK;
 8002410:	2301      	movs	r3, #1
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <UART_Mode_Select>:

// UART_Mode_Select configures the mode based on a UART_Mode_et
static UART_Return_et UART_Mode_Select(UART_st* uart)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	switch(uart->mode)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7b5b      	ldrb	r3, [r3, #13]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d010      	beq.n	8002450 <UART_Mode_Select+0x32>
 800242e:	2b03      	cmp	r3, #3
 8002430:	dc13      	bgt.n	800245a <UART_Mode_Select+0x3c>
 8002432:	2b01      	cmp	r3, #1
 8002434:	d002      	beq.n	800243c <UART_Mode_Select+0x1e>
 8002436:	2b02      	cmp	r3, #2
 8002438:	d005      	beq.n	8002446 <UART_Mode_Select+0x28>
 800243a:	e00e      	b.n	800245a <UART_Mode_Select+0x3c>
	{
		case UART_RX:
			uart->huart -> Init.Mode = UART_MODE_RX;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2204      	movs	r2, #4
 8002442:	615a      	str	r2, [r3, #20]
			break;
 8002444:	e00b      	b.n	800245e <UART_Mode_Select+0x40>
		case UART_TX:
			uart->huart -> Init.Mode = UART_MODE_TX;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2208      	movs	r2, #8
 800244c:	615a      	str	r2, [r3, #20]
			break;
 800244e:	e006      	b.n	800245e <UART_Mode_Select+0x40>
		case UART_TX_RX:
			uart->huart -> Init.Mode = UART_MODE_TX_RX;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	220c      	movs	r2, #12
 8002456:	615a      	str	r2, [r3, #20]
			break;
 8002458:	e001      	b.n	800245e <UART_Mode_Select+0x40>
		default:
			return INVALID_MODE;
 800245a:	2303      	movs	r3, #3
 800245c:	e000      	b.n	8002460 <UART_Mode_Select+0x42>
	}

	return UART_OK;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <UART_MSB_Select>:

// UART_MSB_Select configures the bit position based on a UART_Bit_Position_et
static UART_Return_et UART_MSB_Select(UART_st* uart)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	switch(uart->bit_position){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7b9b      	ldrb	r3, [r3, #14]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d002      	beq.n	8002482 <UART_MSB_Select+0x16>
 800247c:	2b02      	cmp	r3, #2
 800247e:	d005      	beq.n	800248c <UART_MSB_Select+0x20>
 8002480:	e00e      	b.n	80024a0 <UART_MSB_Select+0x34>
		case LSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800248a:	e00b      	b.n	80024a4 <UART_MSB_Select+0x38>
		case MSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
			uart->huart -> AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800249c:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 800249e:	e001      	b.n	80024a4 <UART_MSB_Select+0x38>
		default:
			return INVALID_BIT_POSITION;
 80024a0:	2304      	movs	r3, #4
 80024a2:	e000      	b.n	80024a6 <UART_MSB_Select+0x3a>
	}

	return UART_OK;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <UART_Default_Configs>:

// Current configurations that are not being modified
static void UART_Default_Configs(UART_st* uart)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	uart->huart -> Init.StopBits = UART_STOPBITS_1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
	uart->huart -> Init.Parity = UART_PARITY_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
	uart->huart -> Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
	uart->huart -> Init.OverSampling = UART_OVERSAMPLING_16;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
	uart->huart -> Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <UART_Init>:

/*------------- PUBLIC FUNCTION DEFINITIONS ------------- */

UART_Return_et UART_Init(UART_st* uart)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
	UART_Return_et response;

	response = UART_Select(uart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff feec 	bl	80022d4 <UART_Select>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <UART_Init+0x1c>
		return response;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	e035      	b.n	8002576 <UART_Init+0x88>
	}

	response = UART_Baud_Rate_Select(uart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff40 	bl	8002390 <UART_Baud_Rate_Select>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <UART_Init+0x30>
		return response;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	e02b      	b.n	8002576 <UART_Init+0x88>
	}

	response = UART_Datasize_Select(uart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff54 	bl	80023cc <UART_Datasize_Select>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <UART_Init+0x44>
		return response;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	e021      	b.n	8002576 <UART_Init+0x88>
	}

	response = UART_Mode_Select(uart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff73 	bl	800241e <UART_Mode_Select>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <UART_Init+0x58>
		return response;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	e017      	b.n	8002576 <UART_Init+0x88>
	}

	response = UART_MSB_Select(uart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ff90 	bl	800246c <UART_MSB_Select>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <UART_Init+0x6c>
		return response;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	e00d      	b.n	8002576 <UART_Init+0x88>
	}

	UART_Default_Configs(uart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa9 	bl	80024b2 <UART_Default_Configs>

	if (HAL_UART_Init(uart->huart) != HAL_OK) { Error_Handler(); }
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 fa5b 	bl	8005a20 <HAL_UART_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <UART_Init+0x86>
 8002570:	f7ff fbde 	bl	8001d30 <Error_Handler>

	return UART_OK;
 8002574:	2301      	movs	r3, #1
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <UART_Transmit>:

// Uses the HAL UART Transmit to transmit a buffer's contents over the channel specified in the uart struct
UART_Return_et UART_Transmit(UART_st* uart, uint8_t tx_buf[], uint8_t buf_len)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tx_response;

	tx_response = HAL_UART_Transmit(uart->huart, tx_buf, buf_len, TIMEOUT);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f241 3388 	movw	r3, #5000	; 0x1388
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	f003 fa8f 	bl	8005abc <HAL_UART_Transmit>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
	if (tx_response != HAL_OK) {
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <UART_Transmit+0x2e>
		return TRANSMIT_FAILED;
 80025a8:	2307      	movs	r3, #7
 80025aa:	e000      	b.n	80025ae <UART_Transmit+0x30>
	}

	return UART_OK;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_Receive>:

// TODO: check the rx_buf dataframe being sent (casting currently)
UART_Return_et UART_Receive(UART_st* uart, uint8_t rx_buf[], uint8_t buf_len)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rx_response;

	rx_response = HAL_UART_Receive(uart->huart, rx_buf, buf_len, TIMEOUT);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	f003 faf6 	bl	8005bc2 <HAL_UART_Receive>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
	if (rx_response != HAL_OK) {
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <UART_Receive+0x2e>
		return RECEIVE_FAILED;
 80025e0:	2308      	movs	r3, #8
 80025e2:	e000      	b.n	80025e6 <UART_Receive+0x30>
	}

	return UART_OK;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025f6:	490e      	ldr	r1, [pc, #56]	; (8002630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800260c:	4c0b      	ldr	r4, [pc, #44]	; (800263c <LoopFillZerobss+0x26>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800261a:	f7ff fe49 	bl	80022b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261e:	f003 ffb5 	bl	800658c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002622:	f7ff f81f 	bl	8001664 <main>
  bx  lr    
 8002626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002628:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002630:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002634:	080095ec 	.word	0x080095ec
  ldr r2, =_sbss
 8002638:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800263c:	200004c8 	.word	0x200004c8

08002640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <ADC_IRQHandler>

08002642 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002646:	2003      	movs	r0, #3
 8002648:	f001 fa44 	bl	8003ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264c:	200f      	movs	r0, #15
 800264e:	f000 f805 	bl	800265c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002652:	f7ff fc41 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_InitTick+0x54>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x58>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002672:	fbb3 f3f1 	udiv	r3, r3, r1
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f001 fa5f 	bl	8003b3e <HAL_SYSTICK_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00e      	b.n	80026a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d80a      	bhi.n	80026a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002690:	2200      	movs	r2, #0
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002698:	f001 fa27 	bl	8003aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_InitTick+0x5c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000008 	.word	0x20000008
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x20>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x24>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_IncTick+0x24>)
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000008 	.word	0x20000008
 80026e0:	200004b4 	.word	0x200004b4

080026e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_GetTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200004b4 	.word	0x200004b4

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff ffee 	bl	80026e4 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffde 	bl	80026e4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e031      	b.n	80027be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fbdc 	bl	8001f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_ADC_Init+0x84>)
 8002788:	4013      	ands	r3, r2
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f970 	bl	8002a78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
 80027ae:	e001      	b.n	80027b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	ffffeefd 	.word	0xffffeefd

080027cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e136      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x28a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	d93a      	bls.n	800286e <HAL_ADC_ConfigChannel+0xa2>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002800:	d035      	beq.n	800286e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68d9      	ldr	r1, [r3, #12]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	3b1e      	subs	r3, #30
 8002818:	2207      	movs	r2, #7
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a8d      	ldr	r2, [pc, #564]	; (8002a64 <HAL_ADC_ConfigChannel+0x298>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68d9      	ldr	r1, [r3, #12]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	061a      	lsls	r2, r3, #24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002846:	e035      	b.n	80028b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	4603      	mov	r3, r0
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4403      	add	r3, r0
 8002860:	3b1e      	subs	r3, #30
 8002862:	409a      	lsls	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286c:	e022      	b.n	80028b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6919      	ldr	r1, [r3, #16]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	2207      	movs	r2, #7
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43da      	mvns	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	400a      	ands	r2, r1
 8002890:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6919      	ldr	r1, [r3, #16]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	4603      	mov	r3, r0
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4403      	add	r3, r0
 80028aa:	409a      	lsls	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d824      	bhi.n	8002906 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b05      	subs	r3, #5
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b05      	subs	r3, #5
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	635a      	str	r2, [r3, #52]	; 0x34
 8002904:	e04c      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d824      	bhi.n	8002958 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b23      	subs	r3, #35	; 0x23
 8002920:	221f      	movs	r2, #31
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	400a      	ands	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	3b23      	subs	r3, #35	; 0x23
 800294a:	fa00 f203 	lsl.w	r2, r0, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
 8002956:	e023      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	3b41      	subs	r3, #65	; 0x41
 800296a:	221f      	movs	r2, #31
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43da      	mvns	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	400a      	ands	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	3b41      	subs	r3, #65	; 0x41
 8002994:	fa00 f203 	lsl.w	r2, r0, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_ADC_ConfigChannel+0x29c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10a      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1f4>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <HAL_ADC_ConfigChannel+0x29c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10f      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x21e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b12      	cmp	r3, #18
 80029d0:	d10b      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_ADC_ConfigChannel+0x29c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12b      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x280>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_ADC_ConfigChannel+0x298>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x23a>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b11      	cmp	r3, #17
 8002a04:	d122      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a10:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a1c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_ADC_ConfigChannel+0x298>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9a      	lsrs	r2, r3, #18
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f9      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	10000012 	.word	0x10000012
 8002a68:	40012000 	.word	0x40012000
 8002a6c:	40012300 	.word	0x40012300
 8002a70:	20000000 	.word	0x20000000
 8002a74:	431bde83 	.word	0x431bde83

08002a78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a80:	4b78      	ldr	r3, [pc, #480]	; (8002c64 <ADC_Init+0x1ec>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <ADC_Init+0x1ec>)
 8002a86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a8a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a8c:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <ADC_Init+0x1ec>)
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4973      	ldr	r1, [pc, #460]	; (8002c64 <ADC_Init+0x1ec>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <ADC_Init+0x1f0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e00f      	b.n	8002b72 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0202 	bic.w	r2, r2, #2
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	005a      	lsls	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	035a      	lsls	r2, r3, #13
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e007      	b.n	8002be8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	051a      	lsls	r2, r3, #20
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2a:	025a      	lsls	r2, r3, #9
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	029a      	lsls	r2, r3, #10
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40012300 	.word	0x40012300
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0ed      	b.n	8002e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff f9b4 	bl	8001ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca0:	f7ff fd20 	bl	80026e4 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ca6:	e012      	b.n	8002cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ca8:	f7ff fd1c 	bl	80026e4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b0a      	cmp	r3, #10
 8002cb4:	d90b      	bls.n	8002cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0c5      	b.n	8002e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0e5      	beq.n	8002ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0202 	bic.w	r2, r2, #2
 8002cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cec:	f7ff fcfa 	bl	80026e4 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cf2:	e012      	b.n	8002d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cf4:	f7ff fcf6 	bl	80026e4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b0a      	cmp	r3, #10
 8002d00:	d90b      	bls.n	8002d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2205      	movs	r2, #5
 8002d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e09f      	b.n	8002e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7e1b      	ldrb	r3, [r3, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d108      	bne.n	8002d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e007      	b.n	8002d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7e5b      	ldrb	r3, [r3, #25]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d108      	bne.n	8002d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e007      	b.n	8002d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7e9b      	ldrb	r3, [r3, #26]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d108      	bne.n	8002d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e007      	b.n	8002da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0220 	bic.w	r2, r2, #32
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7edb      	ldrb	r3, [r3, #27]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0210 	bic.w	r2, r2, #16
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0210 	orr.w	r2, r2, #16
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7f1b      	ldrb	r3, [r3, #28]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d108      	bne.n	8002dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0208 	orr.w	r2, r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e007      	b.n	8002dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7f5b      	ldrb	r3, [r3, #29]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d108      	bne.n	8002e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0204 	orr.w	r2, r2, #4
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e007      	b.n	8002e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0204 	bic.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d003      	beq.n	8002e8a <HAL_CAN_ConfigFilter+0x26>
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f040 80c7 	bne.w	8003018 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a69      	ldr	r2, [pc, #420]	; (8003034 <HAL_CAN_ConfigFilter+0x1d0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d001      	beq.n	8002e98 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e96:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4a63      	ldr	r2, [pc, #396]	; (8003038 <HAL_CAN_ConfigFilter+0x1d4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d111      	bne.n	8002ed4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eb6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2201      	movs	r2, #1
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d123      	bne.n	8002f46 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	401a      	ands	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3248      	adds	r2, #72	; 0x48
 8002f26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f3c:	6979      	ldr	r1, [r7, #20]
 8002f3e:	3348      	adds	r3, #72	; 0x48
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d122      	bne.n	8002f94 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3248      	adds	r2, #72	; 0x48
 8002f74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	3348      	adds	r3, #72	; 0x48
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002fae:	e007      	b.n	8002fc0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002fda:	e007      	b.n	8002fec <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e006      	b.n	8003026 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40003400 	.word	0x40003400
 8003038:	40006400 	.word	0x40006400

0800303c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d12e      	bne.n	80030ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003068:	f7ff fb3c 	bl	80026e4 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800306e:	e012      	b.n	8003096 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003070:	f7ff fb38 	bl	80026e4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b0a      	cmp	r3, #10
 800307c:	d90b      	bls.n	8003096 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2205      	movs	r2, #5
 800308e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e012      	b.n	80030bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e006      	b.n	80030bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d003      	beq.n	80030f0 <HAL_CAN_AddTxMessage+0x2c>
 80030e8:	7ffb      	ldrb	r3, [r7, #31]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 80ad 	bne.w	800324a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8095 	beq.w	800323a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	0e1b      	lsrs	r3, r3, #24
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800311a:	2201      	movs	r2, #1
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	6809      	ldr	r1, [r1, #0]
 800313a:	431a      	orrs	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3318      	adds	r3, #24
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	440b      	add	r3, r1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e00f      	b.n	8003168 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003152:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800315c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3318      	adds	r3, #24
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	440b      	add	r3, r1
 8003166:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3318      	adds	r3, #24
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	440b      	add	r3, r1
 8003178:	3304      	adds	r3, #4
 800317a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	7d1b      	ldrb	r3, [r3, #20]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d111      	bne.n	80031a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3318      	adds	r3, #24
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	6811      	ldr	r1, [r2, #0]
 8003198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3318      	adds	r3, #24
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	440b      	add	r3, r1
 80031a4:	3304      	adds	r3, #4
 80031a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3307      	adds	r3, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	061a      	lsls	r2, r3, #24
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3306      	adds	r3, #6
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3305      	adds	r3, #5
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	4313      	orrs	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	3204      	adds	r2, #4
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	4610      	mov	r0, r2
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	6811      	ldr	r1, [r2, #0]
 80031d0:	ea43 0200 	orr.w	r2, r3, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	440b      	add	r3, r1
 80031da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3303      	adds	r3, #3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	061a      	lsls	r2, r3, #24
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3302      	adds	r3, #2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3301      	adds	r3, #1
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	4313      	orrs	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	4610      	mov	r0, r2
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6811      	ldr	r1, [r2, #0]
 8003206:	ea43 0200 	orr.w	r2, r3, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	440b      	add	r3, r1
 8003210:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003214:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3318      	adds	r3, #24
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4413      	add	r3, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	6811      	ldr	r1, [r2, #0]
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3318      	adds	r3, #24
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	440b      	add	r3, r1
 8003234:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e00e      	b.n	8003258 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e006      	b.n	8003258 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3724      	adds	r7, #36	; 0x24
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003278:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d003      	beq.n	8003288 <HAL_CAN_GetRxMessage+0x24>
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	2b02      	cmp	r3, #2
 8003284:	f040 80f3 	bne.w	800346e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10e      	bne.n	80032ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d116      	bne.n	80032ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0e7      	b.n	800347c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0d8      	b.n	800347c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	331b      	adds	r3, #27
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	4413      	add	r3, r2
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0204 	and.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10c      	bne.n	8003302 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	331b      	adds	r3, #27
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	4413      	add	r3, r2
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0d5b      	lsrs	r3, r3, #21
 80032f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e00b      	b.n	800331a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	331b      	adds	r3, #27
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	331b      	adds	r3, #27
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0202 	and.w	r2, r3, #2
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	331b      	adds	r3, #27
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	331b      	adds	r3, #27
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	b2da      	uxtb	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	331b      	adds	r3, #27
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	3304      	adds	r3, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	4413      	add	r3, r2
 8003382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4413      	add	r3, r2
 8003398:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0a1a      	lsrs	r2, r3, #8
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	0c1a      	lsrs	r2, r3, #16
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	3302      	adds	r3, #2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e1a      	lsrs	r2, r3, #24
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3303      	adds	r3, #3
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	3304      	adds	r3, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0a1a      	lsrs	r2, r3, #8
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	3305      	adds	r3, #5
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	4413      	add	r3, r2
 8003418:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0c1a      	lsrs	r2, r3, #16
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	3306      	adds	r3, #6
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e1a      	lsrs	r2, r3, #24
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	3307      	adds	r3, #7
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	e007      	b.n	800346a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0220 	orr.w	r2, r2, #32
 8003468:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e006      	b.n	800347c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003498:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d002      	beq.n	80034a6 <HAL_CAN_ActivateNotification+0x1e>
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d109      	bne.n	80034ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6959      	ldr	r1, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e006      	b.n	80034c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d07c      	beq.n	8003614 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f983 	bl	8003842 <HAL_CAN_TxMailbox0CompleteCallback>
 800353c:	e016      	b.n	800356c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	e00c      	b.n	800356c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	e002      	b.n	800356c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f989 	bl	800387e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d024      	beq.n	80035c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f963 	bl	8003856 <HAL_CAN_TxMailbox1CompleteCallback>
 8003590:	e016      	b.n	80035c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	e00c      	b.n	80035c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	e002      	b.n	80035c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f969 	bl	8003892 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d024      	beq.n	8003614 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f943 	bl	800386a <HAL_CAN_TxMailbox2CompleteCallback>
 80035e4:	e016      	b.n	8003614 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
 80035f8:	e00c      	b.n	8003614 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	e002      	b.n	8003614 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f949 	bl	80038a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2210      	movs	r2, #16
 8003636:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2208      	movs	r2, #8
 8003652:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f930 	bl	80038ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe fb42 	bl	8001cfc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003692:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2210      	movs	r2, #16
 800369a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f912 	bl	80038e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8f9 	bl	80038ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d006      	beq.n	80036fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2210      	movs	r2, #16
 80036f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8fc 	bl	80038f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2208      	movs	r2, #8
 8003718:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8f5 	bl	800390a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d07b      	beq.n	8003822 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d072      	beq.n	800381a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378e:	2b00      	cmp	r3, #0
 8003790:	d043      	beq.n	800381a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03e      	beq.n	800381a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037a2:	2b60      	cmp	r3, #96	; 0x60
 80037a4:	d02b      	beq.n	80037fe <HAL_CAN_IRQHandler+0x32a>
 80037a6:	2b60      	cmp	r3, #96	; 0x60
 80037a8:	d82e      	bhi.n	8003808 <HAL_CAN_IRQHandler+0x334>
 80037aa:	2b50      	cmp	r3, #80	; 0x50
 80037ac:	d022      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x320>
 80037ae:	2b50      	cmp	r3, #80	; 0x50
 80037b0:	d82a      	bhi.n	8003808 <HAL_CAN_IRQHandler+0x334>
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d019      	beq.n	80037ea <HAL_CAN_IRQHandler+0x316>
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d826      	bhi.n	8003808 <HAL_CAN_IRQHandler+0x334>
 80037ba:	2b30      	cmp	r3, #48	; 0x30
 80037bc:	d010      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x30c>
 80037be:	2b30      	cmp	r3, #48	; 0x30
 80037c0:	d822      	bhi.n	8003808 <HAL_CAN_IRQHandler+0x334>
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d002      	beq.n	80037cc <HAL_CAN_IRQHandler+0x2f8>
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d005      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037ca:	e01d      	b.n	8003808 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d4:	e019      	b.n	800380a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f043 0310 	orr.w	r3, r3, #16
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037de:	e014      	b.n	800380a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	f043 0320 	orr.w	r3, r3, #32
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037e8:	e00f      	b.n	800380a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037f2:	e00a      	b.n	800380a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037fc:	e005      	b.n	800380a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003806:	e000      	b.n	800380a <HAL_CAN_IRQHandler+0x336>
            break;
 8003808:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003818:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2204      	movs	r2, #4
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f872 	bl	800391e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800383a:	bf00      	nop
 800383c:	3728      	adds	r7, #40	; 0x28
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <__NVIC_SetPriorityGrouping+0x40>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003950:	4013      	ands	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 800395e:	4313      	orrs	r3, r2
 8003960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003962:	4a04      	ldr	r2, [pc, #16]	; (8003974 <__NVIC_SetPriorityGrouping+0x40>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	60d3      	str	r3, [r2, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00
 8003978:	05fa0000 	.word	0x05fa0000

0800397c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <__NVIC_GetPriorityGrouping+0x18>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0307 	and.w	r3, r3, #7
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db0b      	blt.n	80039c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	4907      	ldr	r1, [pc, #28]	; (80039d0 <__NVIC_EnableIRQ+0x38>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2001      	movs	r0, #1
 80039ba:	fa00 f202 	lsl.w	r2, r0, r2
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e100 	.word	0xe000e100

080039d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	; (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
         );
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa0:	d301      	bcc.n	8003aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <SysTick_Config+0x40>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aae:	210f      	movs	r1, #15
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab4:	f7ff ff8e 	bl	80039d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <SysTick_Config+0x40>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SysTick_Config+0x40>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010

08003ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff29 	bl	8003934 <__NVIC_SetPriorityGrouping>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afc:	f7ff ff3e 	bl	800397c <__NVIC_GetPriorityGrouping>
 8003b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff8e 	bl	8003a28 <NVIC_EncodePriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff5d 	bl	80039d4 <__NVIC_SetPriority>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff31 	bl	8003998 <__NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffa2 	bl	8003a90 <SysTick_Config>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e175      	b.n	8003e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f040 8164 	bne.w	8003e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d005      	beq.n	8003bae <HAL_GPIO_Init+0x56>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d130      	bne.n	8003c10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 0201 	and.w	r2, r3, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d017      	beq.n	8003c4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d123      	bne.n	8003ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3208      	adds	r2, #8
 8003c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80be 	beq.w	8003e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce2:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	4a65      	ldr	r2, [pc, #404]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cfa:	4a61      	ldr	r2, [pc, #388]	; (8003e80 <HAL_GPIO_Init+0x328>)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	3302      	adds	r3, #2
 8003d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	220f      	movs	r2, #15
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_GPIO_Init+0x32c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d037      	beq.n	8003d96 <HAL_GPIO_Init+0x23e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a57      	ldr	r2, [pc, #348]	; (8003e88 <HAL_GPIO_Init+0x330>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d031      	beq.n	8003d92 <HAL_GPIO_Init+0x23a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a56      	ldr	r2, [pc, #344]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <HAL_GPIO_Init+0x236>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a55      	ldr	r2, [pc, #340]	; (8003e90 <HAL_GPIO_Init+0x338>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d025      	beq.n	8003d8a <HAL_GPIO_Init+0x232>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_GPIO_Init+0x33c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <HAL_GPIO_Init+0x22e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a53      	ldr	r2, [pc, #332]	; (8003e98 <HAL_GPIO_Init+0x340>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <HAL_GPIO_Init+0x22a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_GPIO_Init+0x344>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0x226>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a51      	ldr	r2, [pc, #324]	; (8003ea0 <HAL_GPIO_Init+0x348>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00d      	beq.n	8003d7a <HAL_GPIO_Init+0x222>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a50      	ldr	r2, [pc, #320]	; (8003ea4 <HAL_GPIO_Init+0x34c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <HAL_GPIO_Init+0x21e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4f      	ldr	r2, [pc, #316]	; (8003ea8 <HAL_GPIO_Init+0x350>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_GPIO_Init+0x21a>
 8003d6e:	2309      	movs	r3, #9
 8003d70:	e012      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d72:	230a      	movs	r3, #10
 8003d74:	e010      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d76:	2308      	movs	r3, #8
 8003d78:	e00e      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d7a:	2307      	movs	r3, #7
 8003d7c:	e00c      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d7e:	2306      	movs	r3, #6
 8003d80:	e00a      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d82:	2305      	movs	r3, #5
 8003d84:	e008      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d86:	2304      	movs	r3, #4
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d96:	2300      	movs	r3, #0
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	f002 0203 	and.w	r2, r2, #3
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4093      	lsls	r3, r2
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003da8:	4935      	ldr	r1, [pc, #212]	; (8003e80 <HAL_GPIO_Init+0x328>)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	3302      	adds	r3, #2
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dda:	4a34      	ldr	r2, [pc, #208]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e04:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e58:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3301      	adds	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	f67f ae86 	bls.w	8003b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40013800 	.word	0x40013800
 8003e84:	40020000 	.word	0x40020000
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	40020c00 	.word	0x40020c00
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40021400 	.word	0x40021400
 8003e9c:	40021800 	.word	0x40021800
 8003ea0:	40021c00 	.word	0x40021c00
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40022400 	.word	0x40022400
 8003eac:	40013c00 	.word	0x40013c00

08003eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec0:	787b      	ldrb	r3, [r7, #1]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ecc:	e003      	b.n	8003ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	041a      	lsls	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	619a      	str	r2, [r3, #24]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ef4:	887a      	ldrh	r2, [r7, #2]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	041a      	lsls	r2, r3, #16
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	400b      	ands	r3, r1
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	619a      	str	r2, [r3, #24]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e29b      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8087 	beq.w	800404a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f3c:	4b96      	ldr	r3, [pc, #600]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d00c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f48:	4b93      	ldr	r3, [pc, #588]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d112      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62>
 8003f54:	4b90      	ldr	r3, [pc, #576]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f60:	d10b      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f62:	4b8d      	ldr	r3, [pc, #564]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06c      	beq.n	8004048 <HAL_RCC_OscConfig+0x130>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d168      	bne.n	8004048 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e275      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x7a>
 8003f84:	4b84      	ldr	r3, [pc, #528]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a83      	ldr	r2, [pc, #524]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e02e      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x9c>
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7e      	ldr	r2, [pc, #504]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7b      	ldr	r2, [pc, #492]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e01d      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xc0>
 8003fbe:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a75      	ldr	r2, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b73      	ldr	r3, [pc, #460]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a72      	ldr	r2, [pc, #456]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd8>
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6b      	ldr	r2, [pc, #428]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fb74 	bl	80026e4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004000:	f7fe fb70 	bl	80026e4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e229      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0xe8>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe fb60 	bl	80026e4 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe fb5c 	bl	80026e4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e215      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x110>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d069      	beq.n	800412a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004056:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	d11c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x190>
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d116      	bne.n	80040a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_RCC_OscConfig+0x17a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1e9      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	493d      	ldr	r1, [pc, #244]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	e040      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a38      	ldr	r2, [pc, #224]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe fb12 	bl	80026e4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fe fb0e 	bl	80026e4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1c7      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4929      	ldr	r1, [pc, #164]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]
 80040f6:	e018      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe faee 	bl	80026e4 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410c:	f7fe faea 	bl	80026e4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e1a3      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d038      	beq.n	80041a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d019      	beq.n	8004172 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414a:	f7fe facb 	bl	80026e4 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004152:	f7fe fac7 	bl	80026e4 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e180      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x23a>
 8004170:	e01a      	b.n	80041a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <HAL_RCC_OscConfig+0x280>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fe fab1 	bl	80026e4 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004186:	f7fe faad 	bl	80026e4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d903      	bls.n	800419c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e166      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
 8004198:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a4 	beq.w	80042fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b8c      	ldr	r3, [pc, #560]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	4b89      	ldr	r3, [pc, #548]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	4a88      	ldr	r2, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	6413      	str	r3, [r2, #64]	; 0x40
 80041ce:	4b86      	ldr	r3, [pc, #536]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	4b83      	ldr	r3, [pc, #524]	; (80043ec <HAL_RCC_OscConfig+0x4d4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d118      	bne.n	800421c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041ea:	4b80      	ldr	r3, [pc, #512]	; (80043ec <HAL_RCC_OscConfig+0x4d4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7f      	ldr	r2, [pc, #508]	; (80043ec <HAL_RCC_OscConfig+0x4d4>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f6:	f7fe fa75 	bl	80026e4 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fe fa71 	bl	80026e4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b64      	cmp	r3, #100	; 0x64
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e12a      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x4d4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x31a>
 8004224:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a6f      	ldr	r2, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e02d      	b.n	800428e <HAL_RCC_OscConfig+0x376>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x33c>
 800423a:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a6a      	ldr	r2, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a67      	ldr	r2, [pc, #412]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	e01c      	b.n	800428e <HAL_RCC_OscConfig+0x376>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d10c      	bne.n	8004276 <HAL_RCC_OscConfig+0x35e>
 800425c:	4b62      	ldr	r3, [pc, #392]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a61      	ldr	r2, [pc, #388]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004262:	f043 0304 	orr.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b5f      	ldr	r3, [pc, #380]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a5e      	ldr	r2, [pc, #376]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	e00b      	b.n	800428e <HAL_RCC_OscConfig+0x376>
 8004276:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	f023 0304 	bic.w	r3, r3, #4
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d015      	beq.n	80042c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fe fa25 	bl	80026e4 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fe fa21 	bl	80026e4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0d8      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b4:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ee      	beq.n	800429e <HAL_RCC_OscConfig+0x386>
 80042c0:	e014      	b.n	80042ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fe fa0f 	bl	80026e4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fe fa0b 	bl	80026e4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0c2      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e0:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ee      	bne.n	80042ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80ae 	beq.w	8004464 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004308:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b08      	cmp	r3, #8
 8004312:	d06d      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d14b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a31      	ldr	r2, [pc, #196]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe f9dc 	bl	80026e4 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe f9d8 	bl	80026e4 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e091      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	3b01      	subs	r3, #1
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	491b      	ldr	r1, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe f9aa 	bl	80026e4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe f9a6 	bl	80026e4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e05f      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x47c>
 80043b2:	e057      	b.n	8004464 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe f990 	bl	80026e4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fe f98c 	bl	80026e4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e045      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x4b0>
 80043e6:	e03d      	b.n	8004464 <HAL_RCC_OscConfig+0x54c>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_RCC_OscConfig+0x558>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d030      	beq.n	8004460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d129      	bne.n	8004460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d122      	bne.n	8004460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004426:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004428:	4293      	cmp	r3, r2
 800442a:	d119      	bne.n	8004460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	085b      	lsrs	r3, r3, #1
 8004438:	3b01      	subs	r3, #1
 800443a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d10f      	bne.n	8004460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0d0      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800448c:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d910      	bls.n	80044bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449a:	4b67      	ldr	r3, [pc, #412]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 020f 	bic.w	r2, r3, #15
 80044a2:	4965      	ldr	r1, [pc, #404]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0b8      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d4:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a58      	ldr	r2, [pc, #352]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ec:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a52      	ldr	r2, [pc, #328]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	494d      	ldr	r1, [pc, #308]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d040      	beq.n	8004598 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d115      	bne.n	8004556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e07f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004536:	4b41      	ldr	r3, [pc, #260]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e073      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004546:	4b3d      	ldr	r3, [pc, #244]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e06b      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 0203 	bic.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4936      	ldr	r1, [pc, #216]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004568:	f7fe f8bc 	bl	80026e4 <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	e00a      	b.n	8004586 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004570:	f7fe f8b8 	bl	80026e4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e053      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	4b2d      	ldr	r3, [pc, #180]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 020c 	and.w	r2, r3, #12
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	429a      	cmp	r2, r3
 8004596:	d1eb      	bne.n	8004570 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d210      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 020f 	bic.w	r2, r3, #15
 80045ae:	4922      	ldr	r1, [pc, #136]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b20      	ldr	r3, [pc, #128]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e032      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d4:	4b19      	ldr	r3, [pc, #100]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4916      	ldr	r1, [pc, #88]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	490e      	ldr	r1, [pc, #56]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004606:	f000 f821 	bl	800464c <HAL_RCC_GetSysClockFreq>
 800460a:	4602      	mov	r2, r0
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	490a      	ldr	r1, [pc, #40]	; (8004640 <HAL_RCC_ClockConfig+0x1cc>)
 8004618:	5ccb      	ldrb	r3, [r1, r3]
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <HAL_RCC_ClockConfig+0x1d0>)
 8004620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x1d4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe f818 	bl	800265c <HAL_InitTick>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023c00 	.word	0x40023c00
 800463c:	40023800 	.word	0x40023800
 8004640:	080091ec 	.word	0x080091ec
 8004644:	20000000 	.word	0x20000000
 8004648:	20000004 	.word	0x20000004

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b090      	sub	sp, #64	; 0x40
 8004652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	2300      	movs	r3, #0
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465c:	2300      	movs	r3, #0
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004664:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b08      	cmp	r3, #8
 800466e:	d00d      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x40>
 8004670:	2b08      	cmp	r3, #8
 8004672:	f200 80a1 	bhi.w	80047b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 800467a:	2b04      	cmp	r3, #4
 800467c:	d003      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x3a>
 800467e:	e09b      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004682:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004684:	e09b      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004686:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800468a:	e098      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800468c:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004696:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d028      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b4a      	ldr	r3, [pc, #296]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	2200      	movs	r2, #0
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	627a      	str	r2, [r7, #36]	; 0x24
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b4:	2100      	movs	r1, #0
 80046b6:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b8:	fb03 f201 	mul.w	r2, r3, r1
 80046bc:	2300      	movs	r3, #0
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	4a43      	ldr	r2, [pc, #268]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c6:	fba0 1202 	umull	r1, r2, r0, r2
 80046ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046cc:	460a      	mov	r2, r1
 80046ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80046d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d2:	4413      	add	r3, r2
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	2200      	movs	r2, #0
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046e6:	f7fb fe03 	bl	80002f0 <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4613      	mov	r3, r2
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f2:	e053      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	2200      	movs	r2, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	617a      	str	r2, [r7, #20]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004706:	f04f 0b00 	mov.w	fp, #0
 800470a:	4652      	mov	r2, sl
 800470c:	465b      	mov	r3, fp
 800470e:	f04f 0000 	mov.w	r0, #0
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	0159      	lsls	r1, r3, #5
 8004718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800471c:	0150      	lsls	r0, r2, #5
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	ebb2 080a 	subs.w	r8, r2, sl
 8004726:	eb63 090b 	sbc.w	r9, r3, fp
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004736:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800473a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800473e:	ebb2 0408 	subs.w	r4, r2, r8
 8004742:	eb63 0509 	sbc.w	r5, r3, r9
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	00eb      	lsls	r3, r5, #3
 8004750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004754:	00e2      	lsls	r2, r4, #3
 8004756:	4614      	mov	r4, r2
 8004758:	461d      	mov	r5, r3
 800475a:	eb14 030a 	adds.w	r3, r4, sl
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	eb45 030b 	adc.w	r3, r5, fp
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004772:	4629      	mov	r1, r5
 8004774:	028b      	lsls	r3, r1, #10
 8004776:	4621      	mov	r1, r4
 8004778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800477c:	4621      	mov	r1, r4
 800477e:	028a      	lsls	r2, r1, #10
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004786:	2200      	movs	r2, #0
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	60fa      	str	r2, [r7, #12]
 800478c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004790:	f7fb fdae 	bl	80002f0 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	3301      	adds	r3, #1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80047ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b6:	e002      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3740      	adds	r7, #64	; 0x40
 80047c4:	46bd      	mov	sp, r7
 80047c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	017d7840 	.word	0x017d7840

080047d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000000 	.word	0x20000000

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4903      	ldr	r1, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	080091fc 	.word	0x080091fc

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffdc 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0b5b      	lsrs	r3, r3, #13
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	080091fc 	.word	0x080091fc

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004868:	4b69      	ldr	r3, [pc, #420]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a68      	ldr	r2, [pc, #416]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004872:	6093      	str	r3, [r2, #8]
 8004874:	4b66      	ldr	r3, [pc, #408]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	4964      	ldr	r1, [pc, #400]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800488a:	2301      	movs	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d017      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800489a:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	4959      	ldr	r1, [pc, #356]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b8:	d101      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d017      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048d6:	4b4e      	ldr	r3, [pc, #312]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	494a      	ldr	r1, [pc, #296]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f4:	d101      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004902:	2301      	movs	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 808b 	beq.w	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004924:	4b3a      	ldr	r3, [pc, #232]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	4a39      	ldr	r2, [pc, #228]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6413      	str	r3, [r2, #64]	; 0x40
 8004930:	4b37      	ldr	r3, [pc, #220]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800493c:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a34      	ldr	r2, [pc, #208]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004948:	f7fd fecc 	bl	80026e4 <HAL_GetTick>
 800494c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004950:	f7fd fec8 	bl	80026e4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e38f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004962:	4b2c      	ldr	r3, [pc, #176]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800496e:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d035      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d02e      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800498c:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004996:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a1a      	ldr	r2, [pc, #104]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049ae:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d114      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd fe90 	bl	80026e4 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	e00a      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fd fe8c 	bl	80026e4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e351      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ee      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f6:	d111      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a06:	400b      	ands	r3, r1
 8004a08:	4901      	ldr	r1, [pc, #4]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40007000 	.word	0x40007000
 8004a18:	0ffffcff 	.word	0x0ffffcff
 8004a1c:	4bac      	ldr	r3, [pc, #688]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4aab      	ldr	r2, [pc, #684]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a26:	6093      	str	r3, [r2, #8]
 8004a28:	4ba9      	ldr	r3, [pc, #676]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	49a6      	ldr	r1, [pc, #664]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a46:	4ba2      	ldr	r3, [pc, #648]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4c:	4aa0      	ldr	r2, [pc, #640]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a56:	4b9e      	ldr	r3, [pc, #632]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	499b      	ldr	r1, [pc, #620]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a74:	4b96      	ldr	r3, [pc, #600]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a82:	4993      	ldr	r1, [pc, #588]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a96:	4b8e      	ldr	r3, [pc, #568]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa4:	498a      	ldr	r1, [pc, #552]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ab8:	4b85      	ldr	r3, [pc, #532]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac6:	4982      	ldr	r1, [pc, #520]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ada:	4b7d      	ldr	r3, [pc, #500]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4979      	ldr	r1, [pc, #484]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004afc:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	4971      	ldr	r1, [pc, #452]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b1e:	4b6c      	ldr	r3, [pc, #432]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f023 020c 	bic.w	r2, r3, #12
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	4968      	ldr	r1, [pc, #416]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b40:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	4960      	ldr	r1, [pc, #384]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b62:	4b5b      	ldr	r3, [pc, #364]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b70:	4957      	ldr	r1, [pc, #348]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b84:	4b52      	ldr	r3, [pc, #328]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	494f      	ldr	r1, [pc, #316]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ba6:	4b4a      	ldr	r3, [pc, #296]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	4946      	ldr	r1, [pc, #280]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bc8:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	493e      	ldr	r1, [pc, #248]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bea:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	4935      	ldr	r1, [pc, #212]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c0c:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1a:	492d      	ldr	r1, [pc, #180]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3c:	4924      	ldr	r1, [pc, #144]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7c:	4914      	ldr	r1, [pc, #80]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca0:	490b      	ldr	r1, [pc, #44]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00f      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc4:	4902      	ldr	r1, [pc, #8]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ce0:	4b8a      	ldr	r3, [pc, #552]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	4986      	ldr	r1, [pc, #536]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d04:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d14:	497d      	ldr	r1, [pc, #500]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d006      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80d6 	beq.w	8004edc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d30:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3c:	f7fd fcd2 	bl	80026e4 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d44:	f7fd fcce 	bl	80026e4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e195      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d56:	4b6d      	ldr	r3, [pc, #436]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d021      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d11d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d84:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8a:	0e1b      	lsrs	r3, r3, #24
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	019a      	lsls	r2, r3, #6
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	071b      	lsls	r3, r3, #28
 8004daa:	4958      	ldr	r1, [pc, #352]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02e      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ddc:	d129      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dde:	4b4b      	ldr	r3, [pc, #300]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dec:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df2:	0f1b      	lsrs	r3, r3, #28
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	019a      	lsls	r2, r3, #6
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	041b      	lsls	r3, r3, #16
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	071b      	lsls	r3, r3, #28
 8004e12:	493e      	ldr	r1, [pc, #248]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e1a:	4b3c      	ldr	r3, [pc, #240]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e20:	f023 021f 	bic.w	r2, r3, #31
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	4938      	ldr	r1, [pc, #224]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01d      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e3e:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e44:	0e1b      	lsrs	r3, r3, #24
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e4c:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e52:	0f1b      	lsrs	r3, r3, #28
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	019a      	lsls	r2, r3, #6
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	041b      	lsls	r3, r3, #16
 8004e66:	431a      	orrs	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	061b      	lsls	r3, r3, #24
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	4926      	ldr	r1, [pc, #152]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d011      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	019a      	lsls	r2, r3, #6
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	071b      	lsls	r3, r3, #28
 8004ea2:	491a      	ldr	r1, [pc, #104]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004eaa:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fc15 	bl	80026e4 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ebe:	f7fd fc11 	bl	80026e4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b64      	cmp	r3, #100	; 0x64
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0d8      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	f040 80ce 	bne.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fbf8 	bl	80026e4 <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ef8:	f7fd fbf4 	bl	80026e4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d904      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0bb      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f10:	4b5e      	ldr	r3, [pc, #376]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1c:	d0ec      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02e      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12a      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f46:	4b51      	ldr	r3, [pc, #324]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f54:	4b4d      	ldr	r3, [pc, #308]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	0f1b      	lsrs	r3, r3, #28
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	019a      	lsls	r2, r3, #6
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	071b      	lsls	r3, r3, #28
 8004f7a:	4944      	ldr	r1, [pc, #272]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f82:	4b42      	ldr	r3, [pc, #264]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	493d      	ldr	r1, [pc, #244]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d022      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb0:	d11d      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	0e1b      	lsrs	r3, r3, #24
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fc0:	4b32      	ldr	r3, [pc, #200]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	071b      	lsls	r3, r3, #28
 8004fe6:	4929      	ldr	r1, [pc, #164]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d028      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	0e1b      	lsrs	r3, r3, #24
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005008:	4b20      	ldr	r3, [pc, #128]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	019a      	lsls	r2, r3, #6
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	431a      	orrs	r2, r3
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	071b      	lsls	r3, r3, #28
 800502e:	4917      	ldr	r1, [pc, #92]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4911      	ldr	r1, [pc, #68]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0e      	ldr	r2, [pc, #56]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd fb44 	bl	80026e4 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005060:	f7fd fb40 	bl	80026e4 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e007      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507e:	d1ef      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e049      	b.n	8005136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fff2 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fac0 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d001      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e054      	b.n	8005202 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a26      	ldr	r2, [pc, #152]	; (8005210 <HAL_TIM_Base_Start_IT+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d01d      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a22      	ldr	r2, [pc, #136]	; (8005214 <HAL_TIM_Base_Start_IT+0xd4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <HAL_TIM_Base_Start_IT+0xd8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_TIM_Base_Start_IT+0xdc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_TIM_Base_Start_IT+0xe0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <HAL_TIM_Base_Start_IT+0xe4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <HAL_TIM_Base_Start_IT+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d115      	bne.n	80051ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <HAL_TIM_Base_Start_IT+0xec>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d015      	beq.n	80051fe <HAL_TIM_Base_Start_IT+0xbe>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d011      	beq.n	80051fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	e008      	b.n	80051fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e000      	b.n	8005200 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00
 8005220:	40010400 	.word	0x40010400
 8005224:	40014000 	.word	0x40014000
 8005228:	40001800 	.word	0x40001800
 800522c:	00010007 	.word	0x00010007

08005230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0202 	mvn.w	r2, #2
 800525c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f9d0 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9c2 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f9d3 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b04      	cmp	r3, #4
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0204 	mvn.w	r2, #4
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f9a6 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f998 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f9a9 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0208 	mvn.w	r2, #8
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2204      	movs	r2, #4
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f97c 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f96e 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f97f 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b10      	cmp	r3, #16
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0210 	mvn.w	r2, #16
 8005358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2208      	movs	r2, #8
 800535e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f952 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f944 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f955 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0201 	mvn.w	r2, #1
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc fbe2 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fb0c 	bl	80059f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 faff 	bl	8005a0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f903 	bl	8005640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b20      	cmp	r3, #32
 8005446:	d10e      	bne.n	8005466 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d107      	bne.n	8005466 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f06f 0220 	mvn.w	r2, #32
 800545e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fabf 	bl	80059e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIM_ConfigClockSource+0x1c>
 8005488:	2302      	movs	r3, #2
 800548a:	e0b4      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x186>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	4b56      	ldr	r3, [pc, #344]	; (8005600 <HAL_TIM_ConfigClockSource+0x190>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c4:	d03e      	beq.n	8005544 <HAL_TIM_ConfigClockSource+0xd4>
 80054c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ca:	f200 8087 	bhi.w	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	f000 8086 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x172>
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d87f      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b70      	cmp	r3, #112	; 0x70
 80054de:	d01a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0xa6>
 80054e0:	2b70      	cmp	r3, #112	; 0x70
 80054e2:	d87b      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b60      	cmp	r3, #96	; 0x60
 80054e6:	d050      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x11a>
 80054e8:	2b60      	cmp	r3, #96	; 0x60
 80054ea:	d877      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b50      	cmp	r3, #80	; 0x50
 80054ee:	d03c      	beq.n	800556a <HAL_TIM_ConfigClockSource+0xfa>
 80054f0:	2b50      	cmp	r3, #80	; 0x50
 80054f2:	d873      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d058      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x13a>
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d86f      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b30      	cmp	r3, #48	; 0x30
 80054fe:	d064      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x15a>
 8005500:	2b30      	cmp	r3, #48	; 0x30
 8005502:	d86b      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b20      	cmp	r3, #32
 8005506:	d060      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x15a>
 8005508:	2b20      	cmp	r3, #32
 800550a:	d867      	bhi.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d05c      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b10      	cmp	r3, #16
 8005512:	d05a      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x15a>
 8005514:	e062      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6899      	ldr	r1, [r3, #8]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f000 f9af 	bl	8005888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	609a      	str	r2, [r3, #8]
      break;
 8005542:	e04f      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6899      	ldr	r1, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f000 f998 	bl	8005888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005566:	609a      	str	r2, [r3, #8]
      break;
 8005568:	e03c      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	461a      	mov	r2, r3
 8005578:	f000 f90c 	bl	8005794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2150      	movs	r1, #80	; 0x50
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f965 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 8005588:	e02c      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	461a      	mov	r2, r3
 8005598:	f000 f92b 	bl	80057f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2160      	movs	r1, #96	; 0x60
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f955 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 80055a8:	e01c      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6859      	ldr	r1, [r3, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	f000 f8ec 	bl	8005794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2140      	movs	r1, #64	; 0x40
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f945 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 80055c8:	e00c      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f000 f93c 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 80055da:	e003      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e000      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	fffeff88 	.word	0xfffeff88

08005604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a40      	ldr	r2, [pc, #256]	; (8005768 <TIM_Base_SetConfig+0x114>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d00f      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3d      	ldr	r2, [pc, #244]	; (800576c <TIM_Base_SetConfig+0x118>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <TIM_Base_SetConfig+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3b      	ldr	r2, [pc, #236]	; (8005774 <TIM_Base_SetConfig+0x120>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3a      	ldr	r2, [pc, #232]	; (8005778 <TIM_Base_SetConfig+0x124>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <TIM_Base_SetConfig+0x114>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d027      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2c      	ldr	r2, [pc, #176]	; (800576c <TIM_Base_SetConfig+0x118>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d023      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2b      	ldr	r2, [pc, #172]	; (8005770 <TIM_Base_SetConfig+0x11c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <TIM_Base_SetConfig+0x120>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a29      	ldr	r2, [pc, #164]	; (8005778 <TIM_Base_SetConfig+0x124>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a28      	ldr	r2, [pc, #160]	; (800577c <TIM_Base_SetConfig+0x128>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <TIM_Base_SetConfig+0x12c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a26      	ldr	r2, [pc, #152]	; (8005784 <TIM_Base_SetConfig+0x130>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a25      	ldr	r2, [pc, #148]	; (8005788 <TIM_Base_SetConfig+0x134>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <TIM_Base_SetConfig+0x138>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <TIM_Base_SetConfig+0x13c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <TIM_Base_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0xf8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <TIM_Base_SetConfig+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40010400 	.word	0x40010400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40001800 	.word	0x40001800
 800578c:	40001c00 	.word	0x40001c00
 8005790:	40002000 	.word	0x40002000

08005794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 030a 	bic.w	r3, r3, #10
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0210 	bic.w	r2, r3, #16
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800581c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	031b      	lsls	r3, r3, #12
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	f043 0307 	orr.w	r3, r3, #7
 8005874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	021a      	lsls	r2, r3, #8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058dc:	2302      	movs	r3, #2
 80058de:	e06d      	b.n	80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a30      	ldr	r2, [pc, #192]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800591a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a20      	ldr	r2, [pc, #128]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d01d      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a16      	ldr	r2, [pc, #88]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10c      	bne.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40001800 	.word	0x40001800

080059e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e040      	b.n	8005ab4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fc fb50 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	; 0x24
 8005a4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f974 	bl	8005d4c <UART_SetConfig>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e022      	b.n	8005ab4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fbcc 	bl	8006214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fc53 	bl	8006358 <UART_CheckIdleState>
 8005ab2:	4603      	mov	r3, r0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d171      	bne.n	8005bb8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_UART_Transmit+0x24>
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e06a      	b.n	8005bba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2221      	movs	r2, #33	; 0x21
 8005af0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005af2:	f7fc fdf7 	bl	80026e4 <HAL_GetTick>
 8005af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	d108      	bne.n	8005b24 <HAL_UART_Transmit+0x68>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e003      	b.n	8005b2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b2c:	e02c      	b.n	8005b88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2180      	movs	r1, #128	; 0x80
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fc5a 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e038      	b.n	8005bba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	3302      	adds	r3, #2
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e007      	b.n	8005b76 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1cc      	bne.n	8005b2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2140      	movs	r1, #64	; 0x40
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fc27 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e005      	b.n	8005bba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e000      	b.n	8005bba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005bb8:	2302      	movs	r3, #2
  }
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08a      	sub	sp, #40	; 0x28
 8005bc6:	af02      	add	r7, sp, #8
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	f040 80b1 	bne.w	8005d40 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Receive+0x28>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0a9      	b.n	8005d42 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2222      	movs	r2, #34	; 0x22
 8005bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c04:	f7fc fd6e 	bl	80026e4 <HAL_GetTick>
 8005c08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d10e      	bne.n	8005c42 <HAL_UART_Receive+0x80>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_UART_Receive+0x76>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c36:	e02d      	b.n	8005c94 <HAL_UART_Receive+0xd2>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c40:	e028      	b.n	8005c94 <HAL_UART_Receive+0xd2>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_UART_Receive+0xa4>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Receive+0x9a>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c5a:	e01b      	b.n	8005c94 <HAL_UART_Receive+0xd2>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	227f      	movs	r2, #127	; 0x7f
 8005c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c64:	e016      	b.n	8005c94 <HAL_UART_Receive+0xd2>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6e:	d10d      	bne.n	8005c8c <HAL_UART_Receive+0xca>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <HAL_UART_Receive+0xc0>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	227f      	movs	r2, #127	; 0x7f
 8005c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c80:	e008      	b.n	8005c94 <HAL_UART_Receive+0xd2>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	223f      	movs	r2, #63	; 0x3f
 8005c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c8a:	e003      	b.n	8005c94 <HAL_UART_Receive+0xd2>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca4:	d108      	bne.n	8005cb8 <HAL_UART_Receive+0xf6>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e003      	b.n	8005cc0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cc0:	e032      	b.n	8005d28 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2120      	movs	r1, #32
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fb90 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e032      	b.n	8005d42 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	8a7b      	ldrh	r3, [r7, #18]
 8005cec:	4013      	ands	r3, r2
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	e00c      	b.n	8005d16 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	8a7b      	ldrh	r3, [r7, #18]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	4013      	ands	r3, r2
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1c6      	bne.n	8005cc2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4ba6      	ldr	r3, [pc, #664]	; (8006010 <UART_SetConfig+0x2c4>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	6979      	ldr	r1, [r7, #20]
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a94      	ldr	r2, [pc, #592]	; (8006014 <UART_SetConfig+0x2c8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d120      	bne.n	8005e0a <UART_SetConfig+0xbe>
 8005dc8:	4b93      	ldr	r3, [pc, #588]	; (8006018 <UART_SetConfig+0x2cc>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d816      	bhi.n	8005e04 <UART_SetConfig+0xb8>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x90>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005df3 	.word	0x08005df3
 8005de8:	08005dff 	.word	0x08005dff
 8005dec:	2301      	movs	r3, #1
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e150      	b.n	8006094 <UART_SetConfig+0x348>
 8005df2:	2302      	movs	r3, #2
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e14d      	b.n	8006094 <UART_SetConfig+0x348>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e14a      	b.n	8006094 <UART_SetConfig+0x348>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e147      	b.n	8006094 <UART_SetConfig+0x348>
 8005e04:	2310      	movs	r3, #16
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e144      	b.n	8006094 <UART_SetConfig+0x348>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a83      	ldr	r2, [pc, #524]	; (800601c <UART_SetConfig+0x2d0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d132      	bne.n	8005e7a <UART_SetConfig+0x12e>
 8005e14:	4b80      	ldr	r3, [pc, #512]	; (8006018 <UART_SetConfig+0x2cc>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d828      	bhi.n	8005e74 <UART_SetConfig+0x128>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0xdc>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e5d 	.word	0x08005e5d
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005e75 	.word	0x08005e75
 8005e48:	08005e63 	.word	0x08005e63
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e6f 	.word	0x08005e6f
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e118      	b.n	8006094 <UART_SetConfig+0x348>
 8005e62:	2302      	movs	r3, #2
 8005e64:	77fb      	strb	r3, [r7, #31]
 8005e66:	e115      	b.n	8006094 <UART_SetConfig+0x348>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e112      	b.n	8006094 <UART_SetConfig+0x348>
 8005e6e:	2308      	movs	r3, #8
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e10f      	b.n	8006094 <UART_SetConfig+0x348>
 8005e74:	2310      	movs	r3, #16
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e10c      	b.n	8006094 <UART_SetConfig+0x348>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a68      	ldr	r2, [pc, #416]	; (8006020 <UART_SetConfig+0x2d4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d120      	bne.n	8005ec6 <UART_SetConfig+0x17a>
 8005e84:	4b64      	ldr	r3, [pc, #400]	; (8006018 <UART_SetConfig+0x2cc>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e8e:	2b30      	cmp	r3, #48	; 0x30
 8005e90:	d013      	beq.n	8005eba <UART_SetConfig+0x16e>
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	d814      	bhi.n	8005ec0 <UART_SetConfig+0x174>
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d009      	beq.n	8005eae <UART_SetConfig+0x162>
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d810      	bhi.n	8005ec0 <UART_SetConfig+0x174>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <UART_SetConfig+0x15c>
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d006      	beq.n	8005eb4 <UART_SetConfig+0x168>
 8005ea6:	e00b      	b.n	8005ec0 <UART_SetConfig+0x174>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e0f2      	b.n	8006094 <UART_SetConfig+0x348>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e0ef      	b.n	8006094 <UART_SetConfig+0x348>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e0ec      	b.n	8006094 <UART_SetConfig+0x348>
 8005eba:	2308      	movs	r3, #8
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e0e9      	b.n	8006094 <UART_SetConfig+0x348>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e0e6      	b.n	8006094 <UART_SetConfig+0x348>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a56      	ldr	r2, [pc, #344]	; (8006024 <UART_SetConfig+0x2d8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d120      	bne.n	8005f12 <UART_SetConfig+0x1c6>
 8005ed0:	4b51      	ldr	r3, [pc, #324]	; (8006018 <UART_SetConfig+0x2cc>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eda:	2bc0      	cmp	r3, #192	; 0xc0
 8005edc:	d013      	beq.n	8005f06 <UART_SetConfig+0x1ba>
 8005ede:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee0:	d814      	bhi.n	8005f0c <UART_SetConfig+0x1c0>
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d009      	beq.n	8005efa <UART_SetConfig+0x1ae>
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d810      	bhi.n	8005f0c <UART_SetConfig+0x1c0>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <UART_SetConfig+0x1a8>
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d006      	beq.n	8005f00 <UART_SetConfig+0x1b4>
 8005ef2:	e00b      	b.n	8005f0c <UART_SetConfig+0x1c0>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e0cc      	b.n	8006094 <UART_SetConfig+0x348>
 8005efa:	2302      	movs	r3, #2
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e0c9      	b.n	8006094 <UART_SetConfig+0x348>
 8005f00:	2304      	movs	r3, #4
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e0c6      	b.n	8006094 <UART_SetConfig+0x348>
 8005f06:	2308      	movs	r3, #8
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e0c3      	b.n	8006094 <UART_SetConfig+0x348>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e0c0      	b.n	8006094 <UART_SetConfig+0x348>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a44      	ldr	r2, [pc, #272]	; (8006028 <UART_SetConfig+0x2dc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d125      	bne.n	8005f68 <UART_SetConfig+0x21c>
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <UART_SetConfig+0x2cc>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2a:	d017      	beq.n	8005f5c <UART_SetConfig+0x210>
 8005f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f30:	d817      	bhi.n	8005f62 <UART_SetConfig+0x216>
 8005f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f36:	d00b      	beq.n	8005f50 <UART_SetConfig+0x204>
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3c:	d811      	bhi.n	8005f62 <UART_SetConfig+0x216>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <UART_SetConfig+0x1fe>
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f46:	d006      	beq.n	8005f56 <UART_SetConfig+0x20a>
 8005f48:	e00b      	b.n	8005f62 <UART_SetConfig+0x216>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e0a1      	b.n	8006094 <UART_SetConfig+0x348>
 8005f50:	2302      	movs	r3, #2
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e09e      	b.n	8006094 <UART_SetConfig+0x348>
 8005f56:	2304      	movs	r3, #4
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e09b      	b.n	8006094 <UART_SetConfig+0x348>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e098      	b.n	8006094 <UART_SetConfig+0x348>
 8005f62:	2310      	movs	r3, #16
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e095      	b.n	8006094 <UART_SetConfig+0x348>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2f      	ldr	r2, [pc, #188]	; (800602c <UART_SetConfig+0x2e0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d125      	bne.n	8005fbe <UART_SetConfig+0x272>
 8005f72:	4b29      	ldr	r3, [pc, #164]	; (8006018 <UART_SetConfig+0x2cc>)
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f80:	d017      	beq.n	8005fb2 <UART_SetConfig+0x266>
 8005f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f86:	d817      	bhi.n	8005fb8 <UART_SetConfig+0x26c>
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8c:	d00b      	beq.n	8005fa6 <UART_SetConfig+0x25a>
 8005f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f92:	d811      	bhi.n	8005fb8 <UART_SetConfig+0x26c>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <UART_SetConfig+0x254>
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9c:	d006      	beq.n	8005fac <UART_SetConfig+0x260>
 8005f9e:	e00b      	b.n	8005fb8 <UART_SetConfig+0x26c>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e076      	b.n	8006094 <UART_SetConfig+0x348>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e073      	b.n	8006094 <UART_SetConfig+0x348>
 8005fac:	2304      	movs	r3, #4
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e070      	b.n	8006094 <UART_SetConfig+0x348>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e06d      	b.n	8006094 <UART_SetConfig+0x348>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e06a      	b.n	8006094 <UART_SetConfig+0x348>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <UART_SetConfig+0x2e4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d138      	bne.n	800603a <UART_SetConfig+0x2ee>
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <UART_SetConfig+0x2cc>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd6:	d017      	beq.n	8006008 <UART_SetConfig+0x2bc>
 8005fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fdc:	d82a      	bhi.n	8006034 <UART_SetConfig+0x2e8>
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d00b      	beq.n	8005ffc <UART_SetConfig+0x2b0>
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe8:	d824      	bhi.n	8006034 <UART_SetConfig+0x2e8>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <UART_SetConfig+0x2aa>
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	d006      	beq.n	8006002 <UART_SetConfig+0x2b6>
 8005ff4:	e01e      	b.n	8006034 <UART_SetConfig+0x2e8>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e04b      	b.n	8006094 <UART_SetConfig+0x348>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e048      	b.n	8006094 <UART_SetConfig+0x348>
 8006002:	2304      	movs	r3, #4
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e045      	b.n	8006094 <UART_SetConfig+0x348>
 8006008:	2308      	movs	r3, #8
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e042      	b.n	8006094 <UART_SetConfig+0x348>
 800600e:	bf00      	nop
 8006010:	efff69f3 	.word	0xefff69f3
 8006014:	40011000 	.word	0x40011000
 8006018:	40023800 	.word	0x40023800
 800601c:	40004400 	.word	0x40004400
 8006020:	40004800 	.word	0x40004800
 8006024:	40004c00 	.word	0x40004c00
 8006028:	40005000 	.word	0x40005000
 800602c:	40011400 	.word	0x40011400
 8006030:	40007800 	.word	0x40007800
 8006034:	2310      	movs	r3, #16
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e02c      	b.n	8006094 <UART_SetConfig+0x348>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a72      	ldr	r2, [pc, #456]	; (8006208 <UART_SetConfig+0x4bc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d125      	bne.n	8006090 <UART_SetConfig+0x344>
 8006044:	4b71      	ldr	r3, [pc, #452]	; (800620c <UART_SetConfig+0x4c0>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800604e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006052:	d017      	beq.n	8006084 <UART_SetConfig+0x338>
 8006054:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006058:	d817      	bhi.n	800608a <UART_SetConfig+0x33e>
 800605a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605e:	d00b      	beq.n	8006078 <UART_SetConfig+0x32c>
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	d811      	bhi.n	800608a <UART_SetConfig+0x33e>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <UART_SetConfig+0x326>
 800606a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800606e:	d006      	beq.n	800607e <UART_SetConfig+0x332>
 8006070:	e00b      	b.n	800608a <UART_SetConfig+0x33e>
 8006072:	2300      	movs	r3, #0
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e00d      	b.n	8006094 <UART_SetConfig+0x348>
 8006078:	2302      	movs	r3, #2
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e00a      	b.n	8006094 <UART_SetConfig+0x348>
 800607e:	2304      	movs	r3, #4
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e007      	b.n	8006094 <UART_SetConfig+0x348>
 8006084:	2308      	movs	r3, #8
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e004      	b.n	8006094 <UART_SetConfig+0x348>
 800608a:	2310      	movs	r3, #16
 800608c:	77fb      	strb	r3, [r7, #31]
 800608e:	e001      	b.n	8006094 <UART_SetConfig+0x348>
 8006090:	2310      	movs	r3, #16
 8006092:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609c:	d15b      	bne.n	8006156 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800609e:	7ffb      	ldrb	r3, [r7, #31]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d828      	bhi.n	80060f6 <UART_SetConfig+0x3aa>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0x360>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060d1 	.word	0x080060d1
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060e1 	.word	0x080060e1
 80060b8:	080060f7 	.word	0x080060f7
 80060bc:	080060e7 	.word	0x080060e7
 80060c0:	080060f7 	.word	0x080060f7
 80060c4:	080060f7 	.word	0x080060f7
 80060c8:	080060f7 	.word	0x080060f7
 80060cc:	080060ef 	.word	0x080060ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d0:	f7fe fb8e 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 80060d4:	61b8      	str	r0, [r7, #24]
        break;
 80060d6:	e013      	b.n	8006100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d8:	f7fe fb9e 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80060dc:	61b8      	str	r0, [r7, #24]
        break;
 80060de:	e00f      	b.n	8006100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e0:	4b4b      	ldr	r3, [pc, #300]	; (8006210 <UART_SetConfig+0x4c4>)
 80060e2:	61bb      	str	r3, [r7, #24]
        break;
 80060e4:	e00c      	b.n	8006100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e6:	f7fe fab1 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80060ea:	61b8      	str	r0, [r7, #24]
        break;
 80060ec:	e008      	b.n	8006100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f2:	61bb      	str	r3, [r7, #24]
        break;
 80060f4:	e004      	b.n	8006100 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	77bb      	strb	r3, [r7, #30]
        break;
 80060fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d074      	beq.n	80061f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	005a      	lsls	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d916      	bls.n	8006150 <UART_SetConfig+0x404>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006128:	d212      	bcs.n	8006150 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f023 030f 	bic.w	r3, r3, #15
 8006132:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	b29a      	uxth	r2, r3
 8006140:	89fb      	ldrh	r3, [r7, #14]
 8006142:	4313      	orrs	r3, r2
 8006144:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	89fa      	ldrh	r2, [r7, #14]
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e04f      	b.n	80061f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77bb      	strb	r3, [r7, #30]
 8006154:	e04c      	b.n	80061f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006156:	7ffb      	ldrb	r3, [r7, #31]
 8006158:	2b08      	cmp	r3, #8
 800615a:	d828      	bhi.n	80061ae <UART_SetConfig+0x462>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x418>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	080061af 	.word	0x080061af
 8006174:	0800619f 	.word	0x0800619f
 8006178:	080061af 	.word	0x080061af
 800617c:	080061af 	.word	0x080061af
 8006180:	080061af 	.word	0x080061af
 8006184:	080061a7 	.word	0x080061a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fe fb32 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 800618c:	61b8      	str	r0, [r7, #24]
        break;
 800618e:	e013      	b.n	80061b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fe fb42 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8006194:	61b8      	str	r0, [r7, #24]
        break;
 8006196:	e00f      	b.n	80061b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <UART_SetConfig+0x4c4>)
 800619a:	61bb      	str	r3, [r7, #24]
        break;
 800619c:	e00c      	b.n	80061b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619e:	f7fe fa55 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80061a2:	61b8      	str	r0, [r7, #24]
        break;
 80061a4:	e008      	b.n	80061b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061aa:	61bb      	str	r3, [r7, #24]
        break;
 80061ac:	e004      	b.n	80061b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	77bb      	strb	r3, [r7, #30]
        break;
 80061b6:	bf00      	nop
    }

    if (pclk != 0U)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	085a      	lsrs	r2, r3, #1
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	441a      	add	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b0f      	cmp	r3, #15
 80061d6:	d909      	bls.n	80061ec <UART_SetConfig+0x4a0>
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061de:	d205      	bcs.n	80061ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	e001      	b.n	80061f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40007c00 	.word	0x40007c00
 800620c:	40023800 	.word	0x40023800
 8006210:	00f42400 	.word	0x00f42400

08006214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01a      	beq.n	800632a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d10a      	bne.n	800632a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
  }
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006368:	f7fc f9bc 	bl	80026e4 <HAL_GetTick>
 800636c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b08      	cmp	r3, #8
 800637a:	d10e      	bne.n	800639a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f831 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e027      	b.n	80063ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d10e      	bne.n	80063c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f81b 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e011      	b.n	80063ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b09c      	sub	sp, #112	; 0x70
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006402:	e0a7      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640a:	f000 80a3 	beq.w	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fc f969 	bl	80026e4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <UART_WaitOnFlagUntilTimeout+0x32>
 800641e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006420:	2b00      	cmp	r3, #0
 8006422:	d13f      	bne.n	80064a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006438:	667b      	str	r3, [r7, #100]	; 0x64
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006444:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e6      	bne.n	8006424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	663b      	str	r3, [r7, #96]	; 0x60
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006476:	64ba      	str	r2, [r7, #72]	; 0x48
 8006478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800647c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e068      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d050      	beq.n	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d148      	bne.n	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
 80064ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800651e:	623a      	str	r2, [r7, #32]
 8006520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	61bb      	str	r3, [r7, #24]
   return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e010      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4013      	ands	r3, r2
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	429a      	cmp	r2, r3
 8006570:	f43f af48 	beq.w	8006404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3770      	adds	r7, #112	; 0x70
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <__errno>:
 8006580:	4b01      	ldr	r3, [pc, #4]	; (8006588 <__errno+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	2000000c 	.word	0x2000000c

0800658c <__libc_init_array>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4d0d      	ldr	r5, [pc, #52]	; (80065c4 <__libc_init_array+0x38>)
 8006590:	4c0d      	ldr	r4, [pc, #52]	; (80065c8 <__libc_init_array+0x3c>)
 8006592:	1b64      	subs	r4, r4, r5
 8006594:	10a4      	asrs	r4, r4, #2
 8006596:	2600      	movs	r6, #0
 8006598:	42a6      	cmp	r6, r4
 800659a:	d109      	bne.n	80065b0 <__libc_init_array+0x24>
 800659c:	4d0b      	ldr	r5, [pc, #44]	; (80065cc <__libc_init_array+0x40>)
 800659e:	4c0c      	ldr	r4, [pc, #48]	; (80065d0 <__libc_init_array+0x44>)
 80065a0:	f002 fddc 	bl	800915c <_init>
 80065a4:	1b64      	subs	r4, r4, r5
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	2600      	movs	r6, #0
 80065aa:	42a6      	cmp	r6, r4
 80065ac:	d105      	bne.n	80065ba <__libc_init_array+0x2e>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b4:	4798      	blx	r3
 80065b6:	3601      	adds	r6, #1
 80065b8:	e7ee      	b.n	8006598 <__libc_init_array+0xc>
 80065ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80065be:	4798      	blx	r3
 80065c0:	3601      	adds	r6, #1
 80065c2:	e7f2      	b.n	80065aa <__libc_init_array+0x1e>
 80065c4:	080095e4 	.word	0x080095e4
 80065c8:	080095e4 	.word	0x080095e4
 80065cc:	080095e4 	.word	0x080095e4
 80065d0:	080095e8 	.word	0x080095e8

080065d4 <memset>:
 80065d4:	4402      	add	r2, r0
 80065d6:	4603      	mov	r3, r0
 80065d8:	4293      	cmp	r3, r2
 80065da:	d100      	bne.n	80065de <memset+0xa>
 80065dc:	4770      	bx	lr
 80065de:	f803 1b01 	strb.w	r1, [r3], #1
 80065e2:	e7f9      	b.n	80065d8 <memset+0x4>

080065e4 <__cvt>:
 80065e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e6:	ed2d 8b02 	vpush	{d8}
 80065ea:	eeb0 8b40 	vmov.f64	d8, d0
 80065ee:	b085      	sub	sp, #20
 80065f0:	4617      	mov	r7, r2
 80065f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065f6:	ee18 2a90 	vmov	r2, s17
 80065fa:	f025 0520 	bic.w	r5, r5, #32
 80065fe:	2a00      	cmp	r2, #0
 8006600:	bfb6      	itet	lt
 8006602:	222d      	movlt	r2, #45	; 0x2d
 8006604:	2200      	movge	r2, #0
 8006606:	eeb1 8b40 	vneglt.f64	d8, d0
 800660a:	2d46      	cmp	r5, #70	; 0x46
 800660c:	460c      	mov	r4, r1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	d004      	beq.n	800661c <__cvt+0x38>
 8006612:	2d45      	cmp	r5, #69	; 0x45
 8006614:	d100      	bne.n	8006618 <__cvt+0x34>
 8006616:	3401      	adds	r4, #1
 8006618:	2102      	movs	r1, #2
 800661a:	e000      	b.n	800661e <__cvt+0x3a>
 800661c:	2103      	movs	r1, #3
 800661e:	ab03      	add	r3, sp, #12
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	ab02      	add	r3, sp, #8
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	4622      	mov	r2, r4
 8006628:	4633      	mov	r3, r6
 800662a:	eeb0 0b48 	vmov.f64	d0, d8
 800662e:	f000 fd6f 	bl	8007110 <_dtoa_r>
 8006632:	2d47      	cmp	r5, #71	; 0x47
 8006634:	d101      	bne.n	800663a <__cvt+0x56>
 8006636:	07fb      	lsls	r3, r7, #31
 8006638:	d51a      	bpl.n	8006670 <__cvt+0x8c>
 800663a:	2d46      	cmp	r5, #70	; 0x46
 800663c:	eb00 0204 	add.w	r2, r0, r4
 8006640:	d10c      	bne.n	800665c <__cvt+0x78>
 8006642:	7803      	ldrb	r3, [r0, #0]
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d107      	bne.n	8006658 <__cvt+0x74>
 8006648:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006650:	bf1c      	itt	ne
 8006652:	f1c4 0401 	rsbne	r4, r4, #1
 8006656:	6034      	strne	r4, [r6, #0]
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	441a      	add	r2, r3
 800665c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006664:	bf08      	it	eq
 8006666:	9203      	streq	r2, [sp, #12]
 8006668:	2130      	movs	r1, #48	; 0x30
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	4293      	cmp	r3, r2
 800666e:	d307      	bcc.n	8006680 <__cvt+0x9c>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006674:	1a1b      	subs	r3, r3, r0
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	b005      	add	sp, #20
 800667a:	ecbd 8b02 	vpop	{d8}
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006680:	1c5c      	adds	r4, r3, #1
 8006682:	9403      	str	r4, [sp, #12]
 8006684:	7019      	strb	r1, [r3, #0]
 8006686:	e7f0      	b.n	800666a <__cvt+0x86>

08006688 <__exponent>:
 8006688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668a:	4603      	mov	r3, r0
 800668c:	2900      	cmp	r1, #0
 800668e:	bfb8      	it	lt
 8006690:	4249      	neglt	r1, r1
 8006692:	f803 2b02 	strb.w	r2, [r3], #2
 8006696:	bfb4      	ite	lt
 8006698:	222d      	movlt	r2, #45	; 0x2d
 800669a:	222b      	movge	r2, #43	; 0x2b
 800669c:	2909      	cmp	r1, #9
 800669e:	7042      	strb	r2, [r0, #1]
 80066a0:	dd2a      	ble.n	80066f8 <__exponent+0x70>
 80066a2:	f10d 0407 	add.w	r4, sp, #7
 80066a6:	46a4      	mov	ip, r4
 80066a8:	270a      	movs	r7, #10
 80066aa:	46a6      	mov	lr, r4
 80066ac:	460a      	mov	r2, r1
 80066ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80066b2:	fb07 1516 	mls	r5, r7, r6, r1
 80066b6:	3530      	adds	r5, #48	; 0x30
 80066b8:	2a63      	cmp	r2, #99	; 0x63
 80066ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80066be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066c2:	4631      	mov	r1, r6
 80066c4:	dcf1      	bgt.n	80066aa <__exponent+0x22>
 80066c6:	3130      	adds	r1, #48	; 0x30
 80066c8:	f1ae 0502 	sub.w	r5, lr, #2
 80066cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066d0:	1c44      	adds	r4, r0, #1
 80066d2:	4629      	mov	r1, r5
 80066d4:	4561      	cmp	r1, ip
 80066d6:	d30a      	bcc.n	80066ee <__exponent+0x66>
 80066d8:	f10d 0209 	add.w	r2, sp, #9
 80066dc:	eba2 020e 	sub.w	r2, r2, lr
 80066e0:	4565      	cmp	r5, ip
 80066e2:	bf88      	it	hi
 80066e4:	2200      	movhi	r2, #0
 80066e6:	4413      	add	r3, r2
 80066e8:	1a18      	subs	r0, r3, r0
 80066ea:	b003      	add	sp, #12
 80066ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066f6:	e7ed      	b.n	80066d4 <__exponent+0x4c>
 80066f8:	2330      	movs	r3, #48	; 0x30
 80066fa:	3130      	adds	r1, #48	; 0x30
 80066fc:	7083      	strb	r3, [r0, #2]
 80066fe:	70c1      	strb	r1, [r0, #3]
 8006700:	1d03      	adds	r3, r0, #4
 8006702:	e7f1      	b.n	80066e8 <__exponent+0x60>
 8006704:	0000      	movs	r0, r0
	...

08006708 <_printf_float>:
 8006708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	b08b      	sub	sp, #44	; 0x2c
 800670e:	460c      	mov	r4, r1
 8006710:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006714:	4616      	mov	r6, r2
 8006716:	461f      	mov	r7, r3
 8006718:	4605      	mov	r5, r0
 800671a:	f001 fc1f 	bl	8007f5c <_localeconv_r>
 800671e:	f8d0 b000 	ldr.w	fp, [r0]
 8006722:	4658      	mov	r0, fp
 8006724:	f7f9 fd8c 	bl	8000240 <strlen>
 8006728:	2300      	movs	r3, #0
 800672a:	9308      	str	r3, [sp, #32]
 800672c:	f8d8 3000 	ldr.w	r3, [r8]
 8006730:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	3307      	adds	r3, #7
 8006738:	f023 0307 	bic.w	r3, r3, #7
 800673c:	f103 0108 	add.w	r1, r3, #8
 8006740:	f8c8 1000 	str.w	r1, [r8]
 8006744:	4682      	mov	sl, r0
 8006746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800674a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800674e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80069b0 <_printf_float+0x2a8>
 8006752:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006756:	eeb0 6bc0 	vabs.f64	d6, d0
 800675a:	eeb4 6b47 	vcmp.f64	d6, d7
 800675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006762:	dd24      	ble.n	80067ae <_printf_float+0xa6>
 8006764:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676c:	d502      	bpl.n	8006774 <_printf_float+0x6c>
 800676e:	232d      	movs	r3, #45	; 0x2d
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	4b90      	ldr	r3, [pc, #576]	; (80069b8 <_printf_float+0x2b0>)
 8006776:	4891      	ldr	r0, [pc, #580]	; (80069bc <_printf_float+0x2b4>)
 8006778:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800677c:	bf94      	ite	ls
 800677e:	4698      	movls	r8, r3
 8006780:	4680      	movhi	r8, r0
 8006782:	2303      	movs	r3, #3
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	f022 0204 	bic.w	r2, r2, #4
 800678a:	2300      	movs	r3, #0
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	9304      	str	r3, [sp, #16]
 8006790:	9700      	str	r7, [sp, #0]
 8006792:	4633      	mov	r3, r6
 8006794:	aa09      	add	r2, sp, #36	; 0x24
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 f9d3 	bl	8006b44 <_printf_common>
 800679e:	3001      	adds	r0, #1
 80067a0:	f040 808a 	bne.w	80068b8 <_printf_float+0x1b0>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a8:	b00b      	add	sp, #44	; 0x2c
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80067b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b6:	d709      	bvc.n	80067cc <_printf_float+0xc4>
 80067b8:	ee10 3a90 	vmov	r3, s1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bfbc      	itt	lt
 80067c0:	232d      	movlt	r3, #45	; 0x2d
 80067c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067c6:	487e      	ldr	r0, [pc, #504]	; (80069c0 <_printf_float+0x2b8>)
 80067c8:	4b7e      	ldr	r3, [pc, #504]	; (80069c4 <_printf_float+0x2bc>)
 80067ca:	e7d5      	b.n	8006778 <_printf_float+0x70>
 80067cc:	6863      	ldr	r3, [r4, #4]
 80067ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067d2:	9104      	str	r1, [sp, #16]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	d13c      	bne.n	8006852 <_printf_float+0x14a>
 80067d8:	2306      	movs	r3, #6
 80067da:	6063      	str	r3, [r4, #4]
 80067dc:	2300      	movs	r3, #0
 80067de:	9303      	str	r3, [sp, #12]
 80067e0:	ab08      	add	r3, sp, #32
 80067e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80067e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ea:	ab07      	add	r3, sp, #28
 80067ec:	6861      	ldr	r1, [r4, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	6022      	str	r2, [r4, #0]
 80067f2:	f10d 031b 	add.w	r3, sp, #27
 80067f6:	4628      	mov	r0, r5
 80067f8:	f7ff fef4 	bl	80065e4 <__cvt>
 80067fc:	9b04      	ldr	r3, [sp, #16]
 80067fe:	9907      	ldr	r1, [sp, #28]
 8006800:	2b47      	cmp	r3, #71	; 0x47
 8006802:	4680      	mov	r8, r0
 8006804:	d108      	bne.n	8006818 <_printf_float+0x110>
 8006806:	1cc8      	adds	r0, r1, #3
 8006808:	db02      	blt.n	8006810 <_printf_float+0x108>
 800680a:	6863      	ldr	r3, [r4, #4]
 800680c:	4299      	cmp	r1, r3
 800680e:	dd41      	ble.n	8006894 <_printf_float+0x18c>
 8006810:	f1a9 0902 	sub.w	r9, r9, #2
 8006814:	fa5f f989 	uxtb.w	r9, r9
 8006818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800681c:	d820      	bhi.n	8006860 <_printf_float+0x158>
 800681e:	3901      	subs	r1, #1
 8006820:	464a      	mov	r2, r9
 8006822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006826:	9107      	str	r1, [sp, #28]
 8006828:	f7ff ff2e 	bl	8006688 <__exponent>
 800682c:	9a08      	ldr	r2, [sp, #32]
 800682e:	9004      	str	r0, [sp, #16]
 8006830:	1813      	adds	r3, r2, r0
 8006832:	2a01      	cmp	r2, #1
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	dc02      	bgt.n	800683e <_printf_float+0x136>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	07d2      	lsls	r2, r2, #31
 800683c:	d501      	bpl.n	8006842 <_printf_float+0x13a>
 800683e:	3301      	adds	r3, #1
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0a2      	beq.n	8006790 <_printf_float+0x88>
 800684a:	232d      	movs	r3, #45	; 0x2d
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006850:	e79e      	b.n	8006790 <_printf_float+0x88>
 8006852:	9904      	ldr	r1, [sp, #16]
 8006854:	2947      	cmp	r1, #71	; 0x47
 8006856:	d1c1      	bne.n	80067dc <_printf_float+0xd4>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1bf      	bne.n	80067dc <_printf_float+0xd4>
 800685c:	2301      	movs	r3, #1
 800685e:	e7bc      	b.n	80067da <_printf_float+0xd2>
 8006860:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006864:	d118      	bne.n	8006898 <_printf_float+0x190>
 8006866:	2900      	cmp	r1, #0
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	dd0b      	ble.n	8006884 <_printf_float+0x17c>
 800686c:	6121      	str	r1, [r4, #16]
 800686e:	b913      	cbnz	r3, 8006876 <_printf_float+0x16e>
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	07d0      	lsls	r0, r2, #31
 8006874:	d502      	bpl.n	800687c <_printf_float+0x174>
 8006876:	3301      	adds	r3, #1
 8006878:	440b      	add	r3, r1
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	2300      	movs	r3, #0
 800687e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	e7de      	b.n	8006842 <_printf_float+0x13a>
 8006884:	b913      	cbnz	r3, 800688c <_printf_float+0x184>
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	07d2      	lsls	r2, r2, #31
 800688a:	d501      	bpl.n	8006890 <_printf_float+0x188>
 800688c:	3302      	adds	r3, #2
 800688e:	e7f4      	b.n	800687a <_printf_float+0x172>
 8006890:	2301      	movs	r3, #1
 8006892:	e7f2      	b.n	800687a <_printf_float+0x172>
 8006894:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006898:	9b08      	ldr	r3, [sp, #32]
 800689a:	4299      	cmp	r1, r3
 800689c:	db05      	blt.n	80068aa <_printf_float+0x1a2>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	6121      	str	r1, [r4, #16]
 80068a2:	07d8      	lsls	r0, r3, #31
 80068a4:	d5ea      	bpl.n	800687c <_printf_float+0x174>
 80068a6:	1c4b      	adds	r3, r1, #1
 80068a8:	e7e7      	b.n	800687a <_printf_float+0x172>
 80068aa:	2900      	cmp	r1, #0
 80068ac:	bfd4      	ite	le
 80068ae:	f1c1 0202 	rsble	r2, r1, #2
 80068b2:	2201      	movgt	r2, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	e7e0      	b.n	800687a <_printf_float+0x172>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	055a      	lsls	r2, r3, #21
 80068bc:	d407      	bmi.n	80068ce <_printf_float+0x1c6>
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	4642      	mov	r2, r8
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	d12a      	bne.n	8006922 <_printf_float+0x21a>
 80068cc:	e76a      	b.n	80067a4 <_printf_float+0x9c>
 80068ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068d2:	f240 80e2 	bls.w	8006a9a <_printf_float+0x392>
 80068d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80068da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	d133      	bne.n	800694c <_printf_float+0x244>
 80068e4:	4a38      	ldr	r2, [pc, #224]	; (80069c8 <_printf_float+0x2c0>)
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af58 	beq.w	80067a4 <_printf_float+0x9c>
 80068f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	db02      	blt.n	8006902 <_printf_float+0x1fa>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07d8      	lsls	r0, r3, #31
 8006900:	d50f      	bpl.n	8006922 <_printf_float+0x21a>
 8006902:	4653      	mov	r3, sl
 8006904:	465a      	mov	r2, fp
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	f43f af49 	beq.w	80067a4 <_printf_float+0x9c>
 8006912:	f04f 0800 	mov.w	r8, #0
 8006916:	f104 091a 	add.w	r9, r4, #26
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	3b01      	subs	r3, #1
 800691e:	4543      	cmp	r3, r8
 8006920:	dc09      	bgt.n	8006936 <_printf_float+0x22e>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	079b      	lsls	r3, r3, #30
 8006926:	f100 8108 	bmi.w	8006b3a <_printf_float+0x432>
 800692a:	68e0      	ldr	r0, [r4, #12]
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	4298      	cmp	r0, r3
 8006930:	bfb8      	it	lt
 8006932:	4618      	movlt	r0, r3
 8006934:	e738      	b.n	80067a8 <_printf_float+0xa0>
 8006936:	2301      	movs	r3, #1
 8006938:	464a      	mov	r2, r9
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f af2f 	beq.w	80067a4 <_printf_float+0x9c>
 8006946:	f108 0801 	add.w	r8, r8, #1
 800694a:	e7e6      	b.n	800691a <_printf_float+0x212>
 800694c:	9b07      	ldr	r3, [sp, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	dc3c      	bgt.n	80069cc <_printf_float+0x2c4>
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <_printf_float+0x2c0>)
 8006954:	2301      	movs	r3, #1
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f af21 	beq.w	80067a4 <_printf_float+0x9c>
 8006962:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006966:	4313      	orrs	r3, r2
 8006968:	d102      	bne.n	8006970 <_printf_float+0x268>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	07d9      	lsls	r1, r3, #31
 800696e:	d5d8      	bpl.n	8006922 <_printf_float+0x21a>
 8006970:	4653      	mov	r3, sl
 8006972:	465a      	mov	r2, fp
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	f43f af12 	beq.w	80067a4 <_printf_float+0x9c>
 8006980:	f04f 0900 	mov.w	r9, #0
 8006984:	f104 0a1a 	add.w	sl, r4, #26
 8006988:	9b07      	ldr	r3, [sp, #28]
 800698a:	425b      	negs	r3, r3
 800698c:	454b      	cmp	r3, r9
 800698e:	dc01      	bgt.n	8006994 <_printf_float+0x28c>
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	e795      	b.n	80068c0 <_printf_float+0x1b8>
 8006994:	2301      	movs	r3, #1
 8006996:	4652      	mov	r2, sl
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f af00 	beq.w	80067a4 <_printf_float+0x9c>
 80069a4:	f109 0901 	add.w	r9, r9, #1
 80069a8:	e7ee      	b.n	8006988 <_printf_float+0x280>
 80069aa:	bf00      	nop
 80069ac:	f3af 8000 	nop.w
 80069b0:	ffffffff 	.word	0xffffffff
 80069b4:	7fefffff 	.word	0x7fefffff
 80069b8:	08009208 	.word	0x08009208
 80069bc:	0800920c 	.word	0x0800920c
 80069c0:	08009214 	.word	0x08009214
 80069c4:	08009210 	.word	0x08009210
 80069c8:	08009218 	.word	0x08009218
 80069cc:	9a08      	ldr	r2, [sp, #32]
 80069ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069d0:	429a      	cmp	r2, r3
 80069d2:	bfa8      	it	ge
 80069d4:	461a      	movge	r2, r3
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	4691      	mov	r9, r2
 80069da:	dc38      	bgt.n	8006a4e <_printf_float+0x346>
 80069dc:	2300      	movs	r3, #0
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069e4:	f104 021a 	add.w	r2, r4, #26
 80069e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ea:	9905      	ldr	r1, [sp, #20]
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	eba3 0309 	sub.w	r3, r3, r9
 80069f2:	428b      	cmp	r3, r1
 80069f4:	dc33      	bgt.n	8006a5e <_printf_float+0x356>
 80069f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	db3c      	blt.n	8006a78 <_printf_float+0x370>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	07da      	lsls	r2, r3, #31
 8006a02:	d439      	bmi.n	8006a78 <_printf_float+0x370>
 8006a04:	9b08      	ldr	r3, [sp, #32]
 8006a06:	9a04      	ldr	r2, [sp, #16]
 8006a08:	9907      	ldr	r1, [sp, #28]
 8006a0a:	1a9a      	subs	r2, r3, r2
 8006a0c:	eba3 0901 	sub.w	r9, r3, r1
 8006a10:	4591      	cmp	r9, r2
 8006a12:	bfa8      	it	ge
 8006a14:	4691      	movge	r9, r2
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	dc35      	bgt.n	8006a88 <_printf_float+0x380>
 8006a1c:	f04f 0800 	mov.w	r8, #0
 8006a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a24:	f104 0a1a 	add.w	sl, r4, #26
 8006a28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	eba3 0309 	sub.w	r3, r3, r9
 8006a32:	4543      	cmp	r3, r8
 8006a34:	f77f af75 	ble.w	8006922 <_printf_float+0x21a>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f aeae 	beq.w	80067a4 <_printf_float+0x9c>
 8006a48:	f108 0801 	add.w	r8, r8, #1
 8006a4c:	e7ec      	b.n	8006a28 <_printf_float+0x320>
 8006a4e:	4613      	mov	r3, r2
 8006a50:	4631      	mov	r1, r6
 8006a52:	4642      	mov	r2, r8
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d1bf      	bne.n	80069dc <_printf_float+0x2d4>
 8006a5c:	e6a2      	b.n	80067a4 <_printf_float+0x9c>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	9204      	str	r2, [sp, #16]
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f ae9b 	beq.w	80067a4 <_printf_float+0x9c>
 8006a6e:	9b05      	ldr	r3, [sp, #20]
 8006a70:	9a04      	ldr	r2, [sp, #16]
 8006a72:	3301      	adds	r3, #1
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	e7b7      	b.n	80069e8 <_printf_float+0x2e0>
 8006a78:	4653      	mov	r3, sl
 8006a7a:	465a      	mov	r2, fp
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	d1be      	bne.n	8006a04 <_printf_float+0x2fc>
 8006a86:	e68d      	b.n	80067a4 <_printf_float+0x9c>
 8006a88:	9a04      	ldr	r2, [sp, #16]
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	4442      	add	r2, r8
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	d1c1      	bne.n	8006a1c <_printf_float+0x314>
 8006a98:	e684      	b.n	80067a4 <_printf_float+0x9c>
 8006a9a:	9a08      	ldr	r2, [sp, #32]
 8006a9c:	2a01      	cmp	r2, #1
 8006a9e:	dc01      	bgt.n	8006aa4 <_printf_float+0x39c>
 8006aa0:	07db      	lsls	r3, r3, #31
 8006aa2:	d537      	bpl.n	8006b14 <_printf_float+0x40c>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f ae78 	beq.w	80067a4 <_printf_float+0x9c>
 8006ab4:	4653      	mov	r3, sl
 8006ab6:	465a      	mov	r2, fp
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f ae70 	beq.w	80067a4 <_printf_float+0x9c>
 8006ac4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006ac8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad0:	d01b      	beq.n	8006b0a <_printf_float+0x402>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	f108 0201 	add.w	r2, r8, #1
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d10e      	bne.n	8006b02 <_printf_float+0x3fa>
 8006ae4:	e65e      	b.n	80067a4 <_printf_float+0x9c>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	464a      	mov	r2, r9
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b8      	blx	r7
 8006af0:	3001      	adds	r0, #1
 8006af2:	f43f ae57 	beq.w	80067a4 <_printf_float+0x9c>
 8006af6:	f108 0801 	add.w	r8, r8, #1
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	4543      	cmp	r3, r8
 8006b00:	dcf1      	bgt.n	8006ae6 <_printf_float+0x3de>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b08:	e6db      	b.n	80068c2 <_printf_float+0x1ba>
 8006b0a:	f04f 0800 	mov.w	r8, #0
 8006b0e:	f104 091a 	add.w	r9, r4, #26
 8006b12:	e7f2      	b.n	8006afa <_printf_float+0x3f2>
 8006b14:	2301      	movs	r3, #1
 8006b16:	4642      	mov	r2, r8
 8006b18:	e7df      	b.n	8006ada <_printf_float+0x3d2>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	464a      	mov	r2, r9
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae3d 	beq.w	80067a4 <_printf_float+0x9c>
 8006b2a:	f108 0801 	add.w	r8, r8, #1
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b32:	1a5b      	subs	r3, r3, r1
 8006b34:	4543      	cmp	r3, r8
 8006b36:	dcf0      	bgt.n	8006b1a <_printf_float+0x412>
 8006b38:	e6f7      	b.n	800692a <_printf_float+0x222>
 8006b3a:	f04f 0800 	mov.w	r8, #0
 8006b3e:	f104 0919 	add.w	r9, r4, #25
 8006b42:	e7f4      	b.n	8006b2e <_printf_float+0x426>

08006b44 <_printf_common>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	4616      	mov	r6, r2
 8006b4a:	4699      	mov	r9, r3
 8006b4c:	688a      	ldr	r2, [r1, #8]
 8006b4e:	690b      	ldr	r3, [r1, #16]
 8006b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bfb8      	it	lt
 8006b58:	4613      	movlt	r3, r2
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b60:	4607      	mov	r7, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	b10a      	cbz	r2, 8006b6a <_printf_common+0x26>
 8006b66:	3301      	adds	r3, #1
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	0699      	lsls	r1, r3, #26
 8006b6e:	bf42      	ittt	mi
 8006b70:	6833      	ldrmi	r3, [r6, #0]
 8006b72:	3302      	addmi	r3, #2
 8006b74:	6033      	strmi	r3, [r6, #0]
 8006b76:	6825      	ldr	r5, [r4, #0]
 8006b78:	f015 0506 	ands.w	r5, r5, #6
 8006b7c:	d106      	bne.n	8006b8c <_printf_common+0x48>
 8006b7e:	f104 0a19 	add.w	sl, r4, #25
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	6832      	ldr	r2, [r6, #0]
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dc26      	bgt.n	8006bda <_printf_common+0x96>
 8006b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b90:	1e13      	subs	r3, r2, #0
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	bf18      	it	ne
 8006b96:	2301      	movne	r3, #1
 8006b98:	0692      	lsls	r2, r2, #26
 8006b9a:	d42b      	bmi.n	8006bf4 <_printf_common+0xb0>
 8006b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	47c0      	blx	r8
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d01e      	beq.n	8006be8 <_printf_common+0xa4>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	68e5      	ldr	r5, [r4, #12]
 8006bae:	6832      	ldr	r2, [r6, #0]
 8006bb0:	f003 0306 	and.w	r3, r3, #6
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	bf08      	it	eq
 8006bb8:	1aad      	subeq	r5, r5, r2
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	6922      	ldr	r2, [r4, #16]
 8006bbe:	bf0c      	ite	eq
 8006bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bc4:	2500      	movne	r5, #0
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	bfc4      	itt	gt
 8006bca:	1a9b      	subgt	r3, r3, r2
 8006bcc:	18ed      	addgt	r5, r5, r3
 8006bce:	2600      	movs	r6, #0
 8006bd0:	341a      	adds	r4, #26
 8006bd2:	42b5      	cmp	r5, r6
 8006bd4:	d11a      	bne.n	8006c0c <_printf_common+0xc8>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e008      	b.n	8006bec <_printf_common+0xa8>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4652      	mov	r2, sl
 8006bde:	4649      	mov	r1, r9
 8006be0:	4638      	mov	r0, r7
 8006be2:	47c0      	blx	r8
 8006be4:	3001      	adds	r0, #1
 8006be6:	d103      	bne.n	8006bf0 <_printf_common+0xac>
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	e7c6      	b.n	8006b82 <_printf_common+0x3e>
 8006bf4:	18e1      	adds	r1, r4, r3
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	2030      	movs	r0, #48	; 0x30
 8006bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bfe:	4422      	add	r2, r4
 8006c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c08:	3302      	adds	r3, #2
 8006c0a:	e7c7      	b.n	8006b9c <_printf_common+0x58>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4622      	mov	r2, r4
 8006c10:	4649      	mov	r1, r9
 8006c12:	4638      	mov	r0, r7
 8006c14:	47c0      	blx	r8
 8006c16:	3001      	adds	r0, #1
 8006c18:	d0e6      	beq.n	8006be8 <_printf_common+0xa4>
 8006c1a:	3601      	adds	r6, #1
 8006c1c:	e7d9      	b.n	8006bd2 <_printf_common+0x8e>
	...

08006c20 <_printf_i>:
 8006c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	7e0f      	ldrb	r7, [r1, #24]
 8006c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c28:	2f78      	cmp	r7, #120	; 0x78
 8006c2a:	4691      	mov	r9, r2
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	469a      	mov	sl, r3
 8006c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c36:	d807      	bhi.n	8006c48 <_printf_i+0x28>
 8006c38:	2f62      	cmp	r7, #98	; 0x62
 8006c3a:	d80a      	bhi.n	8006c52 <_printf_i+0x32>
 8006c3c:	2f00      	cmp	r7, #0
 8006c3e:	f000 80d8 	beq.w	8006df2 <_printf_i+0x1d2>
 8006c42:	2f58      	cmp	r7, #88	; 0x58
 8006c44:	f000 80a3 	beq.w	8006d8e <_printf_i+0x16e>
 8006c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c50:	e03a      	b.n	8006cc8 <_printf_i+0xa8>
 8006c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c56:	2b15      	cmp	r3, #21
 8006c58:	d8f6      	bhi.n	8006c48 <_printf_i+0x28>
 8006c5a:	a101      	add	r1, pc, #4	; (adr r1, 8006c60 <_printf_i+0x40>)
 8006c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c60:	08006cb9 	.word	0x08006cb9
 8006c64:	08006ccd 	.word	0x08006ccd
 8006c68:	08006c49 	.word	0x08006c49
 8006c6c:	08006c49 	.word	0x08006c49
 8006c70:	08006c49 	.word	0x08006c49
 8006c74:	08006c49 	.word	0x08006c49
 8006c78:	08006ccd 	.word	0x08006ccd
 8006c7c:	08006c49 	.word	0x08006c49
 8006c80:	08006c49 	.word	0x08006c49
 8006c84:	08006c49 	.word	0x08006c49
 8006c88:	08006c49 	.word	0x08006c49
 8006c8c:	08006dd9 	.word	0x08006dd9
 8006c90:	08006cfd 	.word	0x08006cfd
 8006c94:	08006dbb 	.word	0x08006dbb
 8006c98:	08006c49 	.word	0x08006c49
 8006c9c:	08006c49 	.word	0x08006c49
 8006ca0:	08006dfb 	.word	0x08006dfb
 8006ca4:	08006c49 	.word	0x08006c49
 8006ca8:	08006cfd 	.word	0x08006cfd
 8006cac:	08006c49 	.word	0x08006c49
 8006cb0:	08006c49 	.word	0x08006c49
 8006cb4:	08006dc3 	.word	0x08006dc3
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	1d1a      	adds	r2, r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	602a      	str	r2, [r5, #0]
 8006cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0a3      	b.n	8006e14 <_printf_i+0x1f4>
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	6829      	ldr	r1, [r5, #0]
 8006cd0:	0606      	lsls	r6, r0, #24
 8006cd2:	f101 0304 	add.w	r3, r1, #4
 8006cd6:	d50a      	bpl.n	8006cee <_printf_i+0xce>
 8006cd8:	680e      	ldr	r6, [r1, #0]
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	da03      	bge.n	8006ce8 <_printf_i+0xc8>
 8006ce0:	232d      	movs	r3, #45	; 0x2d
 8006ce2:	4276      	negs	r6, r6
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	485e      	ldr	r0, [pc, #376]	; (8006e64 <_printf_i+0x244>)
 8006cea:	230a      	movs	r3, #10
 8006cec:	e019      	b.n	8006d22 <_printf_i+0x102>
 8006cee:	680e      	ldr	r6, [r1, #0]
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cf6:	bf18      	it	ne
 8006cf8:	b236      	sxthne	r6, r6
 8006cfa:	e7ef      	b.n	8006cdc <_printf_i+0xbc>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	1d19      	adds	r1, r3, #4
 8006d02:	6029      	str	r1, [r5, #0]
 8006d04:	0601      	lsls	r1, r0, #24
 8006d06:	d501      	bpl.n	8006d0c <_printf_i+0xec>
 8006d08:	681e      	ldr	r6, [r3, #0]
 8006d0a:	e002      	b.n	8006d12 <_printf_i+0xf2>
 8006d0c:	0646      	lsls	r6, r0, #25
 8006d0e:	d5fb      	bpl.n	8006d08 <_printf_i+0xe8>
 8006d10:	881e      	ldrh	r6, [r3, #0]
 8006d12:	4854      	ldr	r0, [pc, #336]	; (8006e64 <_printf_i+0x244>)
 8006d14:	2f6f      	cmp	r7, #111	; 0x6f
 8006d16:	bf0c      	ite	eq
 8006d18:	2308      	moveq	r3, #8
 8006d1a:	230a      	movne	r3, #10
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d22:	6865      	ldr	r5, [r4, #4]
 8006d24:	60a5      	str	r5, [r4, #8]
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	bfa2      	ittt	ge
 8006d2a:	6821      	ldrge	r1, [r4, #0]
 8006d2c:	f021 0104 	bicge.w	r1, r1, #4
 8006d30:	6021      	strge	r1, [r4, #0]
 8006d32:	b90e      	cbnz	r6, 8006d38 <_printf_i+0x118>
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	d04d      	beq.n	8006dd4 <_printf_i+0x1b4>
 8006d38:	4615      	mov	r5, r2
 8006d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d42:	5dc7      	ldrb	r7, [r0, r7]
 8006d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d48:	4637      	mov	r7, r6
 8006d4a:	42bb      	cmp	r3, r7
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	d9f4      	bls.n	8006d3a <_printf_i+0x11a>
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d10b      	bne.n	8006d6c <_printf_i+0x14c>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	07de      	lsls	r6, r3, #31
 8006d58:	d508      	bpl.n	8006d6c <_printf_i+0x14c>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	6861      	ldr	r1, [r4, #4]
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	bfde      	ittt	le
 8006d62:	2330      	movle	r3, #48	; 0x30
 8006d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d6c:	1b52      	subs	r2, r2, r5
 8006d6e:	6122      	str	r2, [r4, #16]
 8006d70:	f8cd a000 	str.w	sl, [sp]
 8006d74:	464b      	mov	r3, r9
 8006d76:	aa03      	add	r2, sp, #12
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	f7ff fee2 	bl	8006b44 <_printf_common>
 8006d80:	3001      	adds	r0, #1
 8006d82:	d14c      	bne.n	8006e1e <_printf_i+0x1fe>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d88:	b004      	add	sp, #16
 8006d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8e:	4835      	ldr	r0, [pc, #212]	; (8006e64 <_printf_i+0x244>)
 8006d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d94:	6829      	ldr	r1, [r5, #0]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d9c:	6029      	str	r1, [r5, #0]
 8006d9e:	061d      	lsls	r5, r3, #24
 8006da0:	d514      	bpl.n	8006dcc <_printf_i+0x1ac>
 8006da2:	07df      	lsls	r7, r3, #31
 8006da4:	bf44      	itt	mi
 8006da6:	f043 0320 	orrmi.w	r3, r3, #32
 8006daa:	6023      	strmi	r3, [r4, #0]
 8006dac:	b91e      	cbnz	r6, 8006db6 <_printf_i+0x196>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	f023 0320 	bic.w	r3, r3, #32
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	2310      	movs	r3, #16
 8006db8:	e7b0      	b.n	8006d1c <_printf_i+0xfc>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	f043 0320 	orr.w	r3, r3, #32
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	2378      	movs	r3, #120	; 0x78
 8006dc4:	4828      	ldr	r0, [pc, #160]	; (8006e68 <_printf_i+0x248>)
 8006dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dca:	e7e3      	b.n	8006d94 <_printf_i+0x174>
 8006dcc:	0659      	lsls	r1, r3, #25
 8006dce:	bf48      	it	mi
 8006dd0:	b2b6      	uxthmi	r6, r6
 8006dd2:	e7e6      	b.n	8006da2 <_printf_i+0x182>
 8006dd4:	4615      	mov	r5, r2
 8006dd6:	e7bb      	b.n	8006d50 <_printf_i+0x130>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	6826      	ldr	r6, [r4, #0]
 8006ddc:	6961      	ldr	r1, [r4, #20]
 8006dde:	1d18      	adds	r0, r3, #4
 8006de0:	6028      	str	r0, [r5, #0]
 8006de2:	0635      	lsls	r5, r6, #24
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	d501      	bpl.n	8006dec <_printf_i+0x1cc>
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <_printf_i+0x1d2>
 8006dec:	0670      	lsls	r0, r6, #25
 8006dee:	d5fb      	bpl.n	8006de8 <_printf_i+0x1c8>
 8006df0:	8019      	strh	r1, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	4615      	mov	r5, r2
 8006df8:	e7ba      	b.n	8006d70 <_printf_i+0x150>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	602a      	str	r2, [r5, #0]
 8006e00:	681d      	ldr	r5, [r3, #0]
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	2100      	movs	r1, #0
 8006e06:	4628      	mov	r0, r5
 8006e08:	f7f9 fa22 	bl	8000250 <memchr>
 8006e0c:	b108      	cbz	r0, 8006e12 <_printf_i+0x1f2>
 8006e0e:	1b40      	subs	r0, r0, r5
 8006e10:	6060      	str	r0, [r4, #4]
 8006e12:	6863      	ldr	r3, [r4, #4]
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	2300      	movs	r3, #0
 8006e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1c:	e7a8      	b.n	8006d70 <_printf_i+0x150>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4649      	mov	r1, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	47d0      	blx	sl
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d0ab      	beq.n	8006d84 <_printf_i+0x164>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	079b      	lsls	r3, r3, #30
 8006e30:	d413      	bmi.n	8006e5a <_printf_i+0x23a>
 8006e32:	68e0      	ldr	r0, [r4, #12]
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	4298      	cmp	r0, r3
 8006e38:	bfb8      	it	lt
 8006e3a:	4618      	movlt	r0, r3
 8006e3c:	e7a4      	b.n	8006d88 <_printf_i+0x168>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4632      	mov	r2, r6
 8006e42:	4649      	mov	r1, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	47d0      	blx	sl
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d09b      	beq.n	8006d84 <_printf_i+0x164>
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	9903      	ldr	r1, [sp, #12]
 8006e52:	1a5b      	subs	r3, r3, r1
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dcf2      	bgt.n	8006e3e <_printf_i+0x21e>
 8006e58:	e7eb      	b.n	8006e32 <_printf_i+0x212>
 8006e5a:	2500      	movs	r5, #0
 8006e5c:	f104 0619 	add.w	r6, r4, #25
 8006e60:	e7f5      	b.n	8006e4e <_printf_i+0x22e>
 8006e62:	bf00      	nop
 8006e64:	0800921a 	.word	0x0800921a
 8006e68:	0800922b 	.word	0x0800922b

08006e6c <setvbuf>:
 8006e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	461d      	mov	r5, r3
 8006e72:	4b5d      	ldr	r3, [pc, #372]	; (8006fe8 <setvbuf+0x17c>)
 8006e74:	681f      	ldr	r7, [r3, #0]
 8006e76:	4604      	mov	r4, r0
 8006e78:	460e      	mov	r6, r1
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	b127      	cbz	r7, 8006e88 <setvbuf+0x1c>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	b913      	cbnz	r3, 8006e88 <setvbuf+0x1c>
 8006e82:	4638      	mov	r0, r7
 8006e84:	f000 ffcc 	bl	8007e20 <__sinit>
 8006e88:	4b58      	ldr	r3, [pc, #352]	; (8006fec <setvbuf+0x180>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d167      	bne.n	8006f5e <setvbuf+0xf2>
 8006e8e:	687c      	ldr	r4, [r7, #4]
 8006e90:	f1b8 0f02 	cmp.w	r8, #2
 8006e94:	d006      	beq.n	8006ea4 <setvbuf+0x38>
 8006e96:	f1b8 0f01 	cmp.w	r8, #1
 8006e9a:	f200 809f 	bhi.w	8006fdc <setvbuf+0x170>
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	f2c0 809c 	blt.w	8006fdc <setvbuf+0x170>
 8006ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea6:	07db      	lsls	r3, r3, #31
 8006ea8:	d405      	bmi.n	8006eb6 <setvbuf+0x4a>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	0598      	lsls	r0, r3, #22
 8006eae:	d402      	bmi.n	8006eb6 <setvbuf+0x4a>
 8006eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb2:	f001 f858 	bl	8007f66 <__retarget_lock_acquire_recursive>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f000 ff1d 	bl	8007cf8 <_fflush_r>
 8006ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec0:	b141      	cbz	r1, 8006ed4 <setvbuf+0x68>
 8006ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec6:	4299      	cmp	r1, r3
 8006ec8:	d002      	beq.n	8006ed0 <setvbuf+0x64>
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f001 fc62 	bl	8008794 <_free_r>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6363      	str	r3, [r4, #52]	; 0x34
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61a3      	str	r3, [r4, #24]
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	0619      	lsls	r1, r3, #24
 8006ede:	d503      	bpl.n	8006ee8 <setvbuf+0x7c>
 8006ee0:	6921      	ldr	r1, [r4, #16]
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f001 fc56 	bl	8008794 <_free_r>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	f1b8 0f02 	cmp.w	r8, #2
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	d06c      	beq.n	8006fd4 <setvbuf+0x168>
 8006efa:	ab01      	add	r3, sp, #4
 8006efc:	466a      	mov	r2, sp
 8006efe:	4621      	mov	r1, r4
 8006f00:	4638      	mov	r0, r7
 8006f02:	f001 f832 	bl	8007f6a <__swhatbuf_r>
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	4318      	orrs	r0, r3
 8006f0a:	81a0      	strh	r0, [r4, #12]
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	d130      	bne.n	8006f72 <setvbuf+0x106>
 8006f10:	9d00      	ldr	r5, [sp, #0]
 8006f12:	4628      	mov	r0, r5
 8006f14:	f001 f88e 	bl	8008034 <malloc>
 8006f18:	4606      	mov	r6, r0
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d155      	bne.n	8006fca <setvbuf+0x15e>
 8006f1e:	f8dd 9000 	ldr.w	r9, [sp]
 8006f22:	45a9      	cmp	r9, r5
 8006f24:	d14a      	bne.n	8006fbc <setvbuf+0x150>
 8006f26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	60a2      	str	r2, [r4, #8]
 8006f2e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	6122      	str	r2, [r4, #16]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3c:	6162      	str	r2, [r4, #20]
 8006f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f40:	f043 0302 	orr.w	r3, r3, #2
 8006f44:	07d2      	lsls	r2, r2, #31
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	d405      	bmi.n	8006f56 <setvbuf+0xea>
 8006f4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006f4e:	d102      	bne.n	8006f56 <setvbuf+0xea>
 8006f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f52:	f001 f809 	bl	8007f68 <__retarget_lock_release_recursive>
 8006f56:	4628      	mov	r0, r5
 8006f58:	b003      	add	sp, #12
 8006f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f5e:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <setvbuf+0x184>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	d101      	bne.n	8006f68 <setvbuf+0xfc>
 8006f64:	68bc      	ldr	r4, [r7, #8]
 8006f66:	e793      	b.n	8006e90 <setvbuf+0x24>
 8006f68:	4b22      	ldr	r3, [pc, #136]	; (8006ff4 <setvbuf+0x188>)
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	bf08      	it	eq
 8006f6e:	68fc      	ldreq	r4, [r7, #12]
 8006f70:	e78e      	b.n	8006e90 <setvbuf+0x24>
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d0cd      	beq.n	8006f12 <setvbuf+0xa6>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	b913      	cbnz	r3, 8006f80 <setvbuf+0x114>
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f000 ff50 	bl	8007e20 <__sinit>
 8006f80:	f1b8 0f01 	cmp.w	r8, #1
 8006f84:	bf08      	it	eq
 8006f86:	89a3      	ldrheq	r3, [r4, #12]
 8006f88:	6026      	str	r6, [r4, #0]
 8006f8a:	bf04      	itt	eq
 8006f8c:	f043 0301 	orreq.w	r3, r3, #1
 8006f90:	81a3      	strheq	r3, [r4, #12]
 8006f92:	89a2      	ldrh	r2, [r4, #12]
 8006f94:	f012 0308 	ands.w	r3, r2, #8
 8006f98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006f9c:	d01c      	beq.n	8006fd8 <setvbuf+0x16c>
 8006f9e:	07d3      	lsls	r3, r2, #31
 8006fa0:	bf41      	itttt	mi
 8006fa2:	2300      	movmi	r3, #0
 8006fa4:	426d      	negmi	r5, r5
 8006fa6:	60a3      	strmi	r3, [r4, #8]
 8006fa8:	61a5      	strmi	r5, [r4, #24]
 8006faa:	bf58      	it	pl
 8006fac:	60a5      	strpl	r5, [r4, #8]
 8006fae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006fb0:	f015 0501 	ands.w	r5, r5, #1
 8006fb4:	d115      	bne.n	8006fe2 <setvbuf+0x176>
 8006fb6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006fba:	e7c8      	b.n	8006f4e <setvbuf+0xe2>
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	f001 f839 	bl	8008034 <malloc>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d0ae      	beq.n	8006f26 <setvbuf+0xba>
 8006fc8:	464d      	mov	r5, r9
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	e7d0      	b.n	8006f76 <setvbuf+0x10a>
 8006fd4:	2500      	movs	r5, #0
 8006fd6:	e7a8      	b.n	8006f2a <setvbuf+0xbe>
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	e7e8      	b.n	8006fae <setvbuf+0x142>
 8006fdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006fe0:	e7b9      	b.n	8006f56 <setvbuf+0xea>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	e7b7      	b.n	8006f56 <setvbuf+0xea>
 8006fe6:	bf00      	nop
 8006fe8:	2000000c 	.word	0x2000000c
 8006fec:	080092ec 	.word	0x080092ec
 8006ff0:	0800930c 	.word	0x0800930c
 8006ff4:	080092cc 	.word	0x080092cc

08006ff8 <quorem>:
 8006ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	6903      	ldr	r3, [r0, #16]
 8006ffe:	690c      	ldr	r4, [r1, #16]
 8007000:	42a3      	cmp	r3, r4
 8007002:	4607      	mov	r7, r0
 8007004:	f2c0 8081 	blt.w	800710a <quorem+0x112>
 8007008:	3c01      	subs	r4, #1
 800700a:	f101 0814 	add.w	r8, r1, #20
 800700e:	f100 0514 	add.w	r5, r0, #20
 8007012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800701c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007020:	3301      	adds	r3, #1
 8007022:	429a      	cmp	r2, r3
 8007024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800702c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007030:	d331      	bcc.n	8007096 <quorem+0x9e>
 8007032:	f04f 0e00 	mov.w	lr, #0
 8007036:	4640      	mov	r0, r8
 8007038:	46ac      	mov	ip, r5
 800703a:	46f2      	mov	sl, lr
 800703c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007040:	b293      	uxth	r3, r2
 8007042:	fb06 e303 	mla	r3, r6, r3, lr
 8007046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800704a:	b29b      	uxth	r3, r3
 800704c:	ebaa 0303 	sub.w	r3, sl, r3
 8007050:	f8dc a000 	ldr.w	sl, [ip]
 8007054:	0c12      	lsrs	r2, r2, #16
 8007056:	fa13 f38a 	uxtah	r3, r3, sl
 800705a:	fb06 e202 	mla	r2, r6, r2, lr
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	9b00      	ldr	r3, [sp, #0]
 8007062:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007066:	b292      	uxth	r2, r2
 8007068:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800706c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007070:	f8bd 3000 	ldrh.w	r3, [sp]
 8007074:	4581      	cmp	r9, r0
 8007076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707a:	f84c 3b04 	str.w	r3, [ip], #4
 800707e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007082:	d2db      	bcs.n	800703c <quorem+0x44>
 8007084:	f855 300b 	ldr.w	r3, [r5, fp]
 8007088:	b92b      	cbnz	r3, 8007096 <quorem+0x9e>
 800708a:	9b01      	ldr	r3, [sp, #4]
 800708c:	3b04      	subs	r3, #4
 800708e:	429d      	cmp	r5, r3
 8007090:	461a      	mov	r2, r3
 8007092:	d32e      	bcc.n	80070f2 <quorem+0xfa>
 8007094:	613c      	str	r4, [r7, #16]
 8007096:	4638      	mov	r0, r7
 8007098:	f001 fa64 	bl	8008564 <__mcmp>
 800709c:	2800      	cmp	r0, #0
 800709e:	db24      	blt.n	80070ea <quorem+0xf2>
 80070a0:	3601      	adds	r6, #1
 80070a2:	4628      	mov	r0, r5
 80070a4:	f04f 0c00 	mov.w	ip, #0
 80070a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80070ac:	f8d0 e000 	ldr.w	lr, [r0]
 80070b0:	b293      	uxth	r3, r2
 80070b2:	ebac 0303 	sub.w	r3, ip, r3
 80070b6:	0c12      	lsrs	r2, r2, #16
 80070b8:	fa13 f38e 	uxtah	r3, r3, lr
 80070bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ca:	45c1      	cmp	r9, r8
 80070cc:	f840 3b04 	str.w	r3, [r0], #4
 80070d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070d4:	d2e8      	bcs.n	80070a8 <quorem+0xb0>
 80070d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070de:	b922      	cbnz	r2, 80070ea <quorem+0xf2>
 80070e0:	3b04      	subs	r3, #4
 80070e2:	429d      	cmp	r5, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	d30a      	bcc.n	80070fe <quorem+0x106>
 80070e8:	613c      	str	r4, [r7, #16]
 80070ea:	4630      	mov	r0, r6
 80070ec:	b003      	add	sp, #12
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	3b04      	subs	r3, #4
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	d1cc      	bne.n	8007094 <quorem+0x9c>
 80070fa:	3c01      	subs	r4, #1
 80070fc:	e7c7      	b.n	800708e <quorem+0x96>
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	3b04      	subs	r3, #4
 8007102:	2a00      	cmp	r2, #0
 8007104:	d1f0      	bne.n	80070e8 <quorem+0xf0>
 8007106:	3c01      	subs	r4, #1
 8007108:	e7eb      	b.n	80070e2 <quorem+0xea>
 800710a:	2000      	movs	r0, #0
 800710c:	e7ee      	b.n	80070ec <quorem+0xf4>
	...

08007110 <_dtoa_r>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	ed2d 8b02 	vpush	{d8}
 8007118:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800711a:	b091      	sub	sp, #68	; 0x44
 800711c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007120:	ec59 8b10 	vmov	r8, r9, d0
 8007124:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007126:	9106      	str	r1, [sp, #24]
 8007128:	4606      	mov	r6, r0
 800712a:	9208      	str	r2, [sp, #32]
 800712c:	930c      	str	r3, [sp, #48]	; 0x30
 800712e:	b975      	cbnz	r5, 800714e <_dtoa_r+0x3e>
 8007130:	2010      	movs	r0, #16
 8007132:	f000 ff7f 	bl	8008034 <malloc>
 8007136:	4602      	mov	r2, r0
 8007138:	6270      	str	r0, [r6, #36]	; 0x24
 800713a:	b920      	cbnz	r0, 8007146 <_dtoa_r+0x36>
 800713c:	4baa      	ldr	r3, [pc, #680]	; (80073e8 <_dtoa_r+0x2d8>)
 800713e:	21ea      	movs	r1, #234	; 0xea
 8007140:	48aa      	ldr	r0, [pc, #680]	; (80073ec <_dtoa_r+0x2dc>)
 8007142:	f001 fc6d 	bl	8008a20 <__assert_func>
 8007146:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800714a:	6005      	str	r5, [r0, #0]
 800714c:	60c5      	str	r5, [r0, #12]
 800714e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	b151      	cbz	r1, 800716a <_dtoa_r+0x5a>
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	604a      	str	r2, [r1, #4]
 8007158:	2301      	movs	r3, #1
 800715a:	4093      	lsls	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
 800715e:	4630      	mov	r0, r6
 8007160:	f000 ffbe 	bl	80080e0 <_Bfree>
 8007164:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f1b9 0300 	subs.w	r3, r9, #0
 800716e:	bfbb      	ittet	lt
 8007170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007174:	9303      	strlt	r3, [sp, #12]
 8007176:	2300      	movge	r3, #0
 8007178:	2201      	movlt	r2, #1
 800717a:	bfac      	ite	ge
 800717c:	6023      	strge	r3, [r4, #0]
 800717e:	6022      	strlt	r2, [r4, #0]
 8007180:	4b9b      	ldr	r3, [pc, #620]	; (80073f0 <_dtoa_r+0x2e0>)
 8007182:	9c03      	ldr	r4, [sp, #12]
 8007184:	43a3      	bics	r3, r4
 8007186:	d11c      	bne.n	80071c2 <_dtoa_r+0xb2>
 8007188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800718a:	f242 730f 	movw	r3, #9999	; 0x270f
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007194:	ea53 0308 	orrs.w	r3, r3, r8
 8007198:	f000 84fd 	beq.w	8007b96 <_dtoa_r+0xa86>
 800719c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800719e:	b963      	cbnz	r3, 80071ba <_dtoa_r+0xaa>
 80071a0:	4b94      	ldr	r3, [pc, #592]	; (80073f4 <_dtoa_r+0x2e4>)
 80071a2:	e01f      	b.n	80071e4 <_dtoa_r+0xd4>
 80071a4:	4b94      	ldr	r3, [pc, #592]	; (80073f8 <_dtoa_r+0x2e8>)
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	3308      	adds	r3, #8
 80071aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	9801      	ldr	r0, [sp, #4]
 80071b0:	b011      	add	sp, #68	; 0x44
 80071b2:	ecbd 8b02 	vpop	{d8}
 80071b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ba:	4b8e      	ldr	r3, [pc, #568]	; (80073f4 <_dtoa_r+0x2e4>)
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	3303      	adds	r3, #3
 80071c0:	e7f3      	b.n	80071aa <_dtoa_r+0x9a>
 80071c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80071c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ce:	d10b      	bne.n	80071e8 <_dtoa_r+0xd8>
 80071d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071d2:	2301      	movs	r3, #1
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 84d9 	beq.w	8007b90 <_dtoa_r+0xa80>
 80071de:	4887      	ldr	r0, [pc, #540]	; (80073fc <_dtoa_r+0x2ec>)
 80071e0:	6018      	str	r0, [r3, #0]
 80071e2:	1e43      	subs	r3, r0, #1
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	e7e2      	b.n	80071ae <_dtoa_r+0x9e>
 80071e8:	a90f      	add	r1, sp, #60	; 0x3c
 80071ea:	aa0e      	add	r2, sp, #56	; 0x38
 80071ec:	4630      	mov	r0, r6
 80071ee:	eeb0 0b48 	vmov.f64	d0, d8
 80071f2:	f001 fa5d 	bl	80086b0 <__d2b>
 80071f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80071fa:	4605      	mov	r5, r0
 80071fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071fe:	2900      	cmp	r1, #0
 8007200:	d046      	beq.n	8007290 <_dtoa_r+0x180>
 8007202:	ee18 4a90 	vmov	r4, s17
 8007206:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800720a:	ec53 2b18 	vmov	r2, r3, d8
 800720e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007216:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800721a:	2400      	movs	r4, #0
 800721c:	ec43 2b16 	vmov	d6, r2, r3
 8007220:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007224:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80073d0 <_dtoa_r+0x2c0>
 8007228:	ee36 7b47 	vsub.f64	d7, d6, d7
 800722c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80073d8 <_dtoa_r+0x2c8>
 8007230:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007234:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80073e0 <_dtoa_r+0x2d0>
 8007238:	ee07 1a90 	vmov	s15, r1
 800723c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007240:	eeb0 7b46 	vmov.f64	d7, d6
 8007244:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007248:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800724c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	ee16 ba90 	vmov	fp, s13
 8007258:	940a      	str	r4, [sp, #40]	; 0x28
 800725a:	d508      	bpl.n	800726e <_dtoa_r+0x15e>
 800725c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007260:	eeb4 6b47 	vcmp.f64	d6, d7
 8007264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007268:	bf18      	it	ne
 800726a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800726e:	f1bb 0f16 	cmp.w	fp, #22
 8007272:	d82f      	bhi.n	80072d4 <_dtoa_r+0x1c4>
 8007274:	4b62      	ldr	r3, [pc, #392]	; (8007400 <_dtoa_r+0x2f0>)
 8007276:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800727a:	ed93 7b00 	vldr	d7, [r3]
 800727e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007286:	d501      	bpl.n	800728c <_dtoa_r+0x17c>
 8007288:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800728c:	2300      	movs	r3, #0
 800728e:	e022      	b.n	80072d6 <_dtoa_r+0x1c6>
 8007290:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007292:	4401      	add	r1, r0
 8007294:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007298:	2b20      	cmp	r3, #32
 800729a:	bfc1      	itttt	gt
 800729c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072a0:	fa04 f303 	lslgt.w	r3, r4, r3
 80072a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80072a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80072ac:	bfd6      	itet	le
 80072ae:	f1c3 0320 	rsble	r3, r3, #32
 80072b2:	ea43 0808 	orrgt.w	r8, r3, r8
 80072b6:	fa08 f803 	lslle.w	r8, r8, r3
 80072ba:	ee07 8a90 	vmov	s15, r8
 80072be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80072c2:	3901      	subs	r1, #1
 80072c4:	ee17 4a90 	vmov	r4, s15
 80072c8:	ec53 2b17 	vmov	r2, r3, d7
 80072cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80072d0:	2401      	movs	r4, #1
 80072d2:	e7a3      	b.n	800721c <_dtoa_r+0x10c>
 80072d4:	2301      	movs	r3, #1
 80072d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d8:	1a43      	subs	r3, r0, r1
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	bf45      	ittet	mi
 80072de:	f1c3 0301 	rsbmi	r3, r3, #1
 80072e2:	9304      	strmi	r3, [sp, #16]
 80072e4:	2300      	movpl	r3, #0
 80072e6:	2300      	movmi	r3, #0
 80072e8:	9205      	str	r2, [sp, #20]
 80072ea:	bf54      	ite	pl
 80072ec:	9304      	strpl	r3, [sp, #16]
 80072ee:	9305      	strmi	r3, [sp, #20]
 80072f0:	f1bb 0f00 	cmp.w	fp, #0
 80072f4:	db18      	blt.n	8007328 <_dtoa_r+0x218>
 80072f6:	9b05      	ldr	r3, [sp, #20]
 80072f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80072fc:	445b      	add	r3, fp
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	2300      	movs	r3, #0
 8007302:	9a06      	ldr	r2, [sp, #24]
 8007304:	2a09      	cmp	r2, #9
 8007306:	d849      	bhi.n	800739c <_dtoa_r+0x28c>
 8007308:	2a05      	cmp	r2, #5
 800730a:	bfc4      	itt	gt
 800730c:	3a04      	subgt	r2, #4
 800730e:	9206      	strgt	r2, [sp, #24]
 8007310:	9a06      	ldr	r2, [sp, #24]
 8007312:	f1a2 0202 	sub.w	r2, r2, #2
 8007316:	bfcc      	ite	gt
 8007318:	2400      	movgt	r4, #0
 800731a:	2401      	movle	r4, #1
 800731c:	2a03      	cmp	r2, #3
 800731e:	d848      	bhi.n	80073b2 <_dtoa_r+0x2a2>
 8007320:	e8df f002 	tbb	[pc, r2]
 8007324:	3a2c2e0b 	.word	0x3a2c2e0b
 8007328:	9b04      	ldr	r3, [sp, #16]
 800732a:	2200      	movs	r2, #0
 800732c:	eba3 030b 	sub.w	r3, r3, fp
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	9209      	str	r2, [sp, #36]	; 0x24
 8007334:	f1cb 0300 	rsb	r3, fp, #0
 8007338:	e7e3      	b.n	8007302 <_dtoa_r+0x1f2>
 800733a:	2200      	movs	r2, #0
 800733c:	9207      	str	r2, [sp, #28]
 800733e:	9a08      	ldr	r2, [sp, #32]
 8007340:	2a00      	cmp	r2, #0
 8007342:	dc39      	bgt.n	80073b8 <_dtoa_r+0x2a8>
 8007344:	f04f 0a01 	mov.w	sl, #1
 8007348:	46d1      	mov	r9, sl
 800734a:	4652      	mov	r2, sl
 800734c:	f8cd a020 	str.w	sl, [sp, #32]
 8007350:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007352:	2100      	movs	r1, #0
 8007354:	6079      	str	r1, [r7, #4]
 8007356:	2004      	movs	r0, #4
 8007358:	f100 0c14 	add.w	ip, r0, #20
 800735c:	4594      	cmp	ip, r2
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	d92f      	bls.n	80073c2 <_dtoa_r+0x2b2>
 8007362:	4630      	mov	r0, r6
 8007364:	930d      	str	r3, [sp, #52]	; 0x34
 8007366:	f000 fe7b 	bl	8008060 <_Balloc>
 800736a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800736c:	9001      	str	r0, [sp, #4]
 800736e:	4602      	mov	r2, r0
 8007370:	2800      	cmp	r0, #0
 8007372:	d149      	bne.n	8007408 <_dtoa_r+0x2f8>
 8007374:	4b23      	ldr	r3, [pc, #140]	; (8007404 <_dtoa_r+0x2f4>)
 8007376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800737a:	e6e1      	b.n	8007140 <_dtoa_r+0x30>
 800737c:	2201      	movs	r2, #1
 800737e:	e7dd      	b.n	800733c <_dtoa_r+0x22c>
 8007380:	2200      	movs	r2, #0
 8007382:	9207      	str	r2, [sp, #28]
 8007384:	9a08      	ldr	r2, [sp, #32]
 8007386:	eb0b 0a02 	add.w	sl, fp, r2
 800738a:	f10a 0901 	add.w	r9, sl, #1
 800738e:	464a      	mov	r2, r9
 8007390:	2a01      	cmp	r2, #1
 8007392:	bfb8      	it	lt
 8007394:	2201      	movlt	r2, #1
 8007396:	e7db      	b.n	8007350 <_dtoa_r+0x240>
 8007398:	2201      	movs	r2, #1
 800739a:	e7f2      	b.n	8007382 <_dtoa_r+0x272>
 800739c:	2401      	movs	r4, #1
 800739e:	2200      	movs	r2, #0
 80073a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80073a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80073a8:	2100      	movs	r1, #0
 80073aa:	46d1      	mov	r9, sl
 80073ac:	2212      	movs	r2, #18
 80073ae:	9108      	str	r1, [sp, #32]
 80073b0:	e7ce      	b.n	8007350 <_dtoa_r+0x240>
 80073b2:	2201      	movs	r2, #1
 80073b4:	9207      	str	r2, [sp, #28]
 80073b6:	e7f5      	b.n	80073a4 <_dtoa_r+0x294>
 80073b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80073bc:	46d1      	mov	r9, sl
 80073be:	4652      	mov	r2, sl
 80073c0:	e7c6      	b.n	8007350 <_dtoa_r+0x240>
 80073c2:	3101      	adds	r1, #1
 80073c4:	6079      	str	r1, [r7, #4]
 80073c6:	0040      	lsls	r0, r0, #1
 80073c8:	e7c6      	b.n	8007358 <_dtoa_r+0x248>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	08009249 	.word	0x08009249
 80073ec:	08009260 	.word	0x08009260
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	08009245 	.word	0x08009245
 80073f8:	0800923c 	.word	0x0800923c
 80073fc:	08009219 	.word	0x08009219
 8007400:	080093b0 	.word	0x080093b0
 8007404:	080092bb 	.word	0x080092bb
 8007408:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800740a:	9901      	ldr	r1, [sp, #4]
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	f1b9 0f0e 	cmp.w	r9, #14
 8007412:	d86c      	bhi.n	80074ee <_dtoa_r+0x3de>
 8007414:	2c00      	cmp	r4, #0
 8007416:	d06a      	beq.n	80074ee <_dtoa_r+0x3de>
 8007418:	f1bb 0f00 	cmp.w	fp, #0
 800741c:	f340 80a0 	ble.w	8007560 <_dtoa_r+0x450>
 8007420:	49c1      	ldr	r1, [pc, #772]	; (8007728 <_dtoa_r+0x618>)
 8007422:	f00b 020f 	and.w	r2, fp, #15
 8007426:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800742a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800742e:	ed92 7b00 	vldr	d7, [r2]
 8007432:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007436:	f000 8087 	beq.w	8007548 <_dtoa_r+0x438>
 800743a:	4abc      	ldr	r2, [pc, #752]	; (800772c <_dtoa_r+0x61c>)
 800743c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007440:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007444:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007448:	f001 010f 	and.w	r1, r1, #15
 800744c:	2203      	movs	r2, #3
 800744e:	48b7      	ldr	r0, [pc, #732]	; (800772c <_dtoa_r+0x61c>)
 8007450:	2900      	cmp	r1, #0
 8007452:	d17b      	bne.n	800754c <_dtoa_r+0x43c>
 8007454:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007458:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800745c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007462:	2900      	cmp	r1, #0
 8007464:	f000 80a2 	beq.w	80075ac <_dtoa_r+0x49c>
 8007468:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800746c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007470:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007478:	f140 8098 	bpl.w	80075ac <_dtoa_r+0x49c>
 800747c:	f1b9 0f00 	cmp.w	r9, #0
 8007480:	f000 8094 	beq.w	80075ac <_dtoa_r+0x49c>
 8007484:	f1ba 0f00 	cmp.w	sl, #0
 8007488:	dd2f      	ble.n	80074ea <_dtoa_r+0x3da>
 800748a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800748e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007492:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007496:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800749a:	3201      	adds	r2, #1
 800749c:	4650      	mov	r0, sl
 800749e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80074a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80074a6:	ee07 2a90 	vmov	s15, r2
 80074aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80074b2:	ee15 4a90 	vmov	r4, s11
 80074b6:	ec52 1b15 	vmov	r1, r2, d5
 80074ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80074be:	2800      	cmp	r0, #0
 80074c0:	d177      	bne.n	80075b2 <_dtoa_r+0x4a2>
 80074c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80074c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80074ca:	ec42 1b17 	vmov	d7, r1, r2
 80074ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d6:	f300 8263 	bgt.w	80079a0 <_dtoa_r+0x890>
 80074da:	eeb1 7b47 	vneg.f64	d7, d7
 80074de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e6:	f100 8258 	bmi.w	800799a <_dtoa_r+0x88a>
 80074ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80074ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	f2c0 811d 	blt.w	8007730 <_dtoa_r+0x620>
 80074f6:	f1bb 0f0e 	cmp.w	fp, #14
 80074fa:	f300 8119 	bgt.w	8007730 <_dtoa_r+0x620>
 80074fe:	4b8a      	ldr	r3, [pc, #552]	; (8007728 <_dtoa_r+0x618>)
 8007500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007504:	ed93 6b00 	vldr	d6, [r3]
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f280 80b7 	bge.w	800767e <_dtoa_r+0x56e>
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	f300 80b3 	bgt.w	800767e <_dtoa_r+0x56e>
 8007518:	f040 823f 	bne.w	800799a <_dtoa_r+0x88a>
 800751c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007520:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007524:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007528:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800752c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007530:	464c      	mov	r4, r9
 8007532:	464f      	mov	r7, r9
 8007534:	f280 8215 	bge.w	8007962 <_dtoa_r+0x852>
 8007538:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800753c:	2331      	movs	r3, #49	; 0x31
 800753e:	f808 3b01 	strb.w	r3, [r8], #1
 8007542:	f10b 0b01 	add.w	fp, fp, #1
 8007546:	e211      	b.n	800796c <_dtoa_r+0x85c>
 8007548:	2202      	movs	r2, #2
 800754a:	e780      	b.n	800744e <_dtoa_r+0x33e>
 800754c:	07cc      	lsls	r4, r1, #31
 800754e:	d504      	bpl.n	800755a <_dtoa_r+0x44a>
 8007550:	ed90 6b00 	vldr	d6, [r0]
 8007554:	3201      	adds	r2, #1
 8007556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800755a:	1049      	asrs	r1, r1, #1
 800755c:	3008      	adds	r0, #8
 800755e:	e777      	b.n	8007450 <_dtoa_r+0x340>
 8007560:	d022      	beq.n	80075a8 <_dtoa_r+0x498>
 8007562:	f1cb 0100 	rsb	r1, fp, #0
 8007566:	4a70      	ldr	r2, [pc, #448]	; (8007728 <_dtoa_r+0x618>)
 8007568:	f001 000f 	and.w	r0, r1, #15
 800756c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007570:	ed92 7b00 	vldr	d7, [r2]
 8007574:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007578:	ed8d 7b02 	vstr	d7, [sp, #8]
 800757c:	486b      	ldr	r0, [pc, #428]	; (800772c <_dtoa_r+0x61c>)
 800757e:	1109      	asrs	r1, r1, #4
 8007580:	2400      	movs	r4, #0
 8007582:	2202      	movs	r2, #2
 8007584:	b929      	cbnz	r1, 8007592 <_dtoa_r+0x482>
 8007586:	2c00      	cmp	r4, #0
 8007588:	f43f af6a 	beq.w	8007460 <_dtoa_r+0x350>
 800758c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007590:	e766      	b.n	8007460 <_dtoa_r+0x350>
 8007592:	07cf      	lsls	r7, r1, #31
 8007594:	d505      	bpl.n	80075a2 <_dtoa_r+0x492>
 8007596:	ed90 6b00 	vldr	d6, [r0]
 800759a:	3201      	adds	r2, #1
 800759c:	2401      	movs	r4, #1
 800759e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075a2:	1049      	asrs	r1, r1, #1
 80075a4:	3008      	adds	r0, #8
 80075a6:	e7ed      	b.n	8007584 <_dtoa_r+0x474>
 80075a8:	2202      	movs	r2, #2
 80075aa:	e759      	b.n	8007460 <_dtoa_r+0x350>
 80075ac:	465f      	mov	r7, fp
 80075ae:	4648      	mov	r0, r9
 80075b0:	e775      	b.n	800749e <_dtoa_r+0x38e>
 80075b2:	ec42 1b17 	vmov	d7, r1, r2
 80075b6:	4a5c      	ldr	r2, [pc, #368]	; (8007728 <_dtoa_r+0x618>)
 80075b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80075bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80075c0:	9a01      	ldr	r2, [sp, #4]
 80075c2:	1814      	adds	r4, r2, r0
 80075c4:	9a07      	ldr	r2, [sp, #28]
 80075c6:	b352      	cbz	r2, 800761e <_dtoa_r+0x50e>
 80075c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80075cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80075d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80075d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80075dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80075e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80075e4:	ee14 2a90 	vmov	r2, s9
 80075e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80075ec:	3230      	adds	r2, #48	; 0x30
 80075ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80075f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fa:	f808 2b01 	strb.w	r2, [r8], #1
 80075fe:	d439      	bmi.n	8007674 <_dtoa_r+0x564>
 8007600:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007604:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760c:	d472      	bmi.n	80076f4 <_dtoa_r+0x5e4>
 800760e:	45a0      	cmp	r8, r4
 8007610:	f43f af6b 	beq.w	80074ea <_dtoa_r+0x3da>
 8007614:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007618:	ee26 6b03 	vmul.f64	d6, d6, d3
 800761c:	e7e0      	b.n	80075e0 <_dtoa_r+0x4d0>
 800761e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007622:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007626:	4621      	mov	r1, r4
 8007628:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800762c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007630:	ee14 2a90 	vmov	r2, s9
 8007634:	3230      	adds	r2, #48	; 0x30
 8007636:	f808 2b01 	strb.w	r2, [r8], #1
 800763a:	45a0      	cmp	r8, r4
 800763c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007640:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007644:	d118      	bne.n	8007678 <_dtoa_r+0x568>
 8007646:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800764a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800764e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007656:	dc4d      	bgt.n	80076f4 <_dtoa_r+0x5e4>
 8007658:	ee35 7b47 	vsub.f64	d7, d5, d7
 800765c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	f57f af41 	bpl.w	80074ea <_dtoa_r+0x3da>
 8007668:	4688      	mov	r8, r1
 800766a:	3901      	subs	r1, #1
 800766c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007670:	2b30      	cmp	r3, #48	; 0x30
 8007672:	d0f9      	beq.n	8007668 <_dtoa_r+0x558>
 8007674:	46bb      	mov	fp, r7
 8007676:	e02a      	b.n	80076ce <_dtoa_r+0x5be>
 8007678:	ee26 6b03 	vmul.f64	d6, d6, d3
 800767c:	e7d6      	b.n	800762c <_dtoa_r+0x51c>
 800767e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007682:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007686:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800768a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800768e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007692:	ee15 3a10 	vmov	r3, s10
 8007696:	3330      	adds	r3, #48	; 0x30
 8007698:	f808 3b01 	strb.w	r3, [r8], #1
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	eba8 0303 	sub.w	r3, r8, r3
 80076a2:	4599      	cmp	r9, r3
 80076a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80076a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80076ac:	d133      	bne.n	8007716 <_dtoa_r+0x606>
 80076ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80076b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80076b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ba:	dc1a      	bgt.n	80076f2 <_dtoa_r+0x5e2>
 80076bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80076c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c4:	d103      	bne.n	80076ce <_dtoa_r+0x5be>
 80076c6:	ee15 3a10 	vmov	r3, s10
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	d411      	bmi.n	80076f2 <_dtoa_r+0x5e2>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4630      	mov	r0, r6
 80076d2:	f000 fd05 	bl	80080e0 <_Bfree>
 80076d6:	2300      	movs	r3, #0
 80076d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076da:	f888 3000 	strb.w	r3, [r8]
 80076de:	f10b 0301 	add.w	r3, fp, #1
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f43f ad61 	beq.w	80071ae <_dtoa_r+0x9e>
 80076ec:	f8c3 8000 	str.w	r8, [r3]
 80076f0:	e55d      	b.n	80071ae <_dtoa_r+0x9e>
 80076f2:	465f      	mov	r7, fp
 80076f4:	4643      	mov	r3, r8
 80076f6:	4698      	mov	r8, r3
 80076f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076fc:	2a39      	cmp	r2, #57	; 0x39
 80076fe:	d106      	bne.n	800770e <_dtoa_r+0x5fe>
 8007700:	9a01      	ldr	r2, [sp, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d1f7      	bne.n	80076f6 <_dtoa_r+0x5e6>
 8007706:	9901      	ldr	r1, [sp, #4]
 8007708:	2230      	movs	r2, #48	; 0x30
 800770a:	3701      	adds	r7, #1
 800770c:	700a      	strb	r2, [r1, #0]
 800770e:	781a      	ldrb	r2, [r3, #0]
 8007710:	3201      	adds	r2, #1
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e7ae      	b.n	8007674 <_dtoa_r+0x564>
 8007716:	ee27 7b04 	vmul.f64	d7, d7, d4
 800771a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d1b2      	bne.n	800768a <_dtoa_r+0x57a>
 8007724:	e7d3      	b.n	80076ce <_dtoa_r+0x5be>
 8007726:	bf00      	nop
 8007728:	080093b0 	.word	0x080093b0
 800772c:	08009388 	.word	0x08009388
 8007730:	9907      	ldr	r1, [sp, #28]
 8007732:	2900      	cmp	r1, #0
 8007734:	f000 80d0 	beq.w	80078d8 <_dtoa_r+0x7c8>
 8007738:	9906      	ldr	r1, [sp, #24]
 800773a:	2901      	cmp	r1, #1
 800773c:	f300 80b4 	bgt.w	80078a8 <_dtoa_r+0x798>
 8007740:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007742:	2900      	cmp	r1, #0
 8007744:	f000 80ac 	beq.w	80078a0 <_dtoa_r+0x790>
 8007748:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800774c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007750:	461c      	mov	r4, r3
 8007752:	930a      	str	r3, [sp, #40]	; 0x28
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	4413      	add	r3, r2
 8007758:	9304      	str	r3, [sp, #16]
 800775a:	9b05      	ldr	r3, [sp, #20]
 800775c:	2101      	movs	r1, #1
 800775e:	4413      	add	r3, r2
 8007760:	4630      	mov	r0, r6
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	f000 fd74 	bl	8008250 <__i2b>
 8007768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776a:	4607      	mov	r7, r0
 800776c:	f1b8 0f00 	cmp.w	r8, #0
 8007770:	dd0d      	ble.n	800778e <_dtoa_r+0x67e>
 8007772:	9a05      	ldr	r2, [sp, #20]
 8007774:	2a00      	cmp	r2, #0
 8007776:	dd0a      	ble.n	800778e <_dtoa_r+0x67e>
 8007778:	4542      	cmp	r2, r8
 800777a:	9904      	ldr	r1, [sp, #16]
 800777c:	bfa8      	it	ge
 800777e:	4642      	movge	r2, r8
 8007780:	1a89      	subs	r1, r1, r2
 8007782:	9104      	str	r1, [sp, #16]
 8007784:	9905      	ldr	r1, [sp, #20]
 8007786:	eba8 0802 	sub.w	r8, r8, r2
 800778a:	1a8a      	subs	r2, r1, r2
 800778c:	9205      	str	r2, [sp, #20]
 800778e:	b303      	cbz	r3, 80077d2 <_dtoa_r+0x6c2>
 8007790:	9a07      	ldr	r2, [sp, #28]
 8007792:	2a00      	cmp	r2, #0
 8007794:	f000 80a5 	beq.w	80078e2 <_dtoa_r+0x7d2>
 8007798:	2c00      	cmp	r4, #0
 800779a:	dd13      	ble.n	80077c4 <_dtoa_r+0x6b4>
 800779c:	4639      	mov	r1, r7
 800779e:	4622      	mov	r2, r4
 80077a0:	4630      	mov	r0, r6
 80077a2:	930d      	str	r3, [sp, #52]	; 0x34
 80077a4:	f000 fe14 	bl	80083d0 <__pow5mult>
 80077a8:	462a      	mov	r2, r5
 80077aa:	4601      	mov	r1, r0
 80077ac:	4607      	mov	r7, r0
 80077ae:	4630      	mov	r0, r6
 80077b0:	f000 fd64 	bl	800827c <__multiply>
 80077b4:	4629      	mov	r1, r5
 80077b6:	900a      	str	r0, [sp, #40]	; 0x28
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 fc91 	bl	80080e0 <_Bfree>
 80077be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c2:	4615      	mov	r5, r2
 80077c4:	1b1a      	subs	r2, r3, r4
 80077c6:	d004      	beq.n	80077d2 <_dtoa_r+0x6c2>
 80077c8:	4629      	mov	r1, r5
 80077ca:	4630      	mov	r0, r6
 80077cc:	f000 fe00 	bl	80083d0 <__pow5mult>
 80077d0:	4605      	mov	r5, r0
 80077d2:	2101      	movs	r1, #1
 80077d4:	4630      	mov	r0, r6
 80077d6:	f000 fd3b 	bl	8008250 <__i2b>
 80077da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	f340 8081 	ble.w	80078e6 <_dtoa_r+0x7d6>
 80077e4:	461a      	mov	r2, r3
 80077e6:	4601      	mov	r1, r0
 80077e8:	4630      	mov	r0, r6
 80077ea:	f000 fdf1 	bl	80083d0 <__pow5mult>
 80077ee:	9b06      	ldr	r3, [sp, #24]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	4604      	mov	r4, r0
 80077f4:	dd7a      	ble.n	80078ec <_dtoa_r+0x7dc>
 80077f6:	2300      	movs	r3, #0
 80077f8:	930a      	str	r3, [sp, #40]	; 0x28
 80077fa:	6922      	ldr	r2, [r4, #16]
 80077fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007800:	6910      	ldr	r0, [r2, #16]
 8007802:	f000 fcd5 	bl	80081b0 <__hi0bits>
 8007806:	f1c0 0020 	rsb	r0, r0, #32
 800780a:	9b05      	ldr	r3, [sp, #20]
 800780c:	4418      	add	r0, r3
 800780e:	f010 001f 	ands.w	r0, r0, #31
 8007812:	f000 808c 	beq.w	800792e <_dtoa_r+0x81e>
 8007816:	f1c0 0220 	rsb	r2, r0, #32
 800781a:	2a04      	cmp	r2, #4
 800781c:	f340 8085 	ble.w	800792a <_dtoa_r+0x81a>
 8007820:	f1c0 001c 	rsb	r0, r0, #28
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	4403      	add	r3, r0
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	4403      	add	r3, r0
 800782e:	4480      	add	r8, r0
 8007830:	9305      	str	r3, [sp, #20]
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd05      	ble.n	8007844 <_dtoa_r+0x734>
 8007838:	4629      	mov	r1, r5
 800783a:	461a      	mov	r2, r3
 800783c:	4630      	mov	r0, r6
 800783e:	f000 fe21 	bl	8008484 <__lshift>
 8007842:	4605      	mov	r5, r0
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	2b00      	cmp	r3, #0
 8007848:	dd05      	ble.n	8007856 <_dtoa_r+0x746>
 800784a:	4621      	mov	r1, r4
 800784c:	461a      	mov	r2, r3
 800784e:	4630      	mov	r0, r6
 8007850:	f000 fe18 	bl	8008484 <__lshift>
 8007854:	4604      	mov	r4, r0
 8007856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d06a      	beq.n	8007932 <_dtoa_r+0x822>
 800785c:	4621      	mov	r1, r4
 800785e:	4628      	mov	r0, r5
 8007860:	f000 fe80 	bl	8008564 <__mcmp>
 8007864:	2800      	cmp	r0, #0
 8007866:	da64      	bge.n	8007932 <_dtoa_r+0x822>
 8007868:	2300      	movs	r3, #0
 800786a:	4629      	mov	r1, r5
 800786c:	220a      	movs	r2, #10
 800786e:	4630      	mov	r0, r6
 8007870:	f000 fc58 	bl	8008124 <__multadd>
 8007874:	9b07      	ldr	r3, [sp, #28]
 8007876:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800787a:	4605      	mov	r5, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8191 	beq.w	8007ba4 <_dtoa_r+0xa94>
 8007882:	4639      	mov	r1, r7
 8007884:	2300      	movs	r3, #0
 8007886:	220a      	movs	r2, #10
 8007888:	4630      	mov	r0, r6
 800788a:	f000 fc4b 	bl	8008124 <__multadd>
 800788e:	f1ba 0f00 	cmp.w	sl, #0
 8007892:	4607      	mov	r7, r0
 8007894:	f300 808d 	bgt.w	80079b2 <_dtoa_r+0x8a2>
 8007898:	9b06      	ldr	r3, [sp, #24]
 800789a:	2b02      	cmp	r3, #2
 800789c:	dc50      	bgt.n	8007940 <_dtoa_r+0x830>
 800789e:	e088      	b.n	80079b2 <_dtoa_r+0x8a2>
 80078a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078a6:	e751      	b.n	800774c <_dtoa_r+0x63c>
 80078a8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	bfbf      	itttt	lt
 80078b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80078b2:	1ae3      	sublt	r3, r4, r3
 80078b4:	18d2      	addlt	r2, r2, r3
 80078b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80078b8:	bfb6      	itet	lt
 80078ba:	4623      	movlt	r3, r4
 80078bc:	1b1c      	subge	r4, r3, r4
 80078be:	2400      	movlt	r4, #0
 80078c0:	f1b9 0f00 	cmp.w	r9, #0
 80078c4:	bfb5      	itete	lt
 80078c6:	9a04      	ldrlt	r2, [sp, #16]
 80078c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80078cc:	eba2 0809 	sublt.w	r8, r2, r9
 80078d0:	464a      	movge	r2, r9
 80078d2:	bfb8      	it	lt
 80078d4:	2200      	movlt	r2, #0
 80078d6:	e73c      	b.n	8007752 <_dtoa_r+0x642>
 80078d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80078dc:	9f07      	ldr	r7, [sp, #28]
 80078de:	461c      	mov	r4, r3
 80078e0:	e744      	b.n	800776c <_dtoa_r+0x65c>
 80078e2:	461a      	mov	r2, r3
 80078e4:	e770      	b.n	80077c8 <_dtoa_r+0x6b8>
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	dc18      	bgt.n	800791e <_dtoa_r+0x80e>
 80078ec:	9b02      	ldr	r3, [sp, #8]
 80078ee:	b9b3      	cbnz	r3, 800791e <_dtoa_r+0x80e>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80078f6:	b9a2      	cbnz	r2, 8007922 <_dtoa_r+0x812>
 80078f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078fc:	0d12      	lsrs	r2, r2, #20
 80078fe:	0512      	lsls	r2, r2, #20
 8007900:	b18a      	cbz	r2, 8007926 <_dtoa_r+0x816>
 8007902:	9b04      	ldr	r3, [sp, #16]
 8007904:	3301      	adds	r3, #1
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	9b05      	ldr	r3, [sp, #20]
 800790a:	3301      	adds	r3, #1
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	2301      	movs	r3, #1
 8007910:	930a      	str	r3, [sp, #40]	; 0x28
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	f47f af70 	bne.w	80077fa <_dtoa_r+0x6ea>
 800791a:	2001      	movs	r0, #1
 800791c:	e775      	b.n	800780a <_dtoa_r+0x6fa>
 800791e:	2300      	movs	r3, #0
 8007920:	e7f6      	b.n	8007910 <_dtoa_r+0x800>
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	e7f4      	b.n	8007910 <_dtoa_r+0x800>
 8007926:	920a      	str	r2, [sp, #40]	; 0x28
 8007928:	e7f3      	b.n	8007912 <_dtoa_r+0x802>
 800792a:	d082      	beq.n	8007832 <_dtoa_r+0x722>
 800792c:	4610      	mov	r0, r2
 800792e:	301c      	adds	r0, #28
 8007930:	e778      	b.n	8007824 <_dtoa_r+0x714>
 8007932:	f1b9 0f00 	cmp.w	r9, #0
 8007936:	dc37      	bgt.n	80079a8 <_dtoa_r+0x898>
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	2b02      	cmp	r3, #2
 800793c:	dd34      	ble.n	80079a8 <_dtoa_r+0x898>
 800793e:	46ca      	mov	sl, r9
 8007940:	f1ba 0f00 	cmp.w	sl, #0
 8007944:	d10d      	bne.n	8007962 <_dtoa_r+0x852>
 8007946:	4621      	mov	r1, r4
 8007948:	4653      	mov	r3, sl
 800794a:	2205      	movs	r2, #5
 800794c:	4630      	mov	r0, r6
 800794e:	f000 fbe9 	bl	8008124 <__multadd>
 8007952:	4601      	mov	r1, r0
 8007954:	4604      	mov	r4, r0
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fe04 	bl	8008564 <__mcmp>
 800795c:	2800      	cmp	r0, #0
 800795e:	f73f adeb 	bgt.w	8007538 <_dtoa_r+0x428>
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007968:	ea6f 0b03 	mvn.w	fp, r3
 800796c:	f04f 0900 	mov.w	r9, #0
 8007970:	4621      	mov	r1, r4
 8007972:	4630      	mov	r0, r6
 8007974:	f000 fbb4 	bl	80080e0 <_Bfree>
 8007978:	2f00      	cmp	r7, #0
 800797a:	f43f aea8 	beq.w	80076ce <_dtoa_r+0x5be>
 800797e:	f1b9 0f00 	cmp.w	r9, #0
 8007982:	d005      	beq.n	8007990 <_dtoa_r+0x880>
 8007984:	45b9      	cmp	r9, r7
 8007986:	d003      	beq.n	8007990 <_dtoa_r+0x880>
 8007988:	4649      	mov	r1, r9
 800798a:	4630      	mov	r0, r6
 800798c:	f000 fba8 	bl	80080e0 <_Bfree>
 8007990:	4639      	mov	r1, r7
 8007992:	4630      	mov	r0, r6
 8007994:	f000 fba4 	bl	80080e0 <_Bfree>
 8007998:	e699      	b.n	80076ce <_dtoa_r+0x5be>
 800799a:	2400      	movs	r4, #0
 800799c:	4627      	mov	r7, r4
 800799e:	e7e0      	b.n	8007962 <_dtoa_r+0x852>
 80079a0:	46bb      	mov	fp, r7
 80079a2:	4604      	mov	r4, r0
 80079a4:	4607      	mov	r7, r0
 80079a6:	e5c7      	b.n	8007538 <_dtoa_r+0x428>
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	46ca      	mov	sl, r9
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8100 	beq.w	8007bb2 <_dtoa_r+0xaa2>
 80079b2:	f1b8 0f00 	cmp.w	r8, #0
 80079b6:	dd05      	ble.n	80079c4 <_dtoa_r+0x8b4>
 80079b8:	4639      	mov	r1, r7
 80079ba:	4642      	mov	r2, r8
 80079bc:	4630      	mov	r0, r6
 80079be:	f000 fd61 	bl	8008484 <__lshift>
 80079c2:	4607      	mov	r7, r0
 80079c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d05d      	beq.n	8007a86 <_dtoa_r+0x976>
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4630      	mov	r0, r6
 80079ce:	f000 fb47 	bl	8008060 <_Balloc>
 80079d2:	4680      	mov	r8, r0
 80079d4:	b928      	cbnz	r0, 80079e2 <_dtoa_r+0x8d2>
 80079d6:	4b82      	ldr	r3, [pc, #520]	; (8007be0 <_dtoa_r+0xad0>)
 80079d8:	4602      	mov	r2, r0
 80079da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079de:	f7ff bbaf 	b.w	8007140 <_dtoa_r+0x30>
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	3202      	adds	r2, #2
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	f107 010c 	add.w	r1, r7, #12
 80079ec:	300c      	adds	r0, #12
 80079ee:	f000 fb29 	bl	8008044 <memcpy>
 80079f2:	2201      	movs	r2, #1
 80079f4:	4641      	mov	r1, r8
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 fd44 	bl	8008484 <__lshift>
 80079fc:	9b01      	ldr	r3, [sp, #4]
 80079fe:	3301      	adds	r3, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	4453      	add	r3, sl
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	9b02      	ldr	r3, [sp, #8]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	46b9      	mov	r9, r7
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	4607      	mov	r7, r0
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	4621      	mov	r1, r4
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	9302      	str	r3, [sp, #8]
 8007a1e:	f7ff faeb 	bl	8006ff8 <quorem>
 8007a22:	4603      	mov	r3, r0
 8007a24:	3330      	adds	r3, #48	; 0x30
 8007a26:	9005      	str	r0, [sp, #20]
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	f000 fd99 	bl	8008564 <__mcmp>
 8007a32:	463a      	mov	r2, r7
 8007a34:	4682      	mov	sl, r0
 8007a36:	4621      	mov	r1, r4
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f000 fdaf 	bl	800859c <__mdiff>
 8007a3e:	68c2      	ldr	r2, [r0, #12]
 8007a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a42:	4680      	mov	r8, r0
 8007a44:	bb0a      	cbnz	r2, 8007a8a <_dtoa_r+0x97a>
 8007a46:	4601      	mov	r1, r0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 fd8b 	bl	8008564 <__mcmp>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	4602      	mov	r2, r0
 8007a52:	4641      	mov	r1, r8
 8007a54:	4630      	mov	r0, r6
 8007a56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007a5a:	f000 fb41 	bl	80080e0 <_Bfree>
 8007a5e:	9b06      	ldr	r3, [sp, #24]
 8007a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a66:	ea43 0102 	orr.w	r1, r3, r2
 8007a6a:	9b07      	ldr	r3, [sp, #28]
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a70:	d10d      	bne.n	8007a8e <_dtoa_r+0x97e>
 8007a72:	2b39      	cmp	r3, #57	; 0x39
 8007a74:	d029      	beq.n	8007aca <_dtoa_r+0x9ba>
 8007a76:	f1ba 0f00 	cmp.w	sl, #0
 8007a7a:	dd01      	ble.n	8007a80 <_dtoa_r+0x970>
 8007a7c:	9b05      	ldr	r3, [sp, #20]
 8007a7e:	3331      	adds	r3, #49	; 0x31
 8007a80:	9a02      	ldr	r2, [sp, #8]
 8007a82:	7013      	strb	r3, [r2, #0]
 8007a84:	e774      	b.n	8007970 <_dtoa_r+0x860>
 8007a86:	4638      	mov	r0, r7
 8007a88:	e7b8      	b.n	80079fc <_dtoa_r+0x8ec>
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	e7e1      	b.n	8007a52 <_dtoa_r+0x942>
 8007a8e:	f1ba 0f00 	cmp.w	sl, #0
 8007a92:	db06      	blt.n	8007aa2 <_dtoa_r+0x992>
 8007a94:	9906      	ldr	r1, [sp, #24]
 8007a96:	ea41 0a0a 	orr.w	sl, r1, sl
 8007a9a:	9907      	ldr	r1, [sp, #28]
 8007a9c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007aa0:	d120      	bne.n	8007ae4 <_dtoa_r+0x9d4>
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	ddec      	ble.n	8007a80 <_dtoa_r+0x970>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4630      	mov	r0, r6
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	f000 fce9 	bl	8008484 <__lshift>
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	f000 fd55 	bl	8008564 <__mcmp>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	dc02      	bgt.n	8007ac6 <_dtoa_r+0x9b6>
 8007ac0:	d1de      	bne.n	8007a80 <_dtoa_r+0x970>
 8007ac2:	07da      	lsls	r2, r3, #31
 8007ac4:	d5dc      	bpl.n	8007a80 <_dtoa_r+0x970>
 8007ac6:	2b39      	cmp	r3, #57	; 0x39
 8007ac8:	d1d8      	bne.n	8007a7c <_dtoa_r+0x96c>
 8007aca:	9a02      	ldr	r2, [sp, #8]
 8007acc:	2339      	movs	r3, #57	; 0x39
 8007ace:	7013      	strb	r3, [r2, #0]
 8007ad0:	4643      	mov	r3, r8
 8007ad2:	4698      	mov	r8, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007ada:	2a39      	cmp	r2, #57	; 0x39
 8007adc:	d051      	beq.n	8007b82 <_dtoa_r+0xa72>
 8007ade:	3201      	adds	r2, #1
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	e745      	b.n	8007970 <_dtoa_r+0x860>
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	dd03      	ble.n	8007af0 <_dtoa_r+0x9e0>
 8007ae8:	2b39      	cmp	r3, #57	; 0x39
 8007aea:	d0ee      	beq.n	8007aca <_dtoa_r+0x9ba>
 8007aec:	3301      	adds	r3, #1
 8007aee:	e7c7      	b.n	8007a80 <_dtoa_r+0x970>
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	9908      	ldr	r1, [sp, #32]
 8007af4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007af8:	428a      	cmp	r2, r1
 8007afa:	d02b      	beq.n	8007b54 <_dtoa_r+0xa44>
 8007afc:	4629      	mov	r1, r5
 8007afe:	2300      	movs	r3, #0
 8007b00:	220a      	movs	r2, #10
 8007b02:	4630      	mov	r0, r6
 8007b04:	f000 fb0e 	bl	8008124 <__multadd>
 8007b08:	45b9      	cmp	r9, r7
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	f04f 020a 	mov.w	r2, #10
 8007b14:	4649      	mov	r1, r9
 8007b16:	4630      	mov	r0, r6
 8007b18:	d107      	bne.n	8007b2a <_dtoa_r+0xa1a>
 8007b1a:	f000 fb03 	bl	8008124 <__multadd>
 8007b1e:	4681      	mov	r9, r0
 8007b20:	4607      	mov	r7, r0
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	3301      	adds	r3, #1
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	e774      	b.n	8007a14 <_dtoa_r+0x904>
 8007b2a:	f000 fafb 	bl	8008124 <__multadd>
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4681      	mov	r9, r0
 8007b32:	2300      	movs	r3, #0
 8007b34:	220a      	movs	r2, #10
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 faf4 	bl	8008124 <__multadd>
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	e7f0      	b.n	8007b22 <_dtoa_r+0xa12>
 8007b40:	f1ba 0f00 	cmp.w	sl, #0
 8007b44:	9a01      	ldr	r2, [sp, #4]
 8007b46:	bfcc      	ite	gt
 8007b48:	46d0      	movgt	r8, sl
 8007b4a:	f04f 0801 	movle.w	r8, #1
 8007b4e:	4490      	add	r8, r2
 8007b50:	f04f 0900 	mov.w	r9, #0
 8007b54:	4629      	mov	r1, r5
 8007b56:	2201      	movs	r2, #1
 8007b58:	4630      	mov	r0, r6
 8007b5a:	9302      	str	r3, [sp, #8]
 8007b5c:	f000 fc92 	bl	8008484 <__lshift>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4605      	mov	r5, r0
 8007b64:	f000 fcfe 	bl	8008564 <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dcb1      	bgt.n	8007ad0 <_dtoa_r+0x9c0>
 8007b6c:	d102      	bne.n	8007b74 <_dtoa_r+0xa64>
 8007b6e:	9b02      	ldr	r3, [sp, #8]
 8007b70:	07db      	lsls	r3, r3, #31
 8007b72:	d4ad      	bmi.n	8007ad0 <_dtoa_r+0x9c0>
 8007b74:	4643      	mov	r3, r8
 8007b76:	4698      	mov	r8, r3
 8007b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7c:	2a30      	cmp	r2, #48	; 0x30
 8007b7e:	d0fa      	beq.n	8007b76 <_dtoa_r+0xa66>
 8007b80:	e6f6      	b.n	8007970 <_dtoa_r+0x860>
 8007b82:	9a01      	ldr	r2, [sp, #4]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1a4      	bne.n	8007ad2 <_dtoa_r+0x9c2>
 8007b88:	f10b 0b01 	add.w	fp, fp, #1
 8007b8c:	2331      	movs	r3, #49	; 0x31
 8007b8e:	e778      	b.n	8007a82 <_dtoa_r+0x972>
 8007b90:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <_dtoa_r+0xad4>)
 8007b92:	f7ff bb27 	b.w	80071e4 <_dtoa_r+0xd4>
 8007b96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f ab03 	bne.w	80071a4 <_dtoa_r+0x94>
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <_dtoa_r+0xad8>)
 8007ba0:	f7ff bb20 	b.w	80071e4 <_dtoa_r+0xd4>
 8007ba4:	f1ba 0f00 	cmp.w	sl, #0
 8007ba8:	dc03      	bgt.n	8007bb2 <_dtoa_r+0xaa2>
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	f73f aec7 	bgt.w	8007940 <_dtoa_r+0x830>
 8007bb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7ff fa1d 	bl	8006ff8 <quorem>
 8007bbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007bc2:	f808 3b01 	strb.w	r3, [r8], #1
 8007bc6:	9a01      	ldr	r2, [sp, #4]
 8007bc8:	eba8 0202 	sub.w	r2, r8, r2
 8007bcc:	4592      	cmp	sl, r2
 8007bce:	ddb7      	ble.n	8007b40 <_dtoa_r+0xa30>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 faa4 	bl	8008124 <__multadd>
 8007bdc:	4605      	mov	r5, r0
 8007bde:	e7ea      	b.n	8007bb6 <_dtoa_r+0xaa6>
 8007be0:	080092bb 	.word	0x080092bb
 8007be4:	08009218 	.word	0x08009218
 8007be8:	0800923c 	.word	0x0800923c

08007bec <__sflush_r>:
 8007bec:	898a      	ldrh	r2, [r1, #12]
 8007bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	0710      	lsls	r0, r2, #28
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	d458      	bmi.n	8007cac <__sflush_r+0xc0>
 8007bfa:	684b      	ldr	r3, [r1, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dc05      	bgt.n	8007c0c <__sflush_r+0x20>
 8007c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dc02      	bgt.n	8007c0c <__sflush_r+0x20>
 8007c06:	2000      	movs	r0, #0
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	d0f9      	beq.n	8007c06 <__sflush_r+0x1a>
 8007c12:	2300      	movs	r3, #0
 8007c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c18:	682f      	ldr	r7, [r5, #0]
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	d032      	beq.n	8007c84 <__sflush_r+0x98>
 8007c1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	075a      	lsls	r2, r3, #29
 8007c24:	d505      	bpl.n	8007c32 <__sflush_r+0x46>
 8007c26:	6863      	ldr	r3, [r4, #4]
 8007c28:	1ac0      	subs	r0, r0, r3
 8007c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c2c:	b10b      	cbz	r3, 8007c32 <__sflush_r+0x46>
 8007c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c30:	1ac0      	subs	r0, r0, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	4602      	mov	r2, r0
 8007c36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c38:	6a21      	ldr	r1, [r4, #32]
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b0      	blx	r6
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	d106      	bne.n	8007c52 <__sflush_r+0x66>
 8007c44:	6829      	ldr	r1, [r5, #0]
 8007c46:	291d      	cmp	r1, #29
 8007c48:	d82c      	bhi.n	8007ca4 <__sflush_r+0xb8>
 8007c4a:	4a2a      	ldr	r2, [pc, #168]	; (8007cf4 <__sflush_r+0x108>)
 8007c4c:	40ca      	lsrs	r2, r1
 8007c4e:	07d6      	lsls	r6, r2, #31
 8007c50:	d528      	bpl.n	8007ca4 <__sflush_r+0xb8>
 8007c52:	2200      	movs	r2, #0
 8007c54:	6062      	str	r2, [r4, #4]
 8007c56:	04d9      	lsls	r1, r3, #19
 8007c58:	6922      	ldr	r2, [r4, #16]
 8007c5a:	6022      	str	r2, [r4, #0]
 8007c5c:	d504      	bpl.n	8007c68 <__sflush_r+0x7c>
 8007c5e:	1c42      	adds	r2, r0, #1
 8007c60:	d101      	bne.n	8007c66 <__sflush_r+0x7a>
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	b903      	cbnz	r3, 8007c68 <__sflush_r+0x7c>
 8007c66:	6560      	str	r0, [r4, #84]	; 0x54
 8007c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c6a:	602f      	str	r7, [r5, #0]
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d0ca      	beq.n	8007c06 <__sflush_r+0x1a>
 8007c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c74:	4299      	cmp	r1, r3
 8007c76:	d002      	beq.n	8007c7e <__sflush_r+0x92>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 fd8b 	bl	8008794 <_free_r>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	6360      	str	r0, [r4, #52]	; 0x34
 8007c82:	e7c1      	b.n	8007c08 <__sflush_r+0x1c>
 8007c84:	6a21      	ldr	r1, [r4, #32]
 8007c86:	2301      	movs	r3, #1
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b0      	blx	r6
 8007c8c:	1c41      	adds	r1, r0, #1
 8007c8e:	d1c7      	bne.n	8007c20 <__sflush_r+0x34>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0c4      	beq.n	8007c20 <__sflush_r+0x34>
 8007c96:	2b1d      	cmp	r3, #29
 8007c98:	d001      	beq.n	8007c9e <__sflush_r+0xb2>
 8007c9a:	2b16      	cmp	r3, #22
 8007c9c:	d101      	bne.n	8007ca2 <__sflush_r+0xb6>
 8007c9e:	602f      	str	r7, [r5, #0]
 8007ca0:	e7b1      	b.n	8007c06 <__sflush_r+0x1a>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca8:	81a3      	strh	r3, [r4, #12]
 8007caa:	e7ad      	b.n	8007c08 <__sflush_r+0x1c>
 8007cac:	690f      	ldr	r7, [r1, #16]
 8007cae:	2f00      	cmp	r7, #0
 8007cb0:	d0a9      	beq.n	8007c06 <__sflush_r+0x1a>
 8007cb2:	0793      	lsls	r3, r2, #30
 8007cb4:	680e      	ldr	r6, [r1, #0]
 8007cb6:	bf08      	it	eq
 8007cb8:	694b      	ldreq	r3, [r1, #20]
 8007cba:	600f      	str	r7, [r1, #0]
 8007cbc:	bf18      	it	ne
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	eba6 0807 	sub.w	r8, r6, r7
 8007cc4:	608b      	str	r3, [r1, #8]
 8007cc6:	f1b8 0f00 	cmp.w	r8, #0
 8007cca:	dd9c      	ble.n	8007c06 <__sflush_r+0x1a>
 8007ccc:	6a21      	ldr	r1, [r4, #32]
 8007cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cd0:	4643      	mov	r3, r8
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b0      	blx	r6
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	dc06      	bgt.n	8007cea <__sflush_r+0xfe>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce8:	e78e      	b.n	8007c08 <__sflush_r+0x1c>
 8007cea:	4407      	add	r7, r0
 8007cec:	eba8 0800 	sub.w	r8, r8, r0
 8007cf0:	e7e9      	b.n	8007cc6 <__sflush_r+0xda>
 8007cf2:	bf00      	nop
 8007cf4:	20400001 	.word	0x20400001

08007cf8 <_fflush_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	690b      	ldr	r3, [r1, #16]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	b913      	cbnz	r3, 8007d08 <_fflush_r+0x10>
 8007d02:	2500      	movs	r5, #0
 8007d04:	4628      	mov	r0, r5
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	b118      	cbz	r0, 8007d12 <_fflush_r+0x1a>
 8007d0a:	6983      	ldr	r3, [r0, #24]
 8007d0c:	b90b      	cbnz	r3, 8007d12 <_fflush_r+0x1a>
 8007d0e:	f000 f887 	bl	8007e20 <__sinit>
 8007d12:	4b14      	ldr	r3, [pc, #80]	; (8007d64 <_fflush_r+0x6c>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d11b      	bne.n	8007d50 <_fflush_r+0x58>
 8007d18:	686c      	ldr	r4, [r5, #4]
 8007d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0ef      	beq.n	8007d02 <_fflush_r+0xa>
 8007d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d24:	07d0      	lsls	r0, r2, #31
 8007d26:	d404      	bmi.n	8007d32 <_fflush_r+0x3a>
 8007d28:	0599      	lsls	r1, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_fflush_r+0x3a>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f000 f91a 	bl	8007f66 <__retarget_lock_acquire_recursive>
 8007d32:	4628      	mov	r0, r5
 8007d34:	4621      	mov	r1, r4
 8007d36:	f7ff ff59 	bl	8007bec <__sflush_r>
 8007d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d3c:	07da      	lsls	r2, r3, #31
 8007d3e:	4605      	mov	r5, r0
 8007d40:	d4e0      	bmi.n	8007d04 <_fflush_r+0xc>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	059b      	lsls	r3, r3, #22
 8007d46:	d4dd      	bmi.n	8007d04 <_fflush_r+0xc>
 8007d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d4a:	f000 f90d 	bl	8007f68 <__retarget_lock_release_recursive>
 8007d4e:	e7d9      	b.n	8007d04 <_fflush_r+0xc>
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <_fflush_r+0x70>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d101      	bne.n	8007d5a <_fflush_r+0x62>
 8007d56:	68ac      	ldr	r4, [r5, #8]
 8007d58:	e7df      	b.n	8007d1a <_fflush_r+0x22>
 8007d5a:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <_fflush_r+0x74>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	bf08      	it	eq
 8007d60:	68ec      	ldreq	r4, [r5, #12]
 8007d62:	e7da      	b.n	8007d1a <_fflush_r+0x22>
 8007d64:	080092ec 	.word	0x080092ec
 8007d68:	0800930c 	.word	0x0800930c
 8007d6c:	080092cc 	.word	0x080092cc

08007d70 <std>:
 8007d70:	2300      	movs	r3, #0
 8007d72:	b510      	push	{r4, lr}
 8007d74:	4604      	mov	r4, r0
 8007d76:	e9c0 3300 	strd	r3, r3, [r0]
 8007d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d7e:	6083      	str	r3, [r0, #8]
 8007d80:	8181      	strh	r1, [r0, #12]
 8007d82:	6643      	str	r3, [r0, #100]	; 0x64
 8007d84:	81c2      	strh	r2, [r0, #14]
 8007d86:	6183      	str	r3, [r0, #24]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	305c      	adds	r0, #92	; 0x5c
 8007d8e:	f7fe fc21 	bl	80065d4 <memset>
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <std+0x38>)
 8007d94:	6263      	str	r3, [r4, #36]	; 0x24
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <std+0x3c>)
 8007d98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <std+0x40>)
 8007d9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <std+0x44>)
 8007da0:	6224      	str	r4, [r4, #32]
 8007da2:	6323      	str	r3, [r4, #48]	; 0x30
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	bf00      	nop
 8007da8:	08008975 	.word	0x08008975
 8007dac:	08008997 	.word	0x08008997
 8007db0:	080089cf 	.word	0x080089cf
 8007db4:	080089f3 	.word	0x080089f3

08007db8 <_cleanup_r>:
 8007db8:	4901      	ldr	r1, [pc, #4]	; (8007dc0 <_cleanup_r+0x8>)
 8007dba:	f000 b8af 	b.w	8007f1c <_fwalk_reent>
 8007dbe:	bf00      	nop
 8007dc0:	08007cf9 	.word	0x08007cf9

08007dc4 <__sfmoreglue>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	2268      	movs	r2, #104	; 0x68
 8007dc8:	1e4d      	subs	r5, r1, #1
 8007dca:	4355      	muls	r5, r2
 8007dcc:	460e      	mov	r6, r1
 8007dce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dd2:	f000 fd4b 	bl	800886c <_malloc_r>
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	b140      	cbz	r0, 8007dec <__sfmoreglue+0x28>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	e9c0 1600 	strd	r1, r6, [r0]
 8007de0:	300c      	adds	r0, #12
 8007de2:	60a0      	str	r0, [r4, #8]
 8007de4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de8:	f7fe fbf4 	bl	80065d4 <memset>
 8007dec:	4620      	mov	r0, r4
 8007dee:	bd70      	pop	{r4, r5, r6, pc}

08007df0 <__sfp_lock_acquire>:
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__sfp_lock_acquire+0x8>)
 8007df2:	f000 b8b8 	b.w	8007f66 <__retarget_lock_acquire_recursive>
 8007df6:	bf00      	nop
 8007df8:	200004b9 	.word	0x200004b9

08007dfc <__sfp_lock_release>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__sfp_lock_release+0x8>)
 8007dfe:	f000 b8b3 	b.w	8007f68 <__retarget_lock_release_recursive>
 8007e02:	bf00      	nop
 8007e04:	200004b9 	.word	0x200004b9

08007e08 <__sinit_lock_acquire>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sinit_lock_acquire+0x8>)
 8007e0a:	f000 b8ac 	b.w	8007f66 <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	200004ba 	.word	0x200004ba

08007e14 <__sinit_lock_release>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sinit_lock_release+0x8>)
 8007e16:	f000 b8a7 	b.w	8007f68 <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	200004ba 	.word	0x200004ba

08007e20 <__sinit>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4604      	mov	r4, r0
 8007e24:	f7ff fff0 	bl	8007e08 <__sinit_lock_acquire>
 8007e28:	69a3      	ldr	r3, [r4, #24]
 8007e2a:	b11b      	cbz	r3, 8007e34 <__sinit+0x14>
 8007e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e30:	f7ff bff0 	b.w	8007e14 <__sinit_lock_release>
 8007e34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e38:	6523      	str	r3, [r4, #80]	; 0x50
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <__sinit+0x68>)
 8007e3c:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <__sinit+0x6c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	bf04      	itt	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	61a3      	streq	r3, [r4, #24]
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f820 	bl	8007e90 <__sfp>
 8007e50:	6060      	str	r0, [r4, #4]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f81c 	bl	8007e90 <__sfp>
 8007e58:	60a0      	str	r0, [r4, #8]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f818 	bl	8007e90 <__sfp>
 8007e60:	2200      	movs	r2, #0
 8007e62:	60e0      	str	r0, [r4, #12]
 8007e64:	2104      	movs	r1, #4
 8007e66:	6860      	ldr	r0, [r4, #4]
 8007e68:	f7ff ff82 	bl	8007d70 <std>
 8007e6c:	68a0      	ldr	r0, [r4, #8]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2109      	movs	r1, #9
 8007e72:	f7ff ff7d 	bl	8007d70 <std>
 8007e76:	68e0      	ldr	r0, [r4, #12]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	2112      	movs	r1, #18
 8007e7c:	f7ff ff78 	bl	8007d70 <std>
 8007e80:	2301      	movs	r3, #1
 8007e82:	61a3      	str	r3, [r4, #24]
 8007e84:	e7d2      	b.n	8007e2c <__sinit+0xc>
 8007e86:	bf00      	nop
 8007e88:	08009204 	.word	0x08009204
 8007e8c:	08007db9 	.word	0x08007db9

08007e90 <__sfp>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	4607      	mov	r7, r0
 8007e94:	f7ff ffac 	bl	8007df0 <__sfp_lock_acquire>
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <__sfp+0x84>)
 8007e9a:	681e      	ldr	r6, [r3, #0]
 8007e9c:	69b3      	ldr	r3, [r6, #24]
 8007e9e:	b913      	cbnz	r3, 8007ea6 <__sfp+0x16>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ffbd 	bl	8007e20 <__sinit>
 8007ea6:	3648      	adds	r6, #72	; 0x48
 8007ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	d503      	bpl.n	8007eb8 <__sfp+0x28>
 8007eb0:	6833      	ldr	r3, [r6, #0]
 8007eb2:	b30b      	cbz	r3, 8007ef8 <__sfp+0x68>
 8007eb4:	6836      	ldr	r6, [r6, #0]
 8007eb6:	e7f7      	b.n	8007ea8 <__sfp+0x18>
 8007eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ebc:	b9d5      	cbnz	r5, 8007ef4 <__sfp+0x64>
 8007ebe:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <__sfp+0x88>)
 8007ec0:	60e3      	str	r3, [r4, #12]
 8007ec2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ec6:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec8:	f000 f84c 	bl	8007f64 <__retarget_lock_init_recursive>
 8007ecc:	f7ff ff96 	bl	8007dfc <__sfp_lock_release>
 8007ed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ed8:	6025      	str	r5, [r4, #0]
 8007eda:	61a5      	str	r5, [r4, #24]
 8007edc:	2208      	movs	r2, #8
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ee4:	f7fe fb76 	bl	80065d4 <memset>
 8007ee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef4:	3468      	adds	r4, #104	; 0x68
 8007ef6:	e7d9      	b.n	8007eac <__sfp+0x1c>
 8007ef8:	2104      	movs	r1, #4
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ff62 	bl	8007dc4 <__sfmoreglue>
 8007f00:	4604      	mov	r4, r0
 8007f02:	6030      	str	r0, [r6, #0]
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d1d5      	bne.n	8007eb4 <__sfp+0x24>
 8007f08:	f7ff ff78 	bl	8007dfc <__sfp_lock_release>
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	e7ee      	b.n	8007ef0 <__sfp+0x60>
 8007f12:	bf00      	nop
 8007f14:	08009204 	.word	0x08009204
 8007f18:	ffff0001 	.word	0xffff0001

08007f1c <_fwalk_reent>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	4606      	mov	r6, r0
 8007f22:	4688      	mov	r8, r1
 8007f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f28:	2700      	movs	r7, #0
 8007f2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007f32:	d505      	bpl.n	8007f40 <_fwalk_reent+0x24>
 8007f34:	6824      	ldr	r4, [r4, #0]
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d1f7      	bne.n	8007f2a <_fwalk_reent+0xe>
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f40:	89ab      	ldrh	r3, [r5, #12]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d907      	bls.n	8007f56 <_fwalk_reent+0x3a>
 8007f46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	d003      	beq.n	8007f56 <_fwalk_reent+0x3a>
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4630      	mov	r0, r6
 8007f52:	47c0      	blx	r8
 8007f54:	4307      	orrs	r7, r0
 8007f56:	3568      	adds	r5, #104	; 0x68
 8007f58:	e7e9      	b.n	8007f2e <_fwalk_reent+0x12>
	...

08007f5c <_localeconv_r>:
 8007f5c:	4800      	ldr	r0, [pc, #0]	; (8007f60 <_localeconv_r+0x4>)
 8007f5e:	4770      	bx	lr
 8007f60:	20000160 	.word	0x20000160

08007f64 <__retarget_lock_init_recursive>:
 8007f64:	4770      	bx	lr

08007f66 <__retarget_lock_acquire_recursive>:
 8007f66:	4770      	bx	lr

08007f68 <__retarget_lock_release_recursive>:
 8007f68:	4770      	bx	lr

08007f6a <__swhatbuf_r>:
 8007f6a:	b570      	push	{r4, r5, r6, lr}
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f72:	2900      	cmp	r1, #0
 8007f74:	b096      	sub	sp, #88	; 0x58
 8007f76:	4614      	mov	r4, r2
 8007f78:	461d      	mov	r5, r3
 8007f7a:	da08      	bge.n	8007f8e <__swhatbuf_r+0x24>
 8007f7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	602a      	str	r2, [r5, #0]
 8007f84:	061a      	lsls	r2, r3, #24
 8007f86:	d410      	bmi.n	8007faa <__swhatbuf_r+0x40>
 8007f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f8c:	e00e      	b.n	8007fac <__swhatbuf_r+0x42>
 8007f8e:	466a      	mov	r2, sp
 8007f90:	f000 fd86 	bl	8008aa0 <_fstat_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	dbf1      	blt.n	8007f7c <__swhatbuf_r+0x12>
 8007f98:	9a01      	ldr	r2, [sp, #4]
 8007f9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fa2:	425a      	negs	r2, r3
 8007fa4:	415a      	adcs	r2, r3
 8007fa6:	602a      	str	r2, [r5, #0]
 8007fa8:	e7ee      	b.n	8007f88 <__swhatbuf_r+0x1e>
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	2000      	movs	r0, #0
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	b016      	add	sp, #88	; 0x58
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}

08007fb4 <__smakebuf_r>:
 8007fb4:	898b      	ldrh	r3, [r1, #12]
 8007fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fb8:	079d      	lsls	r5, r3, #30
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	d507      	bpl.n	8007fd0 <__smakebuf_r+0x1c>
 8007fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	6163      	str	r3, [r4, #20]
 8007fcc:	b002      	add	sp, #8
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	ab01      	add	r3, sp, #4
 8007fd2:	466a      	mov	r2, sp
 8007fd4:	f7ff ffc9 	bl	8007f6a <__swhatbuf_r>
 8007fd8:	9900      	ldr	r1, [sp, #0]
 8007fda:	4605      	mov	r5, r0
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 fc45 	bl	800886c <_malloc_r>
 8007fe2:	b948      	cbnz	r0, 8007ff8 <__smakebuf_r+0x44>
 8007fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe8:	059a      	lsls	r2, r3, #22
 8007fea:	d4ef      	bmi.n	8007fcc <__smakebuf_r+0x18>
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	f043 0302 	orr.w	r3, r3, #2
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	e7e3      	b.n	8007fc0 <__smakebuf_r+0xc>
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <__smakebuf_r+0x7c>)
 8007ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	6020      	str	r0, [r4, #0]
 8008000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	6163      	str	r3, [r4, #20]
 800800a:	9b01      	ldr	r3, [sp, #4]
 800800c:	6120      	str	r0, [r4, #16]
 800800e:	b15b      	cbz	r3, 8008028 <__smakebuf_r+0x74>
 8008010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008014:	4630      	mov	r0, r6
 8008016:	f000 fd55 	bl	8008ac4 <_isatty_r>
 800801a:	b128      	cbz	r0, 8008028 <__smakebuf_r+0x74>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	89a0      	ldrh	r0, [r4, #12]
 800802a:	4305      	orrs	r5, r0
 800802c:	81a5      	strh	r5, [r4, #12]
 800802e:	e7cd      	b.n	8007fcc <__smakebuf_r+0x18>
 8008030:	08007db9 	.word	0x08007db9

08008034 <malloc>:
 8008034:	4b02      	ldr	r3, [pc, #8]	; (8008040 <malloc+0xc>)
 8008036:	4601      	mov	r1, r0
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	f000 bc17 	b.w	800886c <_malloc_r>
 800803e:	bf00      	nop
 8008040:	2000000c 	.word	0x2000000c

08008044 <memcpy>:
 8008044:	440a      	add	r2, r1
 8008046:	4291      	cmp	r1, r2
 8008048:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800804c:	d100      	bne.n	8008050 <memcpy+0xc>
 800804e:	4770      	bx	lr
 8008050:	b510      	push	{r4, lr}
 8008052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800805a:	4291      	cmp	r1, r2
 800805c:	d1f9      	bne.n	8008052 <memcpy+0xe>
 800805e:	bd10      	pop	{r4, pc}

08008060 <_Balloc>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	b976      	cbnz	r6, 8008088 <_Balloc+0x28>
 800806a:	2010      	movs	r0, #16
 800806c:	f7ff ffe2 	bl	8008034 <malloc>
 8008070:	4602      	mov	r2, r0
 8008072:	6260      	str	r0, [r4, #36]	; 0x24
 8008074:	b920      	cbnz	r0, 8008080 <_Balloc+0x20>
 8008076:	4b18      	ldr	r3, [pc, #96]	; (80080d8 <_Balloc+0x78>)
 8008078:	4818      	ldr	r0, [pc, #96]	; (80080dc <_Balloc+0x7c>)
 800807a:	2166      	movs	r1, #102	; 0x66
 800807c:	f000 fcd0 	bl	8008a20 <__assert_func>
 8008080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008084:	6006      	str	r6, [r0, #0]
 8008086:	60c6      	str	r6, [r0, #12]
 8008088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800808a:	68f3      	ldr	r3, [r6, #12]
 800808c:	b183      	cbz	r3, 80080b0 <_Balloc+0x50>
 800808e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008096:	b9b8      	cbnz	r0, 80080c8 <_Balloc+0x68>
 8008098:	2101      	movs	r1, #1
 800809a:	fa01 f605 	lsl.w	r6, r1, r5
 800809e:	1d72      	adds	r2, r6, #5
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 fb60 	bl	8008768 <_calloc_r>
 80080a8:	b160      	cbz	r0, 80080c4 <_Balloc+0x64>
 80080aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080ae:	e00e      	b.n	80080ce <_Balloc+0x6e>
 80080b0:	2221      	movs	r2, #33	; 0x21
 80080b2:	2104      	movs	r1, #4
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fb57 	bl	8008768 <_calloc_r>
 80080ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080bc:	60f0      	str	r0, [r6, #12]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e4      	bne.n	800808e <_Balloc+0x2e>
 80080c4:	2000      	movs	r0, #0
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	6802      	ldr	r2, [r0, #0]
 80080ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ce:	2300      	movs	r3, #0
 80080d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080d4:	e7f7      	b.n	80080c6 <_Balloc+0x66>
 80080d6:	bf00      	nop
 80080d8:	08009249 	.word	0x08009249
 80080dc:	0800932c 	.word	0x0800932c

080080e0 <_Bfree>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080e4:	4605      	mov	r5, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b976      	cbnz	r6, 8008108 <_Bfree+0x28>
 80080ea:	2010      	movs	r0, #16
 80080ec:	f7ff ffa2 	bl	8008034 <malloc>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6268      	str	r0, [r5, #36]	; 0x24
 80080f4:	b920      	cbnz	r0, 8008100 <_Bfree+0x20>
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <_Bfree+0x3c>)
 80080f8:	4809      	ldr	r0, [pc, #36]	; (8008120 <_Bfree+0x40>)
 80080fa:	218a      	movs	r1, #138	; 0x8a
 80080fc:	f000 fc90 	bl	8008a20 <__assert_func>
 8008100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008104:	6006      	str	r6, [r0, #0]
 8008106:	60c6      	str	r6, [r0, #12]
 8008108:	b13c      	cbz	r4, 800811a <_Bfree+0x3a>
 800810a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800810c:	6862      	ldr	r2, [r4, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008114:	6021      	str	r1, [r4, #0]
 8008116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	08009249 	.word	0x08009249
 8008120:	0800932c 	.word	0x0800932c

08008124 <__multadd>:
 8008124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	690d      	ldr	r5, [r1, #16]
 800812a:	4607      	mov	r7, r0
 800812c:	460c      	mov	r4, r1
 800812e:	461e      	mov	r6, r3
 8008130:	f101 0c14 	add.w	ip, r1, #20
 8008134:	2000      	movs	r0, #0
 8008136:	f8dc 3000 	ldr.w	r3, [ip]
 800813a:	b299      	uxth	r1, r3
 800813c:	fb02 6101 	mla	r1, r2, r1, r6
 8008140:	0c1e      	lsrs	r6, r3, #16
 8008142:	0c0b      	lsrs	r3, r1, #16
 8008144:	fb02 3306 	mla	r3, r2, r6, r3
 8008148:	b289      	uxth	r1, r1
 800814a:	3001      	adds	r0, #1
 800814c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008150:	4285      	cmp	r5, r0
 8008152:	f84c 1b04 	str.w	r1, [ip], #4
 8008156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800815a:	dcec      	bgt.n	8008136 <__multadd+0x12>
 800815c:	b30e      	cbz	r6, 80081a2 <__multadd+0x7e>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	42ab      	cmp	r3, r5
 8008162:	dc19      	bgt.n	8008198 <__multadd+0x74>
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4638      	mov	r0, r7
 8008168:	3101      	adds	r1, #1
 800816a:	f7ff ff79 	bl	8008060 <_Balloc>
 800816e:	4680      	mov	r8, r0
 8008170:	b928      	cbnz	r0, 800817e <__multadd+0x5a>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <__multadd+0x84>)
 8008176:	480d      	ldr	r0, [pc, #52]	; (80081ac <__multadd+0x88>)
 8008178:	21b5      	movs	r1, #181	; 0xb5
 800817a:	f000 fc51 	bl	8008a20 <__assert_func>
 800817e:	6922      	ldr	r2, [r4, #16]
 8008180:	3202      	adds	r2, #2
 8008182:	f104 010c 	add.w	r1, r4, #12
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	300c      	adds	r0, #12
 800818a:	f7ff ff5b 	bl	8008044 <memcpy>
 800818e:	4621      	mov	r1, r4
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff ffa5 	bl	80080e0 <_Bfree>
 8008196:	4644      	mov	r4, r8
 8008198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800819c:	3501      	adds	r5, #1
 800819e:	615e      	str	r6, [r3, #20]
 80081a0:	6125      	str	r5, [r4, #16]
 80081a2:	4620      	mov	r0, r4
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	080092bb 	.word	0x080092bb
 80081ac:	0800932c 	.word	0x0800932c

080081b0 <__hi0bits>:
 80081b0:	0c03      	lsrs	r3, r0, #16
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	b9d3      	cbnz	r3, 80081ec <__hi0bits+0x3c>
 80081b6:	0400      	lsls	r0, r0, #16
 80081b8:	2310      	movs	r3, #16
 80081ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081be:	bf04      	itt	eq
 80081c0:	0200      	lsleq	r0, r0, #8
 80081c2:	3308      	addeq	r3, #8
 80081c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081c8:	bf04      	itt	eq
 80081ca:	0100      	lsleq	r0, r0, #4
 80081cc:	3304      	addeq	r3, #4
 80081ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081d2:	bf04      	itt	eq
 80081d4:	0080      	lsleq	r0, r0, #2
 80081d6:	3302      	addeq	r3, #2
 80081d8:	2800      	cmp	r0, #0
 80081da:	db05      	blt.n	80081e8 <__hi0bits+0x38>
 80081dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081e0:	f103 0301 	add.w	r3, r3, #1
 80081e4:	bf08      	it	eq
 80081e6:	2320      	moveq	r3, #32
 80081e8:	4618      	mov	r0, r3
 80081ea:	4770      	bx	lr
 80081ec:	2300      	movs	r3, #0
 80081ee:	e7e4      	b.n	80081ba <__hi0bits+0xa>

080081f0 <__lo0bits>:
 80081f0:	6803      	ldr	r3, [r0, #0]
 80081f2:	f013 0207 	ands.w	r2, r3, #7
 80081f6:	4601      	mov	r1, r0
 80081f8:	d00b      	beq.n	8008212 <__lo0bits+0x22>
 80081fa:	07da      	lsls	r2, r3, #31
 80081fc:	d423      	bmi.n	8008246 <__lo0bits+0x56>
 80081fe:	0798      	lsls	r0, r3, #30
 8008200:	bf49      	itett	mi
 8008202:	085b      	lsrmi	r3, r3, #1
 8008204:	089b      	lsrpl	r3, r3, #2
 8008206:	2001      	movmi	r0, #1
 8008208:	600b      	strmi	r3, [r1, #0]
 800820a:	bf5c      	itt	pl
 800820c:	600b      	strpl	r3, [r1, #0]
 800820e:	2002      	movpl	r0, #2
 8008210:	4770      	bx	lr
 8008212:	b298      	uxth	r0, r3
 8008214:	b9a8      	cbnz	r0, 8008242 <__lo0bits+0x52>
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	2010      	movs	r0, #16
 800821a:	b2da      	uxtb	r2, r3
 800821c:	b90a      	cbnz	r2, 8008222 <__lo0bits+0x32>
 800821e:	3008      	adds	r0, #8
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	071a      	lsls	r2, r3, #28
 8008224:	bf04      	itt	eq
 8008226:	091b      	lsreq	r3, r3, #4
 8008228:	3004      	addeq	r0, #4
 800822a:	079a      	lsls	r2, r3, #30
 800822c:	bf04      	itt	eq
 800822e:	089b      	lsreq	r3, r3, #2
 8008230:	3002      	addeq	r0, #2
 8008232:	07da      	lsls	r2, r3, #31
 8008234:	d403      	bmi.n	800823e <__lo0bits+0x4e>
 8008236:	085b      	lsrs	r3, r3, #1
 8008238:	f100 0001 	add.w	r0, r0, #1
 800823c:	d005      	beq.n	800824a <__lo0bits+0x5a>
 800823e:	600b      	str	r3, [r1, #0]
 8008240:	4770      	bx	lr
 8008242:	4610      	mov	r0, r2
 8008244:	e7e9      	b.n	800821a <__lo0bits+0x2a>
 8008246:	2000      	movs	r0, #0
 8008248:	4770      	bx	lr
 800824a:	2020      	movs	r0, #32
 800824c:	4770      	bx	lr
	...

08008250 <__i2b>:
 8008250:	b510      	push	{r4, lr}
 8008252:	460c      	mov	r4, r1
 8008254:	2101      	movs	r1, #1
 8008256:	f7ff ff03 	bl	8008060 <_Balloc>
 800825a:	4602      	mov	r2, r0
 800825c:	b928      	cbnz	r0, 800826a <__i2b+0x1a>
 800825e:	4b05      	ldr	r3, [pc, #20]	; (8008274 <__i2b+0x24>)
 8008260:	4805      	ldr	r0, [pc, #20]	; (8008278 <__i2b+0x28>)
 8008262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008266:	f000 fbdb 	bl	8008a20 <__assert_func>
 800826a:	2301      	movs	r3, #1
 800826c:	6144      	str	r4, [r0, #20]
 800826e:	6103      	str	r3, [r0, #16]
 8008270:	bd10      	pop	{r4, pc}
 8008272:	bf00      	nop
 8008274:	080092bb 	.word	0x080092bb
 8008278:	0800932c 	.word	0x0800932c

0800827c <__multiply>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	4691      	mov	r9, r2
 8008282:	690a      	ldr	r2, [r1, #16]
 8008284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008288:	429a      	cmp	r2, r3
 800828a:	bfb8      	it	lt
 800828c:	460b      	movlt	r3, r1
 800828e:	460c      	mov	r4, r1
 8008290:	bfbc      	itt	lt
 8008292:	464c      	movlt	r4, r9
 8008294:	4699      	movlt	r9, r3
 8008296:	6927      	ldr	r7, [r4, #16]
 8008298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800829c:	68a3      	ldr	r3, [r4, #8]
 800829e:	6861      	ldr	r1, [r4, #4]
 80082a0:	eb07 060a 	add.w	r6, r7, sl
 80082a4:	42b3      	cmp	r3, r6
 80082a6:	b085      	sub	sp, #20
 80082a8:	bfb8      	it	lt
 80082aa:	3101      	addlt	r1, #1
 80082ac:	f7ff fed8 	bl	8008060 <_Balloc>
 80082b0:	b930      	cbnz	r0, 80082c0 <__multiply+0x44>
 80082b2:	4602      	mov	r2, r0
 80082b4:	4b44      	ldr	r3, [pc, #272]	; (80083c8 <__multiply+0x14c>)
 80082b6:	4845      	ldr	r0, [pc, #276]	; (80083cc <__multiply+0x150>)
 80082b8:	f240 115d 	movw	r1, #349	; 0x15d
 80082bc:	f000 fbb0 	bl	8008a20 <__assert_func>
 80082c0:	f100 0514 	add.w	r5, r0, #20
 80082c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082c8:	462b      	mov	r3, r5
 80082ca:	2200      	movs	r2, #0
 80082cc:	4543      	cmp	r3, r8
 80082ce:	d321      	bcc.n	8008314 <__multiply+0x98>
 80082d0:	f104 0314 	add.w	r3, r4, #20
 80082d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082d8:	f109 0314 	add.w	r3, r9, #20
 80082dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082e0:	9202      	str	r2, [sp, #8]
 80082e2:	1b3a      	subs	r2, r7, r4
 80082e4:	3a15      	subs	r2, #21
 80082e6:	f022 0203 	bic.w	r2, r2, #3
 80082ea:	3204      	adds	r2, #4
 80082ec:	f104 0115 	add.w	r1, r4, #21
 80082f0:	428f      	cmp	r7, r1
 80082f2:	bf38      	it	cc
 80082f4:	2204      	movcc	r2, #4
 80082f6:	9201      	str	r2, [sp, #4]
 80082f8:	9a02      	ldr	r2, [sp, #8]
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d80c      	bhi.n	800831a <__multiply+0x9e>
 8008300:	2e00      	cmp	r6, #0
 8008302:	dd03      	ble.n	800830c <__multiply+0x90>
 8008304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008308:	2b00      	cmp	r3, #0
 800830a:	d05a      	beq.n	80083c2 <__multiply+0x146>
 800830c:	6106      	str	r6, [r0, #16]
 800830e:	b005      	add	sp, #20
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	f843 2b04 	str.w	r2, [r3], #4
 8008318:	e7d8      	b.n	80082cc <__multiply+0x50>
 800831a:	f8b3 a000 	ldrh.w	sl, [r3]
 800831e:	f1ba 0f00 	cmp.w	sl, #0
 8008322:	d024      	beq.n	800836e <__multiply+0xf2>
 8008324:	f104 0e14 	add.w	lr, r4, #20
 8008328:	46a9      	mov	r9, r5
 800832a:	f04f 0c00 	mov.w	ip, #0
 800832e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008332:	f8d9 1000 	ldr.w	r1, [r9]
 8008336:	fa1f fb82 	uxth.w	fp, r2
 800833a:	b289      	uxth	r1, r1
 800833c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008344:	f8d9 2000 	ldr.w	r2, [r9]
 8008348:	4461      	add	r1, ip
 800834a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800834e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008356:	b289      	uxth	r1, r1
 8008358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800835c:	4577      	cmp	r7, lr
 800835e:	f849 1b04 	str.w	r1, [r9], #4
 8008362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008366:	d8e2      	bhi.n	800832e <__multiply+0xb2>
 8008368:	9a01      	ldr	r2, [sp, #4]
 800836a:	f845 c002 	str.w	ip, [r5, r2]
 800836e:	9a03      	ldr	r2, [sp, #12]
 8008370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008374:	3304      	adds	r3, #4
 8008376:	f1b9 0f00 	cmp.w	r9, #0
 800837a:	d020      	beq.n	80083be <__multiply+0x142>
 800837c:	6829      	ldr	r1, [r5, #0]
 800837e:	f104 0c14 	add.w	ip, r4, #20
 8008382:	46ae      	mov	lr, r5
 8008384:	f04f 0a00 	mov.w	sl, #0
 8008388:	f8bc b000 	ldrh.w	fp, [ip]
 800838c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008390:	fb09 220b 	mla	r2, r9, fp, r2
 8008394:	4492      	add	sl, r2
 8008396:	b289      	uxth	r1, r1
 8008398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800839c:	f84e 1b04 	str.w	r1, [lr], #4
 80083a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083a4:	f8be 1000 	ldrh.w	r1, [lr]
 80083a8:	0c12      	lsrs	r2, r2, #16
 80083aa:	fb09 1102 	mla	r1, r9, r2, r1
 80083ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083b2:	4567      	cmp	r7, ip
 80083b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083b8:	d8e6      	bhi.n	8008388 <__multiply+0x10c>
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	50a9      	str	r1, [r5, r2]
 80083be:	3504      	adds	r5, #4
 80083c0:	e79a      	b.n	80082f8 <__multiply+0x7c>
 80083c2:	3e01      	subs	r6, #1
 80083c4:	e79c      	b.n	8008300 <__multiply+0x84>
 80083c6:	bf00      	nop
 80083c8:	080092bb 	.word	0x080092bb
 80083cc:	0800932c 	.word	0x0800932c

080083d0 <__pow5mult>:
 80083d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d4:	4615      	mov	r5, r2
 80083d6:	f012 0203 	ands.w	r2, r2, #3
 80083da:	4606      	mov	r6, r0
 80083dc:	460f      	mov	r7, r1
 80083de:	d007      	beq.n	80083f0 <__pow5mult+0x20>
 80083e0:	4c25      	ldr	r4, [pc, #148]	; (8008478 <__pow5mult+0xa8>)
 80083e2:	3a01      	subs	r2, #1
 80083e4:	2300      	movs	r3, #0
 80083e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ea:	f7ff fe9b 	bl	8008124 <__multadd>
 80083ee:	4607      	mov	r7, r0
 80083f0:	10ad      	asrs	r5, r5, #2
 80083f2:	d03d      	beq.n	8008470 <__pow5mult+0xa0>
 80083f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083f6:	b97c      	cbnz	r4, 8008418 <__pow5mult+0x48>
 80083f8:	2010      	movs	r0, #16
 80083fa:	f7ff fe1b 	bl	8008034 <malloc>
 80083fe:	4602      	mov	r2, r0
 8008400:	6270      	str	r0, [r6, #36]	; 0x24
 8008402:	b928      	cbnz	r0, 8008410 <__pow5mult+0x40>
 8008404:	4b1d      	ldr	r3, [pc, #116]	; (800847c <__pow5mult+0xac>)
 8008406:	481e      	ldr	r0, [pc, #120]	; (8008480 <__pow5mult+0xb0>)
 8008408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800840c:	f000 fb08 	bl	8008a20 <__assert_func>
 8008410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008414:	6004      	str	r4, [r0, #0]
 8008416:	60c4      	str	r4, [r0, #12]
 8008418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800841c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008420:	b94c      	cbnz	r4, 8008436 <__pow5mult+0x66>
 8008422:	f240 2171 	movw	r1, #625	; 0x271
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ff12 	bl	8008250 <__i2b>
 800842c:	2300      	movs	r3, #0
 800842e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008432:	4604      	mov	r4, r0
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	f04f 0900 	mov.w	r9, #0
 800843a:	07eb      	lsls	r3, r5, #31
 800843c:	d50a      	bpl.n	8008454 <__pow5mult+0x84>
 800843e:	4639      	mov	r1, r7
 8008440:	4622      	mov	r2, r4
 8008442:	4630      	mov	r0, r6
 8008444:	f7ff ff1a 	bl	800827c <__multiply>
 8008448:	4639      	mov	r1, r7
 800844a:	4680      	mov	r8, r0
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff fe47 	bl	80080e0 <_Bfree>
 8008452:	4647      	mov	r7, r8
 8008454:	106d      	asrs	r5, r5, #1
 8008456:	d00b      	beq.n	8008470 <__pow5mult+0xa0>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	b938      	cbnz	r0, 800846c <__pow5mult+0x9c>
 800845c:	4622      	mov	r2, r4
 800845e:	4621      	mov	r1, r4
 8008460:	4630      	mov	r0, r6
 8008462:	f7ff ff0b 	bl	800827c <__multiply>
 8008466:	6020      	str	r0, [r4, #0]
 8008468:	f8c0 9000 	str.w	r9, [r0]
 800846c:	4604      	mov	r4, r0
 800846e:	e7e4      	b.n	800843a <__pow5mult+0x6a>
 8008470:	4638      	mov	r0, r7
 8008472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008476:	bf00      	nop
 8008478:	08009478 	.word	0x08009478
 800847c:	08009249 	.word	0x08009249
 8008480:	0800932c 	.word	0x0800932c

08008484 <__lshift>:
 8008484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	6849      	ldr	r1, [r1, #4]
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	4607      	mov	r7, r0
 8008496:	4691      	mov	r9, r2
 8008498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800849c:	f108 0601 	add.w	r6, r8, #1
 80084a0:	42b3      	cmp	r3, r6
 80084a2:	db0b      	blt.n	80084bc <__lshift+0x38>
 80084a4:	4638      	mov	r0, r7
 80084a6:	f7ff fddb 	bl	8008060 <_Balloc>
 80084aa:	4605      	mov	r5, r0
 80084ac:	b948      	cbnz	r0, 80084c2 <__lshift+0x3e>
 80084ae:	4602      	mov	r2, r0
 80084b0:	4b2a      	ldr	r3, [pc, #168]	; (800855c <__lshift+0xd8>)
 80084b2:	482b      	ldr	r0, [pc, #172]	; (8008560 <__lshift+0xdc>)
 80084b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084b8:	f000 fab2 	bl	8008a20 <__assert_func>
 80084bc:	3101      	adds	r1, #1
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	e7ee      	b.n	80084a0 <__lshift+0x1c>
 80084c2:	2300      	movs	r3, #0
 80084c4:	f100 0114 	add.w	r1, r0, #20
 80084c8:	f100 0210 	add.w	r2, r0, #16
 80084cc:	4618      	mov	r0, r3
 80084ce:	4553      	cmp	r3, sl
 80084d0:	db37      	blt.n	8008542 <__lshift+0xbe>
 80084d2:	6920      	ldr	r0, [r4, #16]
 80084d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084d8:	f104 0314 	add.w	r3, r4, #20
 80084dc:	f019 091f 	ands.w	r9, r9, #31
 80084e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084e8:	d02f      	beq.n	800854a <__lshift+0xc6>
 80084ea:	f1c9 0e20 	rsb	lr, r9, #32
 80084ee:	468a      	mov	sl, r1
 80084f0:	f04f 0c00 	mov.w	ip, #0
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	fa02 f209 	lsl.w	r2, r2, r9
 80084fa:	ea42 020c 	orr.w	r2, r2, ip
 80084fe:	f84a 2b04 	str.w	r2, [sl], #4
 8008502:	f853 2b04 	ldr.w	r2, [r3], #4
 8008506:	4298      	cmp	r0, r3
 8008508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800850c:	d8f2      	bhi.n	80084f4 <__lshift+0x70>
 800850e:	1b03      	subs	r3, r0, r4
 8008510:	3b15      	subs	r3, #21
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	3304      	adds	r3, #4
 8008518:	f104 0215 	add.w	r2, r4, #21
 800851c:	4290      	cmp	r0, r2
 800851e:	bf38      	it	cc
 8008520:	2304      	movcc	r3, #4
 8008522:	f841 c003 	str.w	ip, [r1, r3]
 8008526:	f1bc 0f00 	cmp.w	ip, #0
 800852a:	d001      	beq.n	8008530 <__lshift+0xac>
 800852c:	f108 0602 	add.w	r6, r8, #2
 8008530:	3e01      	subs	r6, #1
 8008532:	4638      	mov	r0, r7
 8008534:	612e      	str	r6, [r5, #16]
 8008536:	4621      	mov	r1, r4
 8008538:	f7ff fdd2 	bl	80080e0 <_Bfree>
 800853c:	4628      	mov	r0, r5
 800853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008542:	f842 0f04 	str.w	r0, [r2, #4]!
 8008546:	3301      	adds	r3, #1
 8008548:	e7c1      	b.n	80084ce <__lshift+0x4a>
 800854a:	3904      	subs	r1, #4
 800854c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008550:	f841 2f04 	str.w	r2, [r1, #4]!
 8008554:	4298      	cmp	r0, r3
 8008556:	d8f9      	bhi.n	800854c <__lshift+0xc8>
 8008558:	e7ea      	b.n	8008530 <__lshift+0xac>
 800855a:	bf00      	nop
 800855c:	080092bb 	.word	0x080092bb
 8008560:	0800932c 	.word	0x0800932c

08008564 <__mcmp>:
 8008564:	b530      	push	{r4, r5, lr}
 8008566:	6902      	ldr	r2, [r0, #16]
 8008568:	690c      	ldr	r4, [r1, #16]
 800856a:	1b12      	subs	r2, r2, r4
 800856c:	d10e      	bne.n	800858c <__mcmp+0x28>
 800856e:	f100 0314 	add.w	r3, r0, #20
 8008572:	3114      	adds	r1, #20
 8008574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800857c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008584:	42a5      	cmp	r5, r4
 8008586:	d003      	beq.n	8008590 <__mcmp+0x2c>
 8008588:	d305      	bcc.n	8008596 <__mcmp+0x32>
 800858a:	2201      	movs	r2, #1
 800858c:	4610      	mov	r0, r2
 800858e:	bd30      	pop	{r4, r5, pc}
 8008590:	4283      	cmp	r3, r0
 8008592:	d3f3      	bcc.n	800857c <__mcmp+0x18>
 8008594:	e7fa      	b.n	800858c <__mcmp+0x28>
 8008596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800859a:	e7f7      	b.n	800858c <__mcmp+0x28>

0800859c <__mdiff>:
 800859c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	460c      	mov	r4, r1
 80085a2:	4606      	mov	r6, r0
 80085a4:	4611      	mov	r1, r2
 80085a6:	4620      	mov	r0, r4
 80085a8:	4690      	mov	r8, r2
 80085aa:	f7ff ffdb 	bl	8008564 <__mcmp>
 80085ae:	1e05      	subs	r5, r0, #0
 80085b0:	d110      	bne.n	80085d4 <__mdiff+0x38>
 80085b2:	4629      	mov	r1, r5
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7ff fd53 	bl	8008060 <_Balloc>
 80085ba:	b930      	cbnz	r0, 80085ca <__mdiff+0x2e>
 80085bc:	4b3a      	ldr	r3, [pc, #232]	; (80086a8 <__mdiff+0x10c>)
 80085be:	4602      	mov	r2, r0
 80085c0:	f240 2132 	movw	r1, #562	; 0x232
 80085c4:	4839      	ldr	r0, [pc, #228]	; (80086ac <__mdiff+0x110>)
 80085c6:	f000 fa2b 	bl	8008a20 <__assert_func>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d4:	bfa4      	itt	ge
 80085d6:	4643      	movge	r3, r8
 80085d8:	46a0      	movge	r8, r4
 80085da:	4630      	mov	r0, r6
 80085dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085e0:	bfa6      	itte	ge
 80085e2:	461c      	movge	r4, r3
 80085e4:	2500      	movge	r5, #0
 80085e6:	2501      	movlt	r5, #1
 80085e8:	f7ff fd3a 	bl	8008060 <_Balloc>
 80085ec:	b920      	cbnz	r0, 80085f8 <__mdiff+0x5c>
 80085ee:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <__mdiff+0x10c>)
 80085f0:	4602      	mov	r2, r0
 80085f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085f6:	e7e5      	b.n	80085c4 <__mdiff+0x28>
 80085f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085fc:	6926      	ldr	r6, [r4, #16]
 80085fe:	60c5      	str	r5, [r0, #12]
 8008600:	f104 0914 	add.w	r9, r4, #20
 8008604:	f108 0514 	add.w	r5, r8, #20
 8008608:	f100 0e14 	add.w	lr, r0, #20
 800860c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008614:	f108 0210 	add.w	r2, r8, #16
 8008618:	46f2      	mov	sl, lr
 800861a:	2100      	movs	r1, #0
 800861c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008620:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008624:	fa1f f883 	uxth.w	r8, r3
 8008628:	fa11 f18b 	uxtah	r1, r1, fp
 800862c:	0c1b      	lsrs	r3, r3, #16
 800862e:	eba1 0808 	sub.w	r8, r1, r8
 8008632:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008636:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800863a:	fa1f f888 	uxth.w	r8, r8
 800863e:	1419      	asrs	r1, r3, #16
 8008640:	454e      	cmp	r6, r9
 8008642:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008646:	f84a 3b04 	str.w	r3, [sl], #4
 800864a:	d8e7      	bhi.n	800861c <__mdiff+0x80>
 800864c:	1b33      	subs	r3, r6, r4
 800864e:	3b15      	subs	r3, #21
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	3304      	adds	r3, #4
 8008656:	3415      	adds	r4, #21
 8008658:	42a6      	cmp	r6, r4
 800865a:	bf38      	it	cc
 800865c:	2304      	movcc	r3, #4
 800865e:	441d      	add	r5, r3
 8008660:	4473      	add	r3, lr
 8008662:	469e      	mov	lr, r3
 8008664:	462e      	mov	r6, r5
 8008666:	4566      	cmp	r6, ip
 8008668:	d30e      	bcc.n	8008688 <__mdiff+0xec>
 800866a:	f10c 0203 	add.w	r2, ip, #3
 800866e:	1b52      	subs	r2, r2, r5
 8008670:	f022 0203 	bic.w	r2, r2, #3
 8008674:	3d03      	subs	r5, #3
 8008676:	45ac      	cmp	ip, r5
 8008678:	bf38      	it	cc
 800867a:	2200      	movcc	r2, #0
 800867c:	441a      	add	r2, r3
 800867e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008682:	b17b      	cbz	r3, 80086a4 <__mdiff+0x108>
 8008684:	6107      	str	r7, [r0, #16]
 8008686:	e7a3      	b.n	80085d0 <__mdiff+0x34>
 8008688:	f856 8b04 	ldr.w	r8, [r6], #4
 800868c:	fa11 f288 	uxtah	r2, r1, r8
 8008690:	1414      	asrs	r4, r2, #16
 8008692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008696:	b292      	uxth	r2, r2
 8008698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800869c:	f84e 2b04 	str.w	r2, [lr], #4
 80086a0:	1421      	asrs	r1, r4, #16
 80086a2:	e7e0      	b.n	8008666 <__mdiff+0xca>
 80086a4:	3f01      	subs	r7, #1
 80086a6:	e7ea      	b.n	800867e <__mdiff+0xe2>
 80086a8:	080092bb 	.word	0x080092bb
 80086ac:	0800932c 	.word	0x0800932c

080086b0 <__d2b>:
 80086b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086b4:	4689      	mov	r9, r1
 80086b6:	2101      	movs	r1, #1
 80086b8:	ec57 6b10 	vmov	r6, r7, d0
 80086bc:	4690      	mov	r8, r2
 80086be:	f7ff fccf 	bl	8008060 <_Balloc>
 80086c2:	4604      	mov	r4, r0
 80086c4:	b930      	cbnz	r0, 80086d4 <__d2b+0x24>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b25      	ldr	r3, [pc, #148]	; (8008760 <__d2b+0xb0>)
 80086ca:	4826      	ldr	r0, [pc, #152]	; (8008764 <__d2b+0xb4>)
 80086cc:	f240 310a 	movw	r1, #778	; 0x30a
 80086d0:	f000 f9a6 	bl	8008a20 <__assert_func>
 80086d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086dc:	bb35      	cbnz	r5, 800872c <__d2b+0x7c>
 80086de:	2e00      	cmp	r6, #0
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	d028      	beq.n	8008736 <__d2b+0x86>
 80086e4:	4668      	mov	r0, sp
 80086e6:	9600      	str	r6, [sp, #0]
 80086e8:	f7ff fd82 	bl	80081f0 <__lo0bits>
 80086ec:	9900      	ldr	r1, [sp, #0]
 80086ee:	b300      	cbz	r0, 8008732 <__d2b+0x82>
 80086f0:	9a01      	ldr	r2, [sp, #4]
 80086f2:	f1c0 0320 	rsb	r3, r0, #32
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	430b      	orrs	r3, r1
 80086fc:	40c2      	lsrs	r2, r0
 80086fe:	6163      	str	r3, [r4, #20]
 8008700:	9201      	str	r2, [sp, #4]
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	61a3      	str	r3, [r4, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bf14      	ite	ne
 800870a:	2202      	movne	r2, #2
 800870c:	2201      	moveq	r2, #1
 800870e:	6122      	str	r2, [r4, #16]
 8008710:	b1d5      	cbz	r5, 8008748 <__d2b+0x98>
 8008712:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008716:	4405      	add	r5, r0
 8008718:	f8c9 5000 	str.w	r5, [r9]
 800871c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008720:	f8c8 0000 	str.w	r0, [r8]
 8008724:	4620      	mov	r0, r4
 8008726:	b003      	add	sp, #12
 8008728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800872c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008730:	e7d5      	b.n	80086de <__d2b+0x2e>
 8008732:	6161      	str	r1, [r4, #20]
 8008734:	e7e5      	b.n	8008702 <__d2b+0x52>
 8008736:	a801      	add	r0, sp, #4
 8008738:	f7ff fd5a 	bl	80081f0 <__lo0bits>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	6163      	str	r3, [r4, #20]
 8008740:	2201      	movs	r2, #1
 8008742:	6122      	str	r2, [r4, #16]
 8008744:	3020      	adds	r0, #32
 8008746:	e7e3      	b.n	8008710 <__d2b+0x60>
 8008748:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800874c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008750:	f8c9 0000 	str.w	r0, [r9]
 8008754:	6918      	ldr	r0, [r3, #16]
 8008756:	f7ff fd2b 	bl	80081b0 <__hi0bits>
 800875a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800875e:	e7df      	b.n	8008720 <__d2b+0x70>
 8008760:	080092bb 	.word	0x080092bb
 8008764:	0800932c 	.word	0x0800932c

08008768 <_calloc_r>:
 8008768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800876a:	fba1 2402 	umull	r2, r4, r1, r2
 800876e:	b94c      	cbnz	r4, 8008784 <_calloc_r+0x1c>
 8008770:	4611      	mov	r1, r2
 8008772:	9201      	str	r2, [sp, #4]
 8008774:	f000 f87a 	bl	800886c <_malloc_r>
 8008778:	9a01      	ldr	r2, [sp, #4]
 800877a:	4605      	mov	r5, r0
 800877c:	b930      	cbnz	r0, 800878c <_calloc_r+0x24>
 800877e:	4628      	mov	r0, r5
 8008780:	b003      	add	sp, #12
 8008782:	bd30      	pop	{r4, r5, pc}
 8008784:	220c      	movs	r2, #12
 8008786:	6002      	str	r2, [r0, #0]
 8008788:	2500      	movs	r5, #0
 800878a:	e7f8      	b.n	800877e <_calloc_r+0x16>
 800878c:	4621      	mov	r1, r4
 800878e:	f7fd ff21 	bl	80065d4 <memset>
 8008792:	e7f4      	b.n	800877e <_calloc_r+0x16>

08008794 <_free_r>:
 8008794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008796:	2900      	cmp	r1, #0
 8008798:	d044      	beq.n	8008824 <_free_r+0x90>
 800879a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800879e:	9001      	str	r0, [sp, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f1a1 0404 	sub.w	r4, r1, #4
 80087a6:	bfb8      	it	lt
 80087a8:	18e4      	addlt	r4, r4, r3
 80087aa:	f000 f9bf 	bl	8008b2c <__malloc_lock>
 80087ae:	4a1e      	ldr	r2, [pc, #120]	; (8008828 <_free_r+0x94>)
 80087b0:	9801      	ldr	r0, [sp, #4]
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	b933      	cbnz	r3, 80087c4 <_free_r+0x30>
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	6014      	str	r4, [r2, #0]
 80087ba:	b003      	add	sp, #12
 80087bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c0:	f000 b9ba 	b.w	8008b38 <__malloc_unlock>
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	d908      	bls.n	80087da <_free_r+0x46>
 80087c8:	6825      	ldr	r5, [r4, #0]
 80087ca:	1961      	adds	r1, r4, r5
 80087cc:	428b      	cmp	r3, r1
 80087ce:	bf01      	itttt	eq
 80087d0:	6819      	ldreq	r1, [r3, #0]
 80087d2:	685b      	ldreq	r3, [r3, #4]
 80087d4:	1949      	addeq	r1, r1, r5
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	e7ed      	b.n	80087b6 <_free_r+0x22>
 80087da:	461a      	mov	r2, r3
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b10b      	cbz	r3, 80087e4 <_free_r+0x50>
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d9fa      	bls.n	80087da <_free_r+0x46>
 80087e4:	6811      	ldr	r1, [r2, #0]
 80087e6:	1855      	adds	r5, r2, r1
 80087e8:	42a5      	cmp	r5, r4
 80087ea:	d10b      	bne.n	8008804 <_free_r+0x70>
 80087ec:	6824      	ldr	r4, [r4, #0]
 80087ee:	4421      	add	r1, r4
 80087f0:	1854      	adds	r4, r2, r1
 80087f2:	42a3      	cmp	r3, r4
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	d1e0      	bne.n	80087ba <_free_r+0x26>
 80087f8:	681c      	ldr	r4, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	6053      	str	r3, [r2, #4]
 80087fe:	4421      	add	r1, r4
 8008800:	6011      	str	r1, [r2, #0]
 8008802:	e7da      	b.n	80087ba <_free_r+0x26>
 8008804:	d902      	bls.n	800880c <_free_r+0x78>
 8008806:	230c      	movs	r3, #12
 8008808:	6003      	str	r3, [r0, #0]
 800880a:	e7d6      	b.n	80087ba <_free_r+0x26>
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	1961      	adds	r1, r4, r5
 8008810:	428b      	cmp	r3, r1
 8008812:	bf04      	itt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	bf04      	itt	eq
 800881c:	1949      	addeq	r1, r1, r5
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	6054      	str	r4, [r2, #4]
 8008822:	e7ca      	b.n	80087ba <_free_r+0x26>
 8008824:	b003      	add	sp, #12
 8008826:	bd30      	pop	{r4, r5, pc}
 8008828:	200004bc 	.word	0x200004bc

0800882c <sbrk_aligned>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	4e0e      	ldr	r6, [pc, #56]	; (8008868 <sbrk_aligned+0x3c>)
 8008830:	460c      	mov	r4, r1
 8008832:	6831      	ldr	r1, [r6, #0]
 8008834:	4605      	mov	r5, r0
 8008836:	b911      	cbnz	r1, 800883e <sbrk_aligned+0x12>
 8008838:	f000 f88c 	bl	8008954 <_sbrk_r>
 800883c:	6030      	str	r0, [r6, #0]
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f000 f887 	bl	8008954 <_sbrk_r>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d00a      	beq.n	8008860 <sbrk_aligned+0x34>
 800884a:	1cc4      	adds	r4, r0, #3
 800884c:	f024 0403 	bic.w	r4, r4, #3
 8008850:	42a0      	cmp	r0, r4
 8008852:	d007      	beq.n	8008864 <sbrk_aligned+0x38>
 8008854:	1a21      	subs	r1, r4, r0
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f87c 	bl	8008954 <_sbrk_r>
 800885c:	3001      	adds	r0, #1
 800885e:	d101      	bne.n	8008864 <sbrk_aligned+0x38>
 8008860:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008864:	4620      	mov	r0, r4
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	200004c0 	.word	0x200004c0

0800886c <_malloc_r>:
 800886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008870:	1ccd      	adds	r5, r1, #3
 8008872:	f025 0503 	bic.w	r5, r5, #3
 8008876:	3508      	adds	r5, #8
 8008878:	2d0c      	cmp	r5, #12
 800887a:	bf38      	it	cc
 800887c:	250c      	movcc	r5, #12
 800887e:	2d00      	cmp	r5, #0
 8008880:	4607      	mov	r7, r0
 8008882:	db01      	blt.n	8008888 <_malloc_r+0x1c>
 8008884:	42a9      	cmp	r1, r5
 8008886:	d905      	bls.n	8008894 <_malloc_r+0x28>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	2600      	movs	r6, #0
 800888e:	4630      	mov	r0, r6
 8008890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008894:	4e2e      	ldr	r6, [pc, #184]	; (8008950 <_malloc_r+0xe4>)
 8008896:	f000 f949 	bl	8008b2c <__malloc_lock>
 800889a:	6833      	ldr	r3, [r6, #0]
 800889c:	461c      	mov	r4, r3
 800889e:	bb34      	cbnz	r4, 80088ee <_malloc_r+0x82>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4638      	mov	r0, r7
 80088a4:	f7ff ffc2 	bl	800882c <sbrk_aligned>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	4604      	mov	r4, r0
 80088ac:	d14d      	bne.n	800894a <_malloc_r+0xde>
 80088ae:	6834      	ldr	r4, [r6, #0]
 80088b0:	4626      	mov	r6, r4
 80088b2:	2e00      	cmp	r6, #0
 80088b4:	d140      	bne.n	8008938 <_malloc_r+0xcc>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	4631      	mov	r1, r6
 80088ba:	4638      	mov	r0, r7
 80088bc:	eb04 0803 	add.w	r8, r4, r3
 80088c0:	f000 f848 	bl	8008954 <_sbrk_r>
 80088c4:	4580      	cmp	r8, r0
 80088c6:	d13a      	bne.n	800893e <_malloc_r+0xd2>
 80088c8:	6821      	ldr	r1, [r4, #0]
 80088ca:	3503      	adds	r5, #3
 80088cc:	1a6d      	subs	r5, r5, r1
 80088ce:	f025 0503 	bic.w	r5, r5, #3
 80088d2:	3508      	adds	r5, #8
 80088d4:	2d0c      	cmp	r5, #12
 80088d6:	bf38      	it	cc
 80088d8:	250c      	movcc	r5, #12
 80088da:	4629      	mov	r1, r5
 80088dc:	4638      	mov	r0, r7
 80088de:	f7ff ffa5 	bl	800882c <sbrk_aligned>
 80088e2:	3001      	adds	r0, #1
 80088e4:	d02b      	beq.n	800893e <_malloc_r+0xd2>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	442b      	add	r3, r5
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	e00e      	b.n	800890c <_malloc_r+0xa0>
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	1b52      	subs	r2, r2, r5
 80088f2:	d41e      	bmi.n	8008932 <_malloc_r+0xc6>
 80088f4:	2a0b      	cmp	r2, #11
 80088f6:	d916      	bls.n	8008926 <_malloc_r+0xba>
 80088f8:	1961      	adds	r1, r4, r5
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	6025      	str	r5, [r4, #0]
 80088fe:	bf18      	it	ne
 8008900:	6059      	strne	r1, [r3, #4]
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	bf08      	it	eq
 8008906:	6031      	streq	r1, [r6, #0]
 8008908:	5162      	str	r2, [r4, r5]
 800890a:	604b      	str	r3, [r1, #4]
 800890c:	4638      	mov	r0, r7
 800890e:	f104 060b 	add.w	r6, r4, #11
 8008912:	f000 f911 	bl	8008b38 <__malloc_unlock>
 8008916:	f026 0607 	bic.w	r6, r6, #7
 800891a:	1d23      	adds	r3, r4, #4
 800891c:	1af2      	subs	r2, r6, r3
 800891e:	d0b6      	beq.n	800888e <_malloc_r+0x22>
 8008920:	1b9b      	subs	r3, r3, r6
 8008922:	50a3      	str	r3, [r4, r2]
 8008924:	e7b3      	b.n	800888e <_malloc_r+0x22>
 8008926:	6862      	ldr	r2, [r4, #4]
 8008928:	42a3      	cmp	r3, r4
 800892a:	bf0c      	ite	eq
 800892c:	6032      	streq	r2, [r6, #0]
 800892e:	605a      	strne	r2, [r3, #4]
 8008930:	e7ec      	b.n	800890c <_malloc_r+0xa0>
 8008932:	4623      	mov	r3, r4
 8008934:	6864      	ldr	r4, [r4, #4]
 8008936:	e7b2      	b.n	800889e <_malloc_r+0x32>
 8008938:	4634      	mov	r4, r6
 800893a:	6876      	ldr	r6, [r6, #4]
 800893c:	e7b9      	b.n	80088b2 <_malloc_r+0x46>
 800893e:	230c      	movs	r3, #12
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	4638      	mov	r0, r7
 8008944:	f000 f8f8 	bl	8008b38 <__malloc_unlock>
 8008948:	e7a1      	b.n	800888e <_malloc_r+0x22>
 800894a:	6025      	str	r5, [r4, #0]
 800894c:	e7de      	b.n	800890c <_malloc_r+0xa0>
 800894e:	bf00      	nop
 8008950:	200004bc 	.word	0x200004bc

08008954 <_sbrk_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d06      	ldr	r5, [pc, #24]	; (8008970 <_sbrk_r+0x1c>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7f9 fc70 	bl	8002244 <_sbrk>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_sbrk_r+0x1a>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_sbrk_r+0x1a>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	200004c4 	.word	0x200004c4

08008974 <__sread>:
 8008974:	b510      	push	{r4, lr}
 8008976:	460c      	mov	r4, r1
 8008978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897c:	f000 fa3c 	bl	8008df8 <_read_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	bfab      	itete	ge
 8008984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008986:	89a3      	ldrhlt	r3, [r4, #12]
 8008988:	181b      	addge	r3, r3, r0
 800898a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800898e:	bfac      	ite	ge
 8008990:	6563      	strge	r3, [r4, #84]	; 0x54
 8008992:	81a3      	strhlt	r3, [r4, #12]
 8008994:	bd10      	pop	{r4, pc}

08008996 <__swrite>:
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	461f      	mov	r7, r3
 800899c:	898b      	ldrh	r3, [r1, #12]
 800899e:	05db      	lsls	r3, r3, #23
 80089a0:	4605      	mov	r5, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	4616      	mov	r6, r2
 80089a6:	d505      	bpl.n	80089b4 <__swrite+0x1e>
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2302      	movs	r3, #2
 80089ae:	2200      	movs	r2, #0
 80089b0:	f000 f898 	bl	8008ae4 <_lseek_r>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	4632      	mov	r2, r6
 80089c2:	463b      	mov	r3, r7
 80089c4:	4628      	mov	r0, r5
 80089c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ca:	f000 b817 	b.w	80089fc <_write_r>

080089ce <__sseek>:
 80089ce:	b510      	push	{r4, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d6:	f000 f885 	bl	8008ae4 <_lseek_r>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	bf15      	itete	ne
 80089e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ea:	81a3      	strheq	r3, [r4, #12]
 80089ec:	bf18      	it	ne
 80089ee:	81a3      	strhne	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__sclose>:
 80089f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f6:	f000 b831 	b.w	8008a5c <_close_r>
	...

080089fc <_write_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d07      	ldr	r5, [pc, #28]	; (8008a1c <_write_r+0x20>)
 8008a00:	4604      	mov	r4, r0
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	602a      	str	r2, [r5, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f7f9 f9ce 	bl	8001dac <_write>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_write_r+0x1e>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_write_r+0x1e>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200004c4 	.word	0x200004c4

08008a20 <__assert_func>:
 8008a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a22:	4614      	mov	r4, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <__assert_func+0x2c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	68d8      	ldr	r0, [r3, #12]
 8008a2e:	b14c      	cbz	r4, 8008a44 <__assert_func+0x24>
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <__assert_func+0x30>)
 8008a32:	9100      	str	r1, [sp, #0]
 8008a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a38:	4906      	ldr	r1, [pc, #24]	; (8008a54 <__assert_func+0x34>)
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	f000 f81e 	bl	8008a7c <fiprintf>
 8008a40:	f000 faba 	bl	8008fb8 <abort>
 8008a44:	4b04      	ldr	r3, [pc, #16]	; (8008a58 <__assert_func+0x38>)
 8008a46:	461c      	mov	r4, r3
 8008a48:	e7f3      	b.n	8008a32 <__assert_func+0x12>
 8008a4a:	bf00      	nop
 8008a4c:	2000000c 	.word	0x2000000c
 8008a50:	08009484 	.word	0x08009484
 8008a54:	08009491 	.word	0x08009491
 8008a58:	080094bf 	.word	0x080094bf

08008a5c <_close_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d06      	ldr	r5, [pc, #24]	; (8008a78 <_close_r+0x1c>)
 8008a60:	2300      	movs	r3, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	f7f9 f9ca 	bl	8001e00 <_close>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_close_r+0x1a>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_close_r+0x1a>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	200004c4 	.word	0x200004c4

08008a7c <fiprintf>:
 8008a7c:	b40e      	push	{r1, r2, r3}
 8008a7e:	b503      	push	{r0, r1, lr}
 8008a80:	4601      	mov	r1, r0
 8008a82:	ab03      	add	r3, sp, #12
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <fiprintf+0x20>)
 8008a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	f000 f883 	bl	8008b98 <_vfiprintf_r>
 8008a92:	b002      	add	sp, #8
 8008a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a98:	b003      	add	sp, #12
 8008a9a:	4770      	bx	lr
 8008a9c:	2000000c 	.word	0x2000000c

08008aa0 <_fstat_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	; (8008ac0 <_fstat_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f7f9 f9f7 	bl	8001ea0 <_fstat>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_fstat_r+0x1c>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_fstat_r+0x1c>
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	200004c4 	.word	0x200004c4

08008ac4 <_isatty_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_isatty_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f9 f956 	bl	8001d80 <_isatty>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_isatty_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_isatty_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	200004c4 	.word	0x200004c4

08008ae4 <_lseek_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	; (8008b04 <_lseek_r+0x20>)
 8008ae8:	4604      	mov	r4, r0
 8008aea:	4608      	mov	r0, r1
 8008aec:	4611      	mov	r1, r2
 8008aee:	2200      	movs	r2, #0
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f7f9 f99b 	bl	8001e2e <_lseek>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_lseek_r+0x1e>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_lseek_r+0x1e>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	200004c4 	.word	0x200004c4

08008b08 <__ascii_mbtowc>:
 8008b08:	b082      	sub	sp, #8
 8008b0a:	b901      	cbnz	r1, 8008b0e <__ascii_mbtowc+0x6>
 8008b0c:	a901      	add	r1, sp, #4
 8008b0e:	b142      	cbz	r2, 8008b22 <__ascii_mbtowc+0x1a>
 8008b10:	b14b      	cbz	r3, 8008b26 <__ascii_mbtowc+0x1e>
 8008b12:	7813      	ldrb	r3, [r2, #0]
 8008b14:	600b      	str	r3, [r1, #0]
 8008b16:	7812      	ldrb	r2, [r2, #0]
 8008b18:	1e10      	subs	r0, r2, #0
 8008b1a:	bf18      	it	ne
 8008b1c:	2001      	movne	r0, #1
 8008b1e:	b002      	add	sp, #8
 8008b20:	4770      	bx	lr
 8008b22:	4610      	mov	r0, r2
 8008b24:	e7fb      	b.n	8008b1e <__ascii_mbtowc+0x16>
 8008b26:	f06f 0001 	mvn.w	r0, #1
 8008b2a:	e7f8      	b.n	8008b1e <__ascii_mbtowc+0x16>

08008b2c <__malloc_lock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__malloc_lock+0x8>)
 8008b2e:	f7ff ba1a 	b.w	8007f66 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	200004b8 	.word	0x200004b8

08008b38 <__malloc_unlock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__malloc_unlock+0x8>)
 8008b3a:	f7ff ba15 	b.w	8007f68 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	200004b8 	.word	0x200004b8

08008b44 <__sfputc_r>:
 8008b44:	6893      	ldr	r3, [r2, #8]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	b410      	push	{r4}
 8008b4c:	6093      	str	r3, [r2, #8]
 8008b4e:	da08      	bge.n	8008b62 <__sfputc_r+0x1e>
 8008b50:	6994      	ldr	r4, [r2, #24]
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	db01      	blt.n	8008b5a <__sfputc_r+0x16>
 8008b56:	290a      	cmp	r1, #10
 8008b58:	d103      	bne.n	8008b62 <__sfputc_r+0x1e>
 8008b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b5e:	f000 b95d 	b.w	8008e1c <__swbuf_r>
 8008b62:	6813      	ldr	r3, [r2, #0]
 8008b64:	1c58      	adds	r0, r3, #1
 8008b66:	6010      	str	r0, [r2, #0]
 8008b68:	7019      	strb	r1, [r3, #0]
 8008b6a:	4608      	mov	r0, r1
 8008b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <__sfputs_r>:
 8008b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b74:	4606      	mov	r6, r0
 8008b76:	460f      	mov	r7, r1
 8008b78:	4614      	mov	r4, r2
 8008b7a:	18d5      	adds	r5, r2, r3
 8008b7c:	42ac      	cmp	r4, r5
 8008b7e:	d101      	bne.n	8008b84 <__sfputs_r+0x12>
 8008b80:	2000      	movs	r0, #0
 8008b82:	e007      	b.n	8008b94 <__sfputs_r+0x22>
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	463a      	mov	r2, r7
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ffda 	bl	8008b44 <__sfputc_r>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d1f3      	bne.n	8008b7c <__sfputs_r+0xa>
 8008b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b98 <_vfiprintf_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	b09d      	sub	sp, #116	; 0x74
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	4698      	mov	r8, r3
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	b118      	cbz	r0, 8008bb0 <_vfiprintf_r+0x18>
 8008ba8:	6983      	ldr	r3, [r0, #24]
 8008baa:	b90b      	cbnz	r3, 8008bb0 <_vfiprintf_r+0x18>
 8008bac:	f7ff f938 	bl	8007e20 <__sinit>
 8008bb0:	4b89      	ldr	r3, [pc, #548]	; (8008dd8 <_vfiprintf_r+0x240>)
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	d11b      	bne.n	8008bee <_vfiprintf_r+0x56>
 8008bb6:	6875      	ldr	r5, [r6, #4]
 8008bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bba:	07d9      	lsls	r1, r3, #31
 8008bbc:	d405      	bmi.n	8008bca <_vfiprintf_r+0x32>
 8008bbe:	89ab      	ldrh	r3, [r5, #12]
 8008bc0:	059a      	lsls	r2, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <_vfiprintf_r+0x32>
 8008bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc6:	f7ff f9ce 	bl	8007f66 <__retarget_lock_acquire_recursive>
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	071b      	lsls	r3, r3, #28
 8008bce:	d501      	bpl.n	8008bd4 <_vfiprintf_r+0x3c>
 8008bd0:	692b      	ldr	r3, [r5, #16]
 8008bd2:	b9eb      	cbnz	r3, 8008c10 <_vfiprintf_r+0x78>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f980 	bl	8008edc <__swsetup_r>
 8008bdc:	b1c0      	cbz	r0, 8008c10 <_vfiprintf_r+0x78>
 8008bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be0:	07dc      	lsls	r4, r3, #31
 8008be2:	d50e      	bpl.n	8008c02 <_vfiprintf_r+0x6a>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be8:	b01d      	add	sp, #116	; 0x74
 8008bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	4b7b      	ldr	r3, [pc, #492]	; (8008ddc <_vfiprintf_r+0x244>)
 8008bf0:	429d      	cmp	r5, r3
 8008bf2:	d101      	bne.n	8008bf8 <_vfiprintf_r+0x60>
 8008bf4:	68b5      	ldr	r5, [r6, #8]
 8008bf6:	e7df      	b.n	8008bb8 <_vfiprintf_r+0x20>
 8008bf8:	4b79      	ldr	r3, [pc, #484]	; (8008de0 <_vfiprintf_r+0x248>)
 8008bfa:	429d      	cmp	r5, r3
 8008bfc:	bf08      	it	eq
 8008bfe:	68f5      	ldreq	r5, [r6, #12]
 8008c00:	e7da      	b.n	8008bb8 <_vfiprintf_r+0x20>
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	0598      	lsls	r0, r3, #22
 8008c06:	d4ed      	bmi.n	8008be4 <_vfiprintf_r+0x4c>
 8008c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c0a:	f7ff f9ad 	bl	8007f68 <__retarget_lock_release_recursive>
 8008c0e:	e7e9      	b.n	8008be4 <_vfiprintf_r+0x4c>
 8008c10:	2300      	movs	r3, #0
 8008c12:	9309      	str	r3, [sp, #36]	; 0x24
 8008c14:	2320      	movs	r3, #32
 8008c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1e:	2330      	movs	r3, #48	; 0x30
 8008c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008de4 <_vfiprintf_r+0x24c>
 8008c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	469a      	mov	sl, r3
 8008c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c34:	b10a      	cbz	r2, 8008c3a <_vfiprintf_r+0xa2>
 8008c36:	2a25      	cmp	r2, #37	; 0x25
 8008c38:	d1f9      	bne.n	8008c2e <_vfiprintf_r+0x96>
 8008c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3e:	d00b      	beq.n	8008c58 <_vfiprintf_r+0xc0>
 8008c40:	465b      	mov	r3, fp
 8008c42:	4622      	mov	r2, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ff93 	bl	8008b72 <__sfputs_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f000 80aa 	beq.w	8008da6 <_vfiprintf_r+0x20e>
 8008c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c54:	445a      	add	r2, fp
 8008c56:	9209      	str	r2, [sp, #36]	; 0x24
 8008c58:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80a2 	beq.w	8008da6 <_vfiprintf_r+0x20e>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6c:	f10a 0a01 	add.w	sl, sl, #1
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c78:	931a      	str	r3, [sp, #104]	; 0x68
 8008c7a:	4654      	mov	r4, sl
 8008c7c:	2205      	movs	r2, #5
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	4858      	ldr	r0, [pc, #352]	; (8008de4 <_vfiprintf_r+0x24c>)
 8008c84:	f7f7 fae4 	bl	8000250 <memchr>
 8008c88:	9a04      	ldr	r2, [sp, #16]
 8008c8a:	b9d8      	cbnz	r0, 8008cc4 <_vfiprintf_r+0x12c>
 8008c8c:	06d1      	lsls	r1, r2, #27
 8008c8e:	bf44      	itt	mi
 8008c90:	2320      	movmi	r3, #32
 8008c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c96:	0713      	lsls	r3, r2, #28
 8008c98:	bf44      	itt	mi
 8008c9a:	232b      	movmi	r3, #43	; 0x2b
 8008c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca6:	d015      	beq.n	8008cd4 <_vfiprintf_r+0x13c>
 8008ca8:	9a07      	ldr	r2, [sp, #28]
 8008caa:	4654      	mov	r4, sl
 8008cac:	2000      	movs	r0, #0
 8008cae:	f04f 0c0a 	mov.w	ip, #10
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb8:	3b30      	subs	r3, #48	; 0x30
 8008cba:	2b09      	cmp	r3, #9
 8008cbc:	d94e      	bls.n	8008d5c <_vfiprintf_r+0x1c4>
 8008cbe:	b1b0      	cbz	r0, 8008cee <_vfiprintf_r+0x156>
 8008cc0:	9207      	str	r2, [sp, #28]
 8008cc2:	e014      	b.n	8008cee <_vfiprintf_r+0x156>
 8008cc4:	eba0 0308 	sub.w	r3, r0, r8
 8008cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	46a2      	mov	sl, r4
 8008cd2:	e7d2      	b.n	8008c7a <_vfiprintf_r+0xe2>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	1d19      	adds	r1, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	9103      	str	r1, [sp, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfbb      	ittet	lt
 8008ce0:	425b      	neglt	r3, r3
 8008ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce6:	9307      	strge	r3, [sp, #28]
 8008ce8:	9307      	strlt	r3, [sp, #28]
 8008cea:	bfb8      	it	lt
 8008cec:	9204      	strlt	r2, [sp, #16]
 8008cee:	7823      	ldrb	r3, [r4, #0]
 8008cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cf2:	d10c      	bne.n	8008d0e <_vfiprintf_r+0x176>
 8008cf4:	7863      	ldrb	r3, [r4, #1]
 8008cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf8:	d135      	bne.n	8008d66 <_vfiprintf_r+0x1ce>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	1d1a      	adds	r2, r3, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	9203      	str	r2, [sp, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfb8      	it	lt
 8008d06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d0a:	3402      	adds	r4, #2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008df4 <_vfiprintf_r+0x25c>
 8008d12:	7821      	ldrb	r1, [r4, #0]
 8008d14:	2203      	movs	r2, #3
 8008d16:	4650      	mov	r0, sl
 8008d18:	f7f7 fa9a 	bl	8000250 <memchr>
 8008d1c:	b140      	cbz	r0, 8008d30 <_vfiprintf_r+0x198>
 8008d1e:	2340      	movs	r3, #64	; 0x40
 8008d20:	eba0 000a 	sub.w	r0, r0, sl
 8008d24:	fa03 f000 	lsl.w	r0, r3, r0
 8008d28:	9b04      	ldr	r3, [sp, #16]
 8008d2a:	4303      	orrs	r3, r0
 8008d2c:	3401      	adds	r4, #1
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d34:	482c      	ldr	r0, [pc, #176]	; (8008de8 <_vfiprintf_r+0x250>)
 8008d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d3a:	2206      	movs	r2, #6
 8008d3c:	f7f7 fa88 	bl	8000250 <memchr>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d03f      	beq.n	8008dc4 <_vfiprintf_r+0x22c>
 8008d44:	4b29      	ldr	r3, [pc, #164]	; (8008dec <_vfiprintf_r+0x254>)
 8008d46:	bb1b      	cbnz	r3, 8008d90 <_vfiprintf_r+0x1f8>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	3307      	adds	r3, #7
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	3308      	adds	r3, #8
 8008d52:	9303      	str	r3, [sp, #12]
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	443b      	add	r3, r7
 8008d58:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5a:	e767      	b.n	8008c2c <_vfiprintf_r+0x94>
 8008d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d60:	460c      	mov	r4, r1
 8008d62:	2001      	movs	r0, #1
 8008d64:	e7a5      	b.n	8008cb2 <_vfiprintf_r+0x11a>
 8008d66:	2300      	movs	r3, #0
 8008d68:	3401      	adds	r4, #1
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f04f 0c0a 	mov.w	ip, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d78:	3a30      	subs	r2, #48	; 0x30
 8008d7a:	2a09      	cmp	r2, #9
 8008d7c:	d903      	bls.n	8008d86 <_vfiprintf_r+0x1ee>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0c5      	beq.n	8008d0e <_vfiprintf_r+0x176>
 8008d82:	9105      	str	r1, [sp, #20]
 8008d84:	e7c3      	b.n	8008d0e <_vfiprintf_r+0x176>
 8008d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e7f0      	b.n	8008d72 <_vfiprintf_r+0x1da>
 8008d90:	ab03      	add	r3, sp, #12
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	462a      	mov	r2, r5
 8008d96:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <_vfiprintf_r+0x258>)
 8008d98:	a904      	add	r1, sp, #16
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7fd fcb4 	bl	8006708 <_printf_float>
 8008da0:	4607      	mov	r7, r0
 8008da2:	1c78      	adds	r0, r7, #1
 8008da4:	d1d6      	bne.n	8008d54 <_vfiprintf_r+0x1bc>
 8008da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d405      	bmi.n	8008db8 <_vfiprintf_r+0x220>
 8008dac:	89ab      	ldrh	r3, [r5, #12]
 8008dae:	059a      	lsls	r2, r3, #22
 8008db0:	d402      	bmi.n	8008db8 <_vfiprintf_r+0x220>
 8008db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008db4:	f7ff f8d8 	bl	8007f68 <__retarget_lock_release_recursive>
 8008db8:	89ab      	ldrh	r3, [r5, #12]
 8008dba:	065b      	lsls	r3, r3, #25
 8008dbc:	f53f af12 	bmi.w	8008be4 <_vfiprintf_r+0x4c>
 8008dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dc2:	e711      	b.n	8008be8 <_vfiprintf_r+0x50>
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <_vfiprintf_r+0x258>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7fd ff26 	bl	8006c20 <_printf_i>
 8008dd4:	e7e4      	b.n	8008da0 <_vfiprintf_r+0x208>
 8008dd6:	bf00      	nop
 8008dd8:	080092ec 	.word	0x080092ec
 8008ddc:	0800930c 	.word	0x0800930c
 8008de0:	080092cc 	.word	0x080092cc
 8008de4:	080094ca 	.word	0x080094ca
 8008de8:	080094d4 	.word	0x080094d4
 8008dec:	08006709 	.word	0x08006709
 8008df0:	08008b73 	.word	0x08008b73
 8008df4:	080094d0 	.word	0x080094d0

08008df8 <_read_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	; (8008e18 <_read_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f9 f822 	bl	8001e50 <_read>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_read_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_read_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	200004c4 	.word	0x200004c4

08008e1c <__swbuf_r>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	460e      	mov	r6, r1
 8008e20:	4614      	mov	r4, r2
 8008e22:	4605      	mov	r5, r0
 8008e24:	b118      	cbz	r0, 8008e2e <__swbuf_r+0x12>
 8008e26:	6983      	ldr	r3, [r0, #24]
 8008e28:	b90b      	cbnz	r3, 8008e2e <__swbuf_r+0x12>
 8008e2a:	f7fe fff9 	bl	8007e20 <__sinit>
 8008e2e:	4b21      	ldr	r3, [pc, #132]	; (8008eb4 <__swbuf_r+0x98>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	d12b      	bne.n	8008e8c <__swbuf_r+0x70>
 8008e34:	686c      	ldr	r4, [r5, #4]
 8008e36:	69a3      	ldr	r3, [r4, #24]
 8008e38:	60a3      	str	r3, [r4, #8]
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	071a      	lsls	r2, r3, #28
 8008e3e:	d52f      	bpl.n	8008ea0 <__swbuf_r+0x84>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	b36b      	cbz	r3, 8008ea0 <__swbuf_r+0x84>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	1ac0      	subs	r0, r0, r3
 8008e4a:	6963      	ldr	r3, [r4, #20]
 8008e4c:	b2f6      	uxtb	r6, r6
 8008e4e:	4283      	cmp	r3, r0
 8008e50:	4637      	mov	r7, r6
 8008e52:	dc04      	bgt.n	8008e5e <__swbuf_r+0x42>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7fe ff4e 	bl	8007cf8 <_fflush_r>
 8008e5c:	bb30      	cbnz	r0, 8008eac <__swbuf_r+0x90>
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	60a3      	str	r3, [r4, #8]
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	6022      	str	r2, [r4, #0]
 8008e6a:	701e      	strb	r6, [r3, #0]
 8008e6c:	6963      	ldr	r3, [r4, #20]
 8008e6e:	3001      	adds	r0, #1
 8008e70:	4283      	cmp	r3, r0
 8008e72:	d004      	beq.n	8008e7e <__swbuf_r+0x62>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	07db      	lsls	r3, r3, #31
 8008e78:	d506      	bpl.n	8008e88 <__swbuf_r+0x6c>
 8008e7a:	2e0a      	cmp	r6, #10
 8008e7c:	d104      	bne.n	8008e88 <__swbuf_r+0x6c>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f7fe ff39 	bl	8007cf8 <_fflush_r>
 8008e86:	b988      	cbnz	r0, 8008eac <__swbuf_r+0x90>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <__swbuf_r+0x9c>)
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	d101      	bne.n	8008e96 <__swbuf_r+0x7a>
 8008e92:	68ac      	ldr	r4, [r5, #8]
 8008e94:	e7cf      	b.n	8008e36 <__swbuf_r+0x1a>
 8008e96:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <__swbuf_r+0xa0>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	bf08      	it	eq
 8008e9c:	68ec      	ldreq	r4, [r5, #12]
 8008e9e:	e7ca      	b.n	8008e36 <__swbuf_r+0x1a>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f81a 	bl	8008edc <__swsetup_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d0cb      	beq.n	8008e44 <__swbuf_r+0x28>
 8008eac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008eb0:	e7ea      	b.n	8008e88 <__swbuf_r+0x6c>
 8008eb2:	bf00      	nop
 8008eb4:	080092ec 	.word	0x080092ec
 8008eb8:	0800930c 	.word	0x0800930c
 8008ebc:	080092cc 	.word	0x080092cc

08008ec0 <__ascii_wctomb>:
 8008ec0:	b149      	cbz	r1, 8008ed6 <__ascii_wctomb+0x16>
 8008ec2:	2aff      	cmp	r2, #255	; 0xff
 8008ec4:	bf85      	ittet	hi
 8008ec6:	238a      	movhi	r3, #138	; 0x8a
 8008ec8:	6003      	strhi	r3, [r0, #0]
 8008eca:	700a      	strbls	r2, [r1, #0]
 8008ecc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008ed0:	bf98      	it	ls
 8008ed2:	2001      	movls	r0, #1
 8008ed4:	4770      	bx	lr
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4770      	bx	lr
	...

08008edc <__swsetup_r>:
 8008edc:	4b32      	ldr	r3, [pc, #200]	; (8008fa8 <__swsetup_r+0xcc>)
 8008ede:	b570      	push	{r4, r5, r6, lr}
 8008ee0:	681d      	ldr	r5, [r3, #0]
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	b125      	cbz	r5, 8008ef2 <__swsetup_r+0x16>
 8008ee8:	69ab      	ldr	r3, [r5, #24]
 8008eea:	b913      	cbnz	r3, 8008ef2 <__swsetup_r+0x16>
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7fe ff97 	bl	8007e20 <__sinit>
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <__swsetup_r+0xd0>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d10f      	bne.n	8008f18 <__swsetup_r+0x3c>
 8008ef8:	686c      	ldr	r4, [r5, #4]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f00:	0719      	lsls	r1, r3, #28
 8008f02:	d42c      	bmi.n	8008f5e <__swsetup_r+0x82>
 8008f04:	06dd      	lsls	r5, r3, #27
 8008f06:	d411      	bmi.n	8008f2c <__swsetup_r+0x50>
 8008f08:	2309      	movs	r3, #9
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f16:	e03e      	b.n	8008f96 <__swsetup_r+0xba>
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <__swsetup_r+0xd4>)
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	d101      	bne.n	8008f22 <__swsetup_r+0x46>
 8008f1e:	68ac      	ldr	r4, [r5, #8]
 8008f20:	e7eb      	b.n	8008efa <__swsetup_r+0x1e>
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <__swsetup_r+0xd8>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	bf08      	it	eq
 8008f28:	68ec      	ldreq	r4, [r5, #12]
 8008f2a:	e7e6      	b.n	8008efa <__swsetup_r+0x1e>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x7a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x6a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x66>
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff fc29 	bl	8008794 <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	; 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x9a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x9a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff f81f 	bl	8007fb4 <__smakebuf_r>
 8008f76:	89a0      	ldrh	r0, [r4, #12]
 8008f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f7c:	f010 0301 	ands.w	r3, r0, #1
 8008f80:	d00a      	beq.n	8008f98 <__swsetup_r+0xbc>
 8008f82:	2300      	movs	r3, #0
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	6963      	ldr	r3, [r4, #20]
 8008f88:	425b      	negs	r3, r3
 8008f8a:	61a3      	str	r3, [r4, #24]
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b943      	cbnz	r3, 8008fa2 <__swsetup_r+0xc6>
 8008f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f94:	d1ba      	bne.n	8008f0c <__swsetup_r+0x30>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	0781      	lsls	r1, r0, #30
 8008f9a:	bf58      	it	pl
 8008f9c:	6963      	ldrpl	r3, [r4, #20]
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	e7f4      	b.n	8008f8c <__swsetup_r+0xb0>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e7f7      	b.n	8008f96 <__swsetup_r+0xba>
 8008fa6:	bf00      	nop
 8008fa8:	2000000c 	.word	0x2000000c
 8008fac:	080092ec 	.word	0x080092ec
 8008fb0:	0800930c 	.word	0x0800930c
 8008fb4:	080092cc 	.word	0x080092cc

08008fb8 <abort>:
 8008fb8:	b508      	push	{r3, lr}
 8008fba:	2006      	movs	r0, #6
 8008fbc:	f000 f82c 	bl	8009018 <raise>
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	f000 f8c9 	bl	8009158 <_exit>

08008fc6 <_raise_r>:
 8008fc6:	291f      	cmp	r1, #31
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	d904      	bls.n	8008fda <_raise_r+0x14>
 8008fd0:	2316      	movs	r3, #22
 8008fd2:	6003      	str	r3, [r0, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fdc:	b112      	cbz	r2, 8008fe4 <_raise_r+0x1e>
 8008fde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe2:	b94b      	cbnz	r3, 8008ff8 <_raise_r+0x32>
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 f831 	bl	800904c <_getpid_r>
 8008fea:	462a      	mov	r2, r5
 8008fec:	4601      	mov	r1, r0
 8008fee:	4620      	mov	r0, r4
 8008ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff4:	f000 b818 	b.w	8009028 <_kill_r>
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d00a      	beq.n	8009012 <_raise_r+0x4c>
 8008ffc:	1c59      	adds	r1, r3, #1
 8008ffe:	d103      	bne.n	8009008 <_raise_r+0x42>
 8009000:	2316      	movs	r3, #22
 8009002:	6003      	str	r3, [r0, #0]
 8009004:	2001      	movs	r0, #1
 8009006:	e7e7      	b.n	8008fd8 <_raise_r+0x12>
 8009008:	2400      	movs	r4, #0
 800900a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800900e:	4628      	mov	r0, r5
 8009010:	4798      	blx	r3
 8009012:	2000      	movs	r0, #0
 8009014:	e7e0      	b.n	8008fd8 <_raise_r+0x12>
	...

08009018 <raise>:
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <raise+0xc>)
 800901a:	4601      	mov	r1, r0
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f7ff bfd2 	b.w	8008fc6 <_raise_r>
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c

08009028 <_kill_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	; (8009048 <_kill_r+0x20>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f000 f887 	bl	8009148 <_kill>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d102      	bne.n	8009044 <_kill_r+0x1c>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b103      	cbz	r3, 8009044 <_kill_r+0x1c>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	200004c4 	.word	0x200004c4

0800904c <_getpid_r>:
 800904c:	f000 b874 	b.w	8009138 <_getpid>

08009050 <fmaxf>:
 8009050:	b508      	push	{r3, lr}
 8009052:	ed2d 8b02 	vpush	{d8}
 8009056:	eeb0 8a40 	vmov.f32	s16, s0
 800905a:	eef0 8a60 	vmov.f32	s17, s1
 800905e:	f000 f82d 	bl	80090bc <__fpclassifyf>
 8009062:	b148      	cbz	r0, 8009078 <fmaxf+0x28>
 8009064:	eeb0 0a68 	vmov.f32	s0, s17
 8009068:	f000 f828 	bl	80090bc <__fpclassifyf>
 800906c:	b130      	cbz	r0, 800907c <fmaxf+0x2c>
 800906e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009076:	dc01      	bgt.n	800907c <fmaxf+0x2c>
 8009078:	eeb0 8a68 	vmov.f32	s16, s17
 800907c:	eeb0 0a48 	vmov.f32	s0, s16
 8009080:	ecbd 8b02 	vpop	{d8}
 8009084:	bd08      	pop	{r3, pc}

08009086 <fminf>:
 8009086:	b508      	push	{r3, lr}
 8009088:	ed2d 8b02 	vpush	{d8}
 800908c:	eeb0 8a40 	vmov.f32	s16, s0
 8009090:	eef0 8a60 	vmov.f32	s17, s1
 8009094:	f000 f812 	bl	80090bc <__fpclassifyf>
 8009098:	b148      	cbz	r0, 80090ae <fminf+0x28>
 800909a:	eeb0 0a68 	vmov.f32	s0, s17
 800909e:	f000 f80d 	bl	80090bc <__fpclassifyf>
 80090a2:	b130      	cbz	r0, 80090b2 <fminf+0x2c>
 80090a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80090a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ac:	d401      	bmi.n	80090b2 <fminf+0x2c>
 80090ae:	eeb0 8a68 	vmov.f32	s16, s17
 80090b2:	eeb0 0a48 	vmov.f32	s0, s16
 80090b6:	ecbd 8b02 	vpop	{d8}
 80090ba:	bd08      	pop	{r3, pc}

080090bc <__fpclassifyf>:
 80090bc:	ee10 3a10 	vmov	r3, s0
 80090c0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80090c4:	d00d      	beq.n	80090e2 <__fpclassifyf+0x26>
 80090c6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80090ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80090ce:	d30a      	bcc.n	80090e6 <__fpclassifyf+0x2a>
 80090d0:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <__fpclassifyf+0x34>)
 80090d2:	1e42      	subs	r2, r0, #1
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d908      	bls.n	80090ea <__fpclassifyf+0x2e>
 80090d8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80090dc:	4258      	negs	r0, r3
 80090de:	4158      	adcs	r0, r3
 80090e0:	4770      	bx	lr
 80090e2:	2002      	movs	r0, #2
 80090e4:	4770      	bx	lr
 80090e6:	2004      	movs	r0, #4
 80090e8:	4770      	bx	lr
 80090ea:	2003      	movs	r0, #3
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	007ffffe 	.word	0x007ffffe

080090f4 <sqrtf>:
 80090f4:	b508      	push	{r3, lr}
 80090f6:	ed2d 8b02 	vpush	{d8}
 80090fa:	eeb0 8a40 	vmov.f32	s16, s0
 80090fe:	f000 f817 	bl	8009130 <__ieee754_sqrtf>
 8009102:	eeb4 8a48 	vcmp.f32	s16, s16
 8009106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910a:	d60c      	bvs.n	8009126 <sqrtf+0x32>
 800910c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800912c <sqrtf+0x38>
 8009110:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009118:	d505      	bpl.n	8009126 <sqrtf+0x32>
 800911a:	f7fd fa31 	bl	8006580 <__errno>
 800911e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009122:	2321      	movs	r3, #33	; 0x21
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	ecbd 8b02 	vpop	{d8}
 800912a:	bd08      	pop	{r3, pc}
 800912c:	00000000 	.word	0x00000000

08009130 <__ieee754_sqrtf>:
 8009130:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009134:	4770      	bx	lr
	...

08009138 <_getpid>:
 8009138:	4b02      	ldr	r3, [pc, #8]	; (8009144 <_getpid+0xc>)
 800913a:	2258      	movs	r2, #88	; 0x58
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009142:	4770      	bx	lr
 8009144:	200004c4 	.word	0x200004c4

08009148 <_kill>:
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <_kill+0xc>)
 800914a:	2258      	movs	r2, #88	; 0x58
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009152:	4770      	bx	lr
 8009154:	200004c4 	.word	0x200004c4

08009158 <_exit>:
 8009158:	e7fe      	b.n	8009158 <_exit>
	...

0800915c <_init>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr

08009168 <_fini>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr
