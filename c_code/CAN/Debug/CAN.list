
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000928c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08009490  08009490  00019490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009954  08009954  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800995c  0800995c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001dc  08009b40  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08009b40  00020480  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b40  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b1  00000000  00000000  00035d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005267  00000000  00000000  0003a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bfc  00000000  00000000  0003f8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107a58  00000000  00000000  000544a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015befb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  0015bf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001612f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00161330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08009474 	.word	0x08009474

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08009474 	.word	0x08009474

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <look1_iflf_binlcpw>:
/* Real-time model */
static RT_MODEL_controller_T controller_M_;
RT_MODEL_controller_T *const controller_M = &controller_M_;
real32_T look1_iflf_binlcpw(real32_T u0, const real32_T bp0[], const real32_T
  table[], uint32_T maxIndex)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80005fe:	60b8      	str	r0, [r7, #8]
 8000600:	6079      	str	r1, [r7, #4]
 8000602:	603a      	str	r2, [r7, #0]
     Extrapolation method: 'Clip'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	ed97 7a03 	vldr	s14, [r7, #12]
 800060e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d805      	bhi.n	8000624 <look1_iflf_binlcpw+0x30>
    iLeft = 0U;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
    frac = 0.0F;
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
 8000622:	e054      	b.n	80006ce <look1_iflf_binlcpw+0xda>
  } else if (u0 < bp0[maxIndex]) {
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	ed97 7a03 	vldr	s14, [r7, #12]
 8000634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063c:	d541      	bpl.n	80006c2 <look1_iflf_binlcpw+0xce>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
    iLeft = 0U;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
    iRght = maxIndex;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U) {
 800064c:	e016      	b.n	800067c <look1_iflf_binlcpw+0x88>
      if (u0 < bp0[bpIdx]) {
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	edd3 7a00 	vldr	s15, [r3]
 800065a:	ed97 7a03 	vldr	s14, [r7, #12]
 800065e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000666:	d502      	bpl.n	800066e <look1_iflf_binlcpw+0x7a>
        iRght = bpIdx;
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	e001      	b.n	8000672 <look1_iflf_binlcpw+0x7e>
      } else {
        iLeft = bpIdx;
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	623b      	str	r3, [r7, #32]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000672:	69ba      	ldr	r2, [r7, #24]
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	2b01      	cmp	r3, #1
 8000684:	d8e3      	bhi.n	800064e <look1_iflf_binlcpw+0x5a>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	4413      	add	r3, r2
 800068e:	edd3 7a00 	vldr	s15, [r3]
 8000692:	ed97 7a03 	vldr	s14, [r7, #12]
 8000696:	ee77 6a67 	vsub.f32	s13, s14, s15
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	3301      	adds	r3, #1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	4413      	add	r3, r2
 80006a4:	ed93 7a00 	vldr	s14, [r3]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80006c0:	e005      	b.n	80006ce <look1_iflf_binlcpw+0xda>
  } else {
    iLeft = maxIndex - 1U;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
    frac = 1.0F;
 80006c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  yL_0d0 = table[iLeft];
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	617b      	str	r3, [r7, #20]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	3301      	adds	r3, #1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	ed93 7a00 	vldr	s14, [r3]
 80006e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80006f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000700:	eeb0 0a67 	vmov.f32	s0, s15
 8000704:	372c      	adds	r7, #44	; 0x2c
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <controller_step>:

/* Model step function */
void controller_step(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	ed2d 8b02 	vpush	{d8}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
  /* Chart: '<S3>/Chart' incorporates:
   *  Delay: '<S3>/Delay'
   *  Delay: '<S3>/Delay1'
   *  Delay: '<S3>/Delay2'
   */
  if (controller_DW.is_active_c3_governor_lib == 0U) {
 800071a:	4b97      	ldr	r3, [pc, #604]	; (8000978 <controller_step+0x268>)
 800071c:	7c1b      	ldrb	r3, [r3, #16]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10f      	bne.n	8000742 <controller_step+0x32>
    controller_DW.is_active_c3_governor_lib = 1U;
 8000722:	4b95      	ldr	r3, [pc, #596]	; (8000978 <controller_step+0x268>)
 8000724:	2201      	movs	r2, #1
 8000726:	741a      	strb	r2, [r3, #16]
    controller_DW.is_c3_governor_lib = controlle_IN_Initialize_outputs;
 8000728:	4b93      	ldr	r3, [pc, #588]	; (8000978 <controller_step+0x268>)
 800072a:	2201      	movs	r2, #1
 800072c:	731a      	strb	r2, [r3, #12]
    controller_B.GOV_e_miCmd = CMD_INIT;
 800072e:	4b93      	ldr	r3, [pc, #588]	; (800097c <controller_step+0x26c>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
    controller_B.GOV_e_diCmd = DI_CMD_INIT;
 8000734:	4b91      	ldr	r3, [pc, #580]	; (800097c <controller_step+0x26c>)
 8000736:	2200      	movs	r2, #0
 8000738:	709a      	strb	r2, [r3, #2]
    controller_DW.motorStartCount = 0U;
 800073a:	4b8f      	ldr	r3, [pc, #572]	; (8000978 <controller_step+0x268>)
 800073c:	2200      	movs	r2, #0
 800073e:	809a      	strh	r2, [r3, #4]
 8000740:	e0e5      	b.n	800090e <controller_step+0x1fe>
  } else {
    switch (controller_DW.is_c3_governor_lib) {
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <controller_step+0x268>)
 8000744:	7b1b      	ldrb	r3, [r3, #12]
 8000746:	3b01      	subs	r3, #1
 8000748:	2b03      	cmp	r3, #3
 800074a:	f200 80bf 	bhi.w	80008cc <controller_step+0x1bc>
 800074e:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <controller_step+0x44>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000765 	.word	0x08000765
 8000758:	08000779 	.word	0x08000779
 800075c:	080007b3 	.word	0x080007b3
 8000760:	080007cb 	.word	0x080007cb
     case controlle_IN_Initialize_outputs:
      controller_B.GOV_e_diCmd = DI_CMD_INIT;
 8000764:	4b85      	ldr	r3, [pc, #532]	; (800097c <controller_step+0x26c>)
 8000766:	2200      	movs	r2, #0
 8000768:	709a      	strb	r2, [r3, #2]
      controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 800076a:	4b83      	ldr	r3, [pc, #524]	; (8000978 <controller_step+0x268>)
 800076c:	2204      	movs	r2, #4
 800076e:	731a      	strb	r2, [r3, #12]
      controller_DW.is_STARTUP = controller_IN_HV_startup;
 8000770:	4b81      	ldr	r3, [pc, #516]	; (8000978 <controller_step+0x268>)
 8000772:	2202      	movs	r2, #2
 8000774:	735a      	strb	r2, [r3, #13]
      break;
 8000776:	e0ca      	b.n	800090e <controller_step+0x1fe>

     case controller_IN_RUNNING:
      if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 8000778:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <controller_step+0x268>)
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	2b08      	cmp	r3, #8
 800077e:	d109      	bne.n	8000794 <controller_step+0x84>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 8000780:	4b7d      	ldr	r3, [pc, #500]	; (8000978 <controller_step+0x268>)
 8000782:	2203      	movs	r2, #3
 8000784:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_HV_run_error;
 8000786:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <controller_step+0x268>)
 8000788:	2201      	movs	r2, #1
 800078a:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 800078c:	4b7b      	ldr	r3, [pc, #492]	; (800097c <controller_step+0x26c>)
 800078e:	2202      	movs	r2, #2
 8000790:	709a      	strb	r2, [r3, #2]
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 8000792:	e0bb      	b.n	800090c <controller_step+0x1fc>
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 8000794:	4b78      	ldr	r3, [pc, #480]	; (8000978 <controller_step+0x268>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b05      	cmp	r3, #5
 800079a:	f040 80b7 	bne.w	800090c <controller_step+0x1fc>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 800079e:	4b76      	ldr	r3, [pc, #472]	; (8000978 <controller_step+0x268>)
 80007a0:	2203      	movs	r2, #3
 80007a2:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
 80007a4:	4b74      	ldr	r3, [pc, #464]	; (8000978 <controller_step+0x268>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007aa:	4b74      	ldr	r3, [pc, #464]	; (800097c <controller_step+0x26c>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	709a      	strb	r2, [r3, #2]
      break;
 80007b0:	e0ac      	b.n	800090c <controller_step+0x1fc>

     case controller_IN_RUNNING_ERROR:
      if (controller_DW.is_RUNNING_ERROR == controller_IN_HV_run_error) {
 80007b2:	4b71      	ldr	r3, [pc, #452]	; (8000978 <controller_step+0x268>)
 80007b4:	7bdb      	ldrb	r3, [r3, #15]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d103      	bne.n	80007c2 <controller_step+0xb2>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007ba:	4b70      	ldr	r3, [pc, #448]	; (800097c <controller_step+0x26c>)
 80007bc:	2202      	movs	r2, #2
 80007be:	709a      	strb	r2, [r3, #2]
      } else {
        /* case IN_Motor_run_error: */
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 80007c0:	e0a5      	b.n	800090e <controller_step+0x1fe>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007c2:	4b6e      	ldr	r3, [pc, #440]	; (800097c <controller_step+0x26c>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	709a      	strb	r2, [r3, #2]
      break;
 80007c8:	e0a1      	b.n	800090e <controller_step+0x1fe>

     case controller_IN_STARTUP:
      {
        if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 80007ca:	4b6b      	ldr	r3, [pc, #428]	; (8000978 <controller_step+0x268>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	d109      	bne.n	80007e6 <controller_step+0xd6>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 80007d2:	4b69      	ldr	r3, [pc, #420]	; (8000978 <controller_step+0x268>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 80007d8:	4b67      	ldr	r3, [pc, #412]	; (8000978 <controller_step+0x268>)
 80007da:	2205      	movs	r2, #5
 80007dc:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = controller_IN_HV_startup_error;
 80007de:	4b66      	ldr	r3, [pc, #408]	; (8000978 <controller_step+0x268>)
 80007e0:	2203      	movs	r2, #3
 80007e2:	739a      	strb	r2, [r3, #14]
            }
            break;
          }
        }
      }
      break;
 80007e4:	e093      	b.n	800090e <controller_step+0x1fe>
        } else if (controller_DW.Delay2_DSTATE == DI_ERROR) {
 80007e6:	4b64      	ldr	r3, [pc, #400]	; (8000978 <controller_step+0x268>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d109      	bne.n	8000802 <controller_step+0xf2>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 80007ee:	4b62      	ldr	r3, [pc, #392]	; (8000978 <controller_step+0x268>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 80007f4:	4b60      	ldr	r3, [pc, #384]	; (8000978 <controller_step+0x268>)
 80007f6:	2205      	movs	r2, #5
 80007f8:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = contro_IN_DriverInterface_Error;
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <controller_step+0x268>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	739a      	strb	r2, [r3, #14]
      break;
 8000800:	e085      	b.n	800090e <controller_step+0x1fe>
        } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 8000802:	4b5d      	ldr	r3, [pc, #372]	; (8000978 <controller_step+0x268>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d11a      	bne.n	8000840 <controller_step+0x130>
          if (controller_DW.motorStartCount >= 5) {
 800080a:	4b5b      	ldr	r3, [pc, #364]	; (8000978 <controller_step+0x268>)
 800080c:	889b      	ldrh	r3, [r3, #4]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d90c      	bls.n	800082c <controller_step+0x11c>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <controller_step+0x268>)
 8000814:	2200      	movs	r2, #0
 8000816:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000818:	4b57      	ldr	r3, [pc, #348]	; (8000978 <controller_step+0x268>)
 800081a:	2205      	movs	r2, #5
 800081c:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Motor_faulted;
 800081e:	4b56      	ldr	r3, [pc, #344]	; (8000978 <controller_step+0x268>)
 8000820:	2204      	movs	r2, #4
 8000822:	739a      	strb	r2, [r3, #14]
            controller_B.GOV_e_miCmd = CMD_SHUTDOWN;
 8000824:	4b55      	ldr	r3, [pc, #340]	; (800097c <controller_step+0x26c>)
 8000826:	2203      	movs	r2, #3
 8000828:	705a      	strb	r2, [r3, #1]
      break;
 800082a:	e070      	b.n	800090e <controller_step+0x1fe>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800082c:	4b52      	ldr	r3, [pc, #328]	; (8000978 <controller_step+0x268>)
 800082e:	2200      	movs	r2, #0
 8000830:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000832:	4b51      	ldr	r3, [pc, #324]	; (8000978 <controller_step+0x268>)
 8000834:	2205      	movs	r2, #5
 8000836:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Err_reset;
 8000838:	4b4f      	ldr	r3, [pc, #316]	; (8000978 <controller_step+0x268>)
 800083a:	2202      	movs	r2, #2
 800083c:	739a      	strb	r2, [r3, #14]
      break;
 800083e:	e066      	b.n	800090e <controller_step+0x1fe>
          switch (controller_DW.is_STARTUP) {
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <controller_step+0x268>)
 8000842:	7b5b      	ldrb	r3, [r3, #13]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d002      	beq.n	800084e <controller_step+0x13e>
 8000848:	2b02      	cmp	r3, #2
 800084a:	d00f      	beq.n	800086c <controller_step+0x15c>
 800084c:	e02a      	b.n	80008a4 <controller_step+0x194>
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 800084e:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <controller_step+0x268>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d134      	bne.n	80008c0 <controller_step+0x1b0>
                (controller_DW.Delay2_DSTATE == DRV_START_REQ)) {
 8000856:	4b48      	ldr	r3, [pc, #288]	; (8000978 <controller_step+0x268>)
 8000858:	789b      	ldrb	r3, [r3, #2]
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 800085a:	2b05      	cmp	r3, #5
 800085c:	d130      	bne.n	80008c0 <controller_step+0x1b0>
              controller_DW.is_STARTUP = controller_IN_Send_ReadyToDrive;
 800085e:	4b46      	ldr	r3, [pc, #280]	; (8000978 <controller_step+0x268>)
 8000860:	2203      	movs	r2, #3
 8000862:	735a      	strb	r2, [r3, #13]
              controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 8000864:	4b45      	ldr	r3, [pc, #276]	; (800097c <controller_step+0x26c>)
 8000866:	2201      	movs	r2, #1
 8000868:	709a      	strb	r2, [r3, #2]
            break;
 800086a:	e029      	b.n	80008c0 <controller_step+0x1b0>
              if (controller_DW.Delay_DSTATE_f == BM_RUNNING) {
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <controller_step+0x268>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	2b06      	cmp	r3, #6
 8000872:	d127      	bne.n	80008c4 <controller_step+0x1b4>
                controller_DW.is_STARTUP = contro_IN_Command_motor_startup;
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <controller_step+0x268>)
 8000876:	2201      	movs	r2, #1
 8000878:	735a      	strb	r2, [r3, #13]
                controller_B.GOV_e_miCmd = CMD_STARTUP;
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <controller_step+0x26c>)
 800087c:	2202      	movs	r2, #2
 800087e:	705a      	strb	r2, [r3, #1]
                tmp = controller_DW.motorStartCount + 1U;
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <controller_step+0x268>)
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	3301      	adds	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
                if (controller_DW.motorStartCount + 1U > 65535U) {
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <controller_step+0x268>)
 800088a:	889b      	ldrh	r3, [r3, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000892:	d302      	bcc.n	800089a <controller_step+0x18a>
                  tmp = 65535U;
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	607b      	str	r3, [r7, #4]
                controller_DW.motorStartCount = (uint16_T)tmp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <controller_step+0x268>)
 80008a0:	809a      	strh	r2, [r3, #4]
            break;
 80008a2:	e00f      	b.n	80008c4 <controller_step+0x1b4>
            controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 80008a4:	4b35      	ldr	r3, [pc, #212]	; (800097c <controller_step+0x26c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	709a      	strb	r2, [r3, #2]
            if (controller_DW.Delay2_DSTATE == DI_RUNNING) {
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <controller_step+0x268>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d10a      	bne.n	80008c8 <controller_step+0x1b8>
              controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <controller_step+0x268>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	735a      	strb	r2, [r3, #13]
              controller_DW.is_c3_governor_lib = controller_IN_RUNNING;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <controller_step+0x268>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	731a      	strb	r2, [r3, #12]
            break;
 80008be:	e003      	b.n	80008c8 <controller_step+0x1b8>
            break;
 80008c0:	bf00      	nop
 80008c2:	e024      	b.n	800090e <controller_step+0x1fe>
            break;
 80008c4:	bf00      	nop
 80008c6:	e022      	b.n	800090e <controller_step+0x1fe>
            break;
 80008c8:	bf00      	nop
      break;
 80008ca:	e020      	b.n	800090e <controller_step+0x1fe>

     default:
      /* case IN_STARTUP_ERROR: */
      switch (controller_DW.is_STARTUP_ERROR) {
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <controller_step+0x268>)
 80008ce:	7b9b      	ldrb	r3, [r3, #14]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d017      	beq.n	8000904 <controller_step+0x1f4>
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	dc17      	bgt.n	8000908 <controller_step+0x1f8>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d013      	beq.n	8000904 <controller_step+0x1f4>
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d113      	bne.n	8000908 <controller_step+0x1f8>
       case contro_IN_DriverInterface_Error:
       case controller_IN_HV_startup_error:
        break;

       case controller_IN_Err_reset:
        if (controller_DW.Delay1_DSTATE == OFF) {
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <controller_step+0x268>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d109      	bne.n	80008fc <controller_step+0x1ec>
          controller_DW.is_STARTUP_ERROR = controller_IN_NO_ACTIVE_CHILD;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <controller_step+0x268>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	739a      	strb	r2, [r3, #14]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <controller_step+0x268>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP = controller_IN_HV_startup;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <controller_step+0x268>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	735a      	strb	r2, [r3, #13]
        } else {
          controller_B.GOV_e_miCmd = ERR_RESET;
        }
        break;
 80008fa:	e006      	b.n	800090a <controller_step+0x1fa>
          controller_B.GOV_e_miCmd = ERR_RESET;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <controller_step+0x26c>)
 80008fe:	2204      	movs	r2, #4
 8000900:	705a      	strb	r2, [r3, #1]
        break;
 8000902:	e002      	b.n	800090a <controller_step+0x1fa>
        break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <controller_step+0x1fe>

       default:
        /* case IN_Motor_faulted: */
        break;
 8000908:	bf00      	nop
      }
      break;
 800090a:	e000      	b.n	800090e <controller_step+0x1fe>
      break;
 800090c:	bf00      	nop
  /* End of Chart: '<S3>/Chart' */

  /* Chart: '<S2>/Chart' incorporates:
   *  Delay: '<S3>/Delay2'
   */
  if (controller_DW.temporalCounter_i1_a < 255U) {
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <controller_step+0x268>)
 8000910:	7d5b      	ldrb	r3, [r3, #21]
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d005      	beq.n	8000922 <controller_step+0x212>
    controller_DW.temporalCounter_i1_a++;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <controller_step+0x268>)
 8000918:	7d5b      	ldrb	r3, [r3, #21]
 800091a:	3301      	adds	r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <controller_step+0x268>)
 8000920:	755a      	strb	r2, [r3, #21]
  }

  if (controller_DW.is_active_c3_driver_interface_l == 0U) {
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <controller_step+0x268>)
 8000924:	7d1b      	ldrb	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10f      	bne.n	800094a <controller_step+0x23a>
    controller_DW.is_active_c3_driver_interface_l = 1U;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <controller_step+0x268>)
 800092c:	2201      	movs	r2, #1
 800092e:	751a      	strb	r2, [r3, #20]
    controller_DW.is_c3_driver_interface_lib = controller_IN_INIT;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <controller_step+0x268>)
 8000932:	2203      	movs	r2, #3
 8000934:	745a      	strb	r2, [r3, #17]
    controller_DW.Delay2_DSTATE = DI_STS_INIT;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <controller_step+0x268>)
 8000938:	2201      	movs	r2, #1
 800093a:	709a      	strb	r2, [r3, #2]
    controller_B.b_ReadyToDrive = false;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <controller_step+0x26c>)
 800093e:	2200      	movs	r2, #0
 8000940:	70da      	strb	r2, [r3, #3]

    /* Outport: '<Root>/DI_b_driverSpeaker' incorporates:
     *  Delay: '<S3>/Delay2'
     */
    controller_Y.DI_b_driverSpeaker = false;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <controller_step+0x270>)
 8000944:	2200      	movs	r2, #0
 8000946:	711a      	strb	r2, [r3, #4]
 8000948:	e088      	b.n	8000a5c <controller_step+0x34c>
  } else {
    switch (controller_DW.is_c3_driver_interface_lib) {
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <controller_step+0x268>)
 800094c:	7c5b      	ldrb	r3, [r3, #17]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d06d      	beq.n	8000a2e <controller_step+0x31e>
 8000952:	2b03      	cmp	r3, #3
 8000954:	dc7b      	bgt.n	8000a4e <controller_step+0x33e>
 8000956:	2b01      	cmp	r3, #1
 8000958:	d002      	beq.n	8000960 <controller_step+0x250>
 800095a:	2b02      	cmp	r3, #2
 800095c:	d004      	beq.n	8000968 <controller_step+0x258>
 800095e:	e076      	b.n	8000a4e <controller_step+0x33e>
     case controller_IN_DI_error:
      controller_DW.Delay2_DSTATE = DI_ERROR;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <controller_step+0x268>)
 8000962:	2207      	movs	r2, #7
 8000964:	709a      	strb	r2, [r3, #2]
      break;
 8000966:	e079      	b.n	8000a5c <controller_step+0x34c>

     case controller_IN_DI_running:
      switch (controller_DW.is_DI_running) {
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <controller_step+0x268>)
 800096a:	7c9b      	ldrb	r3, [r3, #18]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d009      	beq.n	8000984 <controller_step+0x274>
 8000970:	2b02      	cmp	r3, #2
 8000972:	d021      	beq.n	80009b8 <controller_step+0x2a8>
 8000974:	e050      	b.n	8000a18 <controller_step+0x308>
 8000976:	bf00      	nop
 8000978:	200001fc 	.word	0x200001fc
 800097c:	200001f8 	.word	0x200001f8
 8000980:	20000240 	.word	0x20000240
       case contr_IN_Driver_requested_start:
        controller_DW.Delay2_DSTATE = DRV_START_REQ;
 8000984:	4bb5      	ldr	r3, [pc, #724]	; (8000c5c <controller_step+0x54c>)
 8000986:	2205      	movs	r2, #5
 8000988:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == READY_TO_DRIVE) {
 800098a:	4bb5      	ldr	r3, [pc, #724]	; (8000c60 <controller_step+0x550>)
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d149      	bne.n	8000a26 <controller_step+0x316>
          controller_DW.is_DI_running = controller_IN_Ready_to_drive;
 8000992:	4bb2      	ldr	r3, [pc, #712]	; (8000c5c <controller_step+0x54c>)
 8000994:	2202      	movs	r2, #2
 8000996:	749a      	strb	r2, [r3, #18]
          controller_B.b_ReadyToDrive = true;
 8000998:	4bb1      	ldr	r3, [pc, #708]	; (8000c60 <controller_step+0x550>)
 800099a:	2201      	movs	r2, #1
 800099c:	70da      	strb	r2, [r3, #3]
          controller_DW.Delay2_DSTATE = DI_RUNNING;
 800099e:	4baf      	ldr	r3, [pc, #700]	; (8000c5c <controller_step+0x54c>)
 80009a0:	2206      	movs	r2, #6
 80009a2:	709a      	strb	r2, [r3, #2]
          controller_DW.is_Ready_to_drive = controller_IN_SpeakerOn_;
 80009a4:	4bad      	ldr	r3, [pc, #692]	; (8000c5c <controller_step+0x54c>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	74da      	strb	r2, [r3, #19]
          controller_DW.temporalCounter_i1_a = 0U;
 80009aa:	4bac      	ldr	r3, [pc, #688]	; (8000c5c <controller_step+0x54c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	755a      	strb	r2, [r3, #21]

          /* Outport: '<Root>/DI_b_driverSpeaker' */
          controller_Y.DI_b_driverSpeaker = true;
 80009b0:	4bac      	ldr	r3, [pc, #688]	; (8000c64 <controller_step+0x554>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	711a      	strb	r2, [r3, #4]
        }
        break;
 80009b6:	e036      	b.n	8000a26 <controller_step+0x316>

       case controller_IN_Ready_to_drive:
        controller_B.b_ReadyToDrive = true;
 80009b8:	4ba9      	ldr	r3, [pc, #676]	; (8000c60 <controller_step+0x550>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	70da      	strb	r2, [r3, #3]
        controller_DW.Delay2_DSTATE = DI_RUNNING;
 80009be:	4ba7      	ldr	r3, [pc, #668]	; (8000c5c <controller_step+0x54c>)
 80009c0:	2206      	movs	r2, #6
 80009c2:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == SYSTEM_ERROR) {
 80009c4:	4ba6      	ldr	r3, [pc, #664]	; (8000c60 <controller_step+0x550>)
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d10f      	bne.n	80009ec <controller_step+0x2dc>
          controller_DW.is_Ready_to_drive = controller_IN_NO_ACTIVE_CHILD;
 80009cc:	4ba3      	ldr	r3, [pc, #652]	; (8000c5c <controller_step+0x54c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	74da      	strb	r2, [r3, #19]
          controller_DW.is_DI_running = controller_IN_NO_ACTIVE_CHILD;
 80009d2:	4ba2      	ldr	r3, [pc, #648]	; (8000c5c <controller_step+0x54c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	749a      	strb	r2, [r3, #18]
          controller_DW.is_c3_driver_interface_lib =
 80009d8:	4ba0      	ldr	r3, [pc, #640]	; (8000c5c <controller_step+0x54c>)
 80009da:	2204      	movs	r2, #4
 80009dc:	745a      	strb	r2, [r3, #17]
            controller_IN_Vehicle_coasting;
          controller_B.b_ReadyToDrive = false;
 80009de:	4ba0      	ldr	r3, [pc, #640]	; (8000c60 <controller_step+0x550>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	70da      	strb	r2, [r3, #3]
          controller_DW.Delay2_DSTATE = DI_IDLE;
 80009e4:	4b9d      	ldr	r3, [pc, #628]	; (8000c5c <controller_step+0x54c>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	709a      	strb	r2, [r3, #2]

            /* Outport: '<Root>/DI_b_driverSpeaker' */
            controller_Y.DI_b_driverSpeaker = false;
          }
        }
        break;
 80009ea:	e01e      	b.n	8000a2a <controller_step+0x31a>
        } else if (controller_DW.is_Ready_to_drive == controller_IN_SpeakerOff)
 80009ec:	4b9b      	ldr	r3, [pc, #620]	; (8000c5c <controller_step+0x54c>)
 80009ee:	7cdb      	ldrb	r3, [r3, #19]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d103      	bne.n	80009fc <controller_step+0x2ec>
          controller_Y.DI_b_driverSpeaker = false;
 80009f4:	4b9b      	ldr	r3, [pc, #620]	; (8000c64 <controller_step+0x554>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	711a      	strb	r2, [r3, #4]
        break;
 80009fa:	e016      	b.n	8000a2a <controller_step+0x31a>
          controller_Y.DI_b_driverSpeaker = true;
 80009fc:	4b99      	ldr	r3, [pc, #612]	; (8000c64 <controller_step+0x554>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	711a      	strb	r2, [r3, #4]
          if (controller_DW.temporalCounter_i1_a >= 200U) {
 8000a02:	4b96      	ldr	r3, [pc, #600]	; (8000c5c <controller_step+0x54c>)
 8000a04:	7d5b      	ldrb	r3, [r3, #21]
 8000a06:	2bc7      	cmp	r3, #199	; 0xc7
 8000a08:	d90f      	bls.n	8000a2a <controller_step+0x31a>
            controller_DW.is_Ready_to_drive = controller_IN_SpeakerOff;
 8000a0a:	4b94      	ldr	r3, [pc, #592]	; (8000c5c <controller_step+0x54c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	74da      	strb	r2, [r3, #19]
            controller_Y.DI_b_driverSpeaker = false;
 8000a10:	4b94      	ldr	r3, [pc, #592]	; (8000c64 <controller_step+0x554>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	711a      	strb	r2, [r3, #4]
        break;
 8000a16:	e008      	b.n	8000a2a <controller_step+0x31a>

       default:
        /* case IN_Waiting_for_driver: */
        controller_DW.is_DI_running = contr_IN_Driver_requested_start;
 8000a18:	4b90      	ldr	r3, [pc, #576]	; (8000c5c <controller_step+0x54c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	749a      	strb	r2, [r3, #18]
        controller_DW.Delay2_DSTATE = DRV_START_REQ;
 8000a1e:	4b8f      	ldr	r3, [pc, #572]	; (8000c5c <controller_step+0x54c>)
 8000a20:	2205      	movs	r2, #5
 8000a22:	709a      	strb	r2, [r3, #2]
        break;
 8000a24:	e002      	b.n	8000a2c <controller_step+0x31c>
        break;
 8000a26:	bf00      	nop
 8000a28:	e018      	b.n	8000a5c <controller_step+0x34c>
        break;
 8000a2a:	bf00      	nop
      }
      break;
 8000a2c:	e016      	b.n	8000a5c <controller_step+0x34c>

     case controller_IN_INIT:
      controller_B.b_ReadyToDrive = false;
 8000a2e:	4b8c      	ldr	r3, [pc, #560]	; (8000c60 <controller_step+0x550>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	70da      	strb	r2, [r3, #3]

      /* Outport: '<Root>/DI_b_driverSpeaker' */
      controller_Y.DI_b_driverSpeaker = false;
 8000a34:	4b8b      	ldr	r3, [pc, #556]	; (8000c64 <controller_step+0x554>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	711a      	strb	r2, [r3, #4]
      controller_DW.is_c3_driver_interface_lib = controller_IN_DI_running;
 8000a3a:	4b88      	ldr	r3, [pc, #544]	; (8000c5c <controller_step+0x54c>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	745a      	strb	r2, [r3, #17]
      controller_DW.is_DI_running = controlle_IN_Waiting_for_driver;
 8000a40:	4b86      	ldr	r3, [pc, #536]	; (8000c5c <controller_step+0x54c>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	749a      	strb	r2, [r3, #18]
      controller_DW.Delay2_DSTATE = WAITING_FOR_DRVR;
 8000a46:	4b85      	ldr	r3, [pc, #532]	; (8000c5c <controller_step+0x54c>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	709a      	strb	r2, [r3, #2]
      break;
 8000a4c:	e006      	b.n	8000a5c <controller_step+0x34c>

     default:
      /* case IN_Vehicle_coasting: */
      controller_B.b_ReadyToDrive = false;
 8000a4e:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <controller_step+0x550>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	70da      	strb	r2, [r3, #3]
      controller_DW.Delay2_DSTATE = DI_IDLE;
 8000a54:	4b81      	ldr	r3, [pc, #516]	; (8000c5c <controller_step+0x54c>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	709a      	strb	r2, [r3, #2]
      break;
 8000a5a:	bf00      	nop
   *  Gain: '<S5>/convertToAmps3'
   *  Inport: '<Root>/AMK_ActualVelocity'
   *  Inport: '<Root>/AMK_MagnetizingCurrent'
   */
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
    controller_U.AMK_MagnetizingCurrent, 0.0F);
 8000a5c:	4b82      	ldr	r3, [pc, #520]	; (8000c68 <controller_step+0x558>)
 8000a5e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a6a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8000c6c <controller_step+0x55c>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8000c70 <controller_step+0x560>
 8000a76:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7a:	f008 fbd3 	bl	8009224 <fmaxf>
 8000a7e:	ed87 0a02 	vstr	s0, [r7, #8]
  a = fminf(controller_ConstB.Gain1, 52.0F);
 8000a82:	4b7c      	ldr	r3, [pc, #496]	; (8000c74 <controller_step+0x564>)
 8000a84:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000a88:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8000c78 <controller_step+0x568>
 8000a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a90:	f008 fbe3 	bl	800925a <fminf>
 8000a94:	ed87 0a03 	vstr	s0, [r7, #12]
  rtb_TorqueLimit = fminf(fmaxf(sqrtf(a * a - rtb_TorqueLimit * rtb_TorqueLimit),
 8000a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	f008 fc2a 	bl	8009308 <sqrtf>
 8000ab4:	eef0 7a40 	vmov.f32	s15, s0
 8000ab8:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8000c70 <controller_step+0x560>
 8000abc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac0:	f008 fbb0 	bl	8009224 <fmaxf>
 8000ac4:	eef0 7a40 	vmov.f32	s15, s0
    0.0F) * 24.0F / (fmaxf(controller_U.AMK_ActualVelocity, 1.0F) * 3.14159274F /
 8000ac8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000acc:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000ad0:	4b65      	ldr	r3, [pc, #404]	; (8000c68 <controller_step+0x558>)
 8000ad2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ade:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae6:	f008 fb9d 	bl	8009224 <fmaxf>
 8000aea:	eef0 7a40 	vmov.f32	s15, s0
 8000aee:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000c7c <controller_step+0x56c>
 8000af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000af6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8000afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
  rtb_TorqueLimit = fminf(fmaxf(sqrtf(a * a - rtb_TorqueLimit * rtb_TorqueLimit),
 8000afe:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000b02:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8000b06:	eeb0 0a47 	vmov.f32	s0, s14
 8000b0a:	f008 fba6 	bl	800925a <fminf>
 8000b0e:	ed87 0a02 	vstr	s0, [r7, #8]
   *  MinMax: '<S5>/Min'
   *  Product: '<S5>/Divide'
   *  RelationalOperator: '<S15>/Lower Test'
   *  RelationalOperator: '<S15>/Upper Test'
   */
  if (controller_ConstB.Switch2 > 0.0F) {
 8000b12:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <controller_step+0x564>)
 8000b14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b20:	dd03      	ble.n	8000b2a <controller_step+0x41a>
    rtb_TorqueLimit = 0.0F;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	e040      	b.n	8000bac <controller_step+0x49c>
  } else {
    if (!controller_B.b_ReadyToDrive) {
 8000b2a:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <controller_step+0x550>)
 8000b2c:	78db      	ldrb	r3, [r3, #3]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <controller_step+0x42a>
       */
      /* If: '<S2>/If' incorporates:
       *  Constant: '<S2>/Constant'
       *  SignalConversion generated from: '<S8>/In1'
       */
      a = 0.0F;
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e025      	b.n	8000b86 <controller_step+0x476>

      /* End of Outputs for SubSystem: '<S2>/If Action Subsystem' */
    } else if ((controller_U.DI_V_AccelPedalPos1 < 0) ||
 8000b3a:	4b4b      	ldr	r3, [pc, #300]	; (8000c68 <controller_step+0x558>)
 8000b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db05      	blt.n	8000b50 <controller_step+0x440>
               (controller_U.DI_V_AccelPedalPos1 > 4095)) {
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <controller_step+0x558>)
 8000b46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    } else if ((controller_U.DI_V_AccelPedalPos1 < 0) ||
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	db03      	blt.n	8000b58 <controller_step+0x448>
       *  ActionPort: '<S10>/Action Port'
       */
      /* If: '<S2>/If' incorporates:
       *  SignalConversion generated from: '<S10>/In1'
       */
      a = controller_ConstB.Gain;
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <controller_step+0x564>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e016      	b.n	8000b86 <controller_step+0x476>
       *  Gain: '<S16>/Gain'
       *  Inport: '<Root>/DI_V_AccelPedalPos1'
       *  Product: '<S16>/Divide'
       *  Sum: '<S16>/Subtract1'
       */
      a = ((real32_T)controller_U.DI_V_AccelPedalPos1 -
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <controller_step+0x558>)
 8000b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
           controller_ConstB.DataTypeConversion2_p) / controller_ConstB.range_p *
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <controller_step+0x564>)
 8000b68:	edd3 7a08 	vldr	s15, [r3, #32]
      a = ((real32_T)controller_U.DI_V_AccelPedalPos1 -
 8000b6c:	ee77 6a67 	vsub.f32	s13, s14, s15
           controller_ConstB.DataTypeConversion2_p) / controller_ConstB.range_p *
 8000b70:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <controller_step+0x564>)
 8000b72:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
      a = ((real32_T)controller_U.DI_V_AccelPedalPos1 -
 8000b7a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000c80 <controller_step+0x570>
 8000b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b82:	edc7 7a03 	vstr	s15, [r7, #12]
        100.0F;
    }

    rtb_TorqueLimit = 0.01F * look1_iflf_binlcpw(a, controller_ConstP.pooled2,
 8000b86:	2214      	movs	r2, #20
 8000b88:	493e      	ldr	r1, [pc, #248]	; (8000c84 <controller_step+0x574>)
 8000b8a:	483e      	ldr	r0, [pc, #248]	; (8000c84 <controller_step+0x574>)
 8000b8c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b90:	f7ff fd30 	bl	80005f4 <look1_iflf_binlcpw>
 8000b94:	eef0 7a40 	vmov.f32	s15, s0
 8000b98:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000c88 <controller_step+0x578>
 8000b9c:	ee27 7a87 	vmul.f32	s14, s15, s14
      controller_ConstP.pooled2, 20U) * fminf(rtb_TorqueLimit, rtb_TorqueLimit);
 8000ba0:	edd7 7a02 	vldr	s15, [r7, #8]
    rtb_TorqueLimit = 0.01F * look1_iflf_binlcpw(a, controller_ConstP.pooled2,
 8000ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ba8:	edc7 7a02 	vstr	s15, [r7, #8]
   *  Inport: '<Root>/AMK_bInverterOn'
   *  Inport: '<Root>/AMK_bQuitDcOn'
   *  Inport: '<Root>/AMK_bQuitInverterOn'
   *  Inport: '<Root>/AMK_bSystemReady'
   */
  if (controller_DW.temporalCounter_i1 < 127U) {
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <controller_step+0x54c>)
 8000bae:	7adb      	ldrb	r3, [r3, #11]
 8000bb0:	2b7e      	cmp	r3, #126	; 0x7e
 8000bb2:	d805      	bhi.n	8000bc0 <controller_step+0x4b0>
    controller_DW.temporalCounter_i1++;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <controller_step+0x54c>)
 8000bb6:	7adb      	ldrb	r3, [r3, #11]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <controller_step+0x54c>)
 8000bbe:	72da      	strb	r2, [r3, #11]
  }

  if (controller_DW.is_active_c3_motor_interface_li == 0U) {
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <controller_step+0x54c>)
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11e      	bne.n	8000c06 <controller_step+0x4f6>
    controller_DW.is_active_c3_motor_interface_li = 1U;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <controller_step+0x54c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	729a      	strb	r2, [r3, #10]
    controller_DW.is_c3_motor_interface_lib = contr_IN_motorOff_waitingForGov;
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <controller_step+0x54c>)
 8000bd0:	2206      	movs	r2, #6
 8000bd2:	719a      	strb	r2, [r3, #6]
    controller_B.MI_motorStatus = OFF;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <controller_step+0x550>)
 8000bd6:	2206      	movs	r2, #6
 8000bd8:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/AMK_bInverterOn_tx' */
    controller_Y.AMK_bInverterOn_tx = 0U;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <controller_step+0x554>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	715a      	strb	r2, [r3, #5]

    /* Outport: '<Root>/AMK_bDcOn_tx' */
    controller_Y.AMK_bDcOn_tx = 0U;
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <controller_step+0x554>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	719a      	strb	r2, [r3, #6]

    /* Outport: '<Root>/AMK_bEnable' */
    controller_Y.AMK_bEnable = 0U;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <controller_step+0x554>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	71da      	strb	r2, [r3, #7]

    /* Outport: '<Root>/AMK_bErrorReset' */
    controller_Y.AMK_bErrorReset = 0U;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <controller_step+0x554>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	721a      	strb	r2, [r3, #8]

    /* Outport: '<Root>/AMK_TargetVelocity' */
    controller_Y.AMK_TargetVelocity = 0;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <controller_step+0x554>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	815a      	strh	r2, [r3, #10]

    /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
    controller_Y.AMK_TorqueLimitPositiv = 0;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <controller_step+0x554>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	819a      	strh	r2, [r3, #12]

    /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
    controller_Y.AMK_TorqueLimitNegativ = 0;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <controller_step+0x554>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	81da      	strh	r2, [r3, #14]
 8000c04:	e259      	b.n	80010ba <controller_step+0x9aa>
  } else {
    switch (controller_DW.is_c3_motor_interface_lib) {
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <controller_step+0x54c>)
 8000c08:	799b      	ldrb	r3, [r3, #6]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	f200 8237 	bhi.w	8001080 <controller_step+0x970>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <controller_step+0x508>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c2d 	.word	0x08000c2d
 8000c1c:	08000c8d 	.word	0x08000c8d
 8000c20:	08000d59 	.word	0x08000d59
 8000c24:	08000e47 	.word	0x08000e47
 8000c28:	08000f59 	.word	0x08000f59
     case controller_IN_AMK_errorDetected:
      if (controller_B.GOV_e_miCmd == ERR_RESET) {
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <controller_step+0x550>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	f040 823f 	bne.w	80010b4 <controller_step+0x9a4>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_errorReset;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <controller_step+0x54c>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_errorReset = contr_IN_enforceSetpointsZero_p;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <controller_step+0x54c>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	721a      	strb	r2, [r3, #8]

        /* Outport: '<Root>/AMK_TargetVelocity' */
        controller_Y.AMK_TargetVelocity = 0;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <controller_step+0x554>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	815a      	strh	r2, [r3, #10]

        /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
        controller_Y.AMK_TorqueLimitPositiv = 0;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <controller_step+0x554>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	819a      	strh	r2, [r3, #12]

        /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
        controller_Y.AMK_TorqueLimitNegativ = 0;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <controller_step+0x554>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	81da      	strh	r2, [r3, #14]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <controller_step+0x554>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	715a      	strb	r2, [r3, #5]
      }
      break;
 8000c5a:	e22b      	b.n	80010b4 <controller_step+0x9a4>
 8000c5c:	200001fc 	.word	0x200001fc
 8000c60:	200001f8 	.word	0x200001f8
 8000c64:	20000240 	.word	0x20000240
 8000c68:	20000218 	.word	0x20000218
 8000c6c:	3dcccc00 	.word	0x3dcccc00
 8000c70:	00000000 	.word	0x00000000
 8000c74:	080094ac 	.word	0x080094ac
 8000c78:	42500000 	.word	0x42500000
 8000c7c:	40490fdb 	.word	0x40490fdb
 8000c80:	42c80000 	.word	0x42c80000
 8000c84:	08009504 	.word	0x08009504
 8000c88:	3c23d70a 	.word	0x3c23d70a

     case controller_IN_AMK_errorReset:
      switch (controller_DW.is_AMK_errorReset) {
 8000c8c:	4ba1      	ldr	r3, [pc, #644]	; (8000f14 <controller_step+0x804>)
 8000c8e:	7a1b      	ldrb	r3, [r3, #8]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d025      	beq.n	8000ce0 <controller_step+0x5d0>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	dc34      	bgt.n	8000d02 <controller_step+0x5f2>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <controller_step+0x592>
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d011      	beq.n	8000cc4 <controller_step+0x5b4>
 8000ca0:	e02f      	b.n	8000d02 <controller_step+0x5f2>
       case contr_IN_enforceSetpointsZero_p:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000ca2:	4b9d      	ldr	r3, [pc, #628]	; (8000f18 <controller_step+0x808>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000ca8:	4b9c      	ldr	r3, [pc, #624]	; (8000f1c <controller_step+0x80c>)
 8000caa:	7d5b      	ldrb	r3, [r3, #21]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14b      	bne.n	8000d48 <controller_step+0x638>
          controller_DW.is_AMK_errorReset = controller_IN_toggleEnable;
 8000cb0:	4b98      	ldr	r3, [pc, #608]	; (8000f14 <controller_step+0x804>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000cb6:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <controller_step+0x804>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000cbc:	4b96      	ldr	r3, [pc, #600]	; (8000f18 <controller_step+0x808>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	71da      	strb	r2, [r3, #7]
        }
        break;
 8000cc2:	e041      	b.n	8000d48 <controller_step+0x638>

       case controller_IN_sendReset:
        /* Outport: '<Root>/AMK_bErrorReset' */
        controller_Y.AMK_bErrorReset = 1U;
 8000cc4:	4b94      	ldr	r3, [pc, #592]	; (8000f18 <controller_step+0x808>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	721a      	strb	r2, [r3, #8]
        if (controller_DW.temporalCounter_i1 >= 50U) {
 8000cca:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <controller_step+0x804>)
 8000ccc:	7adb      	ldrb	r3, [r3, #11]
 8000cce:	2b31      	cmp	r3, #49	; 0x31
 8000cd0:	d93c      	bls.n	8000d4c <controller_step+0x63c>
          controller_DW.is_AMK_errorReset = controller_IN_toggleReset;
 8000cd2:	4b90      	ldr	r3, [pc, #576]	; (8000f14 <controller_step+0x804>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000cd8:	4b8f      	ldr	r3, [pc, #572]	; (8000f18 <controller_step+0x808>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000cde:	e035      	b.n	8000d4c <controller_step+0x63c>

       case controller_IN_toggleEnable:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000ce0:	4b8d      	ldr	r3, [pc, #564]	; (8000f18 <controller_step+0x808>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	71da      	strb	r2, [r3, #7]
        if (controller_DW.temporalCounter_i1 >= 50U) {
 8000ce6:	4b8b      	ldr	r3, [pc, #556]	; (8000f14 <controller_step+0x804>)
 8000ce8:	7adb      	ldrb	r3, [r3, #11]
 8000cea:	2b31      	cmp	r3, #49	; 0x31
 8000cec:	d930      	bls.n	8000d50 <controller_step+0x640>
          controller_DW.is_AMK_errorReset = controller_IN_sendReset;
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <controller_step+0x804>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000cf4:	4b87      	ldr	r3, [pc, #540]	; (8000f14 <controller_step+0x804>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 1U;
 8000cfa:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <controller_step+0x808>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000d00:	e026      	b.n	8000d50 <controller_step+0x640>

       default:
        /* Outport: '<Root>/AMK_bErrorReset' */
        /* case IN_toggleReset: */
        controller_Y.AMK_bErrorReset = 0U;
 8000d02:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <controller_step+0x808>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	721a      	strb	r2, [r3, #8]
        if (controller_U.AMK_bSystemReady) {
 8000d08:	4b84      	ldr	r3, [pc, #528]	; (8000f1c <controller_step+0x80c>)
 8000d0a:	7bdb      	ldrb	r3, [r3, #15]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d021      	beq.n	8000d54 <controller_step+0x644>
          controller_DW.is_AMK_errorReset = controller_IN_NO_ACTIVE_CHILD;
 8000d10:	4b80      	ldr	r3, [pc, #512]	; (8000f14 <controller_step+0x804>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	721a      	strb	r2, [r3, #8]
          controller_DW.is_c3_motor_interface_lib =
 8000d16:	4b7f      	ldr	r3, [pc, #508]	; (8000f14 <controller_step+0x804>)
 8000d18:	2206      	movs	r2, #6
 8000d1a:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000d1c:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <controller_step+0x810>)
 8000d1e:	2206      	movs	r2, #6
 8000d20:	701a      	strb	r2, [r3, #0]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000d22:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <controller_step+0x808>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <controller_step+0x808>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	719a      	strb	r2, [r3, #6]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000d2e:	4b7a      	ldr	r3, [pc, #488]	; (8000f18 <controller_step+0x808>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0;
 8000d34:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <controller_step+0x808>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	815a      	strh	r2, [r3, #10]

          /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
          controller_Y.AMK_TorqueLimitPositiv = 0;
 8000d3a:	4b77      	ldr	r3, [pc, #476]	; (8000f18 <controller_step+0x808>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	819a      	strh	r2, [r3, #12]

          /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
          controller_Y.AMK_TorqueLimitNegativ = 0;
 8000d40:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <controller_step+0x808>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	81da      	strh	r2, [r3, #14]
        }
        break;
 8000d46:	e005      	b.n	8000d54 <controller_step+0x644>
        break;
 8000d48:	bf00      	nop
 8000d4a:	e1b6      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000d4c:	bf00      	nop
 8000d4e:	e1b4      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000d50:	bf00      	nop
 8000d52:	e1b2      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000d54:	bf00      	nop
      }
      break;
 8000d56:	e1b0      	b.n	80010ba <controller_step+0x9aa>

     case controller_IN_AMK_running:
      if (controller_U.AMK_bError) {
 8000d58:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <controller_step+0x80c>)
 8000d5a:	7c1b      	ldrb	r3, [r3, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <controller_step+0x65e>
        controller_DW.is_c3_motor_interface_lib =
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <controller_step+0x804>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	719a      	strb	r2, [r3, #6]
          controller_IN_AMK_errorDetected;
        controller_B.MI_motorStatus = MI_STS_ERROR;
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <controller_step+0x810>)
 8000d68:	2205      	movs	r2, #5
 8000d6a:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
        controller_Y.AMK_TorqueLimitNegativ =
          controller_ConstB.DataTypeConversion1_l;
      }
      break;
 8000d6c:	e1a5      	b.n	80010ba <controller_step+0x9aa>
      } else if (controller_B.GOV_e_miCmd == CMD_SHUTDOWN) {
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <controller_step+0x810>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d115      	bne.n	8000da2 <controller_step+0x692>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_shutdown;
 8000d76:	4b67      	ldr	r3, [pc, #412]	; (8000f14 <controller_step+0x804>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_shutdown = control_IN_enforceSetpointsZero;
 8000d7c:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <controller_step+0x804>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	725a      	strb	r2, [r3, #9]
        controller_B.MI_motorStatus = SHUTDOWN;
 8000d82:	4b67      	ldr	r3, [pc, #412]	; (8000f20 <controller_step+0x810>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	701a      	strb	r2, [r3, #0]
        controller_Y.AMK_TargetVelocity = 0;
 8000d88:	4b63      	ldr	r3, [pc, #396]	; (8000f18 <controller_step+0x808>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	815a      	strh	r2, [r3, #10]
        controller_Y.AMK_TorqueLimitPositiv = 0;
 8000d8e:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <controller_step+0x808>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	819a      	strh	r2, [r3, #12]
        controller_Y.AMK_TorqueLimitNegativ = 0;
 8000d94:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <controller_step+0x808>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	81da      	strh	r2, [r3, #14]
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	; (8000f18 <controller_step+0x808>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]
      break;
 8000da0:	e18b      	b.n	80010ba <controller_step+0x9aa>
        controller_B.MI_motorStatus = RUNNING;
 8000da2:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <controller_step+0x810>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	701a      	strb	r2, [r3, #0]
          controller_ConstB.DataTypeConversion2_d;
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <controller_step+0x814>)
 8000daa:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
        controller_Y.AMK_TargetVelocity =
 8000dae:	4b5a      	ldr	r3, [pc, #360]	; (8000f18 <controller_step+0x808>)
 8000db0:	815a      	strh	r2, [r3, #10]
        a = floorf(1000.0F * rtb_TorqueLimit);
 8000db2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000db6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000f28 <controller_step+0x818>
 8000dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc2:	f008 f9ed 	bl	80091a0 <floorf>
 8000dc6:	ed87 0a03 	vstr	s0, [r7, #12]
        if (rtIsNaNF(a) || rtIsInfF(a)) {
 8000dca:	ed97 0a03 	vldr	s0, [r7, #12]
 8000dce:	f000 fb6d 	bl	80014ac <rtIsNaNF>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d106      	bne.n	8000de6 <controller_step+0x6d6>
 8000dd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ddc:	f000 fb40 	bl	8001460 <rtIsInfF>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <controller_step+0x6de>
          a = 0.0F;
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e007      	b.n	8000dfe <controller_step+0x6ee>
          a = fmodf(a, 65536.0F);
 8000dee:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8000f2c <controller_step+0x81c>
 8000df2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000df6:	f008 fa67 	bl	80092c8 <fmodf>
 8000dfa:	ed87 0a03 	vstr	s0, [r7, #12]
        controller_Y.AMK_TorqueLimitPositiv = (int16_T)(a < 0.0F ? (int32_T)
 8000dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	d50c      	bpl.n	8000e26 <controller_step+0x716>
          (int16_T)-(int16_T)(uint16_T)-a : (int32_T)(int16_T)(uint16_T)a);
 8000e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e10:	eef1 7a67 	vneg.f32	s15, s15
 8000e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e18:	ee17 3a90 	vmov	r3, s15
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	425b      	negs	r3, r3
 8000e20:	b29b      	uxth	r3, r3
        controller_Y.AMK_TorqueLimitPositiv = (int16_T)(a < 0.0F ? (int32_T)
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	e007      	b.n	8000e36 <controller_step+0x726>
          (int16_T)-(int16_T)(uint16_T)-a : (int32_T)(int16_T)(uint16_T)a);
 8000e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e2e:	ee17 3a90 	vmov	r3, s15
 8000e32:	b29b      	uxth	r3, r3
        controller_Y.AMK_TorqueLimitPositiv = (int16_T)(a < 0.0F ? (int32_T)
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <controller_step+0x808>)
 8000e38:	8193      	strh	r3, [r2, #12]
          controller_ConstB.DataTypeConversion1_l;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <controller_step+0x814>)
 8000e3c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
        controller_Y.AMK_TorqueLimitNegativ =
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <controller_step+0x808>)
 8000e42:	81da      	strh	r2, [r3, #14]
      break;
 8000e44:	e139      	b.n	80010ba <controller_step+0x9aa>

     case controller_IN_AMK_shutdown:
      switch (controller_DW.is_AMK_shutdown) {
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <controller_step+0x804>)
 8000e48:	7a5b      	ldrb	r3, [r3, #9]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <controller_step+0x744>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d01c      	beq.n	8000e8c <controller_step+0x77c>
 8000e52:	e037      	b.n	8000ec4 <controller_step+0x7b4>
       case controller_IN_commandOff:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <controller_step+0x808>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	71da      	strb	r2, [r3, #7]
        if (!controller_U.AMK_bQuitDcOn) {
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <controller_step+0x80c>)
 8000e5c:	7c9b      	ldrb	r3, [r3, #18]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d106      	bne.n	8000e70 <controller_step+0x760>
          controller_DW.is_AMK_shutdown = controller_IN_toggleDCon;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <controller_step+0x804>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <controller_step+0x808>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000e6e:	e06d      	b.n	8000f4c <controller_step+0x83c>
        } else if (controller_U.AMK_bError) {
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <controller_step+0x80c>)
 8000e72:	7c1b      	ldrb	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d069      	beq.n	8000f4c <controller_step+0x83c>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <controller_step+0x804>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <controller_step+0x804>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <controller_step+0x810>)
 8000e86:	2205      	movs	r2, #5
 8000e88:	701a      	strb	r2, [r3, #0]
        break;
 8000e8a:	e05f      	b.n	8000f4c <controller_step+0x83c>

       case control_IN_enforceSetpointsZero:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <controller_step+0x808>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <controller_step+0x80c>)
 8000e94:	7d5b      	ldrb	r3, [r3, #21]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <controller_step+0x798>
          controller_DW.is_AMK_shutdown = controller_IN_commandOff;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <controller_step+0x804>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <controller_step+0x808>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	71da      	strb	r2, [r3, #7]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000ea6:	e053      	b.n	8000f50 <controller_step+0x840>
        } else if (controller_U.AMK_bError) {
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <controller_step+0x80c>)
 8000eaa:	7c1b      	ldrb	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d04f      	beq.n	8000f50 <controller_step+0x840>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <controller_step+0x804>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <controller_step+0x804>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <controller_step+0x810>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	701a      	strb	r2, [r3, #0]
        break;
 8000ec2:	e045      	b.n	8000f50 <controller_step+0x840>

       default:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        /* case IN_toggleDCon: */
        controller_Y.AMK_bDcOn_tx = 0U;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <controller_step+0x808>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	719a      	strb	r2, [r3, #6]
        if ((!controller_U.AMK_bDcOn) && (!controller_U.AMK_bQuitDcOn)) {
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <controller_step+0x80c>)
 8000ecc:	7cdb      	ldrb	r3, [r3, #19]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d12e      	bne.n	8000f30 <controller_step+0x820>
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <controller_step+0x80c>)
 8000ed4:	7c9b      	ldrb	r3, [r3, #18]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d12a      	bne.n	8000f30 <controller_step+0x820>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <controller_step+0x804>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <controller_step+0x804>)
 8000ee2:	2206      	movs	r2, #6
 8000ee4:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <controller_step+0x810>)
 8000ee8:	2206      	movs	r2, #6
 8000eea:	701a      	strb	r2, [r3, #0]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <controller_step+0x808>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <controller_step+0x808>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <controller_step+0x808>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <controller_step+0x808>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	815a      	strh	r2, [r3, #10]

          /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
          controller_Y.AMK_TorqueLimitPositiv = 0;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <controller_step+0x808>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	819a      	strh	r2, [r3, #12]

          /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
          controller_Y.AMK_TorqueLimitNegativ = 0;
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <controller_step+0x808>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	81da      	strh	r2, [r3, #14]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f10:	e020      	b.n	8000f54 <controller_step+0x844>
 8000f12:	bf00      	nop
 8000f14:	200001fc 	.word	0x200001fc
 8000f18:	20000240 	.word	0x20000240
 8000f1c:	20000218 	.word	0x20000218
 8000f20:	200001f8 	.word	0x200001f8
 8000f24:	080094ac 	.word	0x080094ac
 8000f28:	447a0000 	.word	0x447a0000
 8000f2c:	47800000 	.word	0x47800000
        } else if (controller_U.AMK_bError) {
 8000f30:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <controller_step+0xaac>)
 8000f32:	7c1b      	ldrb	r3, [r3, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <controller_step+0x844>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000f38:	4ba1      	ldr	r3, [pc, #644]	; (80011c0 <controller_step+0xab0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000f3e:	4ba0      	ldr	r3, [pc, #640]	; (80011c0 <controller_step+0xab0>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000f44:	4b9f      	ldr	r3, [pc, #636]	; (80011c4 <controller_step+0xab4>)
 8000f46:	2205      	movs	r2, #5
 8000f48:	701a      	strb	r2, [r3, #0]
        break;
 8000f4a:	e003      	b.n	8000f54 <controller_step+0x844>
        break;
 8000f4c:	bf00      	nop
 8000f4e:	e0b4      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000f50:	bf00      	nop
 8000f52:	e0b2      	b.n	80010ba <controller_step+0x9aa>
        break;
 8000f54:	bf00      	nop
      }
      break;
 8000f56:	e0b0      	b.n	80010ba <controller_step+0x9aa>

     case controller_IN_AMK_startup:
      switch (controller_DW.is_AMK_startup) {
 8000f58:	4b99      	ldr	r3, [pc, #612]	; (80011c0 <controller_step+0xab0>)
 8000f5a:	79db      	ldrb	r3, [r3, #7]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d045      	beq.n	8000fec <controller_step+0x8dc>
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	dc6c      	bgt.n	800103e <controller_step+0x92e>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d002      	beq.n	8000f6e <controller_step+0x85e>
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d023      	beq.n	8000fb4 <controller_step+0x8a4>
 8000f6c:	e067      	b.n	800103e <controller_step+0x92e>
       case controller_IN_commandOn:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 1U;
 8000f6e:	4b96      	ldr	r3, [pc, #600]	; (80011c8 <controller_step+0xab8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	71da      	strb	r2, [r3, #7]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 1U;
 8000f74:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <controller_step+0xab8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	715a      	strb	r2, [r3, #5]
        if (controller_U.AMK_bInverterOn && controller_U.AMK_bQuitInverterOn) {
 8000f7a:	4b90      	ldr	r3, [pc, #576]	; (80011bc <controller_step+0xaac>)
 8000f7c:	7d5b      	ldrb	r3, [r3, #21]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <controller_step+0x888>
 8000f82:	4b8e      	ldr	r3, [pc, #568]	; (80011bc <controller_step+0xaac>)
 8000f84:	7d1b      	ldrb	r3, [r3, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <controller_step+0x888>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8000f8a:	4b8d      	ldr	r3, [pc, #564]	; (80011c0 <controller_step+0xab0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_running;
 8000f90:	4b8b      	ldr	r3, [pc, #556]	; (80011c0 <controller_step+0xab0>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f96:	e06b      	b.n	8001070 <controller_step+0x960>
        } else if (controller_U.AMK_bError) {
 8000f98:	4b88      	ldr	r3, [pc, #544]	; (80011bc <controller_step+0xaac>)
 8000f9a:	7c1b      	ldrb	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d067      	beq.n	8001070 <controller_step+0x960>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8000fa0:	4b87      	ldr	r3, [pc, #540]	; (80011c0 <controller_step+0xab0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8000fa6:	4b86      	ldr	r3, [pc, #536]	; (80011c0 <controller_step+0xab0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000fac:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <controller_step+0xab4>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	701a      	strb	r2, [r3, #0]
        break;
 8000fb2:	e05d      	b.n	8001070 <controller_step+0x960>

       case control_IN_enforceSetpointsZero:
        if (controller_DW.temporalCounter_i1 >= 100U) {
 8000fb4:	4b82      	ldr	r3, [pc, #520]	; (80011c0 <controller_step+0xab0>)
 8000fb6:	7adb      	ldrb	r3, [r3, #11]
 8000fb8:	2b63      	cmp	r3, #99	; 0x63
 8000fba:	d909      	bls.n	8000fd0 <controller_step+0x8c0>
          controller_DW.is_AMK_startup = controller_IN_commandOn;
 8000fbc:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <controller_step+0xab0>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 1U;
 8000fc2:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <controller_step+0xab8>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 1U;
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <controller_step+0xab8>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	715a      	strb	r2, [r3, #5]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000fce:	e051      	b.n	8001074 <controller_step+0x964>
        } else if (controller_U.AMK_bError) {
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <controller_step+0xaac>)
 8000fd2:	7c1b      	ldrb	r3, [r3, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d04d      	beq.n	8001074 <controller_step+0x964>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8000fd8:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <controller_step+0xab0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8000fde:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <controller_step+0xab0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <controller_step+0xab4>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	701a      	strb	r2, [r3, #0]
        break;
 8000fea:	e043      	b.n	8001074 <controller_step+0x964>

       case controller_IN_toggleDCon:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        controller_Y.AMK_bDcOn_tx = 1U;
 8000fec:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <controller_step+0xab8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	719a      	strb	r2, [r3, #6]
        if (controller_U.AMK_bDcOn && controller_U.AMK_bQuitDcOn) {
 8000ff2:	4b72      	ldr	r3, [pc, #456]	; (80011bc <controller_step+0xaac>)
 8000ff4:	7cdb      	ldrb	r3, [r3, #19]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d013      	beq.n	8001022 <controller_step+0x912>
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <controller_step+0xaac>)
 8000ffc:	7c9b      	ldrb	r3, [r3, #18]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00f      	beq.n	8001022 <controller_step+0x912>
          controller_DW.is_AMK_startup = control_IN_enforceSetpointsZero;
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <controller_step+0xab0>)
 8001004:	2202      	movs	r2, #2
 8001006:	71da      	strb	r2, [r3, #7]
          controller_DW.temporalCounter_i1 = 0U;
 8001008:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <controller_step+0xab0>)
 800100a:	2200      	movs	r2, #0
 800100c:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0;
 800100e:	4b6e      	ldr	r3, [pc, #440]	; (80011c8 <controller_step+0xab8>)
 8001010:	2200      	movs	r2, #0
 8001012:	815a      	strh	r2, [r3, #10]

          /* Outport: '<Root>/AMK_TorqueLimitPositiv' */
          controller_Y.AMK_TorqueLimitPositiv = 0;
 8001014:	4b6c      	ldr	r3, [pc, #432]	; (80011c8 <controller_step+0xab8>)
 8001016:	2200      	movs	r2, #0
 8001018:	819a      	strh	r2, [r3, #12]

          /* Outport: '<Root>/AMK_TorqueLimitNegativ' */
          controller_Y.AMK_TorqueLimitNegativ = 0;
 800101a:	4b6b      	ldr	r3, [pc, #428]	; (80011c8 <controller_step+0xab8>)
 800101c:	2200      	movs	r2, #0
 800101e:	81da      	strh	r2, [r3, #14]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8001020:	e02a      	b.n	8001078 <controller_step+0x968>
        } else if (controller_U.AMK_bError) {
 8001022:	4b66      	ldr	r3, [pc, #408]	; (80011bc <controller_step+0xaac>)
 8001024:	7c1b      	ldrb	r3, [r3, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d026      	beq.n	8001078 <controller_step+0x968>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 800102a:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <controller_step+0xab0>)
 800102c:	2200      	movs	r2, #0
 800102e:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <controller_step+0xab0>)
 8001032:	2201      	movs	r2, #1
 8001034:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <controller_step+0xab4>)
 8001038:	2205      	movs	r2, #5
 800103a:	701a      	strb	r2, [r3, #0]
        break;
 800103c:	e01c      	b.n	8001078 <controller_step+0x968>

       default:
        /* case IN_waiting_sysReady: */
        if (controller_U.AMK_bSystemReady) {
 800103e:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <controller_step+0xaac>)
 8001040:	7bdb      	ldrb	r3, [r3, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <controller_step+0x944>
          controller_DW.is_AMK_startup = controller_IN_toggleDCon;
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <controller_step+0xab0>)
 8001048:	2203      	movs	r2, #3
 800104a:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 1U;
 800104c:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <controller_step+0xab8>)
 800104e:	2201      	movs	r2, #1
 8001050:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8001052:	e013      	b.n	800107c <controller_step+0x96c>
        } else if (controller_U.AMK_bError) {
 8001054:	4b59      	ldr	r3, [pc, #356]	; (80011bc <controller_step+0xaac>)
 8001056:	7c1b      	ldrb	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00f      	beq.n	800107c <controller_step+0x96c>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <controller_step+0xab0>)
 800105e:	2200      	movs	r2, #0
 8001060:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <controller_step+0xab0>)
 8001064:	2201      	movs	r2, #1
 8001066:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <controller_step+0xab4>)
 800106a:	2205      	movs	r2, #5
 800106c:	701a      	strb	r2, [r3, #0]
        break;
 800106e:	e005      	b.n	800107c <controller_step+0x96c>
        break;
 8001070:	bf00      	nop
 8001072:	e022      	b.n	80010ba <controller_step+0x9aa>
        break;
 8001074:	bf00      	nop
 8001076:	e020      	b.n	80010ba <controller_step+0x9aa>
        break;
 8001078:	bf00      	nop
 800107a:	e01e      	b.n	80010ba <controller_step+0x9aa>
        break;
 800107c:	bf00      	nop
      }
      break;
 800107e:	e01c      	b.n	80010ba <controller_step+0x9aa>

     default:
      /* Outport: '<Root>/AMK_bInverterOn_tx' */
      /* case IN_motorOff_waitingForGov: */
      controller_Y.AMK_bInverterOn_tx = 0U;
 8001080:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <controller_step+0xab8>)
 8001082:	2200      	movs	r2, #0
 8001084:	715a      	strb	r2, [r3, #5]

      /* Outport: '<Root>/AMK_bDcOn_tx' */
      controller_Y.AMK_bDcOn_tx = 0U;
 8001086:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <controller_step+0xab8>)
 8001088:	2200      	movs	r2, #0
 800108a:	719a      	strb	r2, [r3, #6]

      /* Outport: '<Root>/AMK_bEnable' */
      controller_Y.AMK_bEnable = 0U;
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <controller_step+0xab8>)
 800108e:	2200      	movs	r2, #0
 8001090:	71da      	strb	r2, [r3, #7]

      /* Outport: '<Root>/AMK_bErrorReset' */
      controller_Y.AMK_bErrorReset = 0U;
 8001092:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <controller_step+0xab8>)
 8001094:	2200      	movs	r2, #0
 8001096:	721a      	strb	r2, [r3, #8]
      if (controller_B.GOV_e_miCmd == CMD_STARTUP) {
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <controller_step+0xab4>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d10b      	bne.n	80010b8 <controller_step+0x9a8>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_startup;
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <controller_step+0xab0>)
 80010a2:	2205      	movs	r2, #5
 80010a4:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_startup = controller_IN_waiting_sysReady;
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <controller_step+0xab0>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	71da      	strb	r2, [r3, #7]
        controller_B.MI_motorStatus = STARTUP;
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <controller_step+0xab4>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80010b2:	e001      	b.n	80010b8 <controller_step+0x9a8>
      break;
 80010b4:	bf00      	nop
 80010b6:	e000      	b.n	80010ba <controller_step+0x9aa>
      break;
 80010b8:	bf00      	nop
   *  Delay: '<S3>/Delay'
   *  Inport: '<Root>/BM_b_HVnegContactorSts'
   *  Inport: '<Root>/BM_b_HVposContactorSts'
   *  Inport: '<Root>/BM_b_prechrgContactorSts'
   */
  if (controller_DW.temporalCounter_i1_p < 127U) {
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <controller_step+0xab0>)
 80010bc:	7e1b      	ldrb	r3, [r3, #24]
 80010be:	2b7e      	cmp	r3, #126	; 0x7e
 80010c0:	d805      	bhi.n	80010ce <controller_step+0x9be>
    controller_DW.temporalCounter_i1_p++;
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <controller_step+0xab0>)
 80010c4:	7e1b      	ldrb	r3, [r3, #24]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <controller_step+0xab0>)
 80010cc:	761a      	strb	r2, [r3, #24]
  }

  if (controller_DW.is_active_c3_battery_monitor_li == 0U) {
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <controller_step+0xab0>)
 80010d0:	7ddb      	ldrb	r3, [r3, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <controller_step+0x9da>
    controller_DW.is_active_c3_battery_monitor_li = 1U;
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <controller_step+0xab0>)
 80010d8:	2201      	movs	r2, #1
 80010da:	75da      	strb	r2, [r3, #23]
    controller_DW.is_c3_battery_monitor_lib = controller_IN_InitialState;
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <controller_step+0xab0>)
 80010de:	2208      	movs	r2, #8
 80010e0:	759a      	strb	r2, [r3, #22]
    controller_DW.Delay_DSTATE_f = BM_INIT;
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <controller_step+0xab0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	705a      	strb	r2, [r3, #1]
 80010e8:	e188      	b.n	80013fc <controller_step+0xcec>
  } else {
    switch (controller_DW.is_c3_battery_monitor_lib) {
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <controller_step+0xab0>)
 80010ec:	7d9b      	ldrb	r3, [r3, #22]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	2b0b      	cmp	r3, #11
 80010f2:	f200 815f 	bhi.w	80013b4 <controller_step+0xca4>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <controller_step+0x9ec>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	0800112d 	.word	0x0800112d
 8001100:	08001135 	.word	0x08001135
 8001104:	0800113d 	.word	0x0800113d
 8001108:	08001145 	.word	0x08001145
 800110c:	0800114d 	.word	0x0800114d
 8001110:	08001155 	.word	0x08001155
 8001114:	0800115d 	.word	0x0800115d
 8001118:	08001165 	.word	0x08001165
 800111c:	08001293 	.word	0x08001293
 8001120:	080012dd 	.word	0x080012dd
 8001124:	08001325 	.word	0x08001325
 8001128:	0800136d 	.word	0x0800136d
     case controll_IN_ErrorAllClosedState:
      controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <controller_step+0xab0>)
 800112e:	220c      	movs	r2, #12
 8001130:	705a      	strb	r2, [r3, #1]
      break;
 8001132:	e163      	b.n	80013fc <controller_step+0xcec>

     case controller_IN_ErrorHVPositive:
      controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <controller_step+0xab0>)
 8001136:	220d      	movs	r2, #13
 8001138:	705a      	strb	r2, [r3, #1]
      break;
 800113a:	e15f      	b.n	80013fc <controller_step+0xcec>

     case IN_ErrorInitializePrechargeStat:
      controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <controller_step+0xab0>)
 800113e:	2209      	movs	r2, #9
 8001140:	705a      	strb	r2, [r3, #1]
      break;
 8001142:	e15b      	b.n	80013fc <controller_step+0xcec>

     case co_IN_ErrorPrechargeClosedState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <controller_step+0xab0>)
 8001146:	2207      	movs	r2, #7
 8001148:	705a      	strb	r2, [r3, #1]
      break;
 800114a:	e157      	b.n	80013fc <controller_step+0xcec>

     case controll_IN_ErrorPrechargeState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <controller_step+0xab0>)
 800114e:	220a      	movs	r2, #10
 8001150:	705a      	strb	r2, [r3, #1]
      break;
 8001152:	e153      	b.n	80013fc <controller_step+0xcec>

     case controller_IN_ErrorRunningState:
      controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <controller_step+0xab0>)
 8001156:	220b      	movs	r2, #11
 8001158:	705a      	strb	r2, [r3, #1]
      break;
 800115a:	e14f      	b.n	80013fc <controller_step+0xcec>

     case controller_IN_ErrorStartupState:
      controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <controller_step+0xab0>)
 800115e:	2208      	movs	r2, #8
 8001160:	705a      	strb	r2, [r3, #1]
      break;
 8001162:	e14b      	b.n	80013fc <controller_step+0xcec>
     case controller_IN_InitialState:
      {
        boolean_T tmp_0;
        boolean_T tmp_1;
        boolean_T tmp_2;
        controller_DW.Delay_DSTATE_f = BM_INIT;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <controller_step+0xab0>)
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
        tmp_0 = !controller_U.BM_b_HVnegContactorSts;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <controller_step+0xaac>)
 800116c:	7b9b      	ldrb	r3, [r3, #14]
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	70fb      	strb	r3, [r7, #3]
        tmp_1 = !controller_U.BM_b_HVposContactorSts;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <controller_step+0xaac>)
 800117c:	7b5b      	ldrb	r3, [r3, #13]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	70bb      	strb	r3, [r7, #2]
        tmp_2 = ((!controller_U.BM_b_prechrgContactorSts) && tmp_0);
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <controller_step+0xaac>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d104      	bne.n	800119c <controller_step+0xa8c>
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <controller_step+0xa8c>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <controller_step+0xa8e>
 800119c:	2300      	movs	r3, #0
 800119e:	707b      	strb	r3, [r7, #1]
        if (tmp_2 && tmp_1) {
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d012      	beq.n	80011cc <controller_step+0xabc>
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00f      	beq.n	80011cc <controller_step+0xabc>
          controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState1;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <controller_step+0xab0>)
 80011ae:	220d      	movs	r2, #13
 80011b0:	759a      	strb	r2, [r3, #22]
          controller_DW.Delay_DSTATE_f = BM_IDLE;
 80011b2:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <controller_step+0xab0>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	705a      	strb	r2, [r3, #1]
 80011b8:	e06a      	b.n	8001290 <controller_step+0xb80>
 80011ba:	bf00      	nop
 80011bc:	20000218 	.word	0x20000218
 80011c0:	200001fc 	.word	0x200001fc
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	20000240 	.word	0x20000240
        } else if (controller_U.BM_b_prechrgContactorSts && tmp_0 && tmp_1) {
 80011cc:	4b94      	ldr	r3, [pc, #592]	; (8001420 <controller_step+0xd10>)
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <controller_step+0xade>
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <controller_step+0xade>
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <controller_step+0xade>
          controller_DW.is_c3_battery_monitor_lib =
 80011e0:	4b90      	ldr	r3, [pc, #576]	; (8001424 <controller_step+0xd14>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	759a      	strb	r2, [r3, #22]
            co_IN_ErrorPrechargeClosedState;
          controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 80011e6:	4b8f      	ldr	r3, [pc, #572]	; (8001424 <controller_step+0xd14>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	705a      	strb	r2, [r3, #1]
 80011ec:	e050      	b.n	8001290 <controller_step+0xb80>
        } else {
          tmp_0 = (controller_U.BM_b_prechrgContactorSts &&
 80011ee:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <controller_step+0xd10>)
 80011f0:	7b1b      	ldrb	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <controller_step+0xaf2>
                   controller_U.BM_b_HVnegContactorSts);
 80011f6:	4b8a      	ldr	r3, [pc, #552]	; (8001420 <controller_step+0xd10>)
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
          tmp_0 = (controller_U.BM_b_prechrgContactorSts &&
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <controller_step+0xaf2>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <controller_step+0xaf4>
 8001202:	2300      	movs	r3, #0
 8001204:	70fb      	strb	r3, [r7, #3]
          if (tmp_0 && controller_U.BM_b_HVposContactorSts) {
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <controller_step+0xb12>
 800120c:	4b84      	ldr	r3, [pc, #528]	; (8001420 <controller_step+0xd10>)
 800120e:	7b5b      	ldrb	r3, [r3, #13]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <controller_step+0xb12>
            controller_DW.is_c3_battery_monitor_lib =
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <controller_step+0xd14>)
 8001216:	2201      	movs	r2, #1
 8001218:	759a      	strb	r2, [r3, #22]
              controll_IN_ErrorAllClosedState;
            controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 800121a:	4b82      	ldr	r3, [pc, #520]	; (8001424 <controller_step+0xd14>)
 800121c:	220c      	movs	r2, #12
 800121e:	705a      	strb	r2, [r3, #1]
 8001220:	e036      	b.n	8001290 <controller_step+0xb80>
          } else if (tmp_2 && controller_U.BM_b_HVposContactorSts) {
 8001222:	787b      	ldrb	r3, [r7, #1]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00a      	beq.n	800123e <controller_step+0xb2e>
 8001228:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <controller_step+0xd10>)
 800122a:	7b5b      	ldrb	r3, [r3, #13]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <controller_step+0xb2e>
            controller_DW.is_c3_battery_monitor_lib =
 8001230:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <controller_step+0xd14>)
 8001232:	2202      	movs	r2, #2
 8001234:	759a      	strb	r2, [r3, #22]
              controller_IN_ErrorHVPositive;
            controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 8001236:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <controller_step+0xd14>)
 8001238:	220d      	movs	r2, #13
 800123a:	705a      	strb	r2, [r3, #1]
 800123c:	e028      	b.n	8001290 <controller_step+0xb80>
          } else if (tmp_0 && tmp_1) {
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00c      	beq.n	800125e <controller_step+0xb4e>
 8001244:	78bb      	ldrb	r3, [r7, #2]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <controller_step+0xb4e>
            controller_DW.is_c3_battery_monitor_lib =
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <controller_step+0xd14>)
 800124c:	220a      	movs	r2, #10
 800124e:	759a      	strb	r2, [r3, #22]
              controller_IN_PrechargeState;
            controller_DW.temporalCounter_i1_p = 0U;
 8001250:	4b74      	ldr	r3, [pc, #464]	; (8001424 <controller_step+0xd14>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
            controller_DW.Delay_DSTATE_f = PRECHARGE;
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <controller_step+0xd14>)
 8001258:	2205      	movs	r2, #5
 800125a:	705a      	strb	r2, [r3, #1]
 800125c:	e018      	b.n	8001290 <controller_step+0xb80>
          } else if ((!controller_U.BM_b_prechrgContactorSts) &&
 800125e:	4b70      	ldr	r3, [pc, #448]	; (8001420 <controller_step+0xd10>)
 8001260:	7b1b      	ldrb	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 80bf 	bne.w	80013e6 <controller_step+0xcd6>
                     controller_U.BM_b_HVnegContactorSts &&
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <controller_step+0xd10>)
 800126a:	7b9b      	ldrb	r3, [r3, #14]
          } else if ((!controller_U.BM_b_prechrgContactorSts) &&
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80ba 	beq.w	80013e6 <controller_step+0xcd6>
                     controller_U.BM_b_HVposContactorSts) {
 8001272:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <controller_step+0xd10>)
 8001274:	7b5b      	ldrb	r3, [r3, #13]
                     controller_U.BM_b_HVnegContactorSts &&
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80b5 	beq.w	80013e6 <controller_step+0xcd6>
            controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 800127c:	4b69      	ldr	r3, [pc, #420]	; (8001424 <controller_step+0xd14>)
 800127e:	220b      	movs	r2, #11
 8001280:	759a      	strb	r2, [r3, #22]
            controller_DW.temporalCounter_i1_p = 0U;
 8001282:	4b68      	ldr	r3, [pc, #416]	; (8001424 <controller_step+0xd14>)
 8001284:	2200      	movs	r2, #0
 8001286:	761a      	strb	r2, [r3, #24]
            controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001288:	4b66      	ldr	r3, [pc, #408]	; (8001424 <controller_step+0xd14>)
 800128a:	2206      	movs	r2, #6
 800128c:	705a      	strb	r2, [r3, #1]
          }
        }
      }
      break;
 800128e:	e0aa      	b.n	80013e6 <controller_step+0xcd6>
 8001290:	e0a9      	b.n	80013e6 <controller_step+0xcd6>

     case con_IN_InitializePrechargeState:
      controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <controller_step+0xd14>)
 8001294:	2204      	movs	r2, #4
 8001296:	705a      	strb	r2, [r3, #1]
      if (controller_U.BM_b_prechrgContactorSts &&
 8001298:	4b61      	ldr	r3, [pc, #388]	; (8001420 <controller_step+0xd10>)
 800129a:	7b1b      	ldrb	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d011      	beq.n	80012c4 <controller_step+0xbb4>
          controller_U.BM_b_HVnegContactorSts &&
 80012a0:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <controller_step+0xd10>)
 80012a2:	7b9b      	ldrb	r3, [r3, #14]
      if (controller_U.BM_b_prechrgContactorSts &&
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <controller_step+0xbb4>
          controller_U.BM_b_HVposContactorSts) {
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <controller_step+0xd10>)
 80012aa:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d009      	beq.n	80012c4 <controller_step+0xbb4>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_PrechargeState;
 80012b0:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <controller_step+0xd14>)
 80012b2:	220a      	movs	r2, #10
 80012b4:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <controller_step+0xd14>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = PRECHARGE;
 80012bc:	4b59      	ldr	r3, [pc, #356]	; (8001424 <controller_step+0xd14>)
 80012be:	2205      	movs	r2, #5
 80012c0:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          IN_ErrorInitializePrechargeStat;
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
      }
      break;
 80012c2:	e092      	b.n	80013ea <controller_step+0xcda>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 80012c4:	4b57      	ldr	r3, [pc, #348]	; (8001424 <controller_step+0xd14>)
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	2b63      	cmp	r3, #99	; 0x63
 80012ca:	f240 808e 	bls.w	80013ea <controller_step+0xcda>
        controller_DW.is_c3_battery_monitor_lib =
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <controller_step+0xd14>)
 80012d0:	2203      	movs	r2, #3
 80012d2:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <controller_step+0xd14>)
 80012d6:	2209      	movs	r2, #9
 80012d8:	705a      	strb	r2, [r3, #1]
      break;
 80012da:	e086      	b.n	80013ea <controller_step+0xcda>

     case controller_IN_PrechargeState:
      controller_DW.Delay_DSTATE_f = PRECHARGE;
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <controller_step+0xd14>)
 80012de:	2205      	movs	r2, #5
 80012e0:	705a      	strb	r2, [r3, #1]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80012e2:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <controller_step+0xd10>)
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d111      	bne.n	800130e <controller_step+0xbfe>
          controller_U.BM_b_HVnegContactorSts &&
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <controller_step+0xd10>)
 80012ec:	7b9b      	ldrb	r3, [r3, #14]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00d      	beq.n	800130e <controller_step+0xbfe>
          controller_U.BM_b_HVposContactorSts) {
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <controller_step+0xd10>)
 80012f4:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <controller_step+0xbfe>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <controller_step+0xd14>)
 80012fc:	220b      	movs	r2, #11
 80012fe:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <controller_step+0xd14>)
 8001302:	2200      	movs	r2, #0
 8001304:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <controller_step+0xd14>)
 8001308:	2206      	movs	r2, #6
 800130a:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          controll_IN_ErrorPrechargeState;
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
      }
      break;
 800130c:	e06f      	b.n	80013ee <controller_step+0xcde>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <controller_step+0xd14>)
 8001310:	7e1b      	ldrb	r3, [r3, #24]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	d96b      	bls.n	80013ee <controller_step+0xcde>
        controller_DW.is_c3_battery_monitor_lib =
 8001316:	4b43      	ldr	r3, [pc, #268]	; (8001424 <controller_step+0xd14>)
 8001318:	2205      	movs	r2, #5
 800131a:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <controller_step+0xd14>)
 800131e:	220a      	movs	r2, #10
 8001320:	705a      	strb	r2, [r3, #1]
      break;
 8001322:	e064      	b.n	80013ee <controller_step+0xcde>

     case controller_IN_RunningState:
      controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <controller_step+0xd14>)
 8001326:	2206      	movs	r2, #6
 8001328:	705a      	strb	r2, [r3, #1]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <controller_step+0xd10>)
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d111      	bne.n	8001356 <controller_step+0xc46>
          controller_U.BM_b_HVnegContactorSts &&
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <controller_step+0xd10>)
 8001334:	7b9b      	ldrb	r3, [r3, #14]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <controller_step+0xc46>
          controller_U.BM_b_HVposContactorSts) {
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <controller_step+0xd10>)
 800133c:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <controller_step+0xc46>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <controller_step+0xd14>)
 8001344:	220b      	movs	r2, #11
 8001346:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <controller_step+0xd14>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <controller_step+0xd14>)
 8001350:	2206      	movs	r2, #6
 8001352:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorRunningState;
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
      }
      break;
 8001354:	e04d      	b.n	80013f2 <controller_step+0xce2>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <controller_step+0xd14>)
 8001358:	7e1b      	ldrb	r3, [r3, #24]
 800135a:	2b63      	cmp	r3, #99	; 0x63
 800135c:	d949      	bls.n	80013f2 <controller_step+0xce2>
        controller_DW.is_c3_battery_monitor_lib =
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <controller_step+0xd14>)
 8001360:	2206      	movs	r2, #6
 8001362:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <controller_step+0xd14>)
 8001366:	220b      	movs	r2, #11
 8001368:	705a      	strb	r2, [r3, #1]
      break;
 800136a:	e042      	b.n	80013f2 <controller_step+0xce2>

     case controller_IN_StartupState:
      controller_DW.Delay_DSTATE_f = BM_STARTUP;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <controller_step+0xd14>)
 800136e:	2203      	movs	r2, #3
 8001370:	705a      	strb	r2, [r3, #1]
      if (controller_U.BM_b_prechrgContactorSts &&
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <controller_step+0xd10>)
 8001374:	7b1b      	ldrb	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d011      	beq.n	800139e <controller_step+0xc8e>
          controller_U.BM_b_HVnegContactorSts &&
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <controller_step+0xd10>)
 800137c:	7b9b      	ldrb	r3, [r3, #14]
      if (controller_U.BM_b_prechrgContactorSts &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00d      	beq.n	800139e <controller_step+0xc8e>
          (!controller_U.BM_b_HVposContactorSts)) {
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <controller_step+0xd10>)
 8001384:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <controller_step+0xc8e>
        controller_DW.is_c3_battery_monitor_lib =
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <controller_step+0xd14>)
 800138c:	2209      	movs	r2, #9
 800138e:	759a      	strb	r2, [r3, #22]
          con_IN_InitializePrechargeState;
        controller_DW.temporalCounter_i1_p = 0U;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <controller_step+0xd14>)
 8001392:	2200      	movs	r2, #0
 8001394:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <controller_step+0xd14>)
 8001398:	2204      	movs	r2, #4
 800139a:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorStartupState;
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
      }
      break;
 800139c:	e02b      	b.n	80013f6 <controller_step+0xce6>
      } else if (controller_DW.temporalCounter_i1_p >= 100U) {
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <controller_step+0xd14>)
 80013a0:	7e1b      	ldrb	r3, [r3, #24]
 80013a2:	2b63      	cmp	r3, #99	; 0x63
 80013a4:	d927      	bls.n	80013f6 <controller_step+0xce6>
        controller_DW.is_c3_battery_monitor_lib =
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <controller_step+0xd14>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <controller_step+0xd14>)
 80013ae:	2208      	movs	r2, #8
 80013b0:	705a      	strb	r2, [r3, #1]
      break;
 80013b2:	e020      	b.n	80013f6 <controller_step+0xce6>

     default:
      /* case IN_StartupState1: */
      controller_DW.Delay_DSTATE_f = BM_IDLE;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <controller_step+0xd14>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	705a      	strb	r2, [r3, #1]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <controller_step+0xd10>)
 80013bc:	7b1b      	ldrb	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11b      	bne.n	80013fa <controller_step+0xcea>
          controller_U.BM_b_HVnegContactorSts &&
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <controller_step+0xd10>)
 80013c4:	7b9b      	ldrb	r3, [r3, #14]
      if ((!controller_U.BM_b_prechrgContactorSts) &&
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d017      	beq.n	80013fa <controller_step+0xcea>
          (!controller_U.BM_b_HVposContactorSts)) {
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <controller_step+0xd10>)
 80013cc:	7b5b      	ldrb	r3, [r3, #13]
          controller_U.BM_b_HVnegContactorSts &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d113      	bne.n	80013fa <controller_step+0xcea>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <controller_step+0xd14>)
 80013d4:	220c      	movs	r2, #12
 80013d6:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <controller_step+0xd14>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_STARTUP;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <controller_step+0xd14>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	705a      	strb	r2, [r3, #1]
      }
      break;
 80013e4:	e009      	b.n	80013fa <controller_step+0xcea>
      break;
 80013e6:	bf00      	nop
 80013e8:	e008      	b.n	80013fc <controller_step+0xcec>
      break;
 80013ea:	bf00      	nop
 80013ec:	e006      	b.n	80013fc <controller_step+0xcec>
      break;
 80013ee:	bf00      	nop
 80013f0:	e004      	b.n	80013fc <controller_step+0xcec>
      break;
 80013f2:	bf00      	nop
 80013f4:	e002      	b.n	80013fc <controller_step+0xcec>
      break;
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <controller_step+0xcec>
      break;
 80013fa:	bf00      	nop
   *  Constant: '<S4>/Constant1'
   *  Delay: '<S3>/Delay1'
   *  RelationalOperator: '<S4>/motorErrorActive'
   *  Switch: '<S4>/Switch1'
   */
  if (controller_B.MI_motorStatus == MI_STS_ERROR) {
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <controller_step+0xd18>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d103      	bne.n	800140c <controller_step+0xcfc>
    controller_DW.Delay1_DSTATE = MI_STS_ERROR;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <controller_step+0xd14>)
 8001406:	2205      	movs	r2, #5
 8001408:	701a      	strb	r2, [r3, #0]
  } else {
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
  }

  /* End of Switch: '<S4>/Switch' */
}
 800140a:	e003      	b.n	8001414 <controller_step+0xd04>
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <controller_step+0xd18>)
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <controller_step+0xd14>)
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	ecbd 8b02 	vpop	{d8}
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000218 	.word	0x20000218
 8001424:	200001fc 	.word	0x200001fc
 8001428:	200001f8 	.word	0x200001f8

0800142c <rt_OneStep>:
 * the generated code step function.  Overrun behavior should be tailored to
 * your application needs.  This example simply sets an error status in the
 * real-time model and returns from rt_OneStep.
 */
void rt_OneStep(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <rt_OneStep+0x28>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <rt_OneStep+0x16>
    rtmSetErrorStatus(controller_M, "Overrun");
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <rt_OneStep+0x2c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <rt_OneStep+0x30>)
 800143e:	601a      	str	r2, [r3, #0]
    return;
 8001440:	e007      	b.n	8001452 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <rt_OneStep+0x28>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  controller_step();
 8001448:	f7ff f962 	bl	8000710 <controller_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 800144c:	4b01      	ldr	r3, [pc, #4]	; (8001454 <rt_OneStep+0x28>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000254 	.word	0x20000254
 8001458:	080094a8 	.word	0x080094a8
 800145c:	08009490 	.word	0x08009490

08001460 <rtIsInfF>:
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
}

/* Test if single-precision value is infinite */
boolean_T rtIsInfF(real32_T value)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <rtIsInfF+0x44>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ed97 7a01 	vldr	s14, [r7, #4]
 8001474:	eeb4 7a67 	vcmp.f32	s14, s15
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	d009      	beq.n	8001492 <rtIsInfF+0x32>
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <rtIsInfF+0x48>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ed97 7a01 	vldr	s14, [r7, #4]
 8001488:	eeb4 7a67 	vcmp.f32	s14, s15
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	d101      	bne.n	8001496 <rtIsInfF+0x36>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <rtIsInfF+0x38>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000258 	.word	0x20000258
 80014a8:	2000025c 	.word	0x2000025c

080014ac <rtIsNaNF>:
  return result;
}

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80014c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80014c4:	d106      	bne.n	80014d4 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <rtIsNaNF+0x28>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <rtIsNaNF+0x2a>
 80014d4:	2300      	movs	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f000 ffec 	bl	80024c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f8f5 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 faa7 	bl	8001a44 <MX_GPIO_Init>
  MX_CAN1_Init();
 80014f6:	f000 f9f1 	bl	80018dc <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80014fa:	f000 fa73 	bl	80019e4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80014fe:	f000 f949 	bl	8001794 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001502:	f000 f999 	bl	8001838 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001506:	f000 fa1f 	bl	8001948 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	// Start 0.2s timer interrupt
	HAL_TIM_Base_Start_IT(&htim2);
 800150a:	4867      	ldr	r0, [pc, #412]	; (80016a8 <main+0x1c4>)
 800150c:	f003 fec0 	bl	8005290 <HAL_TIM_Base_Start_IT>

	UART_st uart3 = {
 8001510:	4b66      	ldr	r3, [pc, #408]	; (80016ac <main+0x1c8>)
 8001512:	f107 0408 	add.w	r4, r7, #8
 8001516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.bit_position = LSB_First,
		.baudrate = UART_115200,
		.mode = UART_TX_RX,
		.datasize = UART_Datasize_8,
		.uart_num = 3};
	Printf_Init(&uart3);
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fb4d 	bl	8001bc0 <Printf_Init>

	CAN_Config();
 8001526:	f000 fae5 	bl	8001af4 <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800152a:	2102      	movs	r1, #2
 800152c:	4860      	ldr	r0, [pc, #384]	; (80016b0 <main+0x1cc>)
 800152e:	f002 f853 	bl	80035d8 <HAL_CAN_ActivateNotification>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <main+0x58>
	{
		Error_Handler();
 8001538:	f000 fb36 	bl	8001ba8 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800153c:	2101      	movs	r1, #1
 800153e:	485c      	ldr	r0, [pc, #368]	; (80016b0 <main+0x1cc>)
 8001540:	f002 f84a 	bl	80035d8 <HAL_CAN_ActivateNotification>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <main+0x6a>
	{
		Error_Handler();
 800154a:	f000 fb2d 	bl	8001ba8 <Error_Handler>
	}

	TxHeaderInv1.DLC = 8;
 800154e:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <main+0x1d0>)
 8001550:	2208      	movs	r2, #8
 8001552:	611a      	str	r2, [r3, #16]
	TxHeaderInv1.IDE = CAN_ID_STD;
 8001554:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <main+0x1d0>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
	TxHeaderInv1.RTR = CAN_RTR_DATA;
 800155a:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <main+0x1d0>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
	TxHeaderInv1.StdId = 0x185; // 0x183 represents AMK setpoints 1
 8001560:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <main+0x1d0>)
 8001562:	f240 1285 	movw	r2, #389	; 0x185
 8001566:	601a      	str	r2, [r3, #0]
	TxHeaderInv1.TransmitGlobalTime = DISABLE;
 8001568:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <main+0x1d0>)
 800156a:	2200      	movs	r2, #0
 800156c:	751a      	strb	r2, [r3, #20]

	TxHeaderInv2.DLC = 8;
 800156e:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <main+0x1d4>)
 8001570:	2208      	movs	r2, #8
 8001572:	611a      	str	r2, [r3, #16]
	TxHeaderInv2.IDE = CAN_ID_STD;
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <main+0x1d4>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
	TxHeaderInv2.RTR = CAN_RTR_DATA;
 800157a:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <main+0x1d4>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
	TxHeaderInv2.StdId = 0x186;
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <main+0x1d4>)
 8001582:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8001586:	601a      	str	r2, [r3, #0]
	TxHeaderInv2.TransmitGlobalTime = DISABLE;
 8001588:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <main+0x1d4>)
 800158a:	2200      	movs	r2, #0
 800158c:	751a      	strb	r2, [r3, #20]

	TxHeaderInv3.DLC = 8;
 800158e:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <main+0x1d8>)
 8001590:	2208      	movs	r2, #8
 8001592:	611a      	str	r2, [r3, #16]
	TxHeaderInv3.IDE = CAN_ID_STD;
 8001594:	4b49      	ldr	r3, [pc, #292]	; (80016bc <main+0x1d8>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
	TxHeaderInv3.RTR = CAN_RTR_DATA;
 800159a:	4b48      	ldr	r3, [pc, #288]	; (80016bc <main+0x1d8>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
	TxHeaderInv3.StdId = 0x500;
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <main+0x1d8>)
 80015a2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80015a6:	601a      	str	r2, [r3, #0]
	TxHeaderInv3.TransmitGlobalTime = DISABLE;
 80015a8:	4b44      	ldr	r3, [pc, #272]	; (80016bc <main+0x1d8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	751a      	strb	r2, [r3, #20]


	// Init steering and brake angle sensor ADC's
	// TODO: Add 2 more ADC for another accelerator and steering angle sensor
	MX_ADC1_Init();
 80015ae:	f000 f8f1 	bl	8001794 <MX_ADC1_Init>
	MX_ADC2_Init();
 80015b2:	f000 f941 	bl	8001838 <MX_ADC2_Init>

	// Spoof battery contactor status values
	controller_U.BM_b_prechrgContactorSts = PRECHRG_CONTACTOR_STATUS;
 80015b6:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <main+0x1dc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	731a      	strb	r2, [r3, #12]
	controller_U.BM_b_HVposContactorSts = HV_POS_CONTACTOR_STATUS;
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <main+0x1dc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	735a      	strb	r2, [r3, #13]
	controller_U.BM_b_HVnegContactorSts = HV_NEG_CONTACTOR_STATUS;
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <main+0x1dc>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	739a      	strb	r2, [r3, #14]

	// Spoof steering angle as 0
	controller_U.DI_V_SteeringAngle = 0;
 80015c8:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <main+0x1dc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	805a      	strh	r2, [r3, #2]
	
	controller_U.DI_b_DriverButton = true;
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <main+0x1dc>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	719a      	strb	r2, [r3, #6]
	controller_U.AMK_bSystemReady = true;
 80015d4:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <main+0x1dc>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	73da      	strb	r2, [r3, #15]
	controller_U.AMK_bError = false;
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <main+0x1dc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	741a      	strb	r2, [r3, #16]
	controller_U.AMK_bQuitDcOn = true;
 80015e0:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <main+0x1dc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	749a      	strb	r2, [r3, #18]
	controller_U.AMK_bDcOn = true;
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <main+0x1dc>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	74da      	strb	r2, [r3, #19]
	controller_U.AMK_bQuitInverterOn = true;
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <main+0x1dc>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	751a      	strb	r2, [r3, #20]
	controller_U.AMK_bInverterOn = true;
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <main+0x1dc>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	755a      	strb	r2, [r3, #21]
	controller_U.AMK_bDerating = false;
 80015f8:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <main+0x1dc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	759a      	strb	r2, [r3, #22]
//		for(int i=0; i<250; i++) {
//			HAL_CAN_AddTxMessage(&hcan1, &TxHeaderInv1, TxResetErr, &TxMailbox);
//			HAL_Delay(45);
//		}
		// Get accelerator and brake pedal (ADC) inputs
		HAL_ADC_Start(&hadc1);
 80015fe:	4831      	ldr	r0, [pc, #196]	; (80016c4 <main+0x1e0>)
 8001600:	f001 f826 	bl	8002650 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001608:	482e      	ldr	r0, [pc, #184]	; (80016c4 <main+0x1e0>)
 800160a:	f001 f8ef 	bl	80027ec <HAL_ADC_PollForConversion>
		accelPedalAdc = HAL_ADC_GetValue(&hadc1);
 800160e:	482d      	ldr	r0, [pc, #180]	; (80016c4 <main+0x1e0>)
 8001610:	f001 f977 	bl	8002902 <HAL_ADC_GetValue>
 8001614:	4603      	mov	r3, r0
 8001616:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <main+0x1e4>)
 8001618:	6013      	str	r3, [r2, #0]
////			HAL_CAN_AddTxMessage(&hcan1, &TxHeaderInv1, TxTorqueLimits, &TxMailbox);
//			HAL_CAN_AddTxMessage(&hcan1, &TxHeaderInv1, TxTorqueLimits, &TxMailbox);
//			HAL_Delay(45);
//		}
		
		HAL_ADC_Start(&hadc2);
 800161a:	482c      	ldr	r0, [pc, #176]	; (80016cc <main+0x1e8>)
 800161c:	f001 f818 	bl	8002650 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001624:	4829      	ldr	r0, [pc, #164]	; (80016cc <main+0x1e8>)
 8001626:	f001 f8e1 	bl	80027ec <HAL_ADC_PollForConversion>
		accelPedalAdc = HAL_ADC_GetValue(&hadc2);
 800162a:	4828      	ldr	r0, [pc, #160]	; (80016cc <main+0x1e8>)
 800162c:	f001 f969 	bl	8002902 <HAL_ADC_GetValue>
 8001630:	4603      	mov	r3, r0
 8001632:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <main+0x1e4>)
 8001634:	6013      	str	r3, [r2, #0]
		
//		 For testing purposes, we will use the same ADC input for both accelerator pedals
		controller_U.DI_V_AccelPedalPos1 = accelPedalAdc;
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <main+0x1e4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <main+0x1dc>)
 800163e:	811a      	strh	r2, [r3, #8]
		controller_U.DI_V_AccelPedalPos2 = accelPedalAdc;
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <main+0x1e4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b21a      	sxth	r2, r3
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <main+0x1dc>)
 8001648:	815a      	strh	r2, [r3, #10]
		controller_U.DI_V_BrakePedalPos = breakPedalAdc;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <main+0x1ec>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b21a      	sxth	r2, r3
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <main+0x1dc>)
 8001652:	809a      	strh	r2, [r3, #4]

		uint8_t TxTorqueLimits[8] = {0b00000000,
 8001654:	2300      	movs	r3, #0
 8001656:	703b      	strb	r3, [r7, #0]
 8001658:	2307      	movs	r3, #7
 800165a:	707b      	strb	r3, [r7, #1]
							0b00000111,
							controller_Y.AMK_TargetVelocity >> 8,  // Target velocity [15:8]
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <main+0x1f0>)
 800165e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		uint8_t TxTorqueLimits[8] = {0b00000000,
 8001662:	121b      	asrs	r3, r3, #8
 8001664:	b21b      	sxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	70bb      	strb	r3, [r7, #2]
							controller_Y.AMK_TargetVelocity,  // Target velocity [7:0]
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <main+0x1f0>)
 800166c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		uint8_t TxTorqueLimits[8] = {0b00000000,
 8001670:	b2db      	uxtb	r3, r3
 8001672:	70fb      	strb	r3, [r7, #3]
							controller_Y.AMK_TorqueLimitPositiv >> 8,  // Torque limit positive [15:8]
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <main+0x1f0>)
 8001676:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		uint8_t TxTorqueLimits[8] = {0b00000000,
 800167a:	121b      	asrs	r3, r3, #8
 800167c:	b21b      	sxth	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	713b      	strb	r3, [r7, #4]
							controller_Y.AMK_TorqueLimitPositiv,  // Torque limit positive [7:0]
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <main+0x1f0>)
 8001684:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		uint8_t TxTorqueLimits[8] = {0b00000000,
 8001688:	b2db      	uxtb	r3, r3
 800168a:	717b      	strb	r3, [r7, #5]
 800168c:	2300      	movs	r3, #0
 800168e:	71bb      	strb	r3, [r7, #6]
 8001690:	2300      	movs	r3, #0
 8001692:	71fb      	strb	r3, [r7, #7]
							0b00000000,  // Torque limit negative [15:8]
							0b00000000}; // Torque limit negative [7:0]

		HAL_CAN_AddTxMessage(&hcan1, &TxHeaderInv1, TxTorqueLimits, &TxMailbox);
 8001694:	463a      	mov	r2, r7
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <main+0x1f4>)
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <main+0x1d0>)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <main+0x1cc>)
 800169c:	f001 fdba 	bl	8003214 <HAL_CAN_AddTxMessage>

		HAL_Delay(45);
 80016a0:	202d      	movs	r0, #45	; 0x2d
 80016a2:	f000 ff6d 	bl	8002580 <HAL_Delay>
	{
 80016a6:	e7aa      	b.n	80015fe <main+0x11a>
 80016a8:	20000318 	.word	0x20000318
 80016ac:	08009498 	.word	0x08009498
 80016b0:	200002f0 	.word	0x200002f0
 80016b4:	200003ec 	.word	0x200003ec
 80016b8:	20000404 	.word	0x20000404
 80016bc:	2000041c 	.word	0x2000041c
 80016c0:	20000218 	.word	0x20000218
 80016c4:	20000260 	.word	0x20000260
 80016c8:	2000045c 	.word	0x2000045c
 80016cc:	200002a8 	.word	0x200002a8
 80016d0:	20000460 	.word	0x20000460
 80016d4:	20000240 	.word	0x20000240
 80016d8:	20000458 	.word	0x20000458

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	; 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2234      	movs	r2, #52	; 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 f81a 	bl	8006724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <SystemClock_Config+0xb0>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <SystemClock_Config+0xb0>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <SystemClock_Config+0xb0>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <SystemClock_Config+0xb4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <SystemClock_Config+0xb4>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <SystemClock_Config+0xb4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001734:	2302      	movs	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173c:	2310      	movs	r3, #16
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fc8d 	bl	8004068 <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001754:	f000 fa28 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f002 ff26 	bl	80045c4 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800177e:	f000 fa13 	bl	8001ba8 <Error_Handler>
  }
}
 8001782:	bf00      	nop
 8001784:	3750      	adds	r7, #80	; 0x50
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179a:	463b      	mov	r3, r7
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_ADC1_Init+0x98>)
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <MX_ADC1_Init+0x9c>)
 80017aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <MX_ADC1_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_ADC1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_ADC1_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_ADC1_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_ADC1_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_ADC1_Init+0x98>)
 80017d4:	4a17      	ldr	r2, [pc, #92]	; (8001834 <MX_ADC1_Init+0xa0>)
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_ADC1_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_ADC1_Init+0x98>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_ADC1_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_ADC1_Init+0x98>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <MX_ADC1_Init+0x98>)
 80017f4:	f000 fee8 	bl	80025c8 <HAL_ADC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017fe:	f000 f9d3 	bl	8001ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001806:	2301      	movs	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_ADC1_Init+0x98>)
 8001814:	f001 f882 	bl	800291c <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800181e:	f000 f9c3 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000260 	.word	0x20000260
 8001830:	40012000 	.word	0x40012000
 8001834:	0f000001 	.word	0x0f000001

08001838 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_ADC2_Init+0x98>)
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <MX_ADC2_Init+0x9c>)
 800184e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_ADC2_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_ADC2_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <MX_ADC2_Init+0xa0>)
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_ADC2_Init+0x98>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001884:	2201      	movs	r2, #1
 8001886:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_ADC2_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001892:	2201      	movs	r2, #1
 8001894:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_ADC2_Init+0x98>)
 8001898:	f000 fe96 	bl	80025c8 <HAL_ADC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f981 	bl	8001ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_ADC2_Init+0x98>)
 80018b8:	f001 f830 	bl	800291c <HAL_ADC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80018c2:	f000 f971 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002a8 	.word	0x200002a8
 80018d4:	40012100 	.word	0x40012100
 80018d8:	0f000001 	.word	0x0f000001

080018dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_CAN1_Init+0x64>)
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <MX_CAN1_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_CAN1_Init+0x64>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_CAN1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_CAN1_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_CAN1_Init+0x64>)
 80018fa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80018fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_CAN1_Init+0x64>)
 8001902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001906:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_CAN1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_CAN1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <MX_CAN1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_CAN1_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_CAN1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_CAN1_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_CAN1_Init+0x64>)
 800192e:	f001 fa45 	bl	8002dbc <HAL_CAN_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001938:	f000 f936 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002f0 	.word	0x200002f0
 8001944:	40006400 	.word	0x40006400

08001948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM2_Init+0x98>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_TIM2_Init+0x98>)
 8001970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM2_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_TIM2_Init+0x98>)
 800197e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_TIM2_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_TIM2_Init+0x98>)
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <MX_TIM2_Init+0x98>)
 8001992:	f003 fc25 	bl	80051e0 <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800199c:	f000 f904 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM2_Init+0x98>)
 80019ae:	f003 fe07 	bl	80055c0 <HAL_TIM_ConfigClockSource>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019b8:	f000 f8f6 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM2_Init+0x98>)
 80019ca:	f004 f825 	bl	8005a18 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019d4:	f000 f8e8 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000318 	.word	0x20000318

080019e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <MX_USART3_UART_Init+0x5c>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a28:	f004 f8a2 	bl	8005b70 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a32:	f000 f8b9 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000364 	.word	0x20000364
 8001a40:	40004800 	.word	0x40004800

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_GPIO_Init+0xa8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <MX_GPIO_Init+0xac>)
 8001ac2:	f002 fa9d 	bl	8004000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001ac6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_GPIO_Init+0xac>)
 8001ae0:	f002 f8e2 	bl	8003ca8 <HAL_GPIO_Init>

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400

08001af4 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001b1e:	230e      	movs	r3, #14
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	480a      	ldr	r0, [pc, #40]	; (8001b50 <CAN_Config+0x5c>)
 8001b28:	f001 fa44 	bl	8002fb4 <HAL_CAN_ConfigFilter>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001b32:	f000 f839 	bl	8001ba8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <CAN_Config+0x5c>)
 8001b38:	f001 fb28 	bl	800318c <HAL_CAN_Start>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8001b42:	f000 f831 	bl	8001ba8 <Error_Handler>
	}
}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002f0 	.word	0x200002f0

08001b54 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	// Toggle blue on-board LED for debugging
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001b60:	f002 fa67 	bl	8004032 <HAL_GPIO_TogglePin>

	// Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001b6c:	f001 fc22 	bl	80033b4 <HAL_CAN_GetRxMessage>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
	{
		Error_Handler();
 8001b76:	f000 f817 	bl	8001ba8 <Error_Handler>
	}

//	IncomingCANMessageHandler(&RxHeader.StdId, RxData);
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020400 	.word	0x40020400
 8001b88:	20000450 	.word	0x20000450
 8001b8c:	20000434 	.word	0x20000434
 8001b90:	200002f0 	.word	0x200002f0

08001b94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	rt_OneStep();
 8001b9c:	f7ff fc46 	bl	800142c <rt_OneStep>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <Error_Handler+0x14>)
 8001bb6:	f002 fa3c 	bl	8004032 <HAL_GPIO_TogglePin>
 8001bba:	e7f9      	b.n	8001bb0 <Error_Handler+0x8>
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <Printf_Init>:

// Must be global
UART_st* Printer;


UART_Return_et Printf_Init(UART_st* uart) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  UART_Return_et response;

  // Set global to selected UART
  Printer = uart;
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <Printf_Init+0x3c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  response = UART_Init(uart);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fbcf 	bl	8002372 <UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	73fb      	strb	r3, [r7, #15]

  if (response != UART_OK) {
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <Printf_Init+0x22>
      return response;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	e008      	b.n	8001bf4 <Printf_Init+0x34>
  }

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */

  setvbuf(stdout, NULL, _IONBF, 0);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <Printf_Init+0x40>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6898      	ldr	r0, [r3, #8]
 8001be8:	2300      	movs	r3, #0
 8001bea:	2202      	movs	r2, #2
 8001bec:	2100      	movs	r1, #0
 8001bee:	f005 f9e5 	bl	8006fbc <setvbuf>

  return UART_OK;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000464 	.word	0x20000464
 8001c00:	2000000c 	.word	0x2000000c

08001c04 <_isatty>:


int _isatty(int fd) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db04      	blt.n	8001c1c <_isatty+0x18>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	dc01      	bgt.n	8001c1c <_isatty+0x18>
    return 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e005      	b.n	8001c28 <_isatty+0x24>

  errno = EBADF;
 8001c1c:	f004 fd58 	bl	80066d0 <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2209      	movs	r2, #9
 8001c24:	601a      	str	r2, [r3, #0]
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_write>:

int _write(int fd, char* ptr, int len) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d002      	beq.n	8001c48 <_write+0x18>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d110      	bne.n	8001c6a <_write+0x3a>
    response = UART_Transmit(Printer, (uint8_t*) ptr, len);
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <_write+0x50>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fbd5 	bl	8002402 <UART_Transmit>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	75fb      	strb	r3, [r7, #23]

    if (response == UART_OK)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <_write+0x36>
      return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	e008      	b.n	8001c78 <_write+0x48>
    else
      return EIO;
 8001c66:	2305      	movs	r3, #5
 8001c68:	e006      	b.n	8001c78 <_write+0x48>
  }

  errno = EBADF;
 8001c6a:	f004 fd31 	bl	80066d0 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2209      	movs	r2, #9
 8001c72:	601a      	str	r2, [r3, #0]
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000464 	.word	0x20000464

08001c84 <_close>:


int _close(int fd) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db04      	blt.n	8001c9c <_close+0x18>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	dc01      	bgt.n	8001c9c <_close+0x18>
    return 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e006      	b.n	8001caa <_close+0x26>

  errno = EBADF;
 8001c9c:	f004 fd18 	bl	80066d0 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2209      	movs	r2, #9
 8001ca4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]

  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 8001cbe:	f004 fd07 	bl	80066d0 <__errno>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2209      	movs	r2, #9
 8001cc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_read>:

int _read(int fd, char* ptr, int len) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDIN_FILENO) {
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d110      	bne.n	8001d08 <_read+0x34>
    response = UART_Receive(Printer, (uint8_t*) ptr, len);
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <_read+0x4c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fba2 	bl	800243a <UART_Receive>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    if (response == UART_OK)
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <_read+0x30>
      return 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e008      	b.n	8001d16 <_read+0x42>
    else
      return EIO;
 8001d04:	2305      	movs	r3, #5
 8001d06:	e006      	b.n	8001d16 <_read+0x42>
  }

  errno = EBADF;
 8001d08:	f004 fce2 	bl	80066d0 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2209      	movs	r2, #9
 8001d10:	601a      	str	r2, [r3, #0]
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000464 	.word	0x20000464

08001d24 <_fstat>:


int _fstat(int fd, struct stat* st) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db08      	blt.n	8001d46 <_fstat+0x22>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	dc05      	bgt.n	8001d46 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d40:	605a      	str	r2, [r3, #4]
    return 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e005      	b.n	8001d52 <_fstat+0x2e>
  }

  errno = EBADF;
 8001d46:	f004 fcc3 	bl	80066d0 <__errno>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2209      	movs	r2, #9
 8001d4e:	601a      	str	r2, [r3, #0]
  return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_MspInit+0x44>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_MspInit+0x44>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_MspInit+0x44>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_MspInit+0x44>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_MspInit+0x44>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_MspInit+0x44>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_ADC_MspInit+0xc8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d124      	bne.n	8001e10 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	481a      	ldr	r0, [pc, #104]	; (8001e74 <HAL_ADC_MspInit+0xd0>)
 8001e0a:	f001 ff4d 	bl	8003ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e0e:	e028      	b.n	8001e62 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_ADC_MspInit+0xd4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d123      	bne.n	8001e62 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_ADC_MspInit+0xcc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_ADC_MspInit+0xd0>)
 8001e5e:	f001 ff23 	bl	8003ca8 <HAL_GPIO_Init>
}
 8001e62:	bf00      	nop
 8001e64:	3730      	adds	r7, #48	; 0x30
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40012000 	.word	0x40012000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40012100 	.word	0x40012100

08001e7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_CAN_MspInit+0x9c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d137      	bne.n	8001f0e <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_CAN_MspInit+0xa0>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_CAN_MspInit+0xa0>)
 8001ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_CAN_MspInit+0xa0>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_CAN_MspInit+0xa0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_CAN_MspInit+0xa0>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_CAN_MspInit+0xa0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ede:	2309      	movs	r3, #9
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <HAL_CAN_MspInit+0xa4>)
 8001eea:	f001 fedd 	bl	8003ca8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2013      	movs	r0, #19
 8001ef4:	f001 fea1 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001ef8:	2013      	movs	r0, #19
 8001efa:	f001 feba 	bl	8003c72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2014      	movs	r0, #20
 8001f04:	f001 fe99 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f08:	2014      	movs	r0, #20
 8001f0a:	f001 feb2 	bl	8003c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40006400 	.word	0x40006400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020c00 	.word	0x40020c00

08001f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d113      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_TIM_Base_MspInit+0x44>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <HAL_TIM_Base_MspInit+0x44>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_TIM_Base_MspInit+0x44>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	201c      	movs	r0, #28
 8001f54:	f001 fe71 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f58:	201c      	movs	r0, #28
 8001f5a:	f001 fe8a 	bl	8003c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0ae      	sub	sp, #184	; 0xb8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2290      	movs	r2, #144	; 0x90
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 fbc9 	bl	8006724 <memset>
  if(huart->Instance==USART3)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_UART_MspInit+0xb4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d13c      	bne.n	8002016 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fcf0 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fb6:	f7ff fdf7 	bl	8001ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_UART_MspInit+0xb8>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_UART_MspInit+0xb8>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_UART_MspInit+0xb8>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_UART_MspInit+0xb8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_UART_MspInit+0xb8>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_UART_MspInit+0xb8>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002004:	2307      	movs	r3, #7
 8002006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <HAL_UART_MspInit+0xbc>)
 8002012:	f001 fe49 	bl	8003ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	37b8      	adds	r7, #184	; 0xb8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40004800 	.word	0x40004800
 8002024:	40023800 	.word	0x40023800
 8002028:	40020c00 	.word	0x40020c00

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 fa62 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <CAN1_TX_IRQHandler+0x18>)
 800208a:	f001 ffd2 	bl	8004032 <HAL_GPIO_TogglePin>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <CAN1_TX_IRQHandler+0x1c>)
 8002090:	f001 fac8 	bl	8003624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020400 	.word	0x40020400
 800209c:	200002f0 	.word	0x200002f0

080020a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <CAN1_RX0_IRQHandler+0x10>)
 80020a6:	f001 fabd 	bl	8003624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200002f0 	.word	0x200002f0

080020b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIM2_IRQHandler+0x10>)
 80020ba:	f003 f961 	bl	8005380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000318 	.word	0x20000318

080020c8 <_sbrk>:
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
 80020f8:	f004 faea 	bl	80066d0 <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20080000 	.word	0x20080000
 8002128:	00000400 	.word	0x00000400
 800212c:	20000468 	.word	0x20000468
 8002130:	20000480 	.word	0x20000480

08002134 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <SystemInit+0x20>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <SystemInit+0x20>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <UART_Select>:

/*------------- PRIVATE FUNCTION DEFINITIONS ------------ */

// UART_Select configures the corresponding UART number from a UART_st
static UART_Return_et UART_Select(UART_st* uart)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	// Switch case for selection of 8 UARTS
	switch(uart->uart_num)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	3b01      	subs	r3, #1
 8002166:	2b07      	cmp	r3, #7
 8002168:	d83a      	bhi.n	80021e0 <UART_Select+0x88>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <UART_Select+0x18>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	08002191 	.word	0x08002191
 8002174:	0800219b 	.word	0x0800219b
 8002178:	080021a5 	.word	0x080021a5
 800217c:	080021af 	.word	0x080021af
 8002180:	080021b9 	.word	0x080021b9
 8002184:	080021c3 	.word	0x080021c3
 8002188:	080021cd 	.word	0x080021cd
 800218c:	080021d7 	.word	0x080021d7
	{
		case 1:
			uart->huart -> Instance = USART1;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <UART_Select+0x9c>)
 8002196:	601a      	str	r2, [r3, #0]
			break;
 8002198:	e024      	b.n	80021e4 <UART_Select+0x8c>
		case 2:
			uart->huart -> Instance = USART2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <UART_Select+0xa0>)
 80021a0:	601a      	str	r2, [r3, #0]
			break;
 80021a2:	e01f      	b.n	80021e4 <UART_Select+0x8c>
		case 3:
			uart->huart -> Instance = USART3;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <UART_Select+0xa4>)
 80021aa:	601a      	str	r2, [r3, #0]
			break;
 80021ac:	e01a      	b.n	80021e4 <UART_Select+0x8c>
		case 4:
			uart->huart -> Instance = UART4;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a13      	ldr	r2, [pc, #76]	; (8002200 <UART_Select+0xa8>)
 80021b4:	601a      	str	r2, [r3, #0]
			break;
 80021b6:	e015      	b.n	80021e4 <UART_Select+0x8c>
		case 5:
			uart->huart -> Instance = UART5;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <UART_Select+0xac>)
 80021be:	601a      	str	r2, [r3, #0]
			break;
 80021c0:	e010      	b.n	80021e4 <UART_Select+0x8c>
		case 6:
			uart->huart -> Instance = USART6;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <UART_Select+0xb0>)
 80021c8:	601a      	str	r2, [r3, #0]
			break;
 80021ca:	e00b      	b.n	80021e4 <UART_Select+0x8c>
		case 7:
			uart->huart -> Instance = UART7;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <UART_Select+0xb4>)
 80021d2:	601a      	str	r2, [r3, #0]
			break;
 80021d4:	e006      	b.n	80021e4 <UART_Select+0x8c>
		case 8:
			uart->huart -> Instance = UART8;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <UART_Select+0xb8>)
 80021dc:	601a      	str	r2, [r3, #0]
			break;
 80021de:	e001      	b.n	80021e4 <UART_Select+0x8c>
		default:
			return INVALID_UART_NUM;
 80021e0:	2305      	movs	r3, #5
 80021e2:	e000      	b.n	80021e6 <UART_Select+0x8e>
	}

	return UART_OK;
 80021e4:	2301      	movs	r3, #1
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40004800 	.word	0x40004800
 8002200:	40004c00 	.word	0x40004c00
 8002204:	40005000 	.word	0x40005000
 8002208:	40011400 	.word	0x40011400
 800220c:	40007800 	.word	0x40007800
 8002210:	40007c00 	.word	0x40007c00

08002214 <UART_Baud_Rate_Select>:

// UART_Baud_Rate_Select configures the baud rate from the one specified in baudrate
static UART_Return_et UART_Baud_Rate_Select(UART_st* uart)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	// Baud rate must be between 123 Bits/s and 500 KBits/s, stated in .ioc requirements
	if(uart->baudrate < MIN_UART_BAUDRATE || uart->baudrate > MAX_UART_BAUDRATE){
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b7a      	cmp	r3, #122	; 0x7a
 8002222:	d904      	bls.n	800222e <UART_Baud_Rate_Select+0x1a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <UART_Baud_Rate_Select+0x38>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <UART_Baud_Rate_Select+0x1e>
		return BAUDRATE_OUT_OF_BOUNDS;
 800222e:	2302      	movs	r3, #2
 8002230:	e005      	b.n	800223e <UART_Baud_Rate_Select+0x2a>
	}

	uart->huart->Init.BaudRate = uart->baudrate;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6892      	ldr	r2, [r2, #8]
 800223a:	605a      	str	r2, [r3, #4]

	return UART_OK;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	0007a120 	.word	0x0007a120

08002250 <UART_Datasize_Select>:

// UART_Datasize_Select configures the data size from a UART_Datasize_et
static UART_Return_et UART_Datasize_Select(UART_st* uart)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	switch(uart->datasize)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7b1b      	ldrb	r3, [r3, #12]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d011      	beq.n	8002284 <UART_Datasize_Select+0x34>
 8002260:	2b09      	cmp	r3, #9
 8002262:	dc15      	bgt.n	8002290 <UART_Datasize_Select+0x40>
 8002264:	2b07      	cmp	r3, #7
 8002266:	d002      	beq.n	800226e <UART_Datasize_Select+0x1e>
 8002268:	2b08      	cmp	r3, #8
 800226a:	d006      	beq.n	800227a <UART_Datasize_Select+0x2a>
 800226c:	e010      	b.n	8002290 <UART_Datasize_Select+0x40>
	{
		case UART_Datasize_7:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_7B;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002276:	609a      	str	r2, [r3, #8]
			break;
 8002278:	e00c      	b.n	8002294 <UART_Datasize_Select+0x44>
		case UART_Datasize_8:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
			break;
 8002282:	e007      	b.n	8002294 <UART_Datasize_Select+0x44>
		case UART_Datasize_9:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_9B;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228c:	609a      	str	r2, [r3, #8]
			break;
 800228e:	e001      	b.n	8002294 <UART_Datasize_Select+0x44>
		default:
			return INVALID_DATASIZE;
 8002290:	2306      	movs	r3, #6
 8002292:	e000      	b.n	8002296 <UART_Datasize_Select+0x46>
	}

	return UART_OK;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <UART_Mode_Select>:

// UART_Mode_Select configures the mode based on a UART_Mode_et
static UART_Return_et UART_Mode_Select(UART_st* uart)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	switch(uart->mode)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b5b      	ldrb	r3, [r3, #13]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d010      	beq.n	80022d4 <UART_Mode_Select+0x32>
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	dc13      	bgt.n	80022de <UART_Mode_Select+0x3c>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d002      	beq.n	80022c0 <UART_Mode_Select+0x1e>
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d005      	beq.n	80022ca <UART_Mode_Select+0x28>
 80022be:	e00e      	b.n	80022de <UART_Mode_Select+0x3c>
	{
		case UART_RX:
			uart->huart -> Init.Mode = UART_MODE_RX;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2204      	movs	r2, #4
 80022c6:	615a      	str	r2, [r3, #20]
			break;
 80022c8:	e00b      	b.n	80022e2 <UART_Mode_Select+0x40>
		case UART_TX:
			uart->huart -> Init.Mode = UART_MODE_TX;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2208      	movs	r2, #8
 80022d0:	615a      	str	r2, [r3, #20]
			break;
 80022d2:	e006      	b.n	80022e2 <UART_Mode_Select+0x40>
		case UART_TX_RX:
			uart->huart -> Init.Mode = UART_MODE_TX_RX;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	220c      	movs	r2, #12
 80022da:	615a      	str	r2, [r3, #20]
			break;
 80022dc:	e001      	b.n	80022e2 <UART_Mode_Select+0x40>
		default:
			return INVALID_MODE;
 80022de:	2303      	movs	r3, #3
 80022e0:	e000      	b.n	80022e4 <UART_Mode_Select+0x42>
	}

	return UART_OK;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <UART_MSB_Select>:

// UART_MSB_Select configures the bit position based on a UART_Bit_Position_et
static UART_Return_et UART_MSB_Select(UART_st* uart)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	switch(uart->bit_position){
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7b9b      	ldrb	r3, [r3, #14]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d002      	beq.n	8002306 <UART_MSB_Select+0x16>
 8002300:	2b02      	cmp	r3, #2
 8002302:	d005      	beq.n	8002310 <UART_MSB_Select+0x20>
 8002304:	e00e      	b.n	8002324 <UART_MSB_Select+0x34>
		case LSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800230e:	e00b      	b.n	8002328 <UART_MSB_Select+0x38>
		case MSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
			uart->huart -> AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002320:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 8002322:	e001      	b.n	8002328 <UART_MSB_Select+0x38>
		default:
			return INVALID_BIT_POSITION;
 8002324:	2304      	movs	r3, #4
 8002326:	e000      	b.n	800232a <UART_MSB_Select+0x3a>
	}

	return UART_OK;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <UART_Default_Configs>:

// Current configurations that are not being modified
static void UART_Default_Configs(UART_st* uart)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	uart->huart -> Init.StopBits = UART_STOPBITS_1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
	uart->huart -> Init.Parity = UART_PARITY_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
	uart->huart -> Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
	uart->huart -> Init.OverSampling = UART_OVERSAMPLING_16;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
	uart->huart -> Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <UART_Init>:

/*------------- PUBLIC FUNCTION DEFINITIONS ------------- */

UART_Return_et UART_Init(UART_st* uart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	UART_Return_et response;

	response = UART_Select(uart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff feec 	bl	8002158 <UART_Select>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <UART_Init+0x1c>
		return response;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	e035      	b.n	80023fa <UART_Init+0x88>
	}

	response = UART_Baud_Rate_Select(uart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff40 	bl	8002214 <UART_Baud_Rate_Select>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <UART_Init+0x30>
		return response;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	e02b      	b.n	80023fa <UART_Init+0x88>
	}

	response = UART_Datasize_Select(uart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff54 	bl	8002250 <UART_Datasize_Select>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <UART_Init+0x44>
		return response;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	e021      	b.n	80023fa <UART_Init+0x88>
	}

	response = UART_Mode_Select(uart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff73 	bl	80022a2 <UART_Mode_Select>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <UART_Init+0x58>
		return response;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	e017      	b.n	80023fa <UART_Init+0x88>
	}

	response = UART_MSB_Select(uart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff90 	bl	80022f0 <UART_MSB_Select>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <UART_Init+0x6c>
		return response;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	e00d      	b.n	80023fa <UART_Init+0x88>
	}

	UART_Default_Configs(uart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa9 	bl	8002336 <UART_Default_Configs>

	if (HAL_UART_Init(uart->huart) != HAL_OK) { Error_Handler(); }
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fbc1 	bl	8005b70 <HAL_UART_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <UART_Init+0x86>
 80023f4:	f7ff fbd8 	bl	8001ba8 <Error_Handler>

	return UART_OK;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <UART_Transmit>:

// Uses the HAL UART Transmit to transmit a buffer's contents over the channel specified in the uart struct
UART_Return_et UART_Transmit(UART_st* uart, uint8_t tx_buf[], uint8_t buf_len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	4613      	mov	r3, r2
 800240e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tx_response;

	tx_response = HAL_UART_Transmit(uart->huart, tx_buf, buf_len, TIMEOUT);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	b29a      	uxth	r2, r3
 8002418:	f241 3388 	movw	r3, #5000	; 0x1388
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	f003 fbf5 	bl	8005c0c <HAL_UART_Transmit>
 8002422:	4603      	mov	r3, r0
 8002424:	75fb      	strb	r3, [r7, #23]
	if (tx_response != HAL_OK) {
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <UART_Transmit+0x2e>
		return TRANSMIT_FAILED;
 800242c:	2307      	movs	r3, #7
 800242e:	e000      	b.n	8002432 <UART_Transmit+0x30>
	}

	return UART_OK;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <UART_Receive>:

// TODO: check the rx_buf dataframe being sent (casting currently)
UART_Return_et UART_Receive(UART_st* uart, uint8_t rx_buf[], uint8_t buf_len)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	4613      	mov	r3, r2
 8002446:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rx_response;

	rx_response = HAL_UART_Receive(uart->huart, rx_buf, buf_len, TIMEOUT);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	b29a      	uxth	r2, r3
 8002450:	f241 3388 	movw	r3, #5000	; 0x1388
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	f003 fc5c 	bl	8005d12 <HAL_UART_Receive>
 800245a:	4603      	mov	r3, r0
 800245c:	75fb      	strb	r3, [r7, #23]
	if (rx_response != HAL_OK) {
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <UART_Receive+0x2e>
		return RECEIVE_FAILED;
 8002464:	2308      	movs	r3, #8
 8002466:	e000      	b.n	800246a <UART_Receive+0x30>
	}

	return UART_OK;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800247a:	490e      	ldr	r1, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002490:	4c0b      	ldr	r4, [pc, #44]	; (80024c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800249e:	f7ff fe49 	bl	8002134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a2:	f004 f91b 	bl	80066dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7ff f81d 	bl	80014e4 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024b8:	08009964 	.word	0x08009964
  ldr r2, =_sbss
 80024bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024c0:	20000480 	.word	0x20000480

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>

080024c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f001 fbaa 	bl	8003c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d0:	200f      	movs	r0, #15
 80024d2:	f000 f805 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d6:	f7ff fc41 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 fbc5 	bl	8003c8e <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251c:	f001 fb8d 	bl	8003c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000000 	.word	0x20000000
 8002538:	20000008 	.word	0x20000008
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008
 8002564:	2000046c 	.word	0x2000046c

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000046c 	.word	0x2000046c

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff ffee 	bl	8002568 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffde 	bl	8002568 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000008 	.word	0x20000008

080025c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e031      	b.n	8002642 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fbdc 	bl	8001da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_ADC_Init+0x84>)
 800260c:	4013      	ands	r3, r2
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fad6 	bl	8002bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
 8002632:	e001      	b.n	8002638 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	ffffeefd 	.word	0xffffeefd

08002650 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_ADC_Start+0x1a>
 8002666:	2302      	movs	r3, #2
 8002668:	e0ad      	b.n	80027c6 <HAL_ADC_Start+0x176>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d018      	beq.n	80026b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_ADC_Start+0x184>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_ADC_Start+0x188>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9a      	lsrs	r2, r3, #18
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026a4:	e002      	b.n	80026ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f9      	bne.n	80026a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d175      	bne.n	80027ac <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c4:	4b45      	ldr	r3, [pc, #276]	; (80027dc <HAL_ADC_Start+0x18c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d106      	bne.n	800270a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f023 0206 	bic.w	r2, r3, #6
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
 8002708:	e002      	b.n	8002710 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002720:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_ADC_Start+0x190>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d143      	bne.n	80027c4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	e03a      	b.n	80027c4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <HAL_ADC_Start+0x194>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10e      	bne.n	8002776 <HAL_ADC_Start+0x126>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002774:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_ADC_Start+0x190>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d120      	bne.n	80027c4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_ADC_Start+0x198>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d11b      	bne.n	80027c4 <HAL_ADC_Start+0x174>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d114      	bne.n	80027c4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	e00b      	b.n	80027c4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	fffff8fe 	.word	0xfffff8fe
 80027e0:	40012300 	.word	0x40012300
 80027e4:	40012000 	.word	0x40012000
 80027e8:	40012200 	.word	0x40012200

080027ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d113      	bne.n	8002832 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d10b      	bne.n	8002832 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0220 	orr.w	r2, r3, #32
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e063      	b.n	80028fa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002832:	f7ff fe99 	bl	8002568 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002838:	e021      	b.n	800287e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002840:	d01d      	beq.n	800287e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_ADC_PollForConversion+0x6c>
 8002848:	f7ff fe8e 	bl	8002568 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d212      	bcs.n	800287e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d00b      	beq.n	800287e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03d      	b.n	80028fa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	d1d6      	bne.n	800283a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0212 	mvn.w	r2, #18
 8002894:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d123      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11f      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d111      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x1c>
 8002934:	2302      	movs	r3, #2
 8002936:	e136      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x28a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b09      	cmp	r3, #9
 8002946:	d93a      	bls.n	80029be <HAL_ADC_ConfigChannel+0xa2>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002950:	d035      	beq.n	80029be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68d9      	ldr	r1, [r3, #12]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	3b1e      	subs	r3, #30
 8002968:	2207      	movs	r2, #7
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a8d      	ldr	r2, [pc, #564]	; (8002bb4 <HAL_ADC_ConfigChannel+0x298>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10a      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68d9      	ldr	r1, [r3, #12]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	061a      	lsls	r2, r3, #24
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002996:	e035      	b.n	8002a04 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4403      	add	r3, r0
 80029b0:	3b1e      	subs	r3, #30
 80029b2:	409a      	lsls	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029bc:	e022      	b.n	8002a04 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	2207      	movs	r2, #7
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43da      	mvns	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	4603      	mov	r3, r0
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4403      	add	r3, r0
 80029fa:	409a      	lsls	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d824      	bhi.n	8002a56 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b05      	subs	r3, #5
 8002a1e:	221f      	movs	r2, #31
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3b05      	subs	r3, #5
 8002a48:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34
 8002a54:	e04c      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d824      	bhi.n	8002aa8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b23      	subs	r3, #35	; 0x23
 8002a70:	221f      	movs	r2, #31
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	3b23      	subs	r3, #35	; 0x23
 8002a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa6:	e023      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b41      	subs	r3, #65	; 0x41
 8002aba:	221f      	movs	r2, #31
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b41      	subs	r3, #65	; 0x41
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10a      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1f4>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b04:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10f      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x21e>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b12      	cmp	r3, #18
 8002b20:	d10b      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d12b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x280>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_ADC_ConfigChannel+0x298>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x23a>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b11      	cmp	r3, #17
 8002b54:	d122      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_ADC_ConfigChannel+0x298>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d111      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9a      	lsrs	r2, r3, #18
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b8e:	e002      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	10000012 	.word	0x10000012
 8002bb8:	40012000 	.word	0x40012000
 8002bbc:	40012300 	.word	0x40012300
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bd0:	4b78      	ldr	r3, [pc, #480]	; (8002db4 <ADC_Init+0x1ec>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a77      	ldr	r2, [pc, #476]	; (8002db4 <ADC_Init+0x1ec>)
 8002bd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002bdc:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <ADC_Init+0x1ec>)
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4973      	ldr	r1, [pc, #460]	; (8002db4 <ADC_Init+0x1ec>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <ADC_Init+0x1f0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e00f      	b.n	8002cc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0202 	bic.w	r2, r2, #2
 8002cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	005a      	lsls	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	035a      	lsls	r2, r3, #13
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e007      	b.n	8002d38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	051a      	lsls	r2, r3, #20
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7a:	025a      	lsls	r2, r3, #9
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	029a      	lsls	r2, r3, #10
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	0f000001 	.word	0x0f000001

08002dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0ed      	b.n	8002faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff f84e 	bl	8001e7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df0:	f7ff fbba 	bl	8002568 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002df6:	e012      	b.n	8002e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002df8:	f7ff fbb6 	bl	8002568 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b0a      	cmp	r3, #10
 8002e04:	d90b      	bls.n	8002e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2205      	movs	r2, #5
 8002e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0c5      	b.n	8002faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0e5      	beq.n	8002df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0202 	bic.w	r2, r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e3c:	f7ff fb94 	bl	8002568 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e42:	e012      	b.n	8002e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e44:	f7ff fb90 	bl	8002568 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d90b      	bls.n	8002e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2205      	movs	r2, #5
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e09f      	b.n	8002faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e5      	bne.n	8002e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7e1b      	ldrb	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e007      	b.n	8002ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7e5b      	ldrb	r3, [r3, #25]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e007      	b.n	8002ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7e9b      	ldrb	r3, [r3, #26]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d108      	bne.n	8002ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e007      	b.n	8002ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0220 	bic.w	r2, r2, #32
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7edb      	ldrb	r3, [r3, #27]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0210 	bic.w	r2, r2, #16
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e007      	b.n	8002f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0210 	orr.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7f1b      	ldrb	r3, [r3, #28]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d108      	bne.n	8002f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e007      	b.n	8002f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7f5b      	ldrb	r3, [r3, #29]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d108      	bne.n	8002f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0204 	orr.w	r2, r2, #4
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e007      	b.n	8002f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	1e5a      	subs	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d003      	beq.n	8002fda <HAL_CAN_ConfigFilter+0x26>
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f040 80c7 	bne.w	8003168 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_CAN_ConfigFilter+0x1d0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d001      	beq.n	8002fe8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_CAN_ConfigFilter+0x1d4>)
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_CAN_ConfigFilter+0x1d4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003006:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2201      	movs	r2, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d123      	bne.n	8003096 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003070:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3248      	adds	r2, #72	; 0x48
 8003076:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800308a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	3348      	adds	r3, #72	; 0x48
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d122      	bne.n	80030e4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3248      	adds	r2, #72	; 0x48
 80030c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	3348      	adds	r3, #72	; 0x48
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030fe:	e007      	b.n	8003110 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800312a:	e007      	b.n	800313c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	431a      	orrs	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800315a:	f023 0201 	bic.w	r2, r3, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e006      	b.n	8003176 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40003400 	.word	0x40003400
 8003188:	40006400 	.word	0x40006400

0800318c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d12e      	bne.n	80031fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031b8:	f7ff f9d6 	bl	8002568 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031be:	e012      	b.n	80031e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031c0:	f7ff f9d2 	bl	8002568 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b0a      	cmp	r3, #10
 80031cc:	d90b      	bls.n	80031e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2205      	movs	r2, #5
 80031de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e012      	b.n	800320c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e5      	bne.n	80031c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e006      	b.n	800320c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d003      	beq.n	8003240 <HAL_CAN_AddTxMessage+0x2c>
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	2b02      	cmp	r3, #2
 800323c:	f040 80ad 	bne.w	800339a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8095 	beq.w	800338a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	0e1b      	lsrs	r3, r3, #24
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800326a:	2201      	movs	r2, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	6809      	ldr	r1, [r1, #0]
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3318      	adds	r3, #24
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	440b      	add	r3, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e00f      	b.n	80032b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3318      	adds	r3, #24
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	440b      	add	r3, r1
 80032b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3318      	adds	r3, #24
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	440b      	add	r3, r1
 80032c8:	3304      	adds	r3, #4
 80032ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	7d1b      	ldrb	r3, [r3, #20]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d111      	bne.n	80032f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3318      	adds	r3, #24
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3318      	adds	r3, #24
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	440b      	add	r3, r1
 80032f4:	3304      	adds	r3, #4
 80032f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3307      	adds	r3, #7
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	061a      	lsls	r2, r3, #24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3306      	adds	r3, #6
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3305      	adds	r3, #5
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4313      	orrs	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	3204      	adds	r2, #4
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	4610      	mov	r0, r2
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	6811      	ldr	r1, [r2, #0]
 8003320:	ea43 0200 	orr.w	r2, r3, r0
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	440b      	add	r3, r1
 800332a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800332e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3303      	adds	r3, #3
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	061a      	lsls	r2, r3, #24
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3302      	adds	r3, #2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3301      	adds	r3, #1
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	4313      	orrs	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	4610      	mov	r0, r2
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	ea43 0200 	orr.w	r2, r3, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	440b      	add	r3, r1
 8003360:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003364:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3318      	adds	r3, #24
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	6811      	ldr	r1, [r2, #0]
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3318      	adds	r3, #24
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	440b      	add	r3, r1
 8003384:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e00e      	b.n	80033a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e006      	b.n	80033a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3724      	adds	r7, #36	; 0x24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d003      	beq.n	80033d8 <HAL_CAN_GetRxMessage+0x24>
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	f040 80f3 	bne.w	80035be <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10e      	bne.n	80033fc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d116      	bne.n	800341a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0e7      	b.n	80035cc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0d8      	b.n	80035cc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	331b      	adds	r3, #27
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0204 	and.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	331b      	adds	r3, #27
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	4413      	add	r3, r2
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0d5b      	lsrs	r3, r3, #21
 8003448:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e00b      	b.n	800346a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	331b      	adds	r3, #27
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	08db      	lsrs	r3, r3, #3
 8003462:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	331b      	adds	r3, #27
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	4413      	add	r3, r2
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0202 	and.w	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	331b      	adds	r3, #27
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	331b      	adds	r3, #27
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	331b      	adds	r3, #27
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0a1a      	lsrs	r2, r3, #8
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	4413      	add	r3, r2
 8003502:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0c1a      	lsrs	r2, r3, #16
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	3302      	adds	r3, #2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4413      	add	r3, r2
 800351c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0e1a      	lsrs	r2, r3, #24
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	3303      	adds	r3, #3
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	3304      	adds	r3, #4
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	4413      	add	r3, r2
 800354e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0a1a      	lsrs	r2, r3, #8
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	3305      	adds	r3, #5
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4413      	add	r3, r2
 8003568:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0c1a      	lsrs	r2, r3, #16
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	3306      	adds	r3, #6
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	4413      	add	r3, r2
 8003582:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e1a      	lsrs	r2, r3, #24
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	3307      	adds	r3, #7
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	e007      	b.n	80035ba <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0220 	orr.w	r2, r2, #32
 80035b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e006      	b.n	80035cc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <HAL_CAN_ActivateNotification+0x1e>
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d109      	bne.n	800360a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6959      	ldr	r1, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e006      	b.n	8003618 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07c      	beq.n	8003764 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f983 	bl	8003992 <HAL_CAN_TxMailbox0CompleteCallback>
 800368c:	e016      	b.n	80036bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e00c      	b.n	80036bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e002      	b.n	80036bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f989 	bl	80039ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d024      	beq.n	8003710 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f963 	bl	80039a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80036e0:	e016      	b.n	8003710 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	e00c      	b.n	8003710 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	e002      	b.n	8003710 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f969 	bl	80039e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003722:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f943 	bl	80039ba <HAL_CAN_TxMailbox2CompleteCallback>
 8003734:	e016      	b.n	8003764 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	e00c      	b.n	8003764 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
 800375c:	e002      	b.n	8003764 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f949 	bl	80039f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2210      	movs	r2, #16
 8003786:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f930 	bl	8003a0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fe f9c6 	bl	8001b54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2210      	movs	r2, #16
 80037ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2208      	movs	r2, #8
 8003806:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f912 	bl	8003a32 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8f9 	bl	8003a1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8fc 	bl	8003a46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2208      	movs	r2, #8
 8003868:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8f5 	bl	8003a5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d07b      	beq.n	8003972 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d072      	beq.n	800396a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d043      	beq.n	800396a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d03e      	beq.n	800396a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f2:	2b60      	cmp	r3, #96	; 0x60
 80038f4:	d02b      	beq.n	800394e <HAL_CAN_IRQHandler+0x32a>
 80038f6:	2b60      	cmp	r3, #96	; 0x60
 80038f8:	d82e      	bhi.n	8003958 <HAL_CAN_IRQHandler+0x334>
 80038fa:	2b50      	cmp	r3, #80	; 0x50
 80038fc:	d022      	beq.n	8003944 <HAL_CAN_IRQHandler+0x320>
 80038fe:	2b50      	cmp	r3, #80	; 0x50
 8003900:	d82a      	bhi.n	8003958 <HAL_CAN_IRQHandler+0x334>
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d019      	beq.n	800393a <HAL_CAN_IRQHandler+0x316>
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d826      	bhi.n	8003958 <HAL_CAN_IRQHandler+0x334>
 800390a:	2b30      	cmp	r3, #48	; 0x30
 800390c:	d010      	beq.n	8003930 <HAL_CAN_IRQHandler+0x30c>
 800390e:	2b30      	cmp	r3, #48	; 0x30
 8003910:	d822      	bhi.n	8003958 <HAL_CAN_IRQHandler+0x334>
 8003912:	2b10      	cmp	r3, #16
 8003914:	d002      	beq.n	800391c <HAL_CAN_IRQHandler+0x2f8>
 8003916:	2b20      	cmp	r3, #32
 8003918:	d005      	beq.n	8003926 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800391a:	e01d      	b.n	8003958 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f043 0308 	orr.w	r3, r3, #8
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003924:	e019      	b.n	800395a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800392e:	e014      	b.n	800395a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f043 0320 	orr.w	r3, r3, #32
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003938:	e00f      	b.n	800395a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003942:	e00a      	b.n	800395a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800394c:	e005      	b.n	800395a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003956:	e000      	b.n	800395a <HAL_CAN_IRQHandler+0x336>
            break;
 8003958:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003968:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f872 	bl	8003a6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800398a:	bf00      	nop
 800398c:	3728      	adds	r7, #40	; 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	60d3      	str	r3, [r2, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00
 8003ac8:	05fa0000 	.word	0x05fa0000

08003acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 0307 	and.w	r3, r3, #7
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db0b      	blt.n	8003b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4907      	ldr	r1, [pc, #28]	; (8003b20 <__NVIC_EnableIRQ+0x38>)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2001      	movs	r0, #1
 8003b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000e100 	.word	0xe000e100

08003b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	db0a      	blt.n	8003b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	490c      	ldr	r1, [pc, #48]	; (8003b70 <__NVIC_SetPriority+0x4c>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b4c:	e00a      	b.n	8003b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4908      	ldr	r1, [pc, #32]	; (8003b74 <__NVIC_SetPriority+0x50>)
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	3b04      	subs	r3, #4
 8003b5c:	0112      	lsls	r2, r2, #4
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	440b      	add	r3, r1
 8003b62:	761a      	strb	r2, [r3, #24]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000e100 	.word	0xe000e100
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f1c3 0307 	rsb	r3, r3, #7
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	bf28      	it	cs
 8003b96:	2304      	movcs	r3, #4
 8003b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2b06      	cmp	r3, #6
 8003ba0:	d902      	bls.n	8003ba8 <NVIC_EncodePriority+0x30>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3b03      	subs	r3, #3
 8003ba6:	e000      	b.n	8003baa <NVIC_EncodePriority+0x32>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	401a      	ands	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43d9      	mvns	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd0:	4313      	orrs	r3, r2
         );
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3724      	adds	r7, #36	; 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf0:	d301      	bcc.n	8003bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e00f      	b.n	8003c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <SysTick_Config+0x40>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bfe:	210f      	movs	r1, #15
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c04:	f7ff ff8e 	bl	8003b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <SysTick_Config+0x40>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <SysTick_Config+0x40>)
 8003c10:	2207      	movs	r2, #7
 8003c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000e010 	.word	0xe000e010

08003c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff29 	bl	8003a84 <__NVIC_SetPriorityGrouping>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c4c:	f7ff ff3e 	bl	8003acc <__NVIC_GetPriorityGrouping>
 8003c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f7ff ff8e 	bl	8003b78 <NVIC_EncodePriority>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff5d 	bl	8003b24 <__NVIC_SetPriority>
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff31 	bl	8003ae8 <__NVIC_EnableIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ffa2 	bl	8003be0 <SysTick_Config>
 8003c9c:	4603      	mov	r3, r0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	; 0x24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e175      	b.n	8003fb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f040 8164 	bne.w	8003fae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d005      	beq.n	8003cfe <HAL_GPIO_Init+0x56>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d130      	bne.n	8003d60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 0201 	and.w	r2, r3, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d017      	beq.n	8003d9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d123      	bne.n	8003df0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	08da      	lsrs	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3208      	adds	r2, #8
 8003db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	220f      	movs	r2, #15
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	08da      	lsrs	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3208      	adds	r2, #8
 8003dea:	69b9      	ldr	r1, [r7, #24]
 8003dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0203 	and.w	r2, r3, #3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80be 	beq.w	8003fae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	4a65      	ldr	r2, [pc, #404]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3e:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e4a:	4a61      	ldr	r2, [pc, #388]	; (8003fd0 <HAL_GPIO_Init+0x328>)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	3302      	adds	r3, #2
 8003e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	220f      	movs	r2, #15
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_GPIO_Init+0x32c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d037      	beq.n	8003ee6 <HAL_GPIO_Init+0x23e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a57      	ldr	r2, [pc, #348]	; (8003fd8 <HAL_GPIO_Init+0x330>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d031      	beq.n	8003ee2 <HAL_GPIO_Init+0x23a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a56      	ldr	r2, [pc, #344]	; (8003fdc <HAL_GPIO_Init+0x334>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02b      	beq.n	8003ede <HAL_GPIO_Init+0x236>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a55      	ldr	r2, [pc, #340]	; (8003fe0 <HAL_GPIO_Init+0x338>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d025      	beq.n	8003eda <HAL_GPIO_Init+0x232>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_GPIO_Init+0x33c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01f      	beq.n	8003ed6 <HAL_GPIO_Init+0x22e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a53      	ldr	r2, [pc, #332]	; (8003fe8 <HAL_GPIO_Init+0x340>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d019      	beq.n	8003ed2 <HAL_GPIO_Init+0x22a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_GPIO_Init+0x344>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_GPIO_Init+0x226>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a51      	ldr	r2, [pc, #324]	; (8003ff0 <HAL_GPIO_Init+0x348>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00d      	beq.n	8003eca <HAL_GPIO_Init+0x222>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <HAL_GPIO_Init+0x34c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <HAL_GPIO_Init+0x21e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a4f      	ldr	r2, [pc, #316]	; (8003ff8 <HAL_GPIO_Init+0x350>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_GPIO_Init+0x21a>
 8003ebe:	2309      	movs	r3, #9
 8003ec0:	e012      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ec2:	230a      	movs	r3, #10
 8003ec4:	e010      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	e00e      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003eca:	2307      	movs	r3, #7
 8003ecc:	e00c      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ece:	2306      	movs	r3, #6
 8003ed0:	e00a      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	e008      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e004      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_GPIO_Init+0x240>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f002 0203 	and.w	r2, r2, #3
 8003eee:	0092      	lsls	r2, r2, #2
 8003ef0:	4093      	lsls	r3, r2
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ef8:	4935      	ldr	r1, [pc, #212]	; (8003fd0 <HAL_GPIO_Init+0x328>)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3302      	adds	r3, #2
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f30:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f54:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f5a:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f7e:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_GPIO_Init+0x354>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	f67f ae86 	bls.w	8003cc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40021400 	.word	0x40021400
 8003fec:	40021800 	.word	0x40021800
 8003ff0:	40021c00 	.word	0x40021c00
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	40022400 	.word	0x40022400
 8003ffc:	40013c00 	.word	0x40013c00

08004000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	807b      	strh	r3, [r7, #2]
 800400c:	4613      	mov	r3, r2
 800400e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004010:	787b      	ldrb	r3, [r7, #1]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800401c:	e003      	b.n	8004026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	041a      	lsls	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	619a      	str	r2, [r3, #24]
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004044:	887a      	ldrh	r2, [r7, #2]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4013      	ands	r3, r2
 800404a:	041a      	lsls	r2, r3, #16
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	43d9      	mvns	r1, r3
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	400b      	ands	r3, r1
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	619a      	str	r2, [r3, #24]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e29b      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8087 	beq.w	800419a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800408c:	4b96      	ldr	r3, [pc, #600]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b04      	cmp	r3, #4
 8004096:	d00c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004098:	4b93      	ldr	r3, [pc, #588]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d112      	bne.n	80040ca <HAL_RCC_OscConfig+0x62>
 80040a4:	4b90      	ldr	r3, [pc, #576]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d10b      	bne.n	80040ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b2:	4b8d      	ldr	r3, [pc, #564]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06c      	beq.n	8004198 <HAL_RCC_OscConfig+0x130>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d168      	bne.n	8004198 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e275      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d106      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7a>
 80040d4:	4b84      	ldr	r3, [pc, #528]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a83      	ldr	r2, [pc, #524]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e02e      	b.n	8004140 <HAL_RCC_OscConfig+0xd8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x9c>
 80040ea:	4b7f      	ldr	r3, [pc, #508]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7e      	ldr	r2, [pc, #504]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b7c      	ldr	r3, [pc, #496]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7b      	ldr	r2, [pc, #492]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80040fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xd8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0xc0>
 800410e:	4b76      	ldr	r3, [pc, #472]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a75      	ldr	r2, [pc, #468]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a72      	ldr	r2, [pc, #456]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xd8>
 8004128:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6e      	ldr	r2, [pc, #440]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6b      	ldr	r2, [pc, #428]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fe fa0e 	bl	8002568 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fe fa0a 	bl	8002568 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e229      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xe8>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fe f9fa 	bl	8002568 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fe f9f6 	bl	8002568 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e215      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x110>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d069      	beq.n	800427a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a6:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b2:	4b4d      	ldr	r3, [pc, #308]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d11c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x190>
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCC_OscConfig+0x17a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e1e9      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	493d      	ldr	r1, [pc, #244]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	e040      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d023      	beq.n	8004248 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a38      	ldr	r2, [pc, #224]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fe f9ac 	bl	8002568 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7fe f9a8 	bl	8002568 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1c7      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4929      	ldr	r1, [pc, #164]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
 8004246:	e018      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe f988 	bl	8002568 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe f984 	bl	8002568 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1a3      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d038      	beq.n	80042f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe f965 	bl	8002568 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a2:	f7fe f961 	bl	8002568 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e180      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80042b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x23a>
 80042c0:	e01a      	b.n	80042f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fe f94b 	bl	8002568 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d6:	f7fe f947 	bl	8002568 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d903      	bls.n	80042ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e166      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
 80042e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b92      	ldr	r3, [pc, #584]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ee      	bne.n	80042d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a4 	beq.w	800444e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004306:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004312:	4b89      	ldr	r3, [pc, #548]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a88      	ldr	r2, [pc, #544]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b86      	ldr	r3, [pc, #536]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432e:	4b83      	ldr	r3, [pc, #524]	; (800453c <HAL_RCC_OscConfig+0x4d4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d118      	bne.n	800436c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800433a:	4b80      	ldr	r3, [pc, #512]	; (800453c <HAL_RCC_OscConfig+0x4d4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7f      	ldr	r2, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x4d4>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004346:	f7fe f90f 	bl	8002568 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fe f90b 	bl	8002568 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b64      	cmp	r3, #100	; 0x64
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e12a      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004360:	4b76      	ldr	r3, [pc, #472]	; (800453c <HAL_RCC_OscConfig+0x4d4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x31a>
 8004374:	4b70      	ldr	r3, [pc, #448]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a6f      	ldr	r2, [pc, #444]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	e02d      	b.n	80043de <HAL_RCC_OscConfig+0x376>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x33c>
 800438a:	4b6b      	ldr	r3, [pc, #428]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a6a      	ldr	r2, [pc, #424]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	4b68      	ldr	r3, [pc, #416]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a67      	ldr	r2, [pc, #412]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	e01c      	b.n	80043de <HAL_RCC_OscConfig+0x376>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x35e>
 80043ac:	4b62      	ldr	r3, [pc, #392]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b5f      	ldr	r3, [pc, #380]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a5e      	ldr	r2, [pc, #376]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	e00b      	b.n	80043de <HAL_RCC_OscConfig+0x376>
 80043c6:	4b5c      	ldr	r3, [pc, #368]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a5b      	ldr	r2, [pc, #364]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a58      	ldr	r2, [pc, #352]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d015      	beq.n	8004412 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fe f8bf 	bl	8002568 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe f8bb 	bl	8002568 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0d8      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	4b4c      	ldr	r3, [pc, #304]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ee      	beq.n	80043ee <HAL_RCC_OscConfig+0x386>
 8004410:	e014      	b.n	800443c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004412:	f7fe f8a9 	bl	8002568 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fe f8a5 	bl	8002568 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0c2      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ee      	bne.n	800441a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b3d      	ldr	r3, [pc, #244]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80ae 	beq.w	80045b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004458:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b08      	cmp	r3, #8
 8004462:	d06d      	beq.n	8004540 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d14b      	bne.n	8004504 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b32      	ldr	r3, [pc, #200]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a31      	ldr	r2, [pc, #196]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe f876 	bl	8002568 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe f872 	bl	8002568 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e091      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	491b      	ldr	r1, [pc, #108]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe f844 	bl	8002568 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fe f840 	bl	8002568 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e05f      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x47c>
 8004502:	e057      	b.n	80045b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fe f82a 	bl	8002568 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fe f826 	bl	8002568 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e045      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_OscConfig+0x4d0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x4b0>
 8004536:	e03d      	b.n	80045b4 <HAL_RCC_OscConfig+0x54c>
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004540:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <HAL_RCC_OscConfig+0x558>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d030      	beq.n	80045b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d129      	bne.n	80045b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d122      	bne.n	80045b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004576:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004578:	4293      	cmp	r3, r2
 800457a:	d119      	bne.n	80045b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d10f      	bne.n	80045b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0d0      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045dc:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d910      	bls.n	800460c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b67      	ldr	r3, [pc, #412]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 020f 	bic.w	r2, r3, #15
 80045f2:	4965      	ldr	r1, [pc, #404]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b63      	ldr	r3, [pc, #396]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0b8      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004624:	4b59      	ldr	r3, [pc, #356]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4a58      	ldr	r2, [pc, #352]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 800462a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800462e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800463c:	4b53      	ldr	r3, [pc, #332]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4a52      	ldr	r2, [pc, #328]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	494d      	ldr	r1, [pc, #308]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d040      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	4b47      	ldr	r3, [pc, #284]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d115      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e07f      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e073      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004696:	4b3d      	ldr	r3, [pc, #244]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e06b      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	4b39      	ldr	r3, [pc, #228]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4936      	ldr	r1, [pc, #216]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fd ff56 	bl	8002568 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fd ff52 	bl	8002568 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e053      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 020c 	and.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1eb      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d210      	bcs.n	8004718 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	4922      	ldr	r1, [pc, #136]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e032      	b.n	800477e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4916      	ldr	r1, [pc, #88]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	490e      	ldr	r1, [pc, #56]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004756:	f000 f821 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800475a:	4602      	mov	r2, r0
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	490a      	ldr	r1, [pc, #40]	; (8004790 <HAL_RCC_ClockConfig+0x1cc>)
 8004768:	5ccb      	ldrb	r3, [r1, r3]
 800476a:	fa22 f303 	lsr.w	r3, r2, r3
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1d0>)
 8004770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x1d4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd feb2 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40023c00 	.word	0x40023c00
 800478c:	40023800 	.word	0x40023800
 8004790:	08009558 	.word	0x08009558
 8004794:	20000000 	.word	0x20000000
 8004798:	20000004 	.word	0x20000004

0800479c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a0:	b090      	sub	sp, #64	; 0x40
 80047a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
 80047a8:	2300      	movs	r3, #0
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ac:	2300      	movs	r3, #0
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <HAL_RCC_GetSysClockFreq+0x180>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d00d      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x40>
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	f200 80a1 	bhi.w	8004908 <HAL_RCC_GetSysClockFreq+0x16c>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ce:	e09b      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047d0:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_GetSysClockFreq+0x184>)
 80047d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d4:	e09b      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d6:	4b53      	ldr	r3, [pc, #332]	; (8004924 <HAL_RCC_GetSysClockFreq+0x188>)
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047da:	e098      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047dc:	4b4f      	ldr	r3, [pc, #316]	; (800491c <HAL_RCC_GetSysClockFreq+0x180>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047e6:	4b4d      	ldr	r3, [pc, #308]	; (800491c <HAL_RCC_GetSysClockFreq+0x180>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d028      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f2:	4b4a      	ldr	r3, [pc, #296]	; (800491c <HAL_RCC_GetSysClockFreq+0x180>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	2200      	movs	r2, #0
 80047fa:	623b      	str	r3, [r7, #32]
 80047fc:	627a      	str	r2, [r7, #36]	; 0x24
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004804:	2100      	movs	r1, #0
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCC_GetSysClockFreq+0x188>)
 8004808:	fb03 f201 	mul.w	r2, r3, r1
 800480c:	2300      	movs	r3, #0
 800480e:	fb00 f303 	mul.w	r3, r0, r3
 8004812:	4413      	add	r3, r2
 8004814:	4a43      	ldr	r2, [pc, #268]	; (8004924 <HAL_RCC_GetSysClockFreq+0x188>)
 8004816:	fba0 1202 	umull	r1, r2, r0, r2
 800481a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800481c:	460a      	mov	r2, r1
 800481e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004822:	4413      	add	r3, r2
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	2200      	movs	r2, #0
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	61fa      	str	r2, [r7, #28]
 800482e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004836:	f7fb fd5b 	bl	80002f0 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4613      	mov	r3, r2
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004842:	e053      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004844:	4b35      	ldr	r3, [pc, #212]	; (800491c <HAL_RCC_GetSysClockFreq+0x180>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	2200      	movs	r2, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	617a      	str	r2, [r7, #20]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004856:	f04f 0b00 	mov.w	fp, #0
 800485a:	4652      	mov	r2, sl
 800485c:	465b      	mov	r3, fp
 800485e:	f04f 0000 	mov.w	r0, #0
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	0159      	lsls	r1, r3, #5
 8004868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486c:	0150      	lsls	r0, r2, #5
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	ebb2 080a 	subs.w	r8, r2, sl
 8004876:	eb63 090b 	sbc.w	r9, r3, fp
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800488a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800488e:	ebb2 0408 	subs.w	r4, r2, r8
 8004892:	eb63 0509 	sbc.w	r5, r3, r9
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	00eb      	lsls	r3, r5, #3
 80048a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a4:	00e2      	lsls	r2, r4, #3
 80048a6:	4614      	mov	r4, r2
 80048a8:	461d      	mov	r5, r3
 80048aa:	eb14 030a 	adds.w	r3, r4, sl
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	eb45 030b 	adc.w	r3, r5, fp
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048c2:	4629      	mov	r1, r5
 80048c4:	028b      	lsls	r3, r1, #10
 80048c6:	4621      	mov	r1, r4
 80048c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048cc:	4621      	mov	r1, r4
 80048ce:	028a      	lsls	r2, r1, #10
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	2200      	movs	r2, #0
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	60fa      	str	r2, [r7, #12]
 80048dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e0:	f7fb fd06 	bl	80002f0 <__aeabi_uldivmod>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4613      	mov	r3, r2
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_GetSysClockFreq+0x180>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	3301      	adds	r3, #1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80048fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004906:	e002      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCC_GetSysClockFreq+0x184>)
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800490c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004910:	4618      	mov	r0, r3
 8004912:	3740      	adds	r7, #64	; 0x40
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800
 8004920:	00f42400 	.word	0x00f42400
 8004924:	017d7840 	.word	0x017d7840

08004928 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_RCC_GetHCLKFreq+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000000 	.word	0x20000000

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004944:	f7ff fff0 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08009568 	.word	0x08009568

08004968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800496c:	f7ff ffdc 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0b5b      	lsrs	r3, r3, #13
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCC_GetPCLK2Freq+0x24>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	08009568 	.word	0x08009568

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049b8:	4b69      	ldr	r3, [pc, #420]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a68      	ldr	r2, [pc, #416]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	4b66      	ldr	r3, [pc, #408]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	4964      	ldr	r1, [pc, #400]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ea:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	4959      	ldr	r1, [pc, #356]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a08:	d101      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a26:	4b4e      	ldr	r3, [pc, #312]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	494a      	ldr	r1, [pc, #296]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 808b 	beq.w	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	4a39      	ldr	r2, [pc, #228]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a80:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a34      	ldr	r2, [pc, #208]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fd fd66 	bl	8002568 <HAL_GetTick>
 8004a9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa0:	f7fd fd62 	bl	8002568 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e38f      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d035      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d02e      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004adc:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a1a      	ldr	r2, [pc, #104]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b04:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d114      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fd2a 	bl	8002568 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd fd26 	bl	8002568 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e351      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ee      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b46:	d111      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b56:	400b      	ands	r3, r1
 8004b58:	4901      	ldr	r1, [pc, #4]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40007000 	.word	0x40007000
 8004b68:	0ffffcff 	.word	0x0ffffcff
 8004b6c:	4bac      	ldr	r3, [pc, #688]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4aab      	ldr	r2, [pc, #684]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	4ba9      	ldr	r3, [pc, #676]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	49a6      	ldr	r1, [pc, #664]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b96:	4ba2      	ldr	r3, [pc, #648]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9c:	4aa0      	ldr	r2, [pc, #640]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ba6:	4b9e      	ldr	r3, [pc, #632]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	499b      	ldr	r1, [pc, #620]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc4:	4b96      	ldr	r3, [pc, #600]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd2:	4993      	ldr	r1, [pc, #588]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be6:	4b8e      	ldr	r3, [pc, #568]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf4:	498a      	ldr	r1, [pc, #552]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c08:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c16:	4982      	ldr	r1, [pc, #520]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c2a:	4b7d      	ldr	r3, [pc, #500]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4979      	ldr	r1, [pc, #484]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4c:	4b74      	ldr	r3, [pc, #464]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4971      	ldr	r1, [pc, #452]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c6e:	4b6c      	ldr	r3, [pc, #432]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f023 020c 	bic.w	r2, r3, #12
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7c:	4968      	ldr	r1, [pc, #416]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c90:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	4960      	ldr	r1, [pc, #384]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	4957      	ldr	r1, [pc, #348]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd4:	4b52      	ldr	r3, [pc, #328]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	494f      	ldr	r1, [pc, #316]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	4946      	ldr	r1, [pc, #280]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d18:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	493e      	ldr	r1, [pc, #248]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d48:	4935      	ldr	r1, [pc, #212]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d5c:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6a:	492d      	ldr	r1, [pc, #180]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d011      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d7e:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	4924      	ldr	r1, [pc, #144]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dbe:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dcc:	4914      	ldr	r1, [pc, #80]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df0:	490b      	ldr	r1, [pc, #44]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00f      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e14:	4902      	ldr	r1, [pc, #8]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e30:	4b8a      	ldr	r3, [pc, #552]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	4986      	ldr	r1, [pc, #536]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e54:	4b81      	ldr	r3, [pc, #516]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	497d      	ldr	r1, [pc, #500]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d006      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80d6 	beq.w	800502c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e80:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a75      	ldr	r2, [pc, #468]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fb6c 	bl	8002568 <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e94:	f7fd fb68 	bl	8002568 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e195      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d021      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eda:	0e1b      	lsrs	r3, r3, #24
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	019a      	lsls	r2, r3, #6
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	4958      	ldr	r1, [pc, #352]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02e      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f2c:	d129      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f2e:	4b4b      	ldr	r3, [pc, #300]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f3c:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f42:	0f1b      	lsrs	r3, r3, #28
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	493e      	ldr	r1, [pc, #248]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f70:	f023 021f 	bic.w	r2, r3, #31
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	4938      	ldr	r1, [pc, #224]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01d      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f8e:	4b33      	ldr	r3, [pc, #204]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f94:	0e1b      	lsrs	r3, r3, #24
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa2:	0f1b      	lsrs	r3, r3, #28
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	019a      	lsls	r2, r3, #6
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	071b      	lsls	r3, r3, #28
 8004fc2:	4926      	ldr	r1, [pc, #152]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d011      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	019a      	lsls	r2, r3, #6
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	491a      	ldr	r1, [pc, #104]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a17      	ldr	r2, [pc, #92]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005006:	f7fd faaf 	bl	8002568 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800500e:	f7fd faab 	bl	8002568 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	; 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0d8      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 80ce 	bne.w	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fd fa92 	bl	8002568 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005046:	e00b      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005048:	f7fd fa8e 	bl	8002568 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d904      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0bb      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005060:	4b5e      	ldr	r3, [pc, #376]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506c:	d0ec      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02e      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d12a      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005096:	4b51      	ldr	r3, [pc, #324]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050a4:	4b4d      	ldr	r3, [pc, #308]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	0f1b      	lsrs	r3, r3, #28
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	019a      	lsls	r2, r3, #6
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	071b      	lsls	r3, r3, #28
 80050ca:	4944      	ldr	r1, [pc, #272]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050d2:	4b42      	ldr	r3, [pc, #264]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	3b01      	subs	r3, #1
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	493d      	ldr	r1, [pc, #244]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d022      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005100:	d11d      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005102:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	0e1b      	lsrs	r3, r3, #24
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005110:	4b32      	ldr	r3, [pc, #200]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	0f1b      	lsrs	r3, r3, #28
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	019a      	lsls	r2, r3, #6
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	431a      	orrs	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	061b      	lsls	r3, r3, #24
 8005130:	431a      	orrs	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	071b      	lsls	r3, r3, #28
 8005136:	4929      	ldr	r1, [pc, #164]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d028      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	0e1b      	lsrs	r3, r3, #24
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	019a      	lsls	r2, r3, #6
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	071b      	lsls	r3, r3, #28
 800517e:	4917      	ldr	r1, [pc, #92]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	4911      	ldr	r1, [pc, #68]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0e      	ldr	r2, [pc, #56]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a8:	f7fd f9de 	bl	8002568 <HAL_GetTick>
 80051ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051b0:	f7fd f9da 	bl	8002568 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e007      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ce:	d1ef      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e049      	b.n	8005286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fe8c 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fac0 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d001      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e054      	b.n	8005352 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <HAL_TIM_Base_Start_IT+0xd0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d022      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d01d      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a22      	ldr	r2, [pc, #136]	; (8005364 <HAL_TIM_Base_Start_IT+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d018      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a21      	ldr	r2, [pc, #132]	; (8005368 <HAL_TIM_Base_Start_IT+0xd8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00e      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <HAL_TIM_Base_Start_IT+0xe0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <HAL_TIM_Base_Start_IT+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_TIM_Base_Start_IT+0xe8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d115      	bne.n	800533c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_TIM_Base_Start_IT+0xec>)
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d015      	beq.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d011      	beq.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	e008      	b.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e000      	b.n	8005350 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40010400 	.word	0x40010400
 8005374:	40014000 	.word	0x40014000
 8005378:	40001800 	.word	0x40001800
 800537c:	00010007 	.word	0x00010007

08005380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0202 	mvn.w	r2, #2
 80053ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f9d0 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9c2 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f9d3 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0204 	mvn.w	r2, #4
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9a6 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f998 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f9a9 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b08      	cmp	r3, #8
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b08      	cmp	r3, #8
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0208 	mvn.w	r2, #8
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2204      	movs	r2, #4
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f97c 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f96e 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f97f 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b10      	cmp	r3, #16
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b10      	cmp	r3, #16
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0210 	mvn.w	r2, #16
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2208      	movs	r2, #8
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f952 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f944 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f955 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10e      	bne.n	8005504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0201 	mvn.w	r2, #1
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc fb48 	bl	8001b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b80      	cmp	r3, #128	; 0x80
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b80      	cmp	r3, #128	; 0x80
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fb0c 	bl	8005b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 faff 	bl	8005b5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d10e      	bne.n	800558a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d107      	bne.n	800558a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f903 	bl	8005790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0220 	mvn.w	r2, #32
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fabf 	bl	8005b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_ConfigClockSource+0x1c>
 80055d8:	2302      	movs	r3, #2
 80055da:	e0b4      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x186>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4b56      	ldr	r3, [pc, #344]	; (8005750 <HAL_TIM_ConfigClockSource+0x190>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005614:	d03e      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0xd4>
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561a:	f200 8087 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x16c>
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	f000 8086 	beq.w	8005732 <HAL_TIM_ConfigClockSource+0x172>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562a:	d87f      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 800562c:	2b70      	cmp	r3, #112	; 0x70
 800562e:	d01a      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0xa6>
 8005630:	2b70      	cmp	r3, #112	; 0x70
 8005632:	d87b      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 8005634:	2b60      	cmp	r3, #96	; 0x60
 8005636:	d050      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x11a>
 8005638:	2b60      	cmp	r3, #96	; 0x60
 800563a:	d877      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b50      	cmp	r3, #80	; 0x50
 800563e:	d03c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0xfa>
 8005640:	2b50      	cmp	r3, #80	; 0x50
 8005642:	d873      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d058      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x13a>
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d86f      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d064      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15a>
 8005650:	2b30      	cmp	r3, #48	; 0x30
 8005652:	d86b      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d060      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15a>
 8005658:	2b20      	cmp	r3, #32
 800565a:	d867      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05c      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15a>
 8005660:	2b10      	cmp	r3, #16
 8005662:	d05a      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15a>
 8005664:	e062      	b.n	800572c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6899      	ldr	r1, [r3, #8]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f000 f9af 	bl	80059d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
      break;
 8005692:	e04f      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f000 f998 	bl	80059d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b6:	609a      	str	r2, [r3, #8]
      break;
 80056b8:	e03c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 f90c 	bl	80058e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2150      	movs	r1, #80	; 0x50
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f965 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 80056d8:	e02c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 f92b 	bl	8005942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2160      	movs	r1, #96	; 0x60
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f955 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e01c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	461a      	mov	r2, r3
 8005708:	f000 f8ec 	bl	80058e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2140      	movs	r1, #64	; 0x40
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f945 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8005718:	e00c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f000 f93c 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 800572a:	e003      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	e000      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	fffeff88 	.word	0xfffeff88

08005754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a40      	ldr	r2, [pc, #256]	; (80058b8 <TIM_Base_SetConfig+0x114>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c2:	d00f      	beq.n	80057e4 <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3d      	ldr	r2, [pc, #244]	; (80058bc <TIM_Base_SetConfig+0x118>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a3c      	ldr	r2, [pc, #240]	; (80058c0 <TIM_Base_SetConfig+0x11c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3b      	ldr	r2, [pc, #236]	; (80058c4 <TIM_Base_SetConfig+0x120>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a3a      	ldr	r2, [pc, #232]	; (80058c8 <TIM_Base_SetConfig+0x124>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d108      	bne.n	80057f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2f      	ldr	r2, [pc, #188]	; (80058b8 <TIM_Base_SetConfig+0x114>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02b      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005804:	d027      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2c      	ldr	r2, [pc, #176]	; (80058bc <TIM_Base_SetConfig+0x118>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d023      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2b      	ldr	r2, [pc, #172]	; (80058c0 <TIM_Base_SetConfig+0x11c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01f      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <TIM_Base_SetConfig+0x120>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01b      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a29      	ldr	r2, [pc, #164]	; (80058c8 <TIM_Base_SetConfig+0x124>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d017      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a28      	ldr	r2, [pc, #160]	; (80058cc <TIM_Base_SetConfig+0x128>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <TIM_Base_SetConfig+0x12c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a26      	ldr	r2, [pc, #152]	; (80058d4 <TIM_Base_SetConfig+0x130>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a25      	ldr	r2, [pc, #148]	; (80058d8 <TIM_Base_SetConfig+0x134>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a24      	ldr	r2, [pc, #144]	; (80058dc <TIM_Base_SetConfig+0x138>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <TIM_Base_SetConfig+0x13c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d108      	bne.n	8005868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <TIM_Base_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_Base_SetConfig+0xf8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <TIM_Base_SetConfig+0x124>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d103      	bne.n	80058a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	615a      	str	r2, [r3, #20]
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40014400 	.word	0x40014400
 80058d4:	40014800 	.word	0x40014800
 80058d8:	40001800 	.word	0x40001800
 80058dc:	40001c00 	.word	0x40001c00
 80058e0:	40002000 	.word	0x40002000

080058e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 030a 	bic.w	r3, r3, #10
 8005920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0210 	bic.w	r2, r3, #16
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800596c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	031b      	lsls	r3, r3, #12
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f043 0307 	orr.w	r3, r3, #7
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e06d      	b.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a30      	ldr	r2, [pc, #192]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1a      	ldr	r2, [pc, #104]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40010400 	.word	0x40010400
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40001800 	.word	0x40001800

08005b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e040      	b.n	8005c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fc f9ea 	bl	8001f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2224      	movs	r2, #36	; 0x24
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f974 	bl	8005e9c <UART_SetConfig>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e022      	b.n	8005c04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fbcc 	bl	8006364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fc53 	bl	80064a8 <UART_CheckIdleState>
 8005c02:	4603      	mov	r3, r0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d171      	bne.n	8005d08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Transmit+0x24>
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e06a      	b.n	8005d0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2221      	movs	r2, #33	; 0x21
 8005c40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c42:	f7fc fc91 	bl	8002568 <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c60:	d108      	bne.n	8005c74 <HAL_UART_Transmit+0x68>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c7c:	e02c      	b.n	8005cd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2180      	movs	r1, #128	; 0x80
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fc5a 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e038      	b.n	8005d0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e007      	b.n	8005cc6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1cc      	bne.n	8005c7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2140      	movs	r1, #64	; 0x40
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fc27 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e005      	b.n	8005d0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b08a      	sub	sp, #40	; 0x28
 8005d16:	af02      	add	r7, sp, #8
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	f040 80b1 	bne.w	8005e90 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_UART_Receive+0x28>
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0a9      	b.n	8005e92 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2222      	movs	r2, #34	; 0x22
 8005d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d54:	f7fc fc08 	bl	8002568 <HAL_GetTick>
 8005d58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d10e      	bne.n	8005d92 <HAL_UART_Receive+0x80>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d105      	bne.n	8005d88 <HAL_UART_Receive+0x76>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d86:	e02d      	b.n	8005de4 <HAL_UART_Receive+0xd2>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d90:	e028      	b.n	8005de4 <HAL_UART_Receive+0xd2>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <HAL_UART_Receive+0xa4>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <HAL_UART_Receive+0x9a>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005daa:	e01b      	b.n	8005de4 <HAL_UART_Receive+0xd2>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	227f      	movs	r2, #127	; 0x7f
 8005db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db4:	e016      	b.n	8005de4 <HAL_UART_Receive+0xd2>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbe:	d10d      	bne.n	8005ddc <HAL_UART_Receive+0xca>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_UART_Receive+0xc0>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	227f      	movs	r2, #127	; 0x7f
 8005dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd0:	e008      	b.n	8005de4 <HAL_UART_Receive+0xd2>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	223f      	movs	r2, #63	; 0x3f
 8005dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dda:	e003      	b.n	8005de4 <HAL_UART_Receive+0xd2>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df4:	d108      	bne.n	8005e08 <HAL_UART_Receive+0xf6>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e003      	b.n	8005e10 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e10:	e032      	b.n	8005e78 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fb90 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e032      	b.n	8005e92 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	8a7b      	ldrh	r3, [r7, #18]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3302      	adds	r3, #2
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e00c      	b.n	8005e66 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	8a7b      	ldrh	r3, [r7, #18]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	4013      	ands	r3, r2
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	3301      	adds	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1c6      	bne.n	8005e12 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4ba6      	ldr	r3, [pc, #664]	; (8006160 <UART_SetConfig+0x2c4>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a94      	ldr	r2, [pc, #592]	; (8006164 <UART_SetConfig+0x2c8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d120      	bne.n	8005f5a <UART_SetConfig+0xbe>
 8005f18:	4b93      	ldr	r3, [pc, #588]	; (8006168 <UART_SetConfig+0x2cc>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d816      	bhi.n	8005f54 <UART_SetConfig+0xb8>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x90>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f49 	.word	0x08005f49
 8005f34:	08005f43 	.word	0x08005f43
 8005f38:	08005f4f 	.word	0x08005f4f
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e150      	b.n	80061e4 <UART_SetConfig+0x348>
 8005f42:	2302      	movs	r3, #2
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e14d      	b.n	80061e4 <UART_SetConfig+0x348>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e14a      	b.n	80061e4 <UART_SetConfig+0x348>
 8005f4e:	2308      	movs	r3, #8
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e147      	b.n	80061e4 <UART_SetConfig+0x348>
 8005f54:	2310      	movs	r3, #16
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e144      	b.n	80061e4 <UART_SetConfig+0x348>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a83      	ldr	r2, [pc, #524]	; (800616c <UART_SetConfig+0x2d0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d132      	bne.n	8005fca <UART_SetConfig+0x12e>
 8005f64:	4b80      	ldr	r3, [pc, #512]	; (8006168 <UART_SetConfig+0x2cc>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f003 030c 	and.w	r3, r3, #12
 8005f6e:	2b0c      	cmp	r3, #12
 8005f70:	d828      	bhi.n	8005fc4 <UART_SetConfig+0x128>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0xdc>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fc5 	.word	0x08005fc5
 8005f80:	08005fc5 	.word	0x08005fc5
 8005f84:	08005fc5 	.word	0x08005fc5
 8005f88:	08005fb9 	.word	0x08005fb9
 8005f8c:	08005fc5 	.word	0x08005fc5
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	08005fc5 	.word	0x08005fc5
 8005f98:	08005fb3 	.word	0x08005fb3
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fc5 	.word	0x08005fc5
 8005fa8:	08005fbf 	.word	0x08005fbf
 8005fac:	2300      	movs	r3, #0
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e118      	b.n	80061e4 <UART_SetConfig+0x348>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e115      	b.n	80061e4 <UART_SetConfig+0x348>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e112      	b.n	80061e4 <UART_SetConfig+0x348>
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e10f      	b.n	80061e4 <UART_SetConfig+0x348>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e10c      	b.n	80061e4 <UART_SetConfig+0x348>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a68      	ldr	r2, [pc, #416]	; (8006170 <UART_SetConfig+0x2d4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d120      	bne.n	8006016 <UART_SetConfig+0x17a>
 8005fd4:	4b64      	ldr	r3, [pc, #400]	; (8006168 <UART_SetConfig+0x2cc>)
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fde:	2b30      	cmp	r3, #48	; 0x30
 8005fe0:	d013      	beq.n	800600a <UART_SetConfig+0x16e>
 8005fe2:	2b30      	cmp	r3, #48	; 0x30
 8005fe4:	d814      	bhi.n	8006010 <UART_SetConfig+0x174>
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d009      	beq.n	8005ffe <UART_SetConfig+0x162>
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d810      	bhi.n	8006010 <UART_SetConfig+0x174>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <UART_SetConfig+0x15c>
 8005ff2:	2b10      	cmp	r3, #16
 8005ff4:	d006      	beq.n	8006004 <UART_SetConfig+0x168>
 8005ff6:	e00b      	b.n	8006010 <UART_SetConfig+0x174>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e0f2      	b.n	80061e4 <UART_SetConfig+0x348>
 8005ffe:	2302      	movs	r3, #2
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e0ef      	b.n	80061e4 <UART_SetConfig+0x348>
 8006004:	2304      	movs	r3, #4
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e0ec      	b.n	80061e4 <UART_SetConfig+0x348>
 800600a:	2308      	movs	r3, #8
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e0e9      	b.n	80061e4 <UART_SetConfig+0x348>
 8006010:	2310      	movs	r3, #16
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e0e6      	b.n	80061e4 <UART_SetConfig+0x348>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a56      	ldr	r2, [pc, #344]	; (8006174 <UART_SetConfig+0x2d8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d120      	bne.n	8006062 <UART_SetConfig+0x1c6>
 8006020:	4b51      	ldr	r3, [pc, #324]	; (8006168 <UART_SetConfig+0x2cc>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800602a:	2bc0      	cmp	r3, #192	; 0xc0
 800602c:	d013      	beq.n	8006056 <UART_SetConfig+0x1ba>
 800602e:	2bc0      	cmp	r3, #192	; 0xc0
 8006030:	d814      	bhi.n	800605c <UART_SetConfig+0x1c0>
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d009      	beq.n	800604a <UART_SetConfig+0x1ae>
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d810      	bhi.n	800605c <UART_SetConfig+0x1c0>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <UART_SetConfig+0x1a8>
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d006      	beq.n	8006050 <UART_SetConfig+0x1b4>
 8006042:	e00b      	b.n	800605c <UART_SetConfig+0x1c0>
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e0cc      	b.n	80061e4 <UART_SetConfig+0x348>
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e0c9      	b.n	80061e4 <UART_SetConfig+0x348>
 8006050:	2304      	movs	r3, #4
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e0c6      	b.n	80061e4 <UART_SetConfig+0x348>
 8006056:	2308      	movs	r3, #8
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e0c3      	b.n	80061e4 <UART_SetConfig+0x348>
 800605c:	2310      	movs	r3, #16
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e0c0      	b.n	80061e4 <UART_SetConfig+0x348>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a44      	ldr	r2, [pc, #272]	; (8006178 <UART_SetConfig+0x2dc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d125      	bne.n	80060b8 <UART_SetConfig+0x21c>
 800606c:	4b3e      	ldr	r3, [pc, #248]	; (8006168 <UART_SetConfig+0x2cc>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800607a:	d017      	beq.n	80060ac <UART_SetConfig+0x210>
 800607c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006080:	d817      	bhi.n	80060b2 <UART_SetConfig+0x216>
 8006082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006086:	d00b      	beq.n	80060a0 <UART_SetConfig+0x204>
 8006088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608c:	d811      	bhi.n	80060b2 <UART_SetConfig+0x216>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <UART_SetConfig+0x1fe>
 8006092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006096:	d006      	beq.n	80060a6 <UART_SetConfig+0x20a>
 8006098:	e00b      	b.n	80060b2 <UART_SetConfig+0x216>
 800609a:	2300      	movs	r3, #0
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e0a1      	b.n	80061e4 <UART_SetConfig+0x348>
 80060a0:	2302      	movs	r3, #2
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e09e      	b.n	80061e4 <UART_SetConfig+0x348>
 80060a6:	2304      	movs	r3, #4
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e09b      	b.n	80061e4 <UART_SetConfig+0x348>
 80060ac:	2308      	movs	r3, #8
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e098      	b.n	80061e4 <UART_SetConfig+0x348>
 80060b2:	2310      	movs	r3, #16
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e095      	b.n	80061e4 <UART_SetConfig+0x348>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a2f      	ldr	r2, [pc, #188]	; (800617c <UART_SetConfig+0x2e0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d125      	bne.n	800610e <UART_SetConfig+0x272>
 80060c2:	4b29      	ldr	r3, [pc, #164]	; (8006168 <UART_SetConfig+0x2cc>)
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d0:	d017      	beq.n	8006102 <UART_SetConfig+0x266>
 80060d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d6:	d817      	bhi.n	8006108 <UART_SetConfig+0x26c>
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d00b      	beq.n	80060f6 <UART_SetConfig+0x25a>
 80060de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e2:	d811      	bhi.n	8006108 <UART_SetConfig+0x26c>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <UART_SetConfig+0x254>
 80060e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ec:	d006      	beq.n	80060fc <UART_SetConfig+0x260>
 80060ee:	e00b      	b.n	8006108 <UART_SetConfig+0x26c>
 80060f0:	2301      	movs	r3, #1
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e076      	b.n	80061e4 <UART_SetConfig+0x348>
 80060f6:	2302      	movs	r3, #2
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e073      	b.n	80061e4 <UART_SetConfig+0x348>
 80060fc:	2304      	movs	r3, #4
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e070      	b.n	80061e4 <UART_SetConfig+0x348>
 8006102:	2308      	movs	r3, #8
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e06d      	b.n	80061e4 <UART_SetConfig+0x348>
 8006108:	2310      	movs	r3, #16
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e06a      	b.n	80061e4 <UART_SetConfig+0x348>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <UART_SetConfig+0x2e4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d138      	bne.n	800618a <UART_SetConfig+0x2ee>
 8006118:	4b13      	ldr	r3, [pc, #76]	; (8006168 <UART_SetConfig+0x2cc>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006122:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006126:	d017      	beq.n	8006158 <UART_SetConfig+0x2bc>
 8006128:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800612c:	d82a      	bhi.n	8006184 <UART_SetConfig+0x2e8>
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006132:	d00b      	beq.n	800614c <UART_SetConfig+0x2b0>
 8006134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006138:	d824      	bhi.n	8006184 <UART_SetConfig+0x2e8>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <UART_SetConfig+0x2aa>
 800613e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006142:	d006      	beq.n	8006152 <UART_SetConfig+0x2b6>
 8006144:	e01e      	b.n	8006184 <UART_SetConfig+0x2e8>
 8006146:	2300      	movs	r3, #0
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e04b      	b.n	80061e4 <UART_SetConfig+0x348>
 800614c:	2302      	movs	r3, #2
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e048      	b.n	80061e4 <UART_SetConfig+0x348>
 8006152:	2304      	movs	r3, #4
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e045      	b.n	80061e4 <UART_SetConfig+0x348>
 8006158:	2308      	movs	r3, #8
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e042      	b.n	80061e4 <UART_SetConfig+0x348>
 800615e:	bf00      	nop
 8006160:	efff69f3 	.word	0xefff69f3
 8006164:	40011000 	.word	0x40011000
 8006168:	40023800 	.word	0x40023800
 800616c:	40004400 	.word	0x40004400
 8006170:	40004800 	.word	0x40004800
 8006174:	40004c00 	.word	0x40004c00
 8006178:	40005000 	.word	0x40005000
 800617c:	40011400 	.word	0x40011400
 8006180:	40007800 	.word	0x40007800
 8006184:	2310      	movs	r3, #16
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e02c      	b.n	80061e4 <UART_SetConfig+0x348>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a72      	ldr	r2, [pc, #456]	; (8006358 <UART_SetConfig+0x4bc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d125      	bne.n	80061e0 <UART_SetConfig+0x344>
 8006194:	4b71      	ldr	r3, [pc, #452]	; (800635c <UART_SetConfig+0x4c0>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800619e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061a2:	d017      	beq.n	80061d4 <UART_SetConfig+0x338>
 80061a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061a8:	d817      	bhi.n	80061da <UART_SetConfig+0x33e>
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ae:	d00b      	beq.n	80061c8 <UART_SetConfig+0x32c>
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	d811      	bhi.n	80061da <UART_SetConfig+0x33e>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <UART_SetConfig+0x326>
 80061ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061be:	d006      	beq.n	80061ce <UART_SetConfig+0x332>
 80061c0:	e00b      	b.n	80061da <UART_SetConfig+0x33e>
 80061c2:	2300      	movs	r3, #0
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e00d      	b.n	80061e4 <UART_SetConfig+0x348>
 80061c8:	2302      	movs	r3, #2
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e00a      	b.n	80061e4 <UART_SetConfig+0x348>
 80061ce:	2304      	movs	r3, #4
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e007      	b.n	80061e4 <UART_SetConfig+0x348>
 80061d4:	2308      	movs	r3, #8
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e004      	b.n	80061e4 <UART_SetConfig+0x348>
 80061da:	2310      	movs	r3, #16
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e001      	b.n	80061e4 <UART_SetConfig+0x348>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ec:	d15b      	bne.n	80062a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061ee:	7ffb      	ldrb	r3, [r7, #31]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d828      	bhi.n	8006246 <UART_SetConfig+0x3aa>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <UART_SetConfig+0x360>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006229 	.word	0x08006229
 8006204:	08006231 	.word	0x08006231
 8006208:	08006247 	.word	0x08006247
 800620c:	08006237 	.word	0x08006237
 8006210:	08006247 	.word	0x08006247
 8006214:	08006247 	.word	0x08006247
 8006218:	08006247 	.word	0x08006247
 800621c:	0800623f 	.word	0x0800623f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006220:	f7fe fb8e 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8006224:	61b8      	str	r0, [r7, #24]
        break;
 8006226:	e013      	b.n	8006250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006228:	f7fe fb9e 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 800622c:	61b8      	str	r0, [r7, #24]
        break;
 800622e:	e00f      	b.n	8006250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006230:	4b4b      	ldr	r3, [pc, #300]	; (8006360 <UART_SetConfig+0x4c4>)
 8006232:	61bb      	str	r3, [r7, #24]
        break;
 8006234:	e00c      	b.n	8006250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006236:	f7fe fab1 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800623a:	61b8      	str	r0, [r7, #24]
        break;
 800623c:	e008      	b.n	8006250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800623e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006242:	61bb      	str	r3, [r7, #24]
        break;
 8006244:	e004      	b.n	8006250 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	77bb      	strb	r3, [r7, #30]
        break;
 800624e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d074      	beq.n	8006340 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	005a      	lsls	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d916      	bls.n	80062a0 <UART_SetConfig+0x404>
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d212      	bcs.n	80062a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f023 030f 	bic.w	r3, r3, #15
 8006282:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	b29a      	uxth	r2, r3
 8006290:	89fb      	ldrh	r3, [r7, #14]
 8006292:	4313      	orrs	r3, r2
 8006294:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	89fa      	ldrh	r2, [r7, #14]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e04f      	b.n	8006340 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	77bb      	strb	r3, [r7, #30]
 80062a4:	e04c      	b.n	8006340 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d828      	bhi.n	80062fe <UART_SetConfig+0x462>
 80062ac:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0x418>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062d9 	.word	0x080062d9
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	080062ff 	.word	0x080062ff
 80062c4:	080062ef 	.word	0x080062ef
 80062c8:	080062ff 	.word	0x080062ff
 80062cc:	080062ff 	.word	0x080062ff
 80062d0:	080062ff 	.word	0x080062ff
 80062d4:	080062f7 	.word	0x080062f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d8:	f7fe fb32 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 80062dc:	61b8      	str	r0, [r7, #24]
        break;
 80062de:	e013      	b.n	8006308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e0:	f7fe fb42 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 80062e4:	61b8      	str	r0, [r7, #24]
        break;
 80062e6:	e00f      	b.n	8006308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e8:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <UART_SetConfig+0x4c4>)
 80062ea:	61bb      	str	r3, [r7, #24]
        break;
 80062ec:	e00c      	b.n	8006308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ee:	f7fe fa55 	bl	800479c <HAL_RCC_GetSysClockFreq>
 80062f2:	61b8      	str	r0, [r7, #24]
        break;
 80062f4:	e008      	b.n	8006308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fa:	61bb      	str	r3, [r7, #24]
        break;
 80062fc:	e004      	b.n	8006308 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	77bb      	strb	r3, [r7, #30]
        break;
 8006306:	bf00      	nop
    }

    if (pclk != 0U)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	085a      	lsrs	r2, r3, #1
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	441a      	add	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006320:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b0f      	cmp	r3, #15
 8006326:	d909      	bls.n	800633c <UART_SetConfig+0x4a0>
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800632e:	d205      	bcs.n	800633c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	b29a      	uxth	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e001      	b.n	8006340 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800634c:	7fbb      	ldrb	r3, [r7, #30]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40007c00 	.word	0x40007c00
 800635c:	40023800 	.word	0x40023800
 8006360:	00f42400 	.word	0x00f42400

08006364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01a      	beq.n	800647a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006462:	d10a      	bne.n	800647a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b8:	f7fc f856 	bl	8002568 <HAL_GetTick>
 80064bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d10e      	bne.n	80064ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f831 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e027      	b.n	800653a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d10e      	bne.n	8006516 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f81b 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e011      	b.n	800653a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b09c      	sub	sp, #112	; 0x70
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006552:	e0a7      	b.n	80066a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655a:	f000 80a3 	beq.w	80066a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fc f803 	bl	8002568 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <UART_WaitOnFlagUntilTimeout+0x32>
 800656e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006570:	2b00      	cmp	r3, #0
 8006572:	d13f      	bne.n	80065f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006588:	667b      	str	r3, [r7, #100]	; 0x64
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006592:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006594:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	663b      	str	r3, [r7, #96]	; 0x60
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80065c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e068      	b.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d050      	beq.n	80066a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006610:	d148      	bne.n	80066a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800661a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e6      	bne.n	800661c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	613b      	str	r3, [r7, #16]
   return(result);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	66bb      	str	r3, [r7, #104]	; 0x68
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800666e:	623a      	str	r2, [r7, #32]
 8006670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	69f9      	ldr	r1, [r7, #28]
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	61bb      	str	r3, [r7, #24]
   return(result);
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e010      	b.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4013      	ands	r3, r2
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	429a      	cmp	r2, r3
 80066c0:	f43f af48 	beq.w	8006554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3770      	adds	r7, #112	; 0x70
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <__errno>:
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <__errno+0x8>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	2000000c 	.word	0x2000000c

080066dc <__libc_init_array>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4d0d      	ldr	r5, [pc, #52]	; (8006714 <__libc_init_array+0x38>)
 80066e0:	4c0d      	ldr	r4, [pc, #52]	; (8006718 <__libc_init_array+0x3c>)
 80066e2:	1b64      	subs	r4, r4, r5
 80066e4:	10a4      	asrs	r4, r4, #2
 80066e6:	2600      	movs	r6, #0
 80066e8:	42a6      	cmp	r6, r4
 80066ea:	d109      	bne.n	8006700 <__libc_init_array+0x24>
 80066ec:	4d0b      	ldr	r5, [pc, #44]	; (800671c <__libc_init_array+0x40>)
 80066ee:	4c0c      	ldr	r4, [pc, #48]	; (8006720 <__libc_init_array+0x44>)
 80066f0:	f002 fec0 	bl	8009474 <_init>
 80066f4:	1b64      	subs	r4, r4, r5
 80066f6:	10a4      	asrs	r4, r4, #2
 80066f8:	2600      	movs	r6, #0
 80066fa:	42a6      	cmp	r6, r4
 80066fc:	d105      	bne.n	800670a <__libc_init_array+0x2e>
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	f855 3b04 	ldr.w	r3, [r5], #4
 8006704:	4798      	blx	r3
 8006706:	3601      	adds	r6, #1
 8006708:	e7ee      	b.n	80066e8 <__libc_init_array+0xc>
 800670a:	f855 3b04 	ldr.w	r3, [r5], #4
 800670e:	4798      	blx	r3
 8006710:	3601      	adds	r6, #1
 8006712:	e7f2      	b.n	80066fa <__libc_init_array+0x1e>
 8006714:	0800995c 	.word	0x0800995c
 8006718:	0800995c 	.word	0x0800995c
 800671c:	0800995c 	.word	0x0800995c
 8006720:	08009960 	.word	0x08009960

08006724 <memset>:
 8006724:	4402      	add	r2, r0
 8006726:	4603      	mov	r3, r0
 8006728:	4293      	cmp	r3, r2
 800672a:	d100      	bne.n	800672e <memset+0xa>
 800672c:	4770      	bx	lr
 800672e:	f803 1b01 	strb.w	r1, [r3], #1
 8006732:	e7f9      	b.n	8006728 <memset+0x4>

08006734 <__cvt>:
 8006734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006736:	ed2d 8b02 	vpush	{d8}
 800673a:	eeb0 8b40 	vmov.f64	d8, d0
 800673e:	b085      	sub	sp, #20
 8006740:	4617      	mov	r7, r2
 8006742:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006744:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006746:	ee18 2a90 	vmov	r2, s17
 800674a:	f025 0520 	bic.w	r5, r5, #32
 800674e:	2a00      	cmp	r2, #0
 8006750:	bfb6      	itet	lt
 8006752:	222d      	movlt	r2, #45	; 0x2d
 8006754:	2200      	movge	r2, #0
 8006756:	eeb1 8b40 	vneglt.f64	d8, d0
 800675a:	2d46      	cmp	r5, #70	; 0x46
 800675c:	460c      	mov	r4, r1
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	d004      	beq.n	800676c <__cvt+0x38>
 8006762:	2d45      	cmp	r5, #69	; 0x45
 8006764:	d100      	bne.n	8006768 <__cvt+0x34>
 8006766:	3401      	adds	r4, #1
 8006768:	2102      	movs	r1, #2
 800676a:	e000      	b.n	800676e <__cvt+0x3a>
 800676c:	2103      	movs	r1, #3
 800676e:	ab03      	add	r3, sp, #12
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	ab02      	add	r3, sp, #8
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4622      	mov	r2, r4
 8006778:	4633      	mov	r3, r6
 800677a:	eeb0 0b48 	vmov.f64	d0, d8
 800677e:	f000 fd6f 	bl	8007260 <_dtoa_r>
 8006782:	2d47      	cmp	r5, #71	; 0x47
 8006784:	d101      	bne.n	800678a <__cvt+0x56>
 8006786:	07fb      	lsls	r3, r7, #31
 8006788:	d51a      	bpl.n	80067c0 <__cvt+0x8c>
 800678a:	2d46      	cmp	r5, #70	; 0x46
 800678c:	eb00 0204 	add.w	r2, r0, r4
 8006790:	d10c      	bne.n	80067ac <__cvt+0x78>
 8006792:	7803      	ldrb	r3, [r0, #0]
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d107      	bne.n	80067a8 <__cvt+0x74>
 8006798:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800679c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a0:	bf1c      	itt	ne
 80067a2:	f1c4 0401 	rsbne	r4, r4, #1
 80067a6:	6034      	strne	r4, [r6, #0]
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	441a      	add	r2, r3
 80067ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b4:	bf08      	it	eq
 80067b6:	9203      	streq	r2, [sp, #12]
 80067b8:	2130      	movs	r1, #48	; 0x30
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	4293      	cmp	r3, r2
 80067be:	d307      	bcc.n	80067d0 <__cvt+0x9c>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c4:	1a1b      	subs	r3, r3, r0
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	b005      	add	sp, #20
 80067ca:	ecbd 8b02 	vpop	{d8}
 80067ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d0:	1c5c      	adds	r4, r3, #1
 80067d2:	9403      	str	r4, [sp, #12]
 80067d4:	7019      	strb	r1, [r3, #0]
 80067d6:	e7f0      	b.n	80067ba <__cvt+0x86>

080067d8 <__exponent>:
 80067d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067da:	4603      	mov	r3, r0
 80067dc:	2900      	cmp	r1, #0
 80067de:	bfb8      	it	lt
 80067e0:	4249      	neglt	r1, r1
 80067e2:	f803 2b02 	strb.w	r2, [r3], #2
 80067e6:	bfb4      	ite	lt
 80067e8:	222d      	movlt	r2, #45	; 0x2d
 80067ea:	222b      	movge	r2, #43	; 0x2b
 80067ec:	2909      	cmp	r1, #9
 80067ee:	7042      	strb	r2, [r0, #1]
 80067f0:	dd2a      	ble.n	8006848 <__exponent+0x70>
 80067f2:	f10d 0407 	add.w	r4, sp, #7
 80067f6:	46a4      	mov	ip, r4
 80067f8:	270a      	movs	r7, #10
 80067fa:	46a6      	mov	lr, r4
 80067fc:	460a      	mov	r2, r1
 80067fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006802:	fb07 1516 	mls	r5, r7, r6, r1
 8006806:	3530      	adds	r5, #48	; 0x30
 8006808:	2a63      	cmp	r2, #99	; 0x63
 800680a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800680e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006812:	4631      	mov	r1, r6
 8006814:	dcf1      	bgt.n	80067fa <__exponent+0x22>
 8006816:	3130      	adds	r1, #48	; 0x30
 8006818:	f1ae 0502 	sub.w	r5, lr, #2
 800681c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006820:	1c44      	adds	r4, r0, #1
 8006822:	4629      	mov	r1, r5
 8006824:	4561      	cmp	r1, ip
 8006826:	d30a      	bcc.n	800683e <__exponent+0x66>
 8006828:	f10d 0209 	add.w	r2, sp, #9
 800682c:	eba2 020e 	sub.w	r2, r2, lr
 8006830:	4565      	cmp	r5, ip
 8006832:	bf88      	it	hi
 8006834:	2200      	movhi	r2, #0
 8006836:	4413      	add	r3, r2
 8006838:	1a18      	subs	r0, r3, r0
 800683a:	b003      	add	sp, #12
 800683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006842:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006846:	e7ed      	b.n	8006824 <__exponent+0x4c>
 8006848:	2330      	movs	r3, #48	; 0x30
 800684a:	3130      	adds	r1, #48	; 0x30
 800684c:	7083      	strb	r3, [r0, #2]
 800684e:	70c1      	strb	r1, [r0, #3]
 8006850:	1d03      	adds	r3, r0, #4
 8006852:	e7f1      	b.n	8006838 <__exponent+0x60>
 8006854:	0000      	movs	r0, r0
	...

08006858 <_printf_float>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	b08b      	sub	sp, #44	; 0x2c
 800685e:	460c      	mov	r4, r1
 8006860:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006864:	4616      	mov	r6, r2
 8006866:	461f      	mov	r7, r3
 8006868:	4605      	mov	r5, r0
 800686a:	f001 fc1f 	bl	80080ac <_localeconv_r>
 800686e:	f8d0 b000 	ldr.w	fp, [r0]
 8006872:	4658      	mov	r0, fp
 8006874:	f7f9 fce4 	bl	8000240 <strlen>
 8006878:	2300      	movs	r3, #0
 800687a:	9308      	str	r3, [sp, #32]
 800687c:	f8d8 3000 	ldr.w	r3, [r8]
 8006880:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	3307      	adds	r3, #7
 8006888:	f023 0307 	bic.w	r3, r3, #7
 800688c:	f103 0108 	add.w	r1, r3, #8
 8006890:	f8c8 1000 	str.w	r1, [r8]
 8006894:	4682      	mov	sl, r0
 8006896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800689a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800689e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006b00 <_printf_float+0x2a8>
 80068a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80068a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80068aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	dd24      	ble.n	80068fe <_printf_float+0xa6>
 80068b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068bc:	d502      	bpl.n	80068c4 <_printf_float+0x6c>
 80068be:	232d      	movs	r3, #45	; 0x2d
 80068c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c4:	4b90      	ldr	r3, [pc, #576]	; (8006b08 <_printf_float+0x2b0>)
 80068c6:	4891      	ldr	r0, [pc, #580]	; (8006b0c <_printf_float+0x2b4>)
 80068c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068cc:	bf94      	ite	ls
 80068ce:	4698      	movls	r8, r3
 80068d0:	4680      	movhi	r8, r0
 80068d2:	2303      	movs	r3, #3
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	f022 0204 	bic.w	r2, r2, #4
 80068da:	2300      	movs	r3, #0
 80068dc:	6022      	str	r2, [r4, #0]
 80068de:	9304      	str	r3, [sp, #16]
 80068e0:	9700      	str	r7, [sp, #0]
 80068e2:	4633      	mov	r3, r6
 80068e4:	aa09      	add	r2, sp, #36	; 0x24
 80068e6:	4621      	mov	r1, r4
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f9d3 	bl	8006c94 <_printf_common>
 80068ee:	3001      	adds	r0, #1
 80068f0:	f040 808a 	bne.w	8006a08 <_printf_float+0x1b0>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f8:	b00b      	add	sp, #44	; 0x2c
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8006902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006906:	d709      	bvc.n	800691c <_printf_float+0xc4>
 8006908:	ee10 3a90 	vmov	r3, s1
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbc      	itt	lt
 8006910:	232d      	movlt	r3, #45	; 0x2d
 8006912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006916:	487e      	ldr	r0, [pc, #504]	; (8006b10 <_printf_float+0x2b8>)
 8006918:	4b7e      	ldr	r3, [pc, #504]	; (8006b14 <_printf_float+0x2bc>)
 800691a:	e7d5      	b.n	80068c8 <_printf_float+0x70>
 800691c:	6863      	ldr	r3, [r4, #4]
 800691e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006922:	9104      	str	r1, [sp, #16]
 8006924:	1c59      	adds	r1, r3, #1
 8006926:	d13c      	bne.n	80069a2 <_printf_float+0x14a>
 8006928:	2306      	movs	r3, #6
 800692a:	6063      	str	r3, [r4, #4]
 800692c:	2300      	movs	r3, #0
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	ab08      	add	r3, sp, #32
 8006932:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800693a:	ab07      	add	r3, sp, #28
 800693c:	6861      	ldr	r1, [r4, #4]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	6022      	str	r2, [r4, #0]
 8006942:	f10d 031b 	add.w	r3, sp, #27
 8006946:	4628      	mov	r0, r5
 8006948:	f7ff fef4 	bl	8006734 <__cvt>
 800694c:	9b04      	ldr	r3, [sp, #16]
 800694e:	9907      	ldr	r1, [sp, #28]
 8006950:	2b47      	cmp	r3, #71	; 0x47
 8006952:	4680      	mov	r8, r0
 8006954:	d108      	bne.n	8006968 <_printf_float+0x110>
 8006956:	1cc8      	adds	r0, r1, #3
 8006958:	db02      	blt.n	8006960 <_printf_float+0x108>
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	4299      	cmp	r1, r3
 800695e:	dd41      	ble.n	80069e4 <_printf_float+0x18c>
 8006960:	f1a9 0902 	sub.w	r9, r9, #2
 8006964:	fa5f f989 	uxtb.w	r9, r9
 8006968:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800696c:	d820      	bhi.n	80069b0 <_printf_float+0x158>
 800696e:	3901      	subs	r1, #1
 8006970:	464a      	mov	r2, r9
 8006972:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006976:	9107      	str	r1, [sp, #28]
 8006978:	f7ff ff2e 	bl	80067d8 <__exponent>
 800697c:	9a08      	ldr	r2, [sp, #32]
 800697e:	9004      	str	r0, [sp, #16]
 8006980:	1813      	adds	r3, r2, r0
 8006982:	2a01      	cmp	r2, #1
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	dc02      	bgt.n	800698e <_printf_float+0x136>
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	07d2      	lsls	r2, r2, #31
 800698c:	d501      	bpl.n	8006992 <_printf_float+0x13a>
 800698e:	3301      	adds	r3, #1
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0a2      	beq.n	80068e0 <_printf_float+0x88>
 800699a:	232d      	movs	r3, #45	; 0x2d
 800699c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a0:	e79e      	b.n	80068e0 <_printf_float+0x88>
 80069a2:	9904      	ldr	r1, [sp, #16]
 80069a4:	2947      	cmp	r1, #71	; 0x47
 80069a6:	d1c1      	bne.n	800692c <_printf_float+0xd4>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1bf      	bne.n	800692c <_printf_float+0xd4>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e7bc      	b.n	800692a <_printf_float+0xd2>
 80069b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069b4:	d118      	bne.n	80069e8 <_printf_float+0x190>
 80069b6:	2900      	cmp	r1, #0
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	dd0b      	ble.n	80069d4 <_printf_float+0x17c>
 80069bc:	6121      	str	r1, [r4, #16]
 80069be:	b913      	cbnz	r3, 80069c6 <_printf_float+0x16e>
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	07d0      	lsls	r0, r2, #31
 80069c4:	d502      	bpl.n	80069cc <_printf_float+0x174>
 80069c6:	3301      	adds	r3, #1
 80069c8:	440b      	add	r3, r1
 80069ca:	6123      	str	r3, [r4, #16]
 80069cc:	2300      	movs	r3, #0
 80069ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	e7de      	b.n	8006992 <_printf_float+0x13a>
 80069d4:	b913      	cbnz	r3, 80069dc <_printf_float+0x184>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	07d2      	lsls	r2, r2, #31
 80069da:	d501      	bpl.n	80069e0 <_printf_float+0x188>
 80069dc:	3302      	adds	r3, #2
 80069de:	e7f4      	b.n	80069ca <_printf_float+0x172>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e7f2      	b.n	80069ca <_printf_float+0x172>
 80069e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80069e8:	9b08      	ldr	r3, [sp, #32]
 80069ea:	4299      	cmp	r1, r3
 80069ec:	db05      	blt.n	80069fa <_printf_float+0x1a2>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	6121      	str	r1, [r4, #16]
 80069f2:	07d8      	lsls	r0, r3, #31
 80069f4:	d5ea      	bpl.n	80069cc <_printf_float+0x174>
 80069f6:	1c4b      	adds	r3, r1, #1
 80069f8:	e7e7      	b.n	80069ca <_printf_float+0x172>
 80069fa:	2900      	cmp	r1, #0
 80069fc:	bfd4      	ite	le
 80069fe:	f1c1 0202 	rsble	r2, r1, #2
 8006a02:	2201      	movgt	r2, #1
 8006a04:	4413      	add	r3, r2
 8006a06:	e7e0      	b.n	80069ca <_printf_float+0x172>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	055a      	lsls	r2, r3, #21
 8006a0c:	d407      	bmi.n	8006a1e <_printf_float+0x1c6>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	4642      	mov	r2, r8
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d12a      	bne.n	8006a72 <_printf_float+0x21a>
 8006a1c:	e76a      	b.n	80068f4 <_printf_float+0x9c>
 8006a1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a22:	f240 80e2 	bls.w	8006bea <_printf_float+0x392>
 8006a26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a32:	d133      	bne.n	8006a9c <_printf_float+0x244>
 8006a34:	4a38      	ldr	r2, [pc, #224]	; (8006b18 <_printf_float+0x2c0>)
 8006a36:	2301      	movs	r3, #1
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f af58 	beq.w	80068f4 <_printf_float+0x9c>
 8006a44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	db02      	blt.n	8006a52 <_printf_float+0x1fa>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	07d8      	lsls	r0, r3, #31
 8006a50:	d50f      	bpl.n	8006a72 <_printf_float+0x21a>
 8006a52:	4653      	mov	r3, sl
 8006a54:	465a      	mov	r2, fp
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f af49 	beq.w	80068f4 <_printf_float+0x9c>
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	f104 091a 	add.w	r9, r4, #26
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4543      	cmp	r3, r8
 8006a70:	dc09      	bgt.n	8006a86 <_printf_float+0x22e>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	079b      	lsls	r3, r3, #30
 8006a76:	f100 8108 	bmi.w	8006c8a <_printf_float+0x432>
 8006a7a:	68e0      	ldr	r0, [r4, #12]
 8006a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7e:	4298      	cmp	r0, r3
 8006a80:	bfb8      	it	lt
 8006a82:	4618      	movlt	r0, r3
 8006a84:	e738      	b.n	80068f8 <_printf_float+0xa0>
 8006a86:	2301      	movs	r3, #1
 8006a88:	464a      	mov	r2, r9
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f af2f 	beq.w	80068f4 <_printf_float+0x9c>
 8006a96:	f108 0801 	add.w	r8, r8, #1
 8006a9a:	e7e6      	b.n	8006a6a <_printf_float+0x212>
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dc3c      	bgt.n	8006b1c <_printf_float+0x2c4>
 8006aa2:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <_printf_float+0x2c0>)
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f af21 	beq.w	80068f4 <_printf_float+0x9c>
 8006ab2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d102      	bne.n	8006ac0 <_printf_float+0x268>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	07d9      	lsls	r1, r3, #31
 8006abe:	d5d8      	bpl.n	8006a72 <_printf_float+0x21a>
 8006ac0:	4653      	mov	r3, sl
 8006ac2:	465a      	mov	r2, fp
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f af12 	beq.w	80068f4 <_printf_float+0x9c>
 8006ad0:	f04f 0900 	mov.w	r9, #0
 8006ad4:	f104 0a1a 	add.w	sl, r4, #26
 8006ad8:	9b07      	ldr	r3, [sp, #28]
 8006ada:	425b      	negs	r3, r3
 8006adc:	454b      	cmp	r3, r9
 8006ade:	dc01      	bgt.n	8006ae4 <_printf_float+0x28c>
 8006ae0:	9b08      	ldr	r3, [sp, #32]
 8006ae2:	e795      	b.n	8006a10 <_printf_float+0x1b8>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4652      	mov	r2, sl
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f af00 	beq.w	80068f4 <_printf_float+0x9c>
 8006af4:	f109 0901 	add.w	r9, r9, #1
 8006af8:	e7ee      	b.n	8006ad8 <_printf_float+0x280>
 8006afa:	bf00      	nop
 8006afc:	f3af 8000 	nop.w
 8006b00:	ffffffff 	.word	0xffffffff
 8006b04:	7fefffff 	.word	0x7fefffff
 8006b08:	08009574 	.word	0x08009574
 8006b0c:	08009578 	.word	0x08009578
 8006b10:	08009580 	.word	0x08009580
 8006b14:	0800957c 	.word	0x0800957c
 8006b18:	08009584 	.word	0x08009584
 8006b1c:	9a08      	ldr	r2, [sp, #32]
 8006b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b20:	429a      	cmp	r2, r3
 8006b22:	bfa8      	it	ge
 8006b24:	461a      	movge	r2, r3
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	4691      	mov	r9, r2
 8006b2a:	dc38      	bgt.n	8006b9e <_printf_float+0x346>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b34:	f104 021a 	add.w	r2, r4, #26
 8006b38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b3a:	9905      	ldr	r1, [sp, #20]
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	eba3 0309 	sub.w	r3, r3, r9
 8006b42:	428b      	cmp	r3, r1
 8006b44:	dc33      	bgt.n	8006bae <_printf_float+0x356>
 8006b46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	db3c      	blt.n	8006bc8 <_printf_float+0x370>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	07da      	lsls	r2, r3, #31
 8006b52:	d439      	bmi.n	8006bc8 <_printf_float+0x370>
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	9a04      	ldr	r2, [sp, #16]
 8006b58:	9907      	ldr	r1, [sp, #28]
 8006b5a:	1a9a      	subs	r2, r3, r2
 8006b5c:	eba3 0901 	sub.w	r9, r3, r1
 8006b60:	4591      	cmp	r9, r2
 8006b62:	bfa8      	it	ge
 8006b64:	4691      	movge	r9, r2
 8006b66:	f1b9 0f00 	cmp.w	r9, #0
 8006b6a:	dc35      	bgt.n	8006bd8 <_printf_float+0x380>
 8006b6c:	f04f 0800 	mov.w	r8, #0
 8006b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b74:	f104 0a1a 	add.w	sl, r4, #26
 8006b78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	eba3 0309 	sub.w	r3, r3, r9
 8006b82:	4543      	cmp	r3, r8
 8006b84:	f77f af75 	ble.w	8006a72 <_printf_float+0x21a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f aeae 	beq.w	80068f4 <_printf_float+0x9c>
 8006b98:	f108 0801 	add.w	r8, r8, #1
 8006b9c:	e7ec      	b.n	8006b78 <_printf_float+0x320>
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4642      	mov	r2, r8
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d1bf      	bne.n	8006b2c <_printf_float+0x2d4>
 8006bac:	e6a2      	b.n	80068f4 <_printf_float+0x9c>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	9204      	str	r2, [sp, #16]
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f43f ae9b 	beq.w	80068f4 <_printf_float+0x9c>
 8006bbe:	9b05      	ldr	r3, [sp, #20]
 8006bc0:	9a04      	ldr	r2, [sp, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	e7b7      	b.n	8006b38 <_printf_float+0x2e0>
 8006bc8:	4653      	mov	r3, sl
 8006bca:	465a      	mov	r2, fp
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d1be      	bne.n	8006b54 <_printf_float+0x2fc>
 8006bd6:	e68d      	b.n	80068f4 <_printf_float+0x9c>
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	464b      	mov	r3, r9
 8006bdc:	4442      	add	r2, r8
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	d1c1      	bne.n	8006b6c <_printf_float+0x314>
 8006be8:	e684      	b.n	80068f4 <_printf_float+0x9c>
 8006bea:	9a08      	ldr	r2, [sp, #32]
 8006bec:	2a01      	cmp	r2, #1
 8006bee:	dc01      	bgt.n	8006bf4 <_printf_float+0x39c>
 8006bf0:	07db      	lsls	r3, r3, #31
 8006bf2:	d537      	bpl.n	8006c64 <_printf_float+0x40c>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	47b8      	blx	r7
 8006bfe:	3001      	adds	r0, #1
 8006c00:	f43f ae78 	beq.w	80068f4 <_printf_float+0x9c>
 8006c04:	4653      	mov	r3, sl
 8006c06:	465a      	mov	r2, fp
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	f43f ae70 	beq.w	80068f4 <_printf_float+0x9c>
 8006c14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	d01b      	beq.n	8006c5a <_printf_float+0x402>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	f108 0201 	add.w	r2, r8, #1
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	d10e      	bne.n	8006c52 <_printf_float+0x3fa>
 8006c34:	e65e      	b.n	80068f4 <_printf_float+0x9c>
 8006c36:	2301      	movs	r3, #1
 8006c38:	464a      	mov	r2, r9
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f ae57 	beq.w	80068f4 <_printf_float+0x9c>
 8006c46:	f108 0801 	add.w	r8, r8, #1
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4543      	cmp	r3, r8
 8006c50:	dcf1      	bgt.n	8006c36 <_printf_float+0x3de>
 8006c52:	9b04      	ldr	r3, [sp, #16]
 8006c54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c58:	e6db      	b.n	8006a12 <_printf_float+0x1ba>
 8006c5a:	f04f 0800 	mov.w	r8, #0
 8006c5e:	f104 091a 	add.w	r9, r4, #26
 8006c62:	e7f2      	b.n	8006c4a <_printf_float+0x3f2>
 8006c64:	2301      	movs	r3, #1
 8006c66:	4642      	mov	r2, r8
 8006c68:	e7df      	b.n	8006c2a <_printf_float+0x3d2>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	464a      	mov	r2, r9
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	f43f ae3d 	beq.w	80068f4 <_printf_float+0x9c>
 8006c7a:	f108 0801 	add.w	r8, r8, #1
 8006c7e:	68e3      	ldr	r3, [r4, #12]
 8006c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c82:	1a5b      	subs	r3, r3, r1
 8006c84:	4543      	cmp	r3, r8
 8006c86:	dcf0      	bgt.n	8006c6a <_printf_float+0x412>
 8006c88:	e6f7      	b.n	8006a7a <_printf_float+0x222>
 8006c8a:	f04f 0800 	mov.w	r8, #0
 8006c8e:	f104 0919 	add.w	r9, r4, #25
 8006c92:	e7f4      	b.n	8006c7e <_printf_float+0x426>

08006c94 <_printf_common>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	4616      	mov	r6, r2
 8006c9a:	4699      	mov	r9, r3
 8006c9c:	688a      	ldr	r2, [r1, #8]
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	bfb8      	it	lt
 8006ca8:	4613      	movlt	r3, r2
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b10a      	cbz	r2, 8006cba <_printf_common+0x26>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	0699      	lsls	r1, r3, #26
 8006cbe:	bf42      	ittt	mi
 8006cc0:	6833      	ldrmi	r3, [r6, #0]
 8006cc2:	3302      	addmi	r3, #2
 8006cc4:	6033      	strmi	r3, [r6, #0]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	f015 0506 	ands.w	r5, r5, #6
 8006ccc:	d106      	bne.n	8006cdc <_printf_common+0x48>
 8006cce:	f104 0a19 	add.w	sl, r4, #25
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	6832      	ldr	r2, [r6, #0]
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	dc26      	bgt.n	8006d2a <_printf_common+0x96>
 8006cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ce0:	1e13      	subs	r3, r2, #0
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	bf18      	it	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	0692      	lsls	r2, r2, #26
 8006cea:	d42b      	bmi.n	8006d44 <_printf_common+0xb0>
 8006cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	47c0      	blx	r8
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d01e      	beq.n	8006d38 <_printf_common+0xa4>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	68e5      	ldr	r5, [r4, #12]
 8006cfe:	6832      	ldr	r2, [r6, #0]
 8006d00:	f003 0306 	and.w	r3, r3, #6
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	bf08      	it	eq
 8006d08:	1aad      	subeq	r5, r5, r2
 8006d0a:	68a3      	ldr	r3, [r4, #8]
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	bf0c      	ite	eq
 8006d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d14:	2500      	movne	r5, #0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	bfc4      	itt	gt
 8006d1a:	1a9b      	subgt	r3, r3, r2
 8006d1c:	18ed      	addgt	r5, r5, r3
 8006d1e:	2600      	movs	r6, #0
 8006d20:	341a      	adds	r4, #26
 8006d22:	42b5      	cmp	r5, r6
 8006d24:	d11a      	bne.n	8006d5c <_printf_common+0xc8>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e008      	b.n	8006d3c <_printf_common+0xa8>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4638      	mov	r0, r7
 8006d32:	47c0      	blx	r8
 8006d34:	3001      	adds	r0, #1
 8006d36:	d103      	bne.n	8006d40 <_printf_common+0xac>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	3501      	adds	r5, #1
 8006d42:	e7c6      	b.n	8006cd2 <_printf_common+0x3e>
 8006d44:	18e1      	adds	r1, r4, r3
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	2030      	movs	r0, #48	; 0x30
 8006d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d4e:	4422      	add	r2, r4
 8006d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d58:	3302      	adds	r3, #2
 8006d5a:	e7c7      	b.n	8006cec <_printf_common+0x58>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4649      	mov	r1, r9
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c0      	blx	r8
 8006d66:	3001      	adds	r0, #1
 8006d68:	d0e6      	beq.n	8006d38 <_printf_common+0xa4>
 8006d6a:	3601      	adds	r6, #1
 8006d6c:	e7d9      	b.n	8006d22 <_printf_common+0x8e>
	...

08006d70 <_printf_i>:
 8006d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	7e0f      	ldrb	r7, [r1, #24]
 8006d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d78:	2f78      	cmp	r7, #120	; 0x78
 8006d7a:	4691      	mov	r9, r2
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	469a      	mov	sl, r3
 8006d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d86:	d807      	bhi.n	8006d98 <_printf_i+0x28>
 8006d88:	2f62      	cmp	r7, #98	; 0x62
 8006d8a:	d80a      	bhi.n	8006da2 <_printf_i+0x32>
 8006d8c:	2f00      	cmp	r7, #0
 8006d8e:	f000 80d8 	beq.w	8006f42 <_printf_i+0x1d2>
 8006d92:	2f58      	cmp	r7, #88	; 0x58
 8006d94:	f000 80a3 	beq.w	8006ede <_printf_i+0x16e>
 8006d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006da0:	e03a      	b.n	8006e18 <_printf_i+0xa8>
 8006da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006da6:	2b15      	cmp	r3, #21
 8006da8:	d8f6      	bhi.n	8006d98 <_printf_i+0x28>
 8006daa:	a101      	add	r1, pc, #4	; (adr r1, 8006db0 <_printf_i+0x40>)
 8006dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006db0:	08006e09 	.word	0x08006e09
 8006db4:	08006e1d 	.word	0x08006e1d
 8006db8:	08006d99 	.word	0x08006d99
 8006dbc:	08006d99 	.word	0x08006d99
 8006dc0:	08006d99 	.word	0x08006d99
 8006dc4:	08006d99 	.word	0x08006d99
 8006dc8:	08006e1d 	.word	0x08006e1d
 8006dcc:	08006d99 	.word	0x08006d99
 8006dd0:	08006d99 	.word	0x08006d99
 8006dd4:	08006d99 	.word	0x08006d99
 8006dd8:	08006d99 	.word	0x08006d99
 8006ddc:	08006f29 	.word	0x08006f29
 8006de0:	08006e4d 	.word	0x08006e4d
 8006de4:	08006f0b 	.word	0x08006f0b
 8006de8:	08006d99 	.word	0x08006d99
 8006dec:	08006d99 	.word	0x08006d99
 8006df0:	08006f4b 	.word	0x08006f4b
 8006df4:	08006d99 	.word	0x08006d99
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006d99 	.word	0x08006d99
 8006e00:	08006d99 	.word	0x08006d99
 8006e04:	08006f13 	.word	0x08006f13
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	1d1a      	adds	r2, r3, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	602a      	str	r2, [r5, #0]
 8006e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0a3      	b.n	8006f64 <_printf_i+0x1f4>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	6829      	ldr	r1, [r5, #0]
 8006e20:	0606      	lsls	r6, r0, #24
 8006e22:	f101 0304 	add.w	r3, r1, #4
 8006e26:	d50a      	bpl.n	8006e3e <_printf_i+0xce>
 8006e28:	680e      	ldr	r6, [r1, #0]
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	da03      	bge.n	8006e38 <_printf_i+0xc8>
 8006e30:	232d      	movs	r3, #45	; 0x2d
 8006e32:	4276      	negs	r6, r6
 8006e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e38:	485e      	ldr	r0, [pc, #376]	; (8006fb4 <_printf_i+0x244>)
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	e019      	b.n	8006e72 <_printf_i+0x102>
 8006e3e:	680e      	ldr	r6, [r1, #0]
 8006e40:	602b      	str	r3, [r5, #0]
 8006e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e46:	bf18      	it	ne
 8006e48:	b236      	sxthne	r6, r6
 8006e4a:	e7ef      	b.n	8006e2c <_printf_i+0xbc>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	6820      	ldr	r0, [r4, #0]
 8006e50:	1d19      	adds	r1, r3, #4
 8006e52:	6029      	str	r1, [r5, #0]
 8006e54:	0601      	lsls	r1, r0, #24
 8006e56:	d501      	bpl.n	8006e5c <_printf_i+0xec>
 8006e58:	681e      	ldr	r6, [r3, #0]
 8006e5a:	e002      	b.n	8006e62 <_printf_i+0xf2>
 8006e5c:	0646      	lsls	r6, r0, #25
 8006e5e:	d5fb      	bpl.n	8006e58 <_printf_i+0xe8>
 8006e60:	881e      	ldrh	r6, [r3, #0]
 8006e62:	4854      	ldr	r0, [pc, #336]	; (8006fb4 <_printf_i+0x244>)
 8006e64:	2f6f      	cmp	r7, #111	; 0x6f
 8006e66:	bf0c      	ite	eq
 8006e68:	2308      	moveq	r3, #8
 8006e6a:	230a      	movne	r3, #10
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e72:	6865      	ldr	r5, [r4, #4]
 8006e74:	60a5      	str	r5, [r4, #8]
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	bfa2      	ittt	ge
 8006e7a:	6821      	ldrge	r1, [r4, #0]
 8006e7c:	f021 0104 	bicge.w	r1, r1, #4
 8006e80:	6021      	strge	r1, [r4, #0]
 8006e82:	b90e      	cbnz	r6, 8006e88 <_printf_i+0x118>
 8006e84:	2d00      	cmp	r5, #0
 8006e86:	d04d      	beq.n	8006f24 <_printf_i+0x1b4>
 8006e88:	4615      	mov	r5, r2
 8006e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006e92:	5dc7      	ldrb	r7, [r0, r7]
 8006e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e98:	4637      	mov	r7, r6
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	460e      	mov	r6, r1
 8006e9e:	d9f4      	bls.n	8006e8a <_printf_i+0x11a>
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d10b      	bne.n	8006ebc <_printf_i+0x14c>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	07de      	lsls	r6, r3, #31
 8006ea8:	d508      	bpl.n	8006ebc <_printf_i+0x14c>
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	6861      	ldr	r1, [r4, #4]
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	bfde      	ittt	le
 8006eb2:	2330      	movle	r3, #48	; 0x30
 8006eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ebc:	1b52      	subs	r2, r2, r5
 8006ebe:	6122      	str	r2, [r4, #16]
 8006ec0:	f8cd a000 	str.w	sl, [sp]
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	aa03      	add	r2, sp, #12
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7ff fee2 	bl	8006c94 <_printf_common>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d14c      	bne.n	8006f6e <_printf_i+0x1fe>
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ed8:	b004      	add	sp, #16
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	4835      	ldr	r0, [pc, #212]	; (8006fb4 <_printf_i+0x244>)
 8006ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ee4:	6829      	ldr	r1, [r5, #0]
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eec:	6029      	str	r1, [r5, #0]
 8006eee:	061d      	lsls	r5, r3, #24
 8006ef0:	d514      	bpl.n	8006f1c <_printf_i+0x1ac>
 8006ef2:	07df      	lsls	r7, r3, #31
 8006ef4:	bf44      	itt	mi
 8006ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8006efa:	6023      	strmi	r3, [r4, #0]
 8006efc:	b91e      	cbnz	r6, 8006f06 <_printf_i+0x196>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	f023 0320 	bic.w	r3, r3, #32
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	2310      	movs	r3, #16
 8006f08:	e7b0      	b.n	8006e6c <_printf_i+0xfc>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	f043 0320 	orr.w	r3, r3, #32
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	2378      	movs	r3, #120	; 0x78
 8006f14:	4828      	ldr	r0, [pc, #160]	; (8006fb8 <_printf_i+0x248>)
 8006f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f1a:	e7e3      	b.n	8006ee4 <_printf_i+0x174>
 8006f1c:	0659      	lsls	r1, r3, #25
 8006f1e:	bf48      	it	mi
 8006f20:	b2b6      	uxthmi	r6, r6
 8006f22:	e7e6      	b.n	8006ef2 <_printf_i+0x182>
 8006f24:	4615      	mov	r5, r2
 8006f26:	e7bb      	b.n	8006ea0 <_printf_i+0x130>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	6826      	ldr	r6, [r4, #0]
 8006f2c:	6961      	ldr	r1, [r4, #20]
 8006f2e:	1d18      	adds	r0, r3, #4
 8006f30:	6028      	str	r0, [r5, #0]
 8006f32:	0635      	lsls	r5, r6, #24
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	d501      	bpl.n	8006f3c <_printf_i+0x1cc>
 8006f38:	6019      	str	r1, [r3, #0]
 8006f3a:	e002      	b.n	8006f42 <_printf_i+0x1d2>
 8006f3c:	0670      	lsls	r0, r6, #25
 8006f3e:	d5fb      	bpl.n	8006f38 <_printf_i+0x1c8>
 8006f40:	8019      	strh	r1, [r3, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	4615      	mov	r5, r2
 8006f48:	e7ba      	b.n	8006ec0 <_printf_i+0x150>
 8006f4a:	682b      	ldr	r3, [r5, #0]
 8006f4c:	1d1a      	adds	r2, r3, #4
 8006f4e:	602a      	str	r2, [r5, #0]
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	6862      	ldr	r2, [r4, #4]
 8006f54:	2100      	movs	r1, #0
 8006f56:	4628      	mov	r0, r5
 8006f58:	f7f9 f97a 	bl	8000250 <memchr>
 8006f5c:	b108      	cbz	r0, 8006f62 <_printf_i+0x1f2>
 8006f5e:	1b40      	subs	r0, r0, r5
 8006f60:	6060      	str	r0, [r4, #4]
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	2300      	movs	r3, #0
 8006f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6c:	e7a8      	b.n	8006ec0 <_printf_i+0x150>
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	462a      	mov	r2, r5
 8006f72:	4649      	mov	r1, r9
 8006f74:	4640      	mov	r0, r8
 8006f76:	47d0      	blx	sl
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d0ab      	beq.n	8006ed4 <_printf_i+0x164>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	079b      	lsls	r3, r3, #30
 8006f80:	d413      	bmi.n	8006faa <_printf_i+0x23a>
 8006f82:	68e0      	ldr	r0, [r4, #12]
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	4298      	cmp	r0, r3
 8006f88:	bfb8      	it	lt
 8006f8a:	4618      	movlt	r0, r3
 8006f8c:	e7a4      	b.n	8006ed8 <_printf_i+0x168>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4632      	mov	r2, r6
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d09b      	beq.n	8006ed4 <_printf_i+0x164>
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	9903      	ldr	r1, [sp, #12]
 8006fa2:	1a5b      	subs	r3, r3, r1
 8006fa4:	42ab      	cmp	r3, r5
 8006fa6:	dcf2      	bgt.n	8006f8e <_printf_i+0x21e>
 8006fa8:	e7eb      	b.n	8006f82 <_printf_i+0x212>
 8006faa:	2500      	movs	r5, #0
 8006fac:	f104 0619 	add.w	r6, r4, #25
 8006fb0:	e7f5      	b.n	8006f9e <_printf_i+0x22e>
 8006fb2:	bf00      	nop
 8006fb4:	08009586 	.word	0x08009586
 8006fb8:	08009597 	.word	0x08009597

08006fbc <setvbuf>:
 8006fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	461d      	mov	r5, r3
 8006fc2:	4b5d      	ldr	r3, [pc, #372]	; (8007138 <setvbuf+0x17c>)
 8006fc4:	681f      	ldr	r7, [r3, #0]
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	460e      	mov	r6, r1
 8006fca:	4690      	mov	r8, r2
 8006fcc:	b127      	cbz	r7, 8006fd8 <setvbuf+0x1c>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	b913      	cbnz	r3, 8006fd8 <setvbuf+0x1c>
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f000 ffcc 	bl	8007f70 <__sinit>
 8006fd8:	4b58      	ldr	r3, [pc, #352]	; (800713c <setvbuf+0x180>)
 8006fda:	429c      	cmp	r4, r3
 8006fdc:	d167      	bne.n	80070ae <setvbuf+0xf2>
 8006fde:	687c      	ldr	r4, [r7, #4]
 8006fe0:	f1b8 0f02 	cmp.w	r8, #2
 8006fe4:	d006      	beq.n	8006ff4 <setvbuf+0x38>
 8006fe6:	f1b8 0f01 	cmp.w	r8, #1
 8006fea:	f200 809f 	bhi.w	800712c <setvbuf+0x170>
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	f2c0 809c 	blt.w	800712c <setvbuf+0x170>
 8006ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ff6:	07db      	lsls	r3, r3, #31
 8006ff8:	d405      	bmi.n	8007006 <setvbuf+0x4a>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	0598      	lsls	r0, r3, #22
 8006ffe:	d402      	bmi.n	8007006 <setvbuf+0x4a>
 8007000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007002:	f001 f858 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8007006:	4621      	mov	r1, r4
 8007008:	4638      	mov	r0, r7
 800700a:	f000 ff1d 	bl	8007e48 <_fflush_r>
 800700e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007010:	b141      	cbz	r1, 8007024 <setvbuf+0x68>
 8007012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007016:	4299      	cmp	r1, r3
 8007018:	d002      	beq.n	8007020 <setvbuf+0x64>
 800701a:	4638      	mov	r0, r7
 800701c:	f001 fc62 	bl	80088e4 <_free_r>
 8007020:	2300      	movs	r3, #0
 8007022:	6363      	str	r3, [r4, #52]	; 0x34
 8007024:	2300      	movs	r3, #0
 8007026:	61a3      	str	r3, [r4, #24]
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	0619      	lsls	r1, r3, #24
 800702e:	d503      	bpl.n	8007038 <setvbuf+0x7c>
 8007030:	6921      	ldr	r1, [r4, #16]
 8007032:	4638      	mov	r0, r7
 8007034:	f001 fc56 	bl	80088e4 <_free_r>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	f1b8 0f02 	cmp.w	r8, #2
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	d06c      	beq.n	8007124 <setvbuf+0x168>
 800704a:	ab01      	add	r3, sp, #4
 800704c:	466a      	mov	r2, sp
 800704e:	4621      	mov	r1, r4
 8007050:	4638      	mov	r0, r7
 8007052:	f001 f832 	bl	80080ba <__swhatbuf_r>
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	4318      	orrs	r0, r3
 800705a:	81a0      	strh	r0, [r4, #12]
 800705c:	2d00      	cmp	r5, #0
 800705e:	d130      	bne.n	80070c2 <setvbuf+0x106>
 8007060:	9d00      	ldr	r5, [sp, #0]
 8007062:	4628      	mov	r0, r5
 8007064:	f001 f88e 	bl	8008184 <malloc>
 8007068:	4606      	mov	r6, r0
 800706a:	2800      	cmp	r0, #0
 800706c:	d155      	bne.n	800711a <setvbuf+0x15e>
 800706e:	f8dd 9000 	ldr.w	r9, [sp]
 8007072:	45a9      	cmp	r9, r5
 8007074:	d14a      	bne.n	800710c <setvbuf+0x150>
 8007076:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800707a:	2200      	movs	r2, #0
 800707c:	60a2      	str	r2, [r4, #8]
 800707e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	6122      	str	r2, [r4, #16]
 8007086:	2201      	movs	r2, #1
 8007088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708c:	6162      	str	r2, [r4, #20]
 800708e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	07d2      	lsls	r2, r2, #31
 8007096:	81a3      	strh	r3, [r4, #12]
 8007098:	d405      	bmi.n	80070a6 <setvbuf+0xea>
 800709a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800709e:	d102      	bne.n	80070a6 <setvbuf+0xea>
 80070a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070a2:	f001 f809 	bl	80080b8 <__retarget_lock_release_recursive>
 80070a6:	4628      	mov	r0, r5
 80070a8:	b003      	add	sp, #12
 80070aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ae:	4b24      	ldr	r3, [pc, #144]	; (8007140 <setvbuf+0x184>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d101      	bne.n	80070b8 <setvbuf+0xfc>
 80070b4:	68bc      	ldr	r4, [r7, #8]
 80070b6:	e793      	b.n	8006fe0 <setvbuf+0x24>
 80070b8:	4b22      	ldr	r3, [pc, #136]	; (8007144 <setvbuf+0x188>)
 80070ba:	429c      	cmp	r4, r3
 80070bc:	bf08      	it	eq
 80070be:	68fc      	ldreq	r4, [r7, #12]
 80070c0:	e78e      	b.n	8006fe0 <setvbuf+0x24>
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	d0cd      	beq.n	8007062 <setvbuf+0xa6>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	b913      	cbnz	r3, 80070d0 <setvbuf+0x114>
 80070ca:	4638      	mov	r0, r7
 80070cc:	f000 ff50 	bl	8007f70 <__sinit>
 80070d0:	f1b8 0f01 	cmp.w	r8, #1
 80070d4:	bf08      	it	eq
 80070d6:	89a3      	ldrheq	r3, [r4, #12]
 80070d8:	6026      	str	r6, [r4, #0]
 80070da:	bf04      	itt	eq
 80070dc:	f043 0301 	orreq.w	r3, r3, #1
 80070e0:	81a3      	strheq	r3, [r4, #12]
 80070e2:	89a2      	ldrh	r2, [r4, #12]
 80070e4:	f012 0308 	ands.w	r3, r2, #8
 80070e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80070ec:	d01c      	beq.n	8007128 <setvbuf+0x16c>
 80070ee:	07d3      	lsls	r3, r2, #31
 80070f0:	bf41      	itttt	mi
 80070f2:	2300      	movmi	r3, #0
 80070f4:	426d      	negmi	r5, r5
 80070f6:	60a3      	strmi	r3, [r4, #8]
 80070f8:	61a5      	strmi	r5, [r4, #24]
 80070fa:	bf58      	it	pl
 80070fc:	60a5      	strpl	r5, [r4, #8]
 80070fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007100:	f015 0501 	ands.w	r5, r5, #1
 8007104:	d115      	bne.n	8007132 <setvbuf+0x176>
 8007106:	f412 7f00 	tst.w	r2, #512	; 0x200
 800710a:	e7c8      	b.n	800709e <setvbuf+0xe2>
 800710c:	4648      	mov	r0, r9
 800710e:	f001 f839 	bl	8008184 <malloc>
 8007112:	4606      	mov	r6, r0
 8007114:	2800      	cmp	r0, #0
 8007116:	d0ae      	beq.n	8007076 <setvbuf+0xba>
 8007118:	464d      	mov	r5, r9
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	e7d0      	b.n	80070c6 <setvbuf+0x10a>
 8007124:	2500      	movs	r5, #0
 8007126:	e7a8      	b.n	800707a <setvbuf+0xbe>
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	e7e8      	b.n	80070fe <setvbuf+0x142>
 800712c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007130:	e7b9      	b.n	80070a6 <setvbuf+0xea>
 8007132:	2500      	movs	r5, #0
 8007134:	e7b7      	b.n	80070a6 <setvbuf+0xea>
 8007136:	bf00      	nop
 8007138:	2000000c 	.word	0x2000000c
 800713c:	08009658 	.word	0x08009658
 8007140:	08009678 	.word	0x08009678
 8007144:	08009638 	.word	0x08009638

08007148 <quorem>:
 8007148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	6903      	ldr	r3, [r0, #16]
 800714e:	690c      	ldr	r4, [r1, #16]
 8007150:	42a3      	cmp	r3, r4
 8007152:	4607      	mov	r7, r0
 8007154:	f2c0 8081 	blt.w	800725a <quorem+0x112>
 8007158:	3c01      	subs	r4, #1
 800715a:	f101 0814 	add.w	r8, r1, #20
 800715e:	f100 0514 	add.w	r5, r0, #20
 8007162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800716c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007170:	3301      	adds	r3, #1
 8007172:	429a      	cmp	r2, r3
 8007174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800717c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007180:	d331      	bcc.n	80071e6 <quorem+0x9e>
 8007182:	f04f 0e00 	mov.w	lr, #0
 8007186:	4640      	mov	r0, r8
 8007188:	46ac      	mov	ip, r5
 800718a:	46f2      	mov	sl, lr
 800718c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007190:	b293      	uxth	r3, r2
 8007192:	fb06 e303 	mla	r3, r6, r3, lr
 8007196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800719a:	b29b      	uxth	r3, r3
 800719c:	ebaa 0303 	sub.w	r3, sl, r3
 80071a0:	f8dc a000 	ldr.w	sl, [ip]
 80071a4:	0c12      	lsrs	r2, r2, #16
 80071a6:	fa13 f38a 	uxtah	r3, r3, sl
 80071aa:	fb06 e202 	mla	r2, r6, r2, lr
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071b6:	b292      	uxth	r2, r2
 80071b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80071c4:	4581      	cmp	r9, r0
 80071c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ca:	f84c 3b04 	str.w	r3, [ip], #4
 80071ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071d2:	d2db      	bcs.n	800718c <quorem+0x44>
 80071d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80071d8:	b92b      	cbnz	r3, 80071e6 <quorem+0x9e>
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	3b04      	subs	r3, #4
 80071de:	429d      	cmp	r5, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	d32e      	bcc.n	8007242 <quorem+0xfa>
 80071e4:	613c      	str	r4, [r7, #16]
 80071e6:	4638      	mov	r0, r7
 80071e8:	f001 fa64 	bl	80086b4 <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	db24      	blt.n	800723a <quorem+0xf2>
 80071f0:	3601      	adds	r6, #1
 80071f2:	4628      	mov	r0, r5
 80071f4:	f04f 0c00 	mov.w	ip, #0
 80071f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80071fc:	f8d0 e000 	ldr.w	lr, [r0]
 8007200:	b293      	uxth	r3, r2
 8007202:	ebac 0303 	sub.w	r3, ip, r3
 8007206:	0c12      	lsrs	r2, r2, #16
 8007208:	fa13 f38e 	uxtah	r3, r3, lr
 800720c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800721a:	45c1      	cmp	r9, r8
 800721c:	f840 3b04 	str.w	r3, [r0], #4
 8007220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007224:	d2e8      	bcs.n	80071f8 <quorem+0xb0>
 8007226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800722a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722e:	b922      	cbnz	r2, 800723a <quorem+0xf2>
 8007230:	3b04      	subs	r3, #4
 8007232:	429d      	cmp	r5, r3
 8007234:	461a      	mov	r2, r3
 8007236:	d30a      	bcc.n	800724e <quorem+0x106>
 8007238:	613c      	str	r4, [r7, #16]
 800723a:	4630      	mov	r0, r6
 800723c:	b003      	add	sp, #12
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	3b04      	subs	r3, #4
 8007246:	2a00      	cmp	r2, #0
 8007248:	d1cc      	bne.n	80071e4 <quorem+0x9c>
 800724a:	3c01      	subs	r4, #1
 800724c:	e7c7      	b.n	80071de <quorem+0x96>
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	3b04      	subs	r3, #4
 8007252:	2a00      	cmp	r2, #0
 8007254:	d1f0      	bne.n	8007238 <quorem+0xf0>
 8007256:	3c01      	subs	r4, #1
 8007258:	e7eb      	b.n	8007232 <quorem+0xea>
 800725a:	2000      	movs	r0, #0
 800725c:	e7ee      	b.n	800723c <quorem+0xf4>
	...

08007260 <_dtoa_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	ed2d 8b02 	vpush	{d8}
 8007268:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800726a:	b091      	sub	sp, #68	; 0x44
 800726c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007270:	ec59 8b10 	vmov	r8, r9, d0
 8007274:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007276:	9106      	str	r1, [sp, #24]
 8007278:	4606      	mov	r6, r0
 800727a:	9208      	str	r2, [sp, #32]
 800727c:	930c      	str	r3, [sp, #48]	; 0x30
 800727e:	b975      	cbnz	r5, 800729e <_dtoa_r+0x3e>
 8007280:	2010      	movs	r0, #16
 8007282:	f000 ff7f 	bl	8008184 <malloc>
 8007286:	4602      	mov	r2, r0
 8007288:	6270      	str	r0, [r6, #36]	; 0x24
 800728a:	b920      	cbnz	r0, 8007296 <_dtoa_r+0x36>
 800728c:	4baa      	ldr	r3, [pc, #680]	; (8007538 <_dtoa_r+0x2d8>)
 800728e:	21ea      	movs	r1, #234	; 0xea
 8007290:	48aa      	ldr	r0, [pc, #680]	; (800753c <_dtoa_r+0x2dc>)
 8007292:	f001 fc6d 	bl	8008b70 <__assert_func>
 8007296:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800729a:	6005      	str	r5, [r0, #0]
 800729c:	60c5      	str	r5, [r0, #12]
 800729e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	b151      	cbz	r1, 80072ba <_dtoa_r+0x5a>
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	604a      	str	r2, [r1, #4]
 80072a8:	2301      	movs	r3, #1
 80072aa:	4093      	lsls	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 ffbe 	bl	8008230 <_Bfree>
 80072b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	f1b9 0300 	subs.w	r3, r9, #0
 80072be:	bfbb      	ittet	lt
 80072c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072c4:	9303      	strlt	r3, [sp, #12]
 80072c6:	2300      	movge	r3, #0
 80072c8:	2201      	movlt	r2, #1
 80072ca:	bfac      	ite	ge
 80072cc:	6023      	strge	r3, [r4, #0]
 80072ce:	6022      	strlt	r2, [r4, #0]
 80072d0:	4b9b      	ldr	r3, [pc, #620]	; (8007540 <_dtoa_r+0x2e0>)
 80072d2:	9c03      	ldr	r4, [sp, #12]
 80072d4:	43a3      	bics	r3, r4
 80072d6:	d11c      	bne.n	8007312 <_dtoa_r+0xb2>
 80072d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072da:	f242 730f 	movw	r3, #9999	; 0x270f
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80072e4:	ea53 0308 	orrs.w	r3, r3, r8
 80072e8:	f000 84fd 	beq.w	8007ce6 <_dtoa_r+0xa86>
 80072ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072ee:	b963      	cbnz	r3, 800730a <_dtoa_r+0xaa>
 80072f0:	4b94      	ldr	r3, [pc, #592]	; (8007544 <_dtoa_r+0x2e4>)
 80072f2:	e01f      	b.n	8007334 <_dtoa_r+0xd4>
 80072f4:	4b94      	ldr	r3, [pc, #592]	; (8007548 <_dtoa_r+0x2e8>)
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	3308      	adds	r3, #8
 80072fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	9801      	ldr	r0, [sp, #4]
 8007300:	b011      	add	sp, #68	; 0x44
 8007302:	ecbd 8b02 	vpop	{d8}
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	4b8e      	ldr	r3, [pc, #568]	; (8007544 <_dtoa_r+0x2e4>)
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	3303      	adds	r3, #3
 8007310:	e7f3      	b.n	80072fa <_dtoa_r+0x9a>
 8007312:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007316:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731e:	d10b      	bne.n	8007338 <_dtoa_r+0xd8>
 8007320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007322:	2301      	movs	r3, #1
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 84d9 	beq.w	8007ce0 <_dtoa_r+0xa80>
 800732e:	4887      	ldr	r0, [pc, #540]	; (800754c <_dtoa_r+0x2ec>)
 8007330:	6018      	str	r0, [r3, #0]
 8007332:	1e43      	subs	r3, r0, #1
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	e7e2      	b.n	80072fe <_dtoa_r+0x9e>
 8007338:	a90f      	add	r1, sp, #60	; 0x3c
 800733a:	aa0e      	add	r2, sp, #56	; 0x38
 800733c:	4630      	mov	r0, r6
 800733e:	eeb0 0b48 	vmov.f64	d0, d8
 8007342:	f001 fa5d 	bl	8008800 <__d2b>
 8007346:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800734a:	4605      	mov	r5, r0
 800734c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800734e:	2900      	cmp	r1, #0
 8007350:	d046      	beq.n	80073e0 <_dtoa_r+0x180>
 8007352:	ee18 4a90 	vmov	r4, s17
 8007356:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800735a:	ec53 2b18 	vmov	r2, r3, d8
 800735e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007362:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007366:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800736a:	2400      	movs	r4, #0
 800736c:	ec43 2b16 	vmov	d6, r2, r3
 8007370:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007374:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007520 <_dtoa_r+0x2c0>
 8007378:	ee36 7b47 	vsub.f64	d7, d6, d7
 800737c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007528 <_dtoa_r+0x2c8>
 8007380:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007384:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007530 <_dtoa_r+0x2d0>
 8007388:	ee07 1a90 	vmov	s15, r1
 800738c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007390:	eeb0 7b46 	vmov.f64	d7, d6
 8007394:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007398:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800739c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	ee16 ba90 	vmov	fp, s13
 80073a8:	940a      	str	r4, [sp, #40]	; 0x28
 80073aa:	d508      	bpl.n	80073be <_dtoa_r+0x15e>
 80073ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80073b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80073b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b8:	bf18      	it	ne
 80073ba:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80073be:	f1bb 0f16 	cmp.w	fp, #22
 80073c2:	d82f      	bhi.n	8007424 <_dtoa_r+0x1c4>
 80073c4:	4b62      	ldr	r3, [pc, #392]	; (8007550 <_dtoa_r+0x2f0>)
 80073c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073ca:	ed93 7b00 	vldr	d7, [r3]
 80073ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	d501      	bpl.n	80073dc <_dtoa_r+0x17c>
 80073d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80073dc:	2300      	movs	r3, #0
 80073de:	e022      	b.n	8007426 <_dtoa_r+0x1c6>
 80073e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073e2:	4401      	add	r1, r0
 80073e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	bfc1      	itttt	gt
 80073ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073f0:	fa04 f303 	lslgt.w	r3, r4, r3
 80073f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80073f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80073fc:	bfd6      	itet	le
 80073fe:	f1c3 0320 	rsble	r3, r3, #32
 8007402:	ea43 0808 	orrgt.w	r8, r3, r8
 8007406:	fa08 f803 	lslle.w	r8, r8, r3
 800740a:	ee07 8a90 	vmov	s15, r8
 800740e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007412:	3901      	subs	r1, #1
 8007414:	ee17 4a90 	vmov	r4, s15
 8007418:	ec53 2b17 	vmov	r2, r3, d7
 800741c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007420:	2401      	movs	r4, #1
 8007422:	e7a3      	b.n	800736c <_dtoa_r+0x10c>
 8007424:	2301      	movs	r3, #1
 8007426:	930b      	str	r3, [sp, #44]	; 0x2c
 8007428:	1a43      	subs	r3, r0, r1
 800742a:	1e5a      	subs	r2, r3, #1
 800742c:	bf45      	ittet	mi
 800742e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007432:	9304      	strmi	r3, [sp, #16]
 8007434:	2300      	movpl	r3, #0
 8007436:	2300      	movmi	r3, #0
 8007438:	9205      	str	r2, [sp, #20]
 800743a:	bf54      	ite	pl
 800743c:	9304      	strpl	r3, [sp, #16]
 800743e:	9305      	strmi	r3, [sp, #20]
 8007440:	f1bb 0f00 	cmp.w	fp, #0
 8007444:	db18      	blt.n	8007478 <_dtoa_r+0x218>
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800744c:	445b      	add	r3, fp
 800744e:	9305      	str	r3, [sp, #20]
 8007450:	2300      	movs	r3, #0
 8007452:	9a06      	ldr	r2, [sp, #24]
 8007454:	2a09      	cmp	r2, #9
 8007456:	d849      	bhi.n	80074ec <_dtoa_r+0x28c>
 8007458:	2a05      	cmp	r2, #5
 800745a:	bfc4      	itt	gt
 800745c:	3a04      	subgt	r2, #4
 800745e:	9206      	strgt	r2, [sp, #24]
 8007460:	9a06      	ldr	r2, [sp, #24]
 8007462:	f1a2 0202 	sub.w	r2, r2, #2
 8007466:	bfcc      	ite	gt
 8007468:	2400      	movgt	r4, #0
 800746a:	2401      	movle	r4, #1
 800746c:	2a03      	cmp	r2, #3
 800746e:	d848      	bhi.n	8007502 <_dtoa_r+0x2a2>
 8007470:	e8df f002 	tbb	[pc, r2]
 8007474:	3a2c2e0b 	.word	0x3a2c2e0b
 8007478:	9b04      	ldr	r3, [sp, #16]
 800747a:	2200      	movs	r2, #0
 800747c:	eba3 030b 	sub.w	r3, r3, fp
 8007480:	9304      	str	r3, [sp, #16]
 8007482:	9209      	str	r2, [sp, #36]	; 0x24
 8007484:	f1cb 0300 	rsb	r3, fp, #0
 8007488:	e7e3      	b.n	8007452 <_dtoa_r+0x1f2>
 800748a:	2200      	movs	r2, #0
 800748c:	9207      	str	r2, [sp, #28]
 800748e:	9a08      	ldr	r2, [sp, #32]
 8007490:	2a00      	cmp	r2, #0
 8007492:	dc39      	bgt.n	8007508 <_dtoa_r+0x2a8>
 8007494:	f04f 0a01 	mov.w	sl, #1
 8007498:	46d1      	mov	r9, sl
 800749a:	4652      	mov	r2, sl
 800749c:	f8cd a020 	str.w	sl, [sp, #32]
 80074a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80074a2:	2100      	movs	r1, #0
 80074a4:	6079      	str	r1, [r7, #4]
 80074a6:	2004      	movs	r0, #4
 80074a8:	f100 0c14 	add.w	ip, r0, #20
 80074ac:	4594      	cmp	ip, r2
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	d92f      	bls.n	8007512 <_dtoa_r+0x2b2>
 80074b2:	4630      	mov	r0, r6
 80074b4:	930d      	str	r3, [sp, #52]	; 0x34
 80074b6:	f000 fe7b 	bl	80081b0 <_Balloc>
 80074ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074bc:	9001      	str	r0, [sp, #4]
 80074be:	4602      	mov	r2, r0
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d149      	bne.n	8007558 <_dtoa_r+0x2f8>
 80074c4:	4b23      	ldr	r3, [pc, #140]	; (8007554 <_dtoa_r+0x2f4>)
 80074c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074ca:	e6e1      	b.n	8007290 <_dtoa_r+0x30>
 80074cc:	2201      	movs	r2, #1
 80074ce:	e7dd      	b.n	800748c <_dtoa_r+0x22c>
 80074d0:	2200      	movs	r2, #0
 80074d2:	9207      	str	r2, [sp, #28]
 80074d4:	9a08      	ldr	r2, [sp, #32]
 80074d6:	eb0b 0a02 	add.w	sl, fp, r2
 80074da:	f10a 0901 	add.w	r9, sl, #1
 80074de:	464a      	mov	r2, r9
 80074e0:	2a01      	cmp	r2, #1
 80074e2:	bfb8      	it	lt
 80074e4:	2201      	movlt	r2, #1
 80074e6:	e7db      	b.n	80074a0 <_dtoa_r+0x240>
 80074e8:	2201      	movs	r2, #1
 80074ea:	e7f2      	b.n	80074d2 <_dtoa_r+0x272>
 80074ec:	2401      	movs	r4, #1
 80074ee:	2200      	movs	r2, #0
 80074f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80074f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80074f8:	2100      	movs	r1, #0
 80074fa:	46d1      	mov	r9, sl
 80074fc:	2212      	movs	r2, #18
 80074fe:	9108      	str	r1, [sp, #32]
 8007500:	e7ce      	b.n	80074a0 <_dtoa_r+0x240>
 8007502:	2201      	movs	r2, #1
 8007504:	9207      	str	r2, [sp, #28]
 8007506:	e7f5      	b.n	80074f4 <_dtoa_r+0x294>
 8007508:	f8dd a020 	ldr.w	sl, [sp, #32]
 800750c:	46d1      	mov	r9, sl
 800750e:	4652      	mov	r2, sl
 8007510:	e7c6      	b.n	80074a0 <_dtoa_r+0x240>
 8007512:	3101      	adds	r1, #1
 8007514:	6079      	str	r1, [r7, #4]
 8007516:	0040      	lsls	r0, r0, #1
 8007518:	e7c6      	b.n	80074a8 <_dtoa_r+0x248>
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w
 8007520:	636f4361 	.word	0x636f4361
 8007524:	3fd287a7 	.word	0x3fd287a7
 8007528:	8b60c8b3 	.word	0x8b60c8b3
 800752c:	3fc68a28 	.word	0x3fc68a28
 8007530:	509f79fb 	.word	0x509f79fb
 8007534:	3fd34413 	.word	0x3fd34413
 8007538:	080095b5 	.word	0x080095b5
 800753c:	080095cc 	.word	0x080095cc
 8007540:	7ff00000 	.word	0x7ff00000
 8007544:	080095b1 	.word	0x080095b1
 8007548:	080095a8 	.word	0x080095a8
 800754c:	08009585 	.word	0x08009585
 8007550:	08009720 	.word	0x08009720
 8007554:	08009627 	.word	0x08009627
 8007558:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800755a:	9901      	ldr	r1, [sp, #4]
 800755c:	6011      	str	r1, [r2, #0]
 800755e:	f1b9 0f0e 	cmp.w	r9, #14
 8007562:	d86c      	bhi.n	800763e <_dtoa_r+0x3de>
 8007564:	2c00      	cmp	r4, #0
 8007566:	d06a      	beq.n	800763e <_dtoa_r+0x3de>
 8007568:	f1bb 0f00 	cmp.w	fp, #0
 800756c:	f340 80a0 	ble.w	80076b0 <_dtoa_r+0x450>
 8007570:	49c1      	ldr	r1, [pc, #772]	; (8007878 <_dtoa_r+0x618>)
 8007572:	f00b 020f 	and.w	r2, fp, #15
 8007576:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800757a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800757e:	ed92 7b00 	vldr	d7, [r2]
 8007582:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007586:	f000 8087 	beq.w	8007698 <_dtoa_r+0x438>
 800758a:	4abc      	ldr	r2, [pc, #752]	; (800787c <_dtoa_r+0x61c>)
 800758c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007590:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007594:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007598:	f001 010f 	and.w	r1, r1, #15
 800759c:	2203      	movs	r2, #3
 800759e:	48b7      	ldr	r0, [pc, #732]	; (800787c <_dtoa_r+0x61c>)
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d17b      	bne.n	800769c <_dtoa_r+0x43c>
 80075a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80075a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075b2:	2900      	cmp	r1, #0
 80075b4:	f000 80a2 	beq.w	80076fc <_dtoa_r+0x49c>
 80075b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80075bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	f140 8098 	bpl.w	80076fc <_dtoa_r+0x49c>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	f000 8094 	beq.w	80076fc <_dtoa_r+0x49c>
 80075d4:	f1ba 0f00 	cmp.w	sl, #0
 80075d8:	dd2f      	ble.n	800763a <_dtoa_r+0x3da>
 80075da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80075de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075e6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80075ea:	3201      	adds	r2, #1
 80075ec:	4650      	mov	r0, sl
 80075ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80075f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80075f6:	ee07 2a90 	vmov	s15, r2
 80075fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80075fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007602:	ee15 4a90 	vmov	r4, s11
 8007606:	ec52 1b15 	vmov	r1, r2, d5
 800760a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800760e:	2800      	cmp	r0, #0
 8007610:	d177      	bne.n	8007702 <_dtoa_r+0x4a2>
 8007612:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007616:	ee36 6b47 	vsub.f64	d6, d6, d7
 800761a:	ec42 1b17 	vmov	d7, r1, r2
 800761e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007626:	f300 8263 	bgt.w	8007af0 <_dtoa_r+0x890>
 800762a:	eeb1 7b47 	vneg.f64	d7, d7
 800762e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	f100 8258 	bmi.w	8007aea <_dtoa_r+0x88a>
 800763a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800763e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007640:	2a00      	cmp	r2, #0
 8007642:	f2c0 811d 	blt.w	8007880 <_dtoa_r+0x620>
 8007646:	f1bb 0f0e 	cmp.w	fp, #14
 800764a:	f300 8119 	bgt.w	8007880 <_dtoa_r+0x620>
 800764e:	4b8a      	ldr	r3, [pc, #552]	; (8007878 <_dtoa_r+0x618>)
 8007650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007654:	ed93 6b00 	vldr	d6, [r3]
 8007658:	9b08      	ldr	r3, [sp, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f280 80b7 	bge.w	80077ce <_dtoa_r+0x56e>
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	f300 80b3 	bgt.w	80077ce <_dtoa_r+0x56e>
 8007668:	f040 823f 	bne.w	8007aea <_dtoa_r+0x88a>
 800766c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007670:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007674:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007678:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	464c      	mov	r4, r9
 8007682:	464f      	mov	r7, r9
 8007684:	f280 8215 	bge.w	8007ab2 <_dtoa_r+0x852>
 8007688:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800768c:	2331      	movs	r3, #49	; 0x31
 800768e:	f808 3b01 	strb.w	r3, [r8], #1
 8007692:	f10b 0b01 	add.w	fp, fp, #1
 8007696:	e211      	b.n	8007abc <_dtoa_r+0x85c>
 8007698:	2202      	movs	r2, #2
 800769a:	e780      	b.n	800759e <_dtoa_r+0x33e>
 800769c:	07cc      	lsls	r4, r1, #31
 800769e:	d504      	bpl.n	80076aa <_dtoa_r+0x44a>
 80076a0:	ed90 6b00 	vldr	d6, [r0]
 80076a4:	3201      	adds	r2, #1
 80076a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076aa:	1049      	asrs	r1, r1, #1
 80076ac:	3008      	adds	r0, #8
 80076ae:	e777      	b.n	80075a0 <_dtoa_r+0x340>
 80076b0:	d022      	beq.n	80076f8 <_dtoa_r+0x498>
 80076b2:	f1cb 0100 	rsb	r1, fp, #0
 80076b6:	4a70      	ldr	r2, [pc, #448]	; (8007878 <_dtoa_r+0x618>)
 80076b8:	f001 000f 	and.w	r0, r1, #15
 80076bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80076c0:	ed92 7b00 	vldr	d7, [r2]
 80076c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80076c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076cc:	486b      	ldr	r0, [pc, #428]	; (800787c <_dtoa_r+0x61c>)
 80076ce:	1109      	asrs	r1, r1, #4
 80076d0:	2400      	movs	r4, #0
 80076d2:	2202      	movs	r2, #2
 80076d4:	b929      	cbnz	r1, 80076e2 <_dtoa_r+0x482>
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	f43f af6a 	beq.w	80075b0 <_dtoa_r+0x350>
 80076dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076e0:	e766      	b.n	80075b0 <_dtoa_r+0x350>
 80076e2:	07cf      	lsls	r7, r1, #31
 80076e4:	d505      	bpl.n	80076f2 <_dtoa_r+0x492>
 80076e6:	ed90 6b00 	vldr	d6, [r0]
 80076ea:	3201      	adds	r2, #1
 80076ec:	2401      	movs	r4, #1
 80076ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076f2:	1049      	asrs	r1, r1, #1
 80076f4:	3008      	adds	r0, #8
 80076f6:	e7ed      	b.n	80076d4 <_dtoa_r+0x474>
 80076f8:	2202      	movs	r2, #2
 80076fa:	e759      	b.n	80075b0 <_dtoa_r+0x350>
 80076fc:	465f      	mov	r7, fp
 80076fe:	4648      	mov	r0, r9
 8007700:	e775      	b.n	80075ee <_dtoa_r+0x38e>
 8007702:	ec42 1b17 	vmov	d7, r1, r2
 8007706:	4a5c      	ldr	r2, [pc, #368]	; (8007878 <_dtoa_r+0x618>)
 8007708:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800770c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007710:	9a01      	ldr	r2, [sp, #4]
 8007712:	1814      	adds	r4, r2, r0
 8007714:	9a07      	ldr	r2, [sp, #28]
 8007716:	b352      	cbz	r2, 800776e <_dtoa_r+0x50e>
 8007718:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800771c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007720:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007724:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007728:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800772c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007730:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007734:	ee14 2a90 	vmov	r2, s9
 8007738:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800773c:	3230      	adds	r2, #48	; 0x30
 800773e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007742:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	f808 2b01 	strb.w	r2, [r8], #1
 800774e:	d439      	bmi.n	80077c4 <_dtoa_r+0x564>
 8007750:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007754:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775c:	d472      	bmi.n	8007844 <_dtoa_r+0x5e4>
 800775e:	45a0      	cmp	r8, r4
 8007760:	f43f af6b 	beq.w	800763a <_dtoa_r+0x3da>
 8007764:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007768:	ee26 6b03 	vmul.f64	d6, d6, d3
 800776c:	e7e0      	b.n	8007730 <_dtoa_r+0x4d0>
 800776e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007772:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007776:	4621      	mov	r1, r4
 8007778:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800777c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007780:	ee14 2a90 	vmov	r2, s9
 8007784:	3230      	adds	r2, #48	; 0x30
 8007786:	f808 2b01 	strb.w	r2, [r8], #1
 800778a:	45a0      	cmp	r8, r4
 800778c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007790:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007794:	d118      	bne.n	80077c8 <_dtoa_r+0x568>
 8007796:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800779a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800779e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80077a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a6:	dc4d      	bgt.n	8007844 <_dtoa_r+0x5e4>
 80077a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	f57f af41 	bpl.w	800763a <_dtoa_r+0x3da>
 80077b8:	4688      	mov	r8, r1
 80077ba:	3901      	subs	r1, #1
 80077bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80077c0:	2b30      	cmp	r3, #48	; 0x30
 80077c2:	d0f9      	beq.n	80077b8 <_dtoa_r+0x558>
 80077c4:	46bb      	mov	fp, r7
 80077c6:	e02a      	b.n	800781e <_dtoa_r+0x5be>
 80077c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80077cc:	e7d6      	b.n	800777c <_dtoa_r+0x51c>
 80077ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80077d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80077de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80077e2:	ee15 3a10 	vmov	r3, s10
 80077e6:	3330      	adds	r3, #48	; 0x30
 80077e8:	f808 3b01 	strb.w	r3, [r8], #1
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	eba8 0303 	sub.w	r3, r8, r3
 80077f2:	4599      	cmp	r9, r3
 80077f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80077f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80077fc:	d133      	bne.n	8007866 <_dtoa_r+0x606>
 80077fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007802:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780a:	dc1a      	bgt.n	8007842 <_dtoa_r+0x5e2>
 800780c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007814:	d103      	bne.n	800781e <_dtoa_r+0x5be>
 8007816:	ee15 3a10 	vmov	r3, s10
 800781a:	07d9      	lsls	r1, r3, #31
 800781c:	d411      	bmi.n	8007842 <_dtoa_r+0x5e2>
 800781e:	4629      	mov	r1, r5
 8007820:	4630      	mov	r0, r6
 8007822:	f000 fd05 	bl	8008230 <_Bfree>
 8007826:	2300      	movs	r3, #0
 8007828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800782a:	f888 3000 	strb.w	r3, [r8]
 800782e:	f10b 0301 	add.w	r3, fp, #1
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007836:	2b00      	cmp	r3, #0
 8007838:	f43f ad61 	beq.w	80072fe <_dtoa_r+0x9e>
 800783c:	f8c3 8000 	str.w	r8, [r3]
 8007840:	e55d      	b.n	80072fe <_dtoa_r+0x9e>
 8007842:	465f      	mov	r7, fp
 8007844:	4643      	mov	r3, r8
 8007846:	4698      	mov	r8, r3
 8007848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800784c:	2a39      	cmp	r2, #57	; 0x39
 800784e:	d106      	bne.n	800785e <_dtoa_r+0x5fe>
 8007850:	9a01      	ldr	r2, [sp, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d1f7      	bne.n	8007846 <_dtoa_r+0x5e6>
 8007856:	9901      	ldr	r1, [sp, #4]
 8007858:	2230      	movs	r2, #48	; 0x30
 800785a:	3701      	adds	r7, #1
 800785c:	700a      	strb	r2, [r1, #0]
 800785e:	781a      	ldrb	r2, [r3, #0]
 8007860:	3201      	adds	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e7ae      	b.n	80077c4 <_dtoa_r+0x564>
 8007866:	ee27 7b04 	vmul.f64	d7, d7, d4
 800786a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800786e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007872:	d1b2      	bne.n	80077da <_dtoa_r+0x57a>
 8007874:	e7d3      	b.n	800781e <_dtoa_r+0x5be>
 8007876:	bf00      	nop
 8007878:	08009720 	.word	0x08009720
 800787c:	080096f8 	.word	0x080096f8
 8007880:	9907      	ldr	r1, [sp, #28]
 8007882:	2900      	cmp	r1, #0
 8007884:	f000 80d0 	beq.w	8007a28 <_dtoa_r+0x7c8>
 8007888:	9906      	ldr	r1, [sp, #24]
 800788a:	2901      	cmp	r1, #1
 800788c:	f300 80b4 	bgt.w	80079f8 <_dtoa_r+0x798>
 8007890:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007892:	2900      	cmp	r1, #0
 8007894:	f000 80ac 	beq.w	80079f0 <_dtoa_r+0x790>
 8007898:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800789c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80078a0:	461c      	mov	r4, r3
 80078a2:	930a      	str	r3, [sp, #40]	; 0x28
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	9304      	str	r3, [sp, #16]
 80078aa:	9b05      	ldr	r3, [sp, #20]
 80078ac:	2101      	movs	r1, #1
 80078ae:	4413      	add	r3, r2
 80078b0:	4630      	mov	r0, r6
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	f000 fd74 	bl	80083a0 <__i2b>
 80078b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ba:	4607      	mov	r7, r0
 80078bc:	f1b8 0f00 	cmp.w	r8, #0
 80078c0:	dd0d      	ble.n	80078de <_dtoa_r+0x67e>
 80078c2:	9a05      	ldr	r2, [sp, #20]
 80078c4:	2a00      	cmp	r2, #0
 80078c6:	dd0a      	ble.n	80078de <_dtoa_r+0x67e>
 80078c8:	4542      	cmp	r2, r8
 80078ca:	9904      	ldr	r1, [sp, #16]
 80078cc:	bfa8      	it	ge
 80078ce:	4642      	movge	r2, r8
 80078d0:	1a89      	subs	r1, r1, r2
 80078d2:	9104      	str	r1, [sp, #16]
 80078d4:	9905      	ldr	r1, [sp, #20]
 80078d6:	eba8 0802 	sub.w	r8, r8, r2
 80078da:	1a8a      	subs	r2, r1, r2
 80078dc:	9205      	str	r2, [sp, #20]
 80078de:	b303      	cbz	r3, 8007922 <_dtoa_r+0x6c2>
 80078e0:	9a07      	ldr	r2, [sp, #28]
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	f000 80a5 	beq.w	8007a32 <_dtoa_r+0x7d2>
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	dd13      	ble.n	8007914 <_dtoa_r+0x6b4>
 80078ec:	4639      	mov	r1, r7
 80078ee:	4622      	mov	r2, r4
 80078f0:	4630      	mov	r0, r6
 80078f2:	930d      	str	r3, [sp, #52]	; 0x34
 80078f4:	f000 fe14 	bl	8008520 <__pow5mult>
 80078f8:	462a      	mov	r2, r5
 80078fa:	4601      	mov	r1, r0
 80078fc:	4607      	mov	r7, r0
 80078fe:	4630      	mov	r0, r6
 8007900:	f000 fd64 	bl	80083cc <__multiply>
 8007904:	4629      	mov	r1, r5
 8007906:	900a      	str	r0, [sp, #40]	; 0x28
 8007908:	4630      	mov	r0, r6
 800790a:	f000 fc91 	bl	8008230 <_Bfree>
 800790e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007912:	4615      	mov	r5, r2
 8007914:	1b1a      	subs	r2, r3, r4
 8007916:	d004      	beq.n	8007922 <_dtoa_r+0x6c2>
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f000 fe00 	bl	8008520 <__pow5mult>
 8007920:	4605      	mov	r5, r0
 8007922:	2101      	movs	r1, #1
 8007924:	4630      	mov	r0, r6
 8007926:	f000 fd3b 	bl	80083a0 <__i2b>
 800792a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	f340 8081 	ble.w	8007a36 <_dtoa_r+0x7d6>
 8007934:	461a      	mov	r2, r3
 8007936:	4601      	mov	r1, r0
 8007938:	4630      	mov	r0, r6
 800793a:	f000 fdf1 	bl	8008520 <__pow5mult>
 800793e:	9b06      	ldr	r3, [sp, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	4604      	mov	r4, r0
 8007944:	dd7a      	ble.n	8007a3c <_dtoa_r+0x7dc>
 8007946:	2300      	movs	r3, #0
 8007948:	930a      	str	r3, [sp, #40]	; 0x28
 800794a:	6922      	ldr	r2, [r4, #16]
 800794c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007950:	6910      	ldr	r0, [r2, #16]
 8007952:	f000 fcd5 	bl	8008300 <__hi0bits>
 8007956:	f1c0 0020 	rsb	r0, r0, #32
 800795a:	9b05      	ldr	r3, [sp, #20]
 800795c:	4418      	add	r0, r3
 800795e:	f010 001f 	ands.w	r0, r0, #31
 8007962:	f000 808c 	beq.w	8007a7e <_dtoa_r+0x81e>
 8007966:	f1c0 0220 	rsb	r2, r0, #32
 800796a:	2a04      	cmp	r2, #4
 800796c:	f340 8085 	ble.w	8007a7a <_dtoa_r+0x81a>
 8007970:	f1c0 001c 	rsb	r0, r0, #28
 8007974:	9b04      	ldr	r3, [sp, #16]
 8007976:	4403      	add	r3, r0
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	9b05      	ldr	r3, [sp, #20]
 800797c:	4403      	add	r3, r0
 800797e:	4480      	add	r8, r0
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd05      	ble.n	8007994 <_dtoa_r+0x734>
 8007988:	4629      	mov	r1, r5
 800798a:	461a      	mov	r2, r3
 800798c:	4630      	mov	r0, r6
 800798e:	f000 fe21 	bl	80085d4 <__lshift>
 8007992:	4605      	mov	r5, r0
 8007994:	9b05      	ldr	r3, [sp, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	dd05      	ble.n	80079a6 <_dtoa_r+0x746>
 800799a:	4621      	mov	r1, r4
 800799c:	461a      	mov	r2, r3
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 fe18 	bl	80085d4 <__lshift>
 80079a4:	4604      	mov	r4, r0
 80079a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d06a      	beq.n	8007a82 <_dtoa_r+0x822>
 80079ac:	4621      	mov	r1, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 fe80 	bl	80086b4 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	da64      	bge.n	8007a82 <_dtoa_r+0x822>
 80079b8:	2300      	movs	r3, #0
 80079ba:	4629      	mov	r1, r5
 80079bc:	220a      	movs	r2, #10
 80079be:	4630      	mov	r0, r6
 80079c0:	f000 fc58 	bl	8008274 <__multadd>
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80079ca:	4605      	mov	r5, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8191 	beq.w	8007cf4 <_dtoa_r+0xa94>
 80079d2:	4639      	mov	r1, r7
 80079d4:	2300      	movs	r3, #0
 80079d6:	220a      	movs	r2, #10
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 fc4b 	bl	8008274 <__multadd>
 80079de:	f1ba 0f00 	cmp.w	sl, #0
 80079e2:	4607      	mov	r7, r0
 80079e4:	f300 808d 	bgt.w	8007b02 <_dtoa_r+0x8a2>
 80079e8:	9b06      	ldr	r3, [sp, #24]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	dc50      	bgt.n	8007a90 <_dtoa_r+0x830>
 80079ee:	e088      	b.n	8007b02 <_dtoa_r+0x8a2>
 80079f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079f6:	e751      	b.n	800789c <_dtoa_r+0x63c>
 80079f8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	bfbf      	itttt	lt
 8007a00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007a02:	1ae3      	sublt	r3, r4, r3
 8007a04:	18d2      	addlt	r2, r2, r3
 8007a06:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007a08:	bfb6      	itet	lt
 8007a0a:	4623      	movlt	r3, r4
 8007a0c:	1b1c      	subge	r4, r3, r4
 8007a0e:	2400      	movlt	r4, #0
 8007a10:	f1b9 0f00 	cmp.w	r9, #0
 8007a14:	bfb5      	itete	lt
 8007a16:	9a04      	ldrlt	r2, [sp, #16]
 8007a18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007a1c:	eba2 0809 	sublt.w	r8, r2, r9
 8007a20:	464a      	movge	r2, r9
 8007a22:	bfb8      	it	lt
 8007a24:	2200      	movlt	r2, #0
 8007a26:	e73c      	b.n	80078a2 <_dtoa_r+0x642>
 8007a28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a2c:	9f07      	ldr	r7, [sp, #28]
 8007a2e:	461c      	mov	r4, r3
 8007a30:	e744      	b.n	80078bc <_dtoa_r+0x65c>
 8007a32:	461a      	mov	r2, r3
 8007a34:	e770      	b.n	8007918 <_dtoa_r+0x6b8>
 8007a36:	9b06      	ldr	r3, [sp, #24]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	dc18      	bgt.n	8007a6e <_dtoa_r+0x80e>
 8007a3c:	9b02      	ldr	r3, [sp, #8]
 8007a3e:	b9b3      	cbnz	r3, 8007a6e <_dtoa_r+0x80e>
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007a46:	b9a2      	cbnz	r2, 8007a72 <_dtoa_r+0x812>
 8007a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a4c:	0d12      	lsrs	r2, r2, #20
 8007a4e:	0512      	lsls	r2, r2, #20
 8007a50:	b18a      	cbz	r2, 8007a76 <_dtoa_r+0x816>
 8007a52:	9b04      	ldr	r3, [sp, #16]
 8007a54:	3301      	adds	r3, #1
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	9b05      	ldr	r3, [sp, #20]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	9305      	str	r3, [sp, #20]
 8007a5e:	2301      	movs	r3, #1
 8007a60:	930a      	str	r3, [sp, #40]	; 0x28
 8007a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f47f af70 	bne.w	800794a <_dtoa_r+0x6ea>
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	e775      	b.n	800795a <_dtoa_r+0x6fa>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e7f6      	b.n	8007a60 <_dtoa_r+0x800>
 8007a72:	9b02      	ldr	r3, [sp, #8]
 8007a74:	e7f4      	b.n	8007a60 <_dtoa_r+0x800>
 8007a76:	920a      	str	r2, [sp, #40]	; 0x28
 8007a78:	e7f3      	b.n	8007a62 <_dtoa_r+0x802>
 8007a7a:	d082      	beq.n	8007982 <_dtoa_r+0x722>
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	301c      	adds	r0, #28
 8007a80:	e778      	b.n	8007974 <_dtoa_r+0x714>
 8007a82:	f1b9 0f00 	cmp.w	r9, #0
 8007a86:	dc37      	bgt.n	8007af8 <_dtoa_r+0x898>
 8007a88:	9b06      	ldr	r3, [sp, #24]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	dd34      	ble.n	8007af8 <_dtoa_r+0x898>
 8007a8e:	46ca      	mov	sl, r9
 8007a90:	f1ba 0f00 	cmp.w	sl, #0
 8007a94:	d10d      	bne.n	8007ab2 <_dtoa_r+0x852>
 8007a96:	4621      	mov	r1, r4
 8007a98:	4653      	mov	r3, sl
 8007a9a:	2205      	movs	r2, #5
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fbe9 	bl	8008274 <__multadd>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 fe04 	bl	80086b4 <__mcmp>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f73f adeb 	bgt.w	8007688 <_dtoa_r+0x428>
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ab8:	ea6f 0b03 	mvn.w	fp, r3
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f000 fbb4 	bl	8008230 <_Bfree>
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	f43f aea8 	beq.w	800781e <_dtoa_r+0x5be>
 8007ace:	f1b9 0f00 	cmp.w	r9, #0
 8007ad2:	d005      	beq.n	8007ae0 <_dtoa_r+0x880>
 8007ad4:	45b9      	cmp	r9, r7
 8007ad6:	d003      	beq.n	8007ae0 <_dtoa_r+0x880>
 8007ad8:	4649      	mov	r1, r9
 8007ada:	4630      	mov	r0, r6
 8007adc:	f000 fba8 	bl	8008230 <_Bfree>
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 fba4 	bl	8008230 <_Bfree>
 8007ae8:	e699      	b.n	800781e <_dtoa_r+0x5be>
 8007aea:	2400      	movs	r4, #0
 8007aec:	4627      	mov	r7, r4
 8007aee:	e7e0      	b.n	8007ab2 <_dtoa_r+0x852>
 8007af0:	46bb      	mov	fp, r7
 8007af2:	4604      	mov	r4, r0
 8007af4:	4607      	mov	r7, r0
 8007af6:	e5c7      	b.n	8007688 <_dtoa_r+0x428>
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	46ca      	mov	sl, r9
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8100 	beq.w	8007d02 <_dtoa_r+0xaa2>
 8007b02:	f1b8 0f00 	cmp.w	r8, #0
 8007b06:	dd05      	ble.n	8007b14 <_dtoa_r+0x8b4>
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f000 fd61 	bl	80085d4 <__lshift>
 8007b12:	4607      	mov	r7, r0
 8007b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d05d      	beq.n	8007bd6 <_dtoa_r+0x976>
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 fb47 	bl	80081b0 <_Balloc>
 8007b22:	4680      	mov	r8, r0
 8007b24:	b928      	cbnz	r0, 8007b32 <_dtoa_r+0x8d2>
 8007b26:	4b82      	ldr	r3, [pc, #520]	; (8007d30 <_dtoa_r+0xad0>)
 8007b28:	4602      	mov	r2, r0
 8007b2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b2e:	f7ff bbaf 	b.w	8007290 <_dtoa_r+0x30>
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	3202      	adds	r2, #2
 8007b36:	0092      	lsls	r2, r2, #2
 8007b38:	f107 010c 	add.w	r1, r7, #12
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	f000 fb29 	bl	8008194 <memcpy>
 8007b42:	2201      	movs	r2, #1
 8007b44:	4641      	mov	r1, r8
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 fd44 	bl	80085d4 <__lshift>
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	9b01      	ldr	r3, [sp, #4]
 8007b54:	4453      	add	r3, sl
 8007b56:	9308      	str	r3, [sp, #32]
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	46b9      	mov	r9, r7
 8007b60:	9307      	str	r3, [sp, #28]
 8007b62:	4607      	mov	r7, r0
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	4621      	mov	r1, r4
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	9302      	str	r3, [sp, #8]
 8007b6e:	f7ff faeb 	bl	8007148 <quorem>
 8007b72:	4603      	mov	r3, r0
 8007b74:	3330      	adds	r3, #48	; 0x30
 8007b76:	9005      	str	r0, [sp, #20]
 8007b78:	4649      	mov	r1, r9
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7e:	f000 fd99 	bl	80086b4 <__mcmp>
 8007b82:	463a      	mov	r2, r7
 8007b84:	4682      	mov	sl, r0
 8007b86:	4621      	mov	r1, r4
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 fdaf 	bl	80086ec <__mdiff>
 8007b8e:	68c2      	ldr	r2, [r0, #12]
 8007b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b92:	4680      	mov	r8, r0
 8007b94:	bb0a      	cbnz	r2, 8007bda <_dtoa_r+0x97a>
 8007b96:	4601      	mov	r1, r0
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 fd8b 	bl	80086b4 <__mcmp>
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007baa:	f000 fb41 	bl	8008230 <_Bfree>
 8007bae:	9b06      	ldr	r3, [sp, #24]
 8007bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007bb6:	ea43 0102 	orr.w	r1, r3, r2
 8007bba:	9b07      	ldr	r3, [sp, #28]
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc0:	d10d      	bne.n	8007bde <_dtoa_r+0x97e>
 8007bc2:	2b39      	cmp	r3, #57	; 0x39
 8007bc4:	d029      	beq.n	8007c1a <_dtoa_r+0x9ba>
 8007bc6:	f1ba 0f00 	cmp.w	sl, #0
 8007bca:	dd01      	ble.n	8007bd0 <_dtoa_r+0x970>
 8007bcc:	9b05      	ldr	r3, [sp, #20]
 8007bce:	3331      	adds	r3, #49	; 0x31
 8007bd0:	9a02      	ldr	r2, [sp, #8]
 8007bd2:	7013      	strb	r3, [r2, #0]
 8007bd4:	e774      	b.n	8007ac0 <_dtoa_r+0x860>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	e7b8      	b.n	8007b4c <_dtoa_r+0x8ec>
 8007bda:	2201      	movs	r2, #1
 8007bdc:	e7e1      	b.n	8007ba2 <_dtoa_r+0x942>
 8007bde:	f1ba 0f00 	cmp.w	sl, #0
 8007be2:	db06      	blt.n	8007bf2 <_dtoa_r+0x992>
 8007be4:	9906      	ldr	r1, [sp, #24]
 8007be6:	ea41 0a0a 	orr.w	sl, r1, sl
 8007bea:	9907      	ldr	r1, [sp, #28]
 8007bec:	ea5a 0101 	orrs.w	r1, sl, r1
 8007bf0:	d120      	bne.n	8007c34 <_dtoa_r+0x9d4>
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	ddec      	ble.n	8007bd0 <_dtoa_r+0x970>
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	f000 fce9 	bl	80085d4 <__lshift>
 8007c02:	4621      	mov	r1, r4
 8007c04:	4605      	mov	r5, r0
 8007c06:	f000 fd55 	bl	80086b4 <__mcmp>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	dc02      	bgt.n	8007c16 <_dtoa_r+0x9b6>
 8007c10:	d1de      	bne.n	8007bd0 <_dtoa_r+0x970>
 8007c12:	07da      	lsls	r2, r3, #31
 8007c14:	d5dc      	bpl.n	8007bd0 <_dtoa_r+0x970>
 8007c16:	2b39      	cmp	r3, #57	; 0x39
 8007c18:	d1d8      	bne.n	8007bcc <_dtoa_r+0x96c>
 8007c1a:	9a02      	ldr	r2, [sp, #8]
 8007c1c:	2339      	movs	r3, #57	; 0x39
 8007c1e:	7013      	strb	r3, [r2, #0]
 8007c20:	4643      	mov	r3, r8
 8007c22:	4698      	mov	r8, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007c2a:	2a39      	cmp	r2, #57	; 0x39
 8007c2c:	d051      	beq.n	8007cd2 <_dtoa_r+0xa72>
 8007c2e:	3201      	adds	r2, #1
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	e745      	b.n	8007ac0 <_dtoa_r+0x860>
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	dd03      	ble.n	8007c40 <_dtoa_r+0x9e0>
 8007c38:	2b39      	cmp	r3, #57	; 0x39
 8007c3a:	d0ee      	beq.n	8007c1a <_dtoa_r+0x9ba>
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	e7c7      	b.n	8007bd0 <_dtoa_r+0x970>
 8007c40:	9a04      	ldr	r2, [sp, #16]
 8007c42:	9908      	ldr	r1, [sp, #32]
 8007c44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c48:	428a      	cmp	r2, r1
 8007c4a:	d02b      	beq.n	8007ca4 <_dtoa_r+0xa44>
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	2300      	movs	r3, #0
 8007c50:	220a      	movs	r2, #10
 8007c52:	4630      	mov	r0, r6
 8007c54:	f000 fb0e 	bl	8008274 <__multadd>
 8007c58:	45b9      	cmp	r9, r7
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	f04f 020a 	mov.w	r2, #10
 8007c64:	4649      	mov	r1, r9
 8007c66:	4630      	mov	r0, r6
 8007c68:	d107      	bne.n	8007c7a <_dtoa_r+0xa1a>
 8007c6a:	f000 fb03 	bl	8008274 <__multadd>
 8007c6e:	4681      	mov	r9, r0
 8007c70:	4607      	mov	r7, r0
 8007c72:	9b04      	ldr	r3, [sp, #16]
 8007c74:	3301      	adds	r3, #1
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	e774      	b.n	8007b64 <_dtoa_r+0x904>
 8007c7a:	f000 fafb 	bl	8008274 <__multadd>
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4681      	mov	r9, r0
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 faf4 	bl	8008274 <__multadd>
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	e7f0      	b.n	8007c72 <_dtoa_r+0xa12>
 8007c90:	f1ba 0f00 	cmp.w	sl, #0
 8007c94:	9a01      	ldr	r2, [sp, #4]
 8007c96:	bfcc      	ite	gt
 8007c98:	46d0      	movgt	r8, sl
 8007c9a:	f04f 0801 	movle.w	r8, #1
 8007c9e:	4490      	add	r8, r2
 8007ca0:	f04f 0900 	mov.w	r9, #0
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	4630      	mov	r0, r6
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	f000 fc92 	bl	80085d4 <__lshift>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	f000 fcfe 	bl	80086b4 <__mcmp>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	dcb1      	bgt.n	8007c20 <_dtoa_r+0x9c0>
 8007cbc:	d102      	bne.n	8007cc4 <_dtoa_r+0xa64>
 8007cbe:	9b02      	ldr	r3, [sp, #8]
 8007cc0:	07db      	lsls	r3, r3, #31
 8007cc2:	d4ad      	bmi.n	8007c20 <_dtoa_r+0x9c0>
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	4698      	mov	r8, r3
 8007cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ccc:	2a30      	cmp	r2, #48	; 0x30
 8007cce:	d0fa      	beq.n	8007cc6 <_dtoa_r+0xa66>
 8007cd0:	e6f6      	b.n	8007ac0 <_dtoa_r+0x860>
 8007cd2:	9a01      	ldr	r2, [sp, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d1a4      	bne.n	8007c22 <_dtoa_r+0x9c2>
 8007cd8:	f10b 0b01 	add.w	fp, fp, #1
 8007cdc:	2331      	movs	r3, #49	; 0x31
 8007cde:	e778      	b.n	8007bd2 <_dtoa_r+0x972>
 8007ce0:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <_dtoa_r+0xad4>)
 8007ce2:	f7ff bb27 	b.w	8007334 <_dtoa_r+0xd4>
 8007ce6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f ab03 	bne.w	80072f4 <_dtoa_r+0x94>
 8007cee:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <_dtoa_r+0xad8>)
 8007cf0:	f7ff bb20 	b.w	8007334 <_dtoa_r+0xd4>
 8007cf4:	f1ba 0f00 	cmp.w	sl, #0
 8007cf8:	dc03      	bgt.n	8007d02 <_dtoa_r+0xaa2>
 8007cfa:	9b06      	ldr	r3, [sp, #24]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	f73f aec7 	bgt.w	8007a90 <_dtoa_r+0x830>
 8007d02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f7ff fa1d 	bl	8007148 <quorem>
 8007d0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d12:	f808 3b01 	strb.w	r3, [r8], #1
 8007d16:	9a01      	ldr	r2, [sp, #4]
 8007d18:	eba8 0202 	sub.w	r2, r8, r2
 8007d1c:	4592      	cmp	sl, r2
 8007d1e:	ddb7      	ble.n	8007c90 <_dtoa_r+0xa30>
 8007d20:	4629      	mov	r1, r5
 8007d22:	2300      	movs	r3, #0
 8007d24:	220a      	movs	r2, #10
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 faa4 	bl	8008274 <__multadd>
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	e7ea      	b.n	8007d06 <_dtoa_r+0xaa6>
 8007d30:	08009627 	.word	0x08009627
 8007d34:	08009584 	.word	0x08009584
 8007d38:	080095a8 	.word	0x080095a8

08007d3c <__sflush_r>:
 8007d3c:	898a      	ldrh	r2, [r1, #12]
 8007d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	4605      	mov	r5, r0
 8007d44:	0710      	lsls	r0, r2, #28
 8007d46:	460c      	mov	r4, r1
 8007d48:	d458      	bmi.n	8007dfc <__sflush_r+0xc0>
 8007d4a:	684b      	ldr	r3, [r1, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc05      	bgt.n	8007d5c <__sflush_r+0x20>
 8007d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc02      	bgt.n	8007d5c <__sflush_r+0x20>
 8007d56:	2000      	movs	r0, #0
 8007d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d0f9      	beq.n	8007d56 <__sflush_r+0x1a>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d68:	682f      	ldr	r7, [r5, #0]
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	d032      	beq.n	8007dd4 <__sflush_r+0x98>
 8007d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	075a      	lsls	r2, r3, #29
 8007d74:	d505      	bpl.n	8007d82 <__sflush_r+0x46>
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	1ac0      	subs	r0, r0, r3
 8007d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d7c:	b10b      	cbz	r3, 8007d82 <__sflush_r+0x46>
 8007d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d80:	1ac0      	subs	r0, r0, r3
 8007d82:	2300      	movs	r3, #0
 8007d84:	4602      	mov	r2, r0
 8007d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b0      	blx	r6
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	d106      	bne.n	8007da2 <__sflush_r+0x66>
 8007d94:	6829      	ldr	r1, [r5, #0]
 8007d96:	291d      	cmp	r1, #29
 8007d98:	d82c      	bhi.n	8007df4 <__sflush_r+0xb8>
 8007d9a:	4a2a      	ldr	r2, [pc, #168]	; (8007e44 <__sflush_r+0x108>)
 8007d9c:	40ca      	lsrs	r2, r1
 8007d9e:	07d6      	lsls	r6, r2, #31
 8007da0:	d528      	bpl.n	8007df4 <__sflush_r+0xb8>
 8007da2:	2200      	movs	r2, #0
 8007da4:	6062      	str	r2, [r4, #4]
 8007da6:	04d9      	lsls	r1, r3, #19
 8007da8:	6922      	ldr	r2, [r4, #16]
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	d504      	bpl.n	8007db8 <__sflush_r+0x7c>
 8007dae:	1c42      	adds	r2, r0, #1
 8007db0:	d101      	bne.n	8007db6 <__sflush_r+0x7a>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	b903      	cbnz	r3, 8007db8 <__sflush_r+0x7c>
 8007db6:	6560      	str	r0, [r4, #84]	; 0x54
 8007db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dba:	602f      	str	r7, [r5, #0]
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d0ca      	beq.n	8007d56 <__sflush_r+0x1a>
 8007dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d002      	beq.n	8007dce <__sflush_r+0x92>
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 fd8b 	bl	80088e4 <_free_r>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8007dd2:	e7c1      	b.n	8007d58 <__sflush_r+0x1c>
 8007dd4:	6a21      	ldr	r1, [r4, #32]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b0      	blx	r6
 8007ddc:	1c41      	adds	r1, r0, #1
 8007dde:	d1c7      	bne.n	8007d70 <__sflush_r+0x34>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c4      	beq.n	8007d70 <__sflush_r+0x34>
 8007de6:	2b1d      	cmp	r3, #29
 8007de8:	d001      	beq.n	8007dee <__sflush_r+0xb2>
 8007dea:	2b16      	cmp	r3, #22
 8007dec:	d101      	bne.n	8007df2 <__sflush_r+0xb6>
 8007dee:	602f      	str	r7, [r5, #0]
 8007df0:	e7b1      	b.n	8007d56 <__sflush_r+0x1a>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	e7ad      	b.n	8007d58 <__sflush_r+0x1c>
 8007dfc:	690f      	ldr	r7, [r1, #16]
 8007dfe:	2f00      	cmp	r7, #0
 8007e00:	d0a9      	beq.n	8007d56 <__sflush_r+0x1a>
 8007e02:	0793      	lsls	r3, r2, #30
 8007e04:	680e      	ldr	r6, [r1, #0]
 8007e06:	bf08      	it	eq
 8007e08:	694b      	ldreq	r3, [r1, #20]
 8007e0a:	600f      	str	r7, [r1, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	2300      	movne	r3, #0
 8007e10:	eba6 0807 	sub.w	r8, r6, r7
 8007e14:	608b      	str	r3, [r1, #8]
 8007e16:	f1b8 0f00 	cmp.w	r8, #0
 8007e1a:	dd9c      	ble.n	8007d56 <__sflush_r+0x1a>
 8007e1c:	6a21      	ldr	r1, [r4, #32]
 8007e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e20:	4643      	mov	r3, r8
 8007e22:	463a      	mov	r2, r7
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b0      	blx	r6
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	dc06      	bgt.n	8007e3a <__sflush_r+0xfe>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e38:	e78e      	b.n	8007d58 <__sflush_r+0x1c>
 8007e3a:	4407      	add	r7, r0
 8007e3c:	eba8 0800 	sub.w	r8, r8, r0
 8007e40:	e7e9      	b.n	8007e16 <__sflush_r+0xda>
 8007e42:	bf00      	nop
 8007e44:	20400001 	.word	0x20400001

08007e48 <_fflush_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	690b      	ldr	r3, [r1, #16]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	b913      	cbnz	r3, 8007e58 <_fflush_r+0x10>
 8007e52:	2500      	movs	r5, #0
 8007e54:	4628      	mov	r0, r5
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	b118      	cbz	r0, 8007e62 <_fflush_r+0x1a>
 8007e5a:	6983      	ldr	r3, [r0, #24]
 8007e5c:	b90b      	cbnz	r3, 8007e62 <_fflush_r+0x1a>
 8007e5e:	f000 f887 	bl	8007f70 <__sinit>
 8007e62:	4b14      	ldr	r3, [pc, #80]	; (8007eb4 <_fflush_r+0x6c>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	d11b      	bne.n	8007ea0 <_fflush_r+0x58>
 8007e68:	686c      	ldr	r4, [r5, #4]
 8007e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0ef      	beq.n	8007e52 <_fflush_r+0xa>
 8007e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e74:	07d0      	lsls	r0, r2, #31
 8007e76:	d404      	bmi.n	8007e82 <_fflush_r+0x3a>
 8007e78:	0599      	lsls	r1, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_fflush_r+0x3a>
 8007e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7e:	f000 f91a 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8007e82:	4628      	mov	r0, r5
 8007e84:	4621      	mov	r1, r4
 8007e86:	f7ff ff59 	bl	8007d3c <__sflush_r>
 8007e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e8c:	07da      	lsls	r2, r3, #31
 8007e8e:	4605      	mov	r5, r0
 8007e90:	d4e0      	bmi.n	8007e54 <_fflush_r+0xc>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	059b      	lsls	r3, r3, #22
 8007e96:	d4dd      	bmi.n	8007e54 <_fflush_r+0xc>
 8007e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e9a:	f000 f90d 	bl	80080b8 <__retarget_lock_release_recursive>
 8007e9e:	e7d9      	b.n	8007e54 <_fflush_r+0xc>
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <_fflush_r+0x70>)
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	d101      	bne.n	8007eaa <_fflush_r+0x62>
 8007ea6:	68ac      	ldr	r4, [r5, #8]
 8007ea8:	e7df      	b.n	8007e6a <_fflush_r+0x22>
 8007eaa:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <_fflush_r+0x74>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	bf08      	it	eq
 8007eb0:	68ec      	ldreq	r4, [r5, #12]
 8007eb2:	e7da      	b.n	8007e6a <_fflush_r+0x22>
 8007eb4:	08009658 	.word	0x08009658
 8007eb8:	08009678 	.word	0x08009678
 8007ebc:	08009638 	.word	0x08009638

08007ec0 <std>:
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	b510      	push	{r4, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ece:	6083      	str	r3, [r0, #8]
 8007ed0:	8181      	strh	r1, [r0, #12]
 8007ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed4:	81c2      	strh	r2, [r0, #14]
 8007ed6:	6183      	str	r3, [r0, #24]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	2208      	movs	r2, #8
 8007edc:	305c      	adds	r0, #92	; 0x5c
 8007ede:	f7fe fc21 	bl	8006724 <memset>
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <std+0x38>)
 8007ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <std+0x3c>)
 8007ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <std+0x40>)
 8007eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <std+0x44>)
 8007ef0:	6224      	str	r4, [r4, #32]
 8007ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	bf00      	nop
 8007ef8:	08008ac5 	.word	0x08008ac5
 8007efc:	08008ae7 	.word	0x08008ae7
 8007f00:	08008b1f 	.word	0x08008b1f
 8007f04:	08008b43 	.word	0x08008b43

08007f08 <_cleanup_r>:
 8007f08:	4901      	ldr	r1, [pc, #4]	; (8007f10 <_cleanup_r+0x8>)
 8007f0a:	f000 b8af 	b.w	800806c <_fwalk_reent>
 8007f0e:	bf00      	nop
 8007f10:	08007e49 	.word	0x08007e49

08007f14 <__sfmoreglue>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	2268      	movs	r2, #104	; 0x68
 8007f18:	1e4d      	subs	r5, r1, #1
 8007f1a:	4355      	muls	r5, r2
 8007f1c:	460e      	mov	r6, r1
 8007f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f22:	f000 fd4b 	bl	80089bc <_malloc_r>
 8007f26:	4604      	mov	r4, r0
 8007f28:	b140      	cbz	r0, 8007f3c <__sfmoreglue+0x28>
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f30:	300c      	adds	r0, #12
 8007f32:	60a0      	str	r0, [r4, #8]
 8007f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f38:	f7fe fbf4 	bl	8006724 <memset>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}

08007f40 <__sfp_lock_acquire>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__sfp_lock_acquire+0x8>)
 8007f42:	f000 b8b8 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000471 	.word	0x20000471

08007f4c <__sfp_lock_release>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__sfp_lock_release+0x8>)
 8007f4e:	f000 b8b3 	b.w	80080b8 <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000471 	.word	0x20000471

08007f58 <__sinit_lock_acquire>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__sinit_lock_acquire+0x8>)
 8007f5a:	f000 b8ac 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	20000472 	.word	0x20000472

08007f64 <__sinit_lock_release>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__sinit_lock_release+0x8>)
 8007f66:	f000 b8a7 	b.w	80080b8 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20000472 	.word	0x20000472

08007f70 <__sinit>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4604      	mov	r4, r0
 8007f74:	f7ff fff0 	bl	8007f58 <__sinit_lock_acquire>
 8007f78:	69a3      	ldr	r3, [r4, #24]
 8007f7a:	b11b      	cbz	r3, 8007f84 <__sinit+0x14>
 8007f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f80:	f7ff bff0 	b.w	8007f64 <__sinit_lock_release>
 8007f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f88:	6523      	str	r3, [r4, #80]	; 0x50
 8007f8a:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <__sinit+0x68>)
 8007f8c:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <__sinit+0x6c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	bf04      	itt	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	61a3      	streq	r3, [r4, #24]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f820 	bl	8007fe0 <__sfp>
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f81c 	bl	8007fe0 <__sfp>
 8007fa8:	60a0      	str	r0, [r4, #8]
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f818 	bl	8007fe0 <__sfp>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	60e0      	str	r0, [r4, #12]
 8007fb4:	2104      	movs	r1, #4
 8007fb6:	6860      	ldr	r0, [r4, #4]
 8007fb8:	f7ff ff82 	bl	8007ec0 <std>
 8007fbc:	68a0      	ldr	r0, [r4, #8]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	2109      	movs	r1, #9
 8007fc2:	f7ff ff7d 	bl	8007ec0 <std>
 8007fc6:	68e0      	ldr	r0, [r4, #12]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	2112      	movs	r1, #18
 8007fcc:	f7ff ff78 	bl	8007ec0 <std>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61a3      	str	r3, [r4, #24]
 8007fd4:	e7d2      	b.n	8007f7c <__sinit+0xc>
 8007fd6:	bf00      	nop
 8007fd8:	08009570 	.word	0x08009570
 8007fdc:	08007f09 	.word	0x08007f09

08007fe0 <__sfp>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	f7ff ffac 	bl	8007f40 <__sfp_lock_acquire>
 8007fe8:	4b1e      	ldr	r3, [pc, #120]	; (8008064 <__sfp+0x84>)
 8007fea:	681e      	ldr	r6, [r3, #0]
 8007fec:	69b3      	ldr	r3, [r6, #24]
 8007fee:	b913      	cbnz	r3, 8007ff6 <__sfp+0x16>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff ffbd 	bl	8007f70 <__sinit>
 8007ff6:	3648      	adds	r6, #72	; 0x48
 8007ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	d503      	bpl.n	8008008 <__sfp+0x28>
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	b30b      	cbz	r3, 8008048 <__sfp+0x68>
 8008004:	6836      	ldr	r6, [r6, #0]
 8008006:	e7f7      	b.n	8007ff8 <__sfp+0x18>
 8008008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800800c:	b9d5      	cbnz	r5, 8008044 <__sfp+0x64>
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <__sfp+0x88>)
 8008010:	60e3      	str	r3, [r4, #12]
 8008012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008016:	6665      	str	r5, [r4, #100]	; 0x64
 8008018:	f000 f84c 	bl	80080b4 <__retarget_lock_init_recursive>
 800801c:	f7ff ff96 	bl	8007f4c <__sfp_lock_release>
 8008020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008028:	6025      	str	r5, [r4, #0]
 800802a:	61a5      	str	r5, [r4, #24]
 800802c:	2208      	movs	r2, #8
 800802e:	4629      	mov	r1, r5
 8008030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008034:	f7fe fb76 	bl	8006724 <memset>
 8008038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800803c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008040:	4620      	mov	r0, r4
 8008042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008044:	3468      	adds	r4, #104	; 0x68
 8008046:	e7d9      	b.n	8007ffc <__sfp+0x1c>
 8008048:	2104      	movs	r1, #4
 800804a:	4638      	mov	r0, r7
 800804c:	f7ff ff62 	bl	8007f14 <__sfmoreglue>
 8008050:	4604      	mov	r4, r0
 8008052:	6030      	str	r0, [r6, #0]
 8008054:	2800      	cmp	r0, #0
 8008056:	d1d5      	bne.n	8008004 <__sfp+0x24>
 8008058:	f7ff ff78 	bl	8007f4c <__sfp_lock_release>
 800805c:	230c      	movs	r3, #12
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	e7ee      	b.n	8008040 <__sfp+0x60>
 8008062:	bf00      	nop
 8008064:	08009570 	.word	0x08009570
 8008068:	ffff0001 	.word	0xffff0001

0800806c <_fwalk_reent>:
 800806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008070:	4606      	mov	r6, r0
 8008072:	4688      	mov	r8, r1
 8008074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008078:	2700      	movs	r7, #0
 800807a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800807e:	f1b9 0901 	subs.w	r9, r9, #1
 8008082:	d505      	bpl.n	8008090 <_fwalk_reent+0x24>
 8008084:	6824      	ldr	r4, [r4, #0]
 8008086:	2c00      	cmp	r4, #0
 8008088:	d1f7      	bne.n	800807a <_fwalk_reent+0xe>
 800808a:	4638      	mov	r0, r7
 800808c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008090:	89ab      	ldrh	r3, [r5, #12]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d907      	bls.n	80080a6 <_fwalk_reent+0x3a>
 8008096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800809a:	3301      	adds	r3, #1
 800809c:	d003      	beq.n	80080a6 <_fwalk_reent+0x3a>
 800809e:	4629      	mov	r1, r5
 80080a0:	4630      	mov	r0, r6
 80080a2:	47c0      	blx	r8
 80080a4:	4307      	orrs	r7, r0
 80080a6:	3568      	adds	r5, #104	; 0x68
 80080a8:	e7e9      	b.n	800807e <_fwalk_reent+0x12>
	...

080080ac <_localeconv_r>:
 80080ac:	4800      	ldr	r0, [pc, #0]	; (80080b0 <_localeconv_r+0x4>)
 80080ae:	4770      	bx	lr
 80080b0:	20000160 	.word	0x20000160

080080b4 <__retarget_lock_init_recursive>:
 80080b4:	4770      	bx	lr

080080b6 <__retarget_lock_acquire_recursive>:
 80080b6:	4770      	bx	lr

080080b8 <__retarget_lock_release_recursive>:
 80080b8:	4770      	bx	lr

080080ba <__swhatbuf_r>:
 80080ba:	b570      	push	{r4, r5, r6, lr}
 80080bc:	460e      	mov	r6, r1
 80080be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c2:	2900      	cmp	r1, #0
 80080c4:	b096      	sub	sp, #88	; 0x58
 80080c6:	4614      	mov	r4, r2
 80080c8:	461d      	mov	r5, r3
 80080ca:	da08      	bge.n	80080de <__swhatbuf_r+0x24>
 80080cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	602a      	str	r2, [r5, #0]
 80080d4:	061a      	lsls	r2, r3, #24
 80080d6:	d410      	bmi.n	80080fa <__swhatbuf_r+0x40>
 80080d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080dc:	e00e      	b.n	80080fc <__swhatbuf_r+0x42>
 80080de:	466a      	mov	r2, sp
 80080e0:	f000 fd86 	bl	8008bf0 <_fstat_r>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	dbf1      	blt.n	80080cc <__swhatbuf_r+0x12>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080f2:	425a      	negs	r2, r3
 80080f4:	415a      	adcs	r2, r3
 80080f6:	602a      	str	r2, [r5, #0]
 80080f8:	e7ee      	b.n	80080d8 <__swhatbuf_r+0x1e>
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	2000      	movs	r0, #0
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	b016      	add	sp, #88	; 0x58
 8008102:	bd70      	pop	{r4, r5, r6, pc}

08008104 <__smakebuf_r>:
 8008104:	898b      	ldrh	r3, [r1, #12]
 8008106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008108:	079d      	lsls	r5, r3, #30
 800810a:	4606      	mov	r6, r0
 800810c:	460c      	mov	r4, r1
 800810e:	d507      	bpl.n	8008120 <__smakebuf_r+0x1c>
 8008110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	2301      	movs	r3, #1
 800811a:	6163      	str	r3, [r4, #20]
 800811c:	b002      	add	sp, #8
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	ab01      	add	r3, sp, #4
 8008122:	466a      	mov	r2, sp
 8008124:	f7ff ffc9 	bl	80080ba <__swhatbuf_r>
 8008128:	9900      	ldr	r1, [sp, #0]
 800812a:	4605      	mov	r5, r0
 800812c:	4630      	mov	r0, r6
 800812e:	f000 fc45 	bl	80089bc <_malloc_r>
 8008132:	b948      	cbnz	r0, 8008148 <__smakebuf_r+0x44>
 8008134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008138:	059a      	lsls	r2, r3, #22
 800813a:	d4ef      	bmi.n	800811c <__smakebuf_r+0x18>
 800813c:	f023 0303 	bic.w	r3, r3, #3
 8008140:	f043 0302 	orr.w	r3, r3, #2
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	e7e3      	b.n	8008110 <__smakebuf_r+0xc>
 8008148:	4b0d      	ldr	r3, [pc, #52]	; (8008180 <__smakebuf_r+0x7c>)
 800814a:	62b3      	str	r3, [r6, #40]	; 0x28
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	6020      	str	r0, [r4, #0]
 8008150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	9b00      	ldr	r3, [sp, #0]
 8008158:	6163      	str	r3, [r4, #20]
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	6120      	str	r0, [r4, #16]
 800815e:	b15b      	cbz	r3, 8008178 <__smakebuf_r+0x74>
 8008160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008164:	4630      	mov	r0, r6
 8008166:	f000 fd55 	bl	8008c14 <_isatty_r>
 800816a:	b128      	cbz	r0, 8008178 <__smakebuf_r+0x74>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	89a0      	ldrh	r0, [r4, #12]
 800817a:	4305      	orrs	r5, r0
 800817c:	81a5      	strh	r5, [r4, #12]
 800817e:	e7cd      	b.n	800811c <__smakebuf_r+0x18>
 8008180:	08007f09 	.word	0x08007f09

08008184 <malloc>:
 8008184:	4b02      	ldr	r3, [pc, #8]	; (8008190 <malloc+0xc>)
 8008186:	4601      	mov	r1, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	f000 bc17 	b.w	80089bc <_malloc_r>
 800818e:	bf00      	nop
 8008190:	2000000c 	.word	0x2000000c

08008194 <memcpy>:
 8008194:	440a      	add	r2, r1
 8008196:	4291      	cmp	r1, r2
 8008198:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800819c:	d100      	bne.n	80081a0 <memcpy+0xc>
 800819e:	4770      	bx	lr
 80081a0:	b510      	push	{r4, lr}
 80081a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d1f9      	bne.n	80081a2 <memcpy+0xe>
 80081ae:	bd10      	pop	{r4, pc}

080081b0 <_Balloc>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081b4:	4604      	mov	r4, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	b976      	cbnz	r6, 80081d8 <_Balloc+0x28>
 80081ba:	2010      	movs	r0, #16
 80081bc:	f7ff ffe2 	bl	8008184 <malloc>
 80081c0:	4602      	mov	r2, r0
 80081c2:	6260      	str	r0, [r4, #36]	; 0x24
 80081c4:	b920      	cbnz	r0, 80081d0 <_Balloc+0x20>
 80081c6:	4b18      	ldr	r3, [pc, #96]	; (8008228 <_Balloc+0x78>)
 80081c8:	4818      	ldr	r0, [pc, #96]	; (800822c <_Balloc+0x7c>)
 80081ca:	2166      	movs	r1, #102	; 0x66
 80081cc:	f000 fcd0 	bl	8008b70 <__assert_func>
 80081d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d4:	6006      	str	r6, [r0, #0]
 80081d6:	60c6      	str	r6, [r0, #12]
 80081d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081da:	68f3      	ldr	r3, [r6, #12]
 80081dc:	b183      	cbz	r3, 8008200 <_Balloc+0x50>
 80081de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081e6:	b9b8      	cbnz	r0, 8008218 <_Balloc+0x68>
 80081e8:	2101      	movs	r1, #1
 80081ea:	fa01 f605 	lsl.w	r6, r1, r5
 80081ee:	1d72      	adds	r2, r6, #5
 80081f0:	0092      	lsls	r2, r2, #2
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 fb60 	bl	80088b8 <_calloc_r>
 80081f8:	b160      	cbz	r0, 8008214 <_Balloc+0x64>
 80081fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081fe:	e00e      	b.n	800821e <_Balloc+0x6e>
 8008200:	2221      	movs	r2, #33	; 0x21
 8008202:	2104      	movs	r1, #4
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fb57 	bl	80088b8 <_calloc_r>
 800820a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800820c:	60f0      	str	r0, [r6, #12]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e4      	bne.n	80081de <_Balloc+0x2e>
 8008214:	2000      	movs	r0, #0
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	6802      	ldr	r2, [r0, #0]
 800821a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800821e:	2300      	movs	r3, #0
 8008220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008224:	e7f7      	b.n	8008216 <_Balloc+0x66>
 8008226:	bf00      	nop
 8008228:	080095b5 	.word	0x080095b5
 800822c:	08009698 	.word	0x08009698

08008230 <_Bfree>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	b976      	cbnz	r6, 8008258 <_Bfree+0x28>
 800823a:	2010      	movs	r0, #16
 800823c:	f7ff ffa2 	bl	8008184 <malloc>
 8008240:	4602      	mov	r2, r0
 8008242:	6268      	str	r0, [r5, #36]	; 0x24
 8008244:	b920      	cbnz	r0, 8008250 <_Bfree+0x20>
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <_Bfree+0x3c>)
 8008248:	4809      	ldr	r0, [pc, #36]	; (8008270 <_Bfree+0x40>)
 800824a:	218a      	movs	r1, #138	; 0x8a
 800824c:	f000 fc90 	bl	8008b70 <__assert_func>
 8008250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008254:	6006      	str	r6, [r0, #0]
 8008256:	60c6      	str	r6, [r0, #12]
 8008258:	b13c      	cbz	r4, 800826a <_Bfree+0x3a>
 800825a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800825c:	6862      	ldr	r2, [r4, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008264:	6021      	str	r1, [r4, #0]
 8008266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	080095b5 	.word	0x080095b5
 8008270:	08009698 	.word	0x08009698

08008274 <__multadd>:
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	690d      	ldr	r5, [r1, #16]
 800827a:	4607      	mov	r7, r0
 800827c:	460c      	mov	r4, r1
 800827e:	461e      	mov	r6, r3
 8008280:	f101 0c14 	add.w	ip, r1, #20
 8008284:	2000      	movs	r0, #0
 8008286:	f8dc 3000 	ldr.w	r3, [ip]
 800828a:	b299      	uxth	r1, r3
 800828c:	fb02 6101 	mla	r1, r2, r1, r6
 8008290:	0c1e      	lsrs	r6, r3, #16
 8008292:	0c0b      	lsrs	r3, r1, #16
 8008294:	fb02 3306 	mla	r3, r2, r6, r3
 8008298:	b289      	uxth	r1, r1
 800829a:	3001      	adds	r0, #1
 800829c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082a0:	4285      	cmp	r5, r0
 80082a2:	f84c 1b04 	str.w	r1, [ip], #4
 80082a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082aa:	dcec      	bgt.n	8008286 <__multadd+0x12>
 80082ac:	b30e      	cbz	r6, 80082f2 <__multadd+0x7e>
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	dc19      	bgt.n	80082e8 <__multadd+0x74>
 80082b4:	6861      	ldr	r1, [r4, #4]
 80082b6:	4638      	mov	r0, r7
 80082b8:	3101      	adds	r1, #1
 80082ba:	f7ff ff79 	bl	80081b0 <_Balloc>
 80082be:	4680      	mov	r8, r0
 80082c0:	b928      	cbnz	r0, 80082ce <__multadd+0x5a>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <__multadd+0x84>)
 80082c6:	480d      	ldr	r0, [pc, #52]	; (80082fc <__multadd+0x88>)
 80082c8:	21b5      	movs	r1, #181	; 0xb5
 80082ca:	f000 fc51 	bl	8008b70 <__assert_func>
 80082ce:	6922      	ldr	r2, [r4, #16]
 80082d0:	3202      	adds	r2, #2
 80082d2:	f104 010c 	add.w	r1, r4, #12
 80082d6:	0092      	lsls	r2, r2, #2
 80082d8:	300c      	adds	r0, #12
 80082da:	f7ff ff5b 	bl	8008194 <memcpy>
 80082de:	4621      	mov	r1, r4
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7ff ffa5 	bl	8008230 <_Bfree>
 80082e6:	4644      	mov	r4, r8
 80082e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082ec:	3501      	adds	r5, #1
 80082ee:	615e      	str	r6, [r3, #20]
 80082f0:	6125      	str	r5, [r4, #16]
 80082f2:	4620      	mov	r0, r4
 80082f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f8:	08009627 	.word	0x08009627
 80082fc:	08009698 	.word	0x08009698

08008300 <__hi0bits>:
 8008300:	0c03      	lsrs	r3, r0, #16
 8008302:	041b      	lsls	r3, r3, #16
 8008304:	b9d3      	cbnz	r3, 800833c <__hi0bits+0x3c>
 8008306:	0400      	lsls	r0, r0, #16
 8008308:	2310      	movs	r3, #16
 800830a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800830e:	bf04      	itt	eq
 8008310:	0200      	lsleq	r0, r0, #8
 8008312:	3308      	addeq	r3, #8
 8008314:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008318:	bf04      	itt	eq
 800831a:	0100      	lsleq	r0, r0, #4
 800831c:	3304      	addeq	r3, #4
 800831e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008322:	bf04      	itt	eq
 8008324:	0080      	lsleq	r0, r0, #2
 8008326:	3302      	addeq	r3, #2
 8008328:	2800      	cmp	r0, #0
 800832a:	db05      	blt.n	8008338 <__hi0bits+0x38>
 800832c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008330:	f103 0301 	add.w	r3, r3, #1
 8008334:	bf08      	it	eq
 8008336:	2320      	moveq	r3, #32
 8008338:	4618      	mov	r0, r3
 800833a:	4770      	bx	lr
 800833c:	2300      	movs	r3, #0
 800833e:	e7e4      	b.n	800830a <__hi0bits+0xa>

08008340 <__lo0bits>:
 8008340:	6803      	ldr	r3, [r0, #0]
 8008342:	f013 0207 	ands.w	r2, r3, #7
 8008346:	4601      	mov	r1, r0
 8008348:	d00b      	beq.n	8008362 <__lo0bits+0x22>
 800834a:	07da      	lsls	r2, r3, #31
 800834c:	d423      	bmi.n	8008396 <__lo0bits+0x56>
 800834e:	0798      	lsls	r0, r3, #30
 8008350:	bf49      	itett	mi
 8008352:	085b      	lsrmi	r3, r3, #1
 8008354:	089b      	lsrpl	r3, r3, #2
 8008356:	2001      	movmi	r0, #1
 8008358:	600b      	strmi	r3, [r1, #0]
 800835a:	bf5c      	itt	pl
 800835c:	600b      	strpl	r3, [r1, #0]
 800835e:	2002      	movpl	r0, #2
 8008360:	4770      	bx	lr
 8008362:	b298      	uxth	r0, r3
 8008364:	b9a8      	cbnz	r0, 8008392 <__lo0bits+0x52>
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	2010      	movs	r0, #16
 800836a:	b2da      	uxtb	r2, r3
 800836c:	b90a      	cbnz	r2, 8008372 <__lo0bits+0x32>
 800836e:	3008      	adds	r0, #8
 8008370:	0a1b      	lsrs	r3, r3, #8
 8008372:	071a      	lsls	r2, r3, #28
 8008374:	bf04      	itt	eq
 8008376:	091b      	lsreq	r3, r3, #4
 8008378:	3004      	addeq	r0, #4
 800837a:	079a      	lsls	r2, r3, #30
 800837c:	bf04      	itt	eq
 800837e:	089b      	lsreq	r3, r3, #2
 8008380:	3002      	addeq	r0, #2
 8008382:	07da      	lsls	r2, r3, #31
 8008384:	d403      	bmi.n	800838e <__lo0bits+0x4e>
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	f100 0001 	add.w	r0, r0, #1
 800838c:	d005      	beq.n	800839a <__lo0bits+0x5a>
 800838e:	600b      	str	r3, [r1, #0]
 8008390:	4770      	bx	lr
 8008392:	4610      	mov	r0, r2
 8008394:	e7e9      	b.n	800836a <__lo0bits+0x2a>
 8008396:	2000      	movs	r0, #0
 8008398:	4770      	bx	lr
 800839a:	2020      	movs	r0, #32
 800839c:	4770      	bx	lr
	...

080083a0 <__i2b>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	2101      	movs	r1, #1
 80083a6:	f7ff ff03 	bl	80081b0 <_Balloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	b928      	cbnz	r0, 80083ba <__i2b+0x1a>
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <__i2b+0x24>)
 80083b0:	4805      	ldr	r0, [pc, #20]	; (80083c8 <__i2b+0x28>)
 80083b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083b6:	f000 fbdb 	bl	8008b70 <__assert_func>
 80083ba:	2301      	movs	r3, #1
 80083bc:	6144      	str	r4, [r0, #20]
 80083be:	6103      	str	r3, [r0, #16]
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	bf00      	nop
 80083c4:	08009627 	.word	0x08009627
 80083c8:	08009698 	.word	0x08009698

080083cc <__multiply>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	4691      	mov	r9, r2
 80083d2:	690a      	ldr	r2, [r1, #16]
 80083d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	bfb8      	it	lt
 80083dc:	460b      	movlt	r3, r1
 80083de:	460c      	mov	r4, r1
 80083e0:	bfbc      	itt	lt
 80083e2:	464c      	movlt	r4, r9
 80083e4:	4699      	movlt	r9, r3
 80083e6:	6927      	ldr	r7, [r4, #16]
 80083e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083ec:	68a3      	ldr	r3, [r4, #8]
 80083ee:	6861      	ldr	r1, [r4, #4]
 80083f0:	eb07 060a 	add.w	r6, r7, sl
 80083f4:	42b3      	cmp	r3, r6
 80083f6:	b085      	sub	sp, #20
 80083f8:	bfb8      	it	lt
 80083fa:	3101      	addlt	r1, #1
 80083fc:	f7ff fed8 	bl	80081b0 <_Balloc>
 8008400:	b930      	cbnz	r0, 8008410 <__multiply+0x44>
 8008402:	4602      	mov	r2, r0
 8008404:	4b44      	ldr	r3, [pc, #272]	; (8008518 <__multiply+0x14c>)
 8008406:	4845      	ldr	r0, [pc, #276]	; (800851c <__multiply+0x150>)
 8008408:	f240 115d 	movw	r1, #349	; 0x15d
 800840c:	f000 fbb0 	bl	8008b70 <__assert_func>
 8008410:	f100 0514 	add.w	r5, r0, #20
 8008414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008418:	462b      	mov	r3, r5
 800841a:	2200      	movs	r2, #0
 800841c:	4543      	cmp	r3, r8
 800841e:	d321      	bcc.n	8008464 <__multiply+0x98>
 8008420:	f104 0314 	add.w	r3, r4, #20
 8008424:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008428:	f109 0314 	add.w	r3, r9, #20
 800842c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008430:	9202      	str	r2, [sp, #8]
 8008432:	1b3a      	subs	r2, r7, r4
 8008434:	3a15      	subs	r2, #21
 8008436:	f022 0203 	bic.w	r2, r2, #3
 800843a:	3204      	adds	r2, #4
 800843c:	f104 0115 	add.w	r1, r4, #21
 8008440:	428f      	cmp	r7, r1
 8008442:	bf38      	it	cc
 8008444:	2204      	movcc	r2, #4
 8008446:	9201      	str	r2, [sp, #4]
 8008448:	9a02      	ldr	r2, [sp, #8]
 800844a:	9303      	str	r3, [sp, #12]
 800844c:	429a      	cmp	r2, r3
 800844e:	d80c      	bhi.n	800846a <__multiply+0x9e>
 8008450:	2e00      	cmp	r6, #0
 8008452:	dd03      	ble.n	800845c <__multiply+0x90>
 8008454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008458:	2b00      	cmp	r3, #0
 800845a:	d05a      	beq.n	8008512 <__multiply+0x146>
 800845c:	6106      	str	r6, [r0, #16]
 800845e:	b005      	add	sp, #20
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	f843 2b04 	str.w	r2, [r3], #4
 8008468:	e7d8      	b.n	800841c <__multiply+0x50>
 800846a:	f8b3 a000 	ldrh.w	sl, [r3]
 800846e:	f1ba 0f00 	cmp.w	sl, #0
 8008472:	d024      	beq.n	80084be <__multiply+0xf2>
 8008474:	f104 0e14 	add.w	lr, r4, #20
 8008478:	46a9      	mov	r9, r5
 800847a:	f04f 0c00 	mov.w	ip, #0
 800847e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008482:	f8d9 1000 	ldr.w	r1, [r9]
 8008486:	fa1f fb82 	uxth.w	fp, r2
 800848a:	b289      	uxth	r1, r1
 800848c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008490:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008494:	f8d9 2000 	ldr.w	r2, [r9]
 8008498:	4461      	add	r1, ip
 800849a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800849e:	fb0a c20b 	mla	r2, sl, fp, ip
 80084a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084a6:	b289      	uxth	r1, r1
 80084a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084ac:	4577      	cmp	r7, lr
 80084ae:	f849 1b04 	str.w	r1, [r9], #4
 80084b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084b6:	d8e2      	bhi.n	800847e <__multiply+0xb2>
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	f845 c002 	str.w	ip, [r5, r2]
 80084be:	9a03      	ldr	r2, [sp, #12]
 80084c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084c4:	3304      	adds	r3, #4
 80084c6:	f1b9 0f00 	cmp.w	r9, #0
 80084ca:	d020      	beq.n	800850e <__multiply+0x142>
 80084cc:	6829      	ldr	r1, [r5, #0]
 80084ce:	f104 0c14 	add.w	ip, r4, #20
 80084d2:	46ae      	mov	lr, r5
 80084d4:	f04f 0a00 	mov.w	sl, #0
 80084d8:	f8bc b000 	ldrh.w	fp, [ip]
 80084dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084e0:	fb09 220b 	mla	r2, r9, fp, r2
 80084e4:	4492      	add	sl, r2
 80084e6:	b289      	uxth	r1, r1
 80084e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084ec:	f84e 1b04 	str.w	r1, [lr], #4
 80084f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084f4:	f8be 1000 	ldrh.w	r1, [lr]
 80084f8:	0c12      	lsrs	r2, r2, #16
 80084fa:	fb09 1102 	mla	r1, r9, r2, r1
 80084fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008502:	4567      	cmp	r7, ip
 8008504:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008508:	d8e6      	bhi.n	80084d8 <__multiply+0x10c>
 800850a:	9a01      	ldr	r2, [sp, #4]
 800850c:	50a9      	str	r1, [r5, r2]
 800850e:	3504      	adds	r5, #4
 8008510:	e79a      	b.n	8008448 <__multiply+0x7c>
 8008512:	3e01      	subs	r6, #1
 8008514:	e79c      	b.n	8008450 <__multiply+0x84>
 8008516:	bf00      	nop
 8008518:	08009627 	.word	0x08009627
 800851c:	08009698 	.word	0x08009698

08008520 <__pow5mult>:
 8008520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008524:	4615      	mov	r5, r2
 8008526:	f012 0203 	ands.w	r2, r2, #3
 800852a:	4606      	mov	r6, r0
 800852c:	460f      	mov	r7, r1
 800852e:	d007      	beq.n	8008540 <__pow5mult+0x20>
 8008530:	4c25      	ldr	r4, [pc, #148]	; (80085c8 <__pow5mult+0xa8>)
 8008532:	3a01      	subs	r2, #1
 8008534:	2300      	movs	r3, #0
 8008536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800853a:	f7ff fe9b 	bl	8008274 <__multadd>
 800853e:	4607      	mov	r7, r0
 8008540:	10ad      	asrs	r5, r5, #2
 8008542:	d03d      	beq.n	80085c0 <__pow5mult+0xa0>
 8008544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008546:	b97c      	cbnz	r4, 8008568 <__pow5mult+0x48>
 8008548:	2010      	movs	r0, #16
 800854a:	f7ff fe1b 	bl	8008184 <malloc>
 800854e:	4602      	mov	r2, r0
 8008550:	6270      	str	r0, [r6, #36]	; 0x24
 8008552:	b928      	cbnz	r0, 8008560 <__pow5mult+0x40>
 8008554:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <__pow5mult+0xac>)
 8008556:	481e      	ldr	r0, [pc, #120]	; (80085d0 <__pow5mult+0xb0>)
 8008558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800855c:	f000 fb08 	bl	8008b70 <__assert_func>
 8008560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	60c4      	str	r4, [r0, #12]
 8008568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800856c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008570:	b94c      	cbnz	r4, 8008586 <__pow5mult+0x66>
 8008572:	f240 2171 	movw	r1, #625	; 0x271
 8008576:	4630      	mov	r0, r6
 8008578:	f7ff ff12 	bl	80083a0 <__i2b>
 800857c:	2300      	movs	r3, #0
 800857e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008582:	4604      	mov	r4, r0
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	f04f 0900 	mov.w	r9, #0
 800858a:	07eb      	lsls	r3, r5, #31
 800858c:	d50a      	bpl.n	80085a4 <__pow5mult+0x84>
 800858e:	4639      	mov	r1, r7
 8008590:	4622      	mov	r2, r4
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ff1a 	bl	80083cc <__multiply>
 8008598:	4639      	mov	r1, r7
 800859a:	4680      	mov	r8, r0
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff fe47 	bl	8008230 <_Bfree>
 80085a2:	4647      	mov	r7, r8
 80085a4:	106d      	asrs	r5, r5, #1
 80085a6:	d00b      	beq.n	80085c0 <__pow5mult+0xa0>
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	b938      	cbnz	r0, 80085bc <__pow5mult+0x9c>
 80085ac:	4622      	mov	r2, r4
 80085ae:	4621      	mov	r1, r4
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff ff0b 	bl	80083cc <__multiply>
 80085b6:	6020      	str	r0, [r4, #0]
 80085b8:	f8c0 9000 	str.w	r9, [r0]
 80085bc:	4604      	mov	r4, r0
 80085be:	e7e4      	b.n	800858a <__pow5mult+0x6a>
 80085c0:	4638      	mov	r0, r7
 80085c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c6:	bf00      	nop
 80085c8:	080097e8 	.word	0x080097e8
 80085cc:	080095b5 	.word	0x080095b5
 80085d0:	08009698 	.word	0x08009698

080085d4 <__lshift>:
 80085d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	6849      	ldr	r1, [r1, #4]
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085e2:	68a3      	ldr	r3, [r4, #8]
 80085e4:	4607      	mov	r7, r0
 80085e6:	4691      	mov	r9, r2
 80085e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085ec:	f108 0601 	add.w	r6, r8, #1
 80085f0:	42b3      	cmp	r3, r6
 80085f2:	db0b      	blt.n	800860c <__lshift+0x38>
 80085f4:	4638      	mov	r0, r7
 80085f6:	f7ff fddb 	bl	80081b0 <_Balloc>
 80085fa:	4605      	mov	r5, r0
 80085fc:	b948      	cbnz	r0, 8008612 <__lshift+0x3e>
 80085fe:	4602      	mov	r2, r0
 8008600:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <__lshift+0xd8>)
 8008602:	482b      	ldr	r0, [pc, #172]	; (80086b0 <__lshift+0xdc>)
 8008604:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008608:	f000 fab2 	bl	8008b70 <__assert_func>
 800860c:	3101      	adds	r1, #1
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	e7ee      	b.n	80085f0 <__lshift+0x1c>
 8008612:	2300      	movs	r3, #0
 8008614:	f100 0114 	add.w	r1, r0, #20
 8008618:	f100 0210 	add.w	r2, r0, #16
 800861c:	4618      	mov	r0, r3
 800861e:	4553      	cmp	r3, sl
 8008620:	db37      	blt.n	8008692 <__lshift+0xbe>
 8008622:	6920      	ldr	r0, [r4, #16]
 8008624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008628:	f104 0314 	add.w	r3, r4, #20
 800862c:	f019 091f 	ands.w	r9, r9, #31
 8008630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008634:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008638:	d02f      	beq.n	800869a <__lshift+0xc6>
 800863a:	f1c9 0e20 	rsb	lr, r9, #32
 800863e:	468a      	mov	sl, r1
 8008640:	f04f 0c00 	mov.w	ip, #0
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	fa02 f209 	lsl.w	r2, r2, r9
 800864a:	ea42 020c 	orr.w	r2, r2, ip
 800864e:	f84a 2b04 	str.w	r2, [sl], #4
 8008652:	f853 2b04 	ldr.w	r2, [r3], #4
 8008656:	4298      	cmp	r0, r3
 8008658:	fa22 fc0e 	lsr.w	ip, r2, lr
 800865c:	d8f2      	bhi.n	8008644 <__lshift+0x70>
 800865e:	1b03      	subs	r3, r0, r4
 8008660:	3b15      	subs	r3, #21
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	3304      	adds	r3, #4
 8008668:	f104 0215 	add.w	r2, r4, #21
 800866c:	4290      	cmp	r0, r2
 800866e:	bf38      	it	cc
 8008670:	2304      	movcc	r3, #4
 8008672:	f841 c003 	str.w	ip, [r1, r3]
 8008676:	f1bc 0f00 	cmp.w	ip, #0
 800867a:	d001      	beq.n	8008680 <__lshift+0xac>
 800867c:	f108 0602 	add.w	r6, r8, #2
 8008680:	3e01      	subs	r6, #1
 8008682:	4638      	mov	r0, r7
 8008684:	612e      	str	r6, [r5, #16]
 8008686:	4621      	mov	r1, r4
 8008688:	f7ff fdd2 	bl	8008230 <_Bfree>
 800868c:	4628      	mov	r0, r5
 800868e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008692:	f842 0f04 	str.w	r0, [r2, #4]!
 8008696:	3301      	adds	r3, #1
 8008698:	e7c1      	b.n	800861e <__lshift+0x4a>
 800869a:	3904      	subs	r1, #4
 800869c:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086a4:	4298      	cmp	r0, r3
 80086a6:	d8f9      	bhi.n	800869c <__lshift+0xc8>
 80086a8:	e7ea      	b.n	8008680 <__lshift+0xac>
 80086aa:	bf00      	nop
 80086ac:	08009627 	.word	0x08009627
 80086b0:	08009698 	.word	0x08009698

080086b4 <__mcmp>:
 80086b4:	b530      	push	{r4, r5, lr}
 80086b6:	6902      	ldr	r2, [r0, #16]
 80086b8:	690c      	ldr	r4, [r1, #16]
 80086ba:	1b12      	subs	r2, r2, r4
 80086bc:	d10e      	bne.n	80086dc <__mcmp+0x28>
 80086be:	f100 0314 	add.w	r3, r0, #20
 80086c2:	3114      	adds	r1, #20
 80086c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086d4:	42a5      	cmp	r5, r4
 80086d6:	d003      	beq.n	80086e0 <__mcmp+0x2c>
 80086d8:	d305      	bcc.n	80086e6 <__mcmp+0x32>
 80086da:	2201      	movs	r2, #1
 80086dc:	4610      	mov	r0, r2
 80086de:	bd30      	pop	{r4, r5, pc}
 80086e0:	4283      	cmp	r3, r0
 80086e2:	d3f3      	bcc.n	80086cc <__mcmp+0x18>
 80086e4:	e7fa      	b.n	80086dc <__mcmp+0x28>
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ea:	e7f7      	b.n	80086dc <__mcmp+0x28>

080086ec <__mdiff>:
 80086ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	460c      	mov	r4, r1
 80086f2:	4606      	mov	r6, r0
 80086f4:	4611      	mov	r1, r2
 80086f6:	4620      	mov	r0, r4
 80086f8:	4690      	mov	r8, r2
 80086fa:	f7ff ffdb 	bl	80086b4 <__mcmp>
 80086fe:	1e05      	subs	r5, r0, #0
 8008700:	d110      	bne.n	8008724 <__mdiff+0x38>
 8008702:	4629      	mov	r1, r5
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff fd53 	bl	80081b0 <_Balloc>
 800870a:	b930      	cbnz	r0, 800871a <__mdiff+0x2e>
 800870c:	4b3a      	ldr	r3, [pc, #232]	; (80087f8 <__mdiff+0x10c>)
 800870e:	4602      	mov	r2, r0
 8008710:	f240 2132 	movw	r1, #562	; 0x232
 8008714:	4839      	ldr	r0, [pc, #228]	; (80087fc <__mdiff+0x110>)
 8008716:	f000 fa2b 	bl	8008b70 <__assert_func>
 800871a:	2301      	movs	r3, #1
 800871c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	bfa4      	itt	ge
 8008726:	4643      	movge	r3, r8
 8008728:	46a0      	movge	r8, r4
 800872a:	4630      	mov	r0, r6
 800872c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008730:	bfa6      	itte	ge
 8008732:	461c      	movge	r4, r3
 8008734:	2500      	movge	r5, #0
 8008736:	2501      	movlt	r5, #1
 8008738:	f7ff fd3a 	bl	80081b0 <_Balloc>
 800873c:	b920      	cbnz	r0, 8008748 <__mdiff+0x5c>
 800873e:	4b2e      	ldr	r3, [pc, #184]	; (80087f8 <__mdiff+0x10c>)
 8008740:	4602      	mov	r2, r0
 8008742:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008746:	e7e5      	b.n	8008714 <__mdiff+0x28>
 8008748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800874c:	6926      	ldr	r6, [r4, #16]
 800874e:	60c5      	str	r5, [r0, #12]
 8008750:	f104 0914 	add.w	r9, r4, #20
 8008754:	f108 0514 	add.w	r5, r8, #20
 8008758:	f100 0e14 	add.w	lr, r0, #20
 800875c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008760:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008764:	f108 0210 	add.w	r2, r8, #16
 8008768:	46f2      	mov	sl, lr
 800876a:	2100      	movs	r1, #0
 800876c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008770:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008774:	fa1f f883 	uxth.w	r8, r3
 8008778:	fa11 f18b 	uxtah	r1, r1, fp
 800877c:	0c1b      	lsrs	r3, r3, #16
 800877e:	eba1 0808 	sub.w	r8, r1, r8
 8008782:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008786:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800878a:	fa1f f888 	uxth.w	r8, r8
 800878e:	1419      	asrs	r1, r3, #16
 8008790:	454e      	cmp	r6, r9
 8008792:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008796:	f84a 3b04 	str.w	r3, [sl], #4
 800879a:	d8e7      	bhi.n	800876c <__mdiff+0x80>
 800879c:	1b33      	subs	r3, r6, r4
 800879e:	3b15      	subs	r3, #21
 80087a0:	f023 0303 	bic.w	r3, r3, #3
 80087a4:	3304      	adds	r3, #4
 80087a6:	3415      	adds	r4, #21
 80087a8:	42a6      	cmp	r6, r4
 80087aa:	bf38      	it	cc
 80087ac:	2304      	movcc	r3, #4
 80087ae:	441d      	add	r5, r3
 80087b0:	4473      	add	r3, lr
 80087b2:	469e      	mov	lr, r3
 80087b4:	462e      	mov	r6, r5
 80087b6:	4566      	cmp	r6, ip
 80087b8:	d30e      	bcc.n	80087d8 <__mdiff+0xec>
 80087ba:	f10c 0203 	add.w	r2, ip, #3
 80087be:	1b52      	subs	r2, r2, r5
 80087c0:	f022 0203 	bic.w	r2, r2, #3
 80087c4:	3d03      	subs	r5, #3
 80087c6:	45ac      	cmp	ip, r5
 80087c8:	bf38      	it	cc
 80087ca:	2200      	movcc	r2, #0
 80087cc:	441a      	add	r2, r3
 80087ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087d2:	b17b      	cbz	r3, 80087f4 <__mdiff+0x108>
 80087d4:	6107      	str	r7, [r0, #16]
 80087d6:	e7a3      	b.n	8008720 <__mdiff+0x34>
 80087d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80087dc:	fa11 f288 	uxtah	r2, r1, r8
 80087e0:	1414      	asrs	r4, r2, #16
 80087e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087e6:	b292      	uxth	r2, r2
 80087e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087ec:	f84e 2b04 	str.w	r2, [lr], #4
 80087f0:	1421      	asrs	r1, r4, #16
 80087f2:	e7e0      	b.n	80087b6 <__mdiff+0xca>
 80087f4:	3f01      	subs	r7, #1
 80087f6:	e7ea      	b.n	80087ce <__mdiff+0xe2>
 80087f8:	08009627 	.word	0x08009627
 80087fc:	08009698 	.word	0x08009698

08008800 <__d2b>:
 8008800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008804:	4689      	mov	r9, r1
 8008806:	2101      	movs	r1, #1
 8008808:	ec57 6b10 	vmov	r6, r7, d0
 800880c:	4690      	mov	r8, r2
 800880e:	f7ff fccf 	bl	80081b0 <_Balloc>
 8008812:	4604      	mov	r4, r0
 8008814:	b930      	cbnz	r0, 8008824 <__d2b+0x24>
 8008816:	4602      	mov	r2, r0
 8008818:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <__d2b+0xb0>)
 800881a:	4826      	ldr	r0, [pc, #152]	; (80088b4 <__d2b+0xb4>)
 800881c:	f240 310a 	movw	r1, #778	; 0x30a
 8008820:	f000 f9a6 	bl	8008b70 <__assert_func>
 8008824:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800882c:	bb35      	cbnz	r5, 800887c <__d2b+0x7c>
 800882e:	2e00      	cmp	r6, #0
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	d028      	beq.n	8008886 <__d2b+0x86>
 8008834:	4668      	mov	r0, sp
 8008836:	9600      	str	r6, [sp, #0]
 8008838:	f7ff fd82 	bl	8008340 <__lo0bits>
 800883c:	9900      	ldr	r1, [sp, #0]
 800883e:	b300      	cbz	r0, 8008882 <__d2b+0x82>
 8008840:	9a01      	ldr	r2, [sp, #4]
 8008842:	f1c0 0320 	rsb	r3, r0, #32
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	430b      	orrs	r3, r1
 800884c:	40c2      	lsrs	r2, r0
 800884e:	6163      	str	r3, [r4, #20]
 8008850:	9201      	str	r2, [sp, #4]
 8008852:	9b01      	ldr	r3, [sp, #4]
 8008854:	61a3      	str	r3, [r4, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	bf14      	ite	ne
 800885a:	2202      	movne	r2, #2
 800885c:	2201      	moveq	r2, #1
 800885e:	6122      	str	r2, [r4, #16]
 8008860:	b1d5      	cbz	r5, 8008898 <__d2b+0x98>
 8008862:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008866:	4405      	add	r5, r0
 8008868:	f8c9 5000 	str.w	r5, [r9]
 800886c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008870:	f8c8 0000 	str.w	r0, [r8]
 8008874:	4620      	mov	r0, r4
 8008876:	b003      	add	sp, #12
 8008878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800887c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008880:	e7d5      	b.n	800882e <__d2b+0x2e>
 8008882:	6161      	str	r1, [r4, #20]
 8008884:	e7e5      	b.n	8008852 <__d2b+0x52>
 8008886:	a801      	add	r0, sp, #4
 8008888:	f7ff fd5a 	bl	8008340 <__lo0bits>
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	6163      	str	r3, [r4, #20]
 8008890:	2201      	movs	r2, #1
 8008892:	6122      	str	r2, [r4, #16]
 8008894:	3020      	adds	r0, #32
 8008896:	e7e3      	b.n	8008860 <__d2b+0x60>
 8008898:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800889c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088a0:	f8c9 0000 	str.w	r0, [r9]
 80088a4:	6918      	ldr	r0, [r3, #16]
 80088a6:	f7ff fd2b 	bl	8008300 <__hi0bits>
 80088aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088ae:	e7df      	b.n	8008870 <__d2b+0x70>
 80088b0:	08009627 	.word	0x08009627
 80088b4:	08009698 	.word	0x08009698

080088b8 <_calloc_r>:
 80088b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ba:	fba1 2402 	umull	r2, r4, r1, r2
 80088be:	b94c      	cbnz	r4, 80088d4 <_calloc_r+0x1c>
 80088c0:	4611      	mov	r1, r2
 80088c2:	9201      	str	r2, [sp, #4]
 80088c4:	f000 f87a 	bl	80089bc <_malloc_r>
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	4605      	mov	r5, r0
 80088cc:	b930      	cbnz	r0, 80088dc <_calloc_r+0x24>
 80088ce:	4628      	mov	r0, r5
 80088d0:	b003      	add	sp, #12
 80088d2:	bd30      	pop	{r4, r5, pc}
 80088d4:	220c      	movs	r2, #12
 80088d6:	6002      	str	r2, [r0, #0]
 80088d8:	2500      	movs	r5, #0
 80088da:	e7f8      	b.n	80088ce <_calloc_r+0x16>
 80088dc:	4621      	mov	r1, r4
 80088de:	f7fd ff21 	bl	8006724 <memset>
 80088e2:	e7f4      	b.n	80088ce <_calloc_r+0x16>

080088e4 <_free_r>:
 80088e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e6:	2900      	cmp	r1, #0
 80088e8:	d044      	beq.n	8008974 <_free_r+0x90>
 80088ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ee:	9001      	str	r0, [sp, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f1a1 0404 	sub.w	r4, r1, #4
 80088f6:	bfb8      	it	lt
 80088f8:	18e4      	addlt	r4, r4, r3
 80088fa:	f000 f9bf 	bl	8008c7c <__malloc_lock>
 80088fe:	4a1e      	ldr	r2, [pc, #120]	; (8008978 <_free_r+0x94>)
 8008900:	9801      	ldr	r0, [sp, #4]
 8008902:	6813      	ldr	r3, [r2, #0]
 8008904:	b933      	cbnz	r3, 8008914 <_free_r+0x30>
 8008906:	6063      	str	r3, [r4, #4]
 8008908:	6014      	str	r4, [r2, #0]
 800890a:	b003      	add	sp, #12
 800890c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008910:	f000 b9ba 	b.w	8008c88 <__malloc_unlock>
 8008914:	42a3      	cmp	r3, r4
 8008916:	d908      	bls.n	800892a <_free_r+0x46>
 8008918:	6825      	ldr	r5, [r4, #0]
 800891a:	1961      	adds	r1, r4, r5
 800891c:	428b      	cmp	r3, r1
 800891e:	bf01      	itttt	eq
 8008920:	6819      	ldreq	r1, [r3, #0]
 8008922:	685b      	ldreq	r3, [r3, #4]
 8008924:	1949      	addeq	r1, r1, r5
 8008926:	6021      	streq	r1, [r4, #0]
 8008928:	e7ed      	b.n	8008906 <_free_r+0x22>
 800892a:	461a      	mov	r2, r3
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	b10b      	cbz	r3, 8008934 <_free_r+0x50>
 8008930:	42a3      	cmp	r3, r4
 8008932:	d9fa      	bls.n	800892a <_free_r+0x46>
 8008934:	6811      	ldr	r1, [r2, #0]
 8008936:	1855      	adds	r5, r2, r1
 8008938:	42a5      	cmp	r5, r4
 800893a:	d10b      	bne.n	8008954 <_free_r+0x70>
 800893c:	6824      	ldr	r4, [r4, #0]
 800893e:	4421      	add	r1, r4
 8008940:	1854      	adds	r4, r2, r1
 8008942:	42a3      	cmp	r3, r4
 8008944:	6011      	str	r1, [r2, #0]
 8008946:	d1e0      	bne.n	800890a <_free_r+0x26>
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	6053      	str	r3, [r2, #4]
 800894e:	4421      	add	r1, r4
 8008950:	6011      	str	r1, [r2, #0]
 8008952:	e7da      	b.n	800890a <_free_r+0x26>
 8008954:	d902      	bls.n	800895c <_free_r+0x78>
 8008956:	230c      	movs	r3, #12
 8008958:	6003      	str	r3, [r0, #0]
 800895a:	e7d6      	b.n	800890a <_free_r+0x26>
 800895c:	6825      	ldr	r5, [r4, #0]
 800895e:	1961      	adds	r1, r4, r5
 8008960:	428b      	cmp	r3, r1
 8008962:	bf04      	itt	eq
 8008964:	6819      	ldreq	r1, [r3, #0]
 8008966:	685b      	ldreq	r3, [r3, #4]
 8008968:	6063      	str	r3, [r4, #4]
 800896a:	bf04      	itt	eq
 800896c:	1949      	addeq	r1, r1, r5
 800896e:	6021      	streq	r1, [r4, #0]
 8008970:	6054      	str	r4, [r2, #4]
 8008972:	e7ca      	b.n	800890a <_free_r+0x26>
 8008974:	b003      	add	sp, #12
 8008976:	bd30      	pop	{r4, r5, pc}
 8008978:	20000474 	.word	0x20000474

0800897c <sbrk_aligned>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4e0e      	ldr	r6, [pc, #56]	; (80089b8 <sbrk_aligned+0x3c>)
 8008980:	460c      	mov	r4, r1
 8008982:	6831      	ldr	r1, [r6, #0]
 8008984:	4605      	mov	r5, r0
 8008986:	b911      	cbnz	r1, 800898e <sbrk_aligned+0x12>
 8008988:	f000 f88c 	bl	8008aa4 <_sbrk_r>
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 f887 	bl	8008aa4 <_sbrk_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d00a      	beq.n	80089b0 <sbrk_aligned+0x34>
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d007      	beq.n	80089b4 <sbrk_aligned+0x38>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f87c 	bl	8008aa4 <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d101      	bne.n	80089b4 <sbrk_aligned+0x38>
 80089b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089b4:	4620      	mov	r0, r4
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	20000478 	.word	0x20000478

080089bc <_malloc_r>:
 80089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c0:	1ccd      	adds	r5, r1, #3
 80089c2:	f025 0503 	bic.w	r5, r5, #3
 80089c6:	3508      	adds	r5, #8
 80089c8:	2d0c      	cmp	r5, #12
 80089ca:	bf38      	it	cc
 80089cc:	250c      	movcc	r5, #12
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	4607      	mov	r7, r0
 80089d2:	db01      	blt.n	80089d8 <_malloc_r+0x1c>
 80089d4:	42a9      	cmp	r1, r5
 80089d6:	d905      	bls.n	80089e4 <_malloc_r+0x28>
 80089d8:	230c      	movs	r3, #12
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	2600      	movs	r6, #0
 80089de:	4630      	mov	r0, r6
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	4e2e      	ldr	r6, [pc, #184]	; (8008aa0 <_malloc_r+0xe4>)
 80089e6:	f000 f949 	bl	8008c7c <__malloc_lock>
 80089ea:	6833      	ldr	r3, [r6, #0]
 80089ec:	461c      	mov	r4, r3
 80089ee:	bb34      	cbnz	r4, 8008a3e <_malloc_r+0x82>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4638      	mov	r0, r7
 80089f4:	f7ff ffc2 	bl	800897c <sbrk_aligned>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	4604      	mov	r4, r0
 80089fc:	d14d      	bne.n	8008a9a <_malloc_r+0xde>
 80089fe:	6834      	ldr	r4, [r6, #0]
 8008a00:	4626      	mov	r6, r4
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	d140      	bne.n	8008a88 <_malloc_r+0xcc>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	eb04 0803 	add.w	r8, r4, r3
 8008a10:	f000 f848 	bl	8008aa4 <_sbrk_r>
 8008a14:	4580      	cmp	r8, r0
 8008a16:	d13a      	bne.n	8008a8e <_malloc_r+0xd2>
 8008a18:	6821      	ldr	r1, [r4, #0]
 8008a1a:	3503      	adds	r5, #3
 8008a1c:	1a6d      	subs	r5, r5, r1
 8008a1e:	f025 0503 	bic.w	r5, r5, #3
 8008a22:	3508      	adds	r5, #8
 8008a24:	2d0c      	cmp	r5, #12
 8008a26:	bf38      	it	cc
 8008a28:	250c      	movcc	r5, #12
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f7ff ffa5 	bl	800897c <sbrk_aligned>
 8008a32:	3001      	adds	r0, #1
 8008a34:	d02b      	beq.n	8008a8e <_malloc_r+0xd2>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	442b      	add	r3, r5
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	e00e      	b.n	8008a5c <_malloc_r+0xa0>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	1b52      	subs	r2, r2, r5
 8008a42:	d41e      	bmi.n	8008a82 <_malloc_r+0xc6>
 8008a44:	2a0b      	cmp	r2, #11
 8008a46:	d916      	bls.n	8008a76 <_malloc_r+0xba>
 8008a48:	1961      	adds	r1, r4, r5
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	6025      	str	r5, [r4, #0]
 8008a4e:	bf18      	it	ne
 8008a50:	6059      	strne	r1, [r3, #4]
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	bf08      	it	eq
 8008a56:	6031      	streq	r1, [r6, #0]
 8008a58:	5162      	str	r2, [r4, r5]
 8008a5a:	604b      	str	r3, [r1, #4]
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f104 060b 	add.w	r6, r4, #11
 8008a62:	f000 f911 	bl	8008c88 <__malloc_unlock>
 8008a66:	f026 0607 	bic.w	r6, r6, #7
 8008a6a:	1d23      	adds	r3, r4, #4
 8008a6c:	1af2      	subs	r2, r6, r3
 8008a6e:	d0b6      	beq.n	80089de <_malloc_r+0x22>
 8008a70:	1b9b      	subs	r3, r3, r6
 8008a72:	50a3      	str	r3, [r4, r2]
 8008a74:	e7b3      	b.n	80089de <_malloc_r+0x22>
 8008a76:	6862      	ldr	r2, [r4, #4]
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	bf0c      	ite	eq
 8008a7c:	6032      	streq	r2, [r6, #0]
 8008a7e:	605a      	strne	r2, [r3, #4]
 8008a80:	e7ec      	b.n	8008a5c <_malloc_r+0xa0>
 8008a82:	4623      	mov	r3, r4
 8008a84:	6864      	ldr	r4, [r4, #4]
 8008a86:	e7b2      	b.n	80089ee <_malloc_r+0x32>
 8008a88:	4634      	mov	r4, r6
 8008a8a:	6876      	ldr	r6, [r6, #4]
 8008a8c:	e7b9      	b.n	8008a02 <_malloc_r+0x46>
 8008a8e:	230c      	movs	r3, #12
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	4638      	mov	r0, r7
 8008a94:	f000 f8f8 	bl	8008c88 <__malloc_unlock>
 8008a98:	e7a1      	b.n	80089de <_malloc_r+0x22>
 8008a9a:	6025      	str	r5, [r4, #0]
 8008a9c:	e7de      	b.n	8008a5c <_malloc_r+0xa0>
 8008a9e:	bf00      	nop
 8008aa0:	20000474 	.word	0x20000474

08008aa4 <_sbrk_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d06      	ldr	r5, [pc, #24]	; (8008ac0 <_sbrk_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f9 fb0a 	bl	80020c8 <_sbrk>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_sbrk_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_sbrk_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	2000047c 	.word	0x2000047c

08008ac4 <__sread>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	f000 fa3c 	bl	8008f48 <_read_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ad8:	181b      	addge	r3, r3, r0
 8008ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ade:	bfac      	ite	ge
 8008ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ae2:	81a3      	strhlt	r3, [r4, #12]
 8008ae4:	bd10      	pop	{r4, pc}

08008ae6 <__swrite>:
 8008ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	461f      	mov	r7, r3
 8008aec:	898b      	ldrh	r3, [r1, #12]
 8008aee:	05db      	lsls	r3, r3, #23
 8008af0:	4605      	mov	r5, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	4616      	mov	r6, r2
 8008af6:	d505      	bpl.n	8008b04 <__swrite+0x1e>
 8008af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afc:	2302      	movs	r3, #2
 8008afe:	2200      	movs	r2, #0
 8008b00:	f000 f898 	bl	8008c34 <_lseek_r>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	4628      	mov	r0, r5
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f000 b817 	b.w	8008b4c <_write_r>

08008b1e <__sseek>:
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	460c      	mov	r4, r1
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 f885 	bl	8008c34 <_lseek_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	bf15      	itete	ne
 8008b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strheq	r3, [r4, #12]
 8008b3c:	bf18      	it	ne
 8008b3e:	81a3      	strhne	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__sclose>:
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 b831 	b.w	8008bac <_close_r>
	...

08008b4c <_write_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d07      	ldr	r5, [pc, #28]	; (8008b6c <_write_r+0x20>)
 8008b50:	4604      	mov	r4, r0
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7f9 f868 	bl	8001c30 <_write>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_write_r+0x1e>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_write_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	2000047c 	.word	0x2000047c

08008b70 <__assert_func>:
 8008b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b72:	4614      	mov	r4, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <__assert_func+0x2c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	68d8      	ldr	r0, [r3, #12]
 8008b7e:	b14c      	cbz	r4, 8008b94 <__assert_func+0x24>
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <__assert_func+0x30>)
 8008b82:	9100      	str	r1, [sp, #0]
 8008b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b88:	4906      	ldr	r1, [pc, #24]	; (8008ba4 <__assert_func+0x34>)
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	f000 f81e 	bl	8008bcc <fiprintf>
 8008b90:	f000 faba 	bl	8009108 <abort>
 8008b94:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <__assert_func+0x38>)
 8008b96:	461c      	mov	r4, r3
 8008b98:	e7f3      	b.n	8008b82 <__assert_func+0x12>
 8008b9a:	bf00      	nop
 8008b9c:	2000000c 	.word	0x2000000c
 8008ba0:	080097f4 	.word	0x080097f4
 8008ba4:	08009801 	.word	0x08009801
 8008ba8:	0800982f 	.word	0x0800982f

08008bac <_close_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_close_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f9 f864 	bl	8001c84 <_close>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_close_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_close_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	2000047c 	.word	0x2000047c

08008bcc <fiprintf>:
 8008bcc:	b40e      	push	{r1, r2, r3}
 8008bce:	b503      	push	{r0, r1, lr}
 8008bd0:	4601      	mov	r1, r0
 8008bd2:	ab03      	add	r3, sp, #12
 8008bd4:	4805      	ldr	r0, [pc, #20]	; (8008bec <fiprintf+0x20>)
 8008bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bda:	6800      	ldr	r0, [r0, #0]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	f000 f883 	bl	8008ce8 <_vfiprintf_r>
 8008be2:	b002      	add	sp, #8
 8008be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be8:	b003      	add	sp, #12
 8008bea:	4770      	bx	lr
 8008bec:	2000000c 	.word	0x2000000c

08008bf0 <_fstat_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	; (8008c10 <_fstat_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	f7f9 f891 	bl	8001d24 <_fstat>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_fstat_r+0x1c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_fstat_r+0x1c>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	2000047c 	.word	0x2000047c

08008c14 <_isatty_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d06      	ldr	r5, [pc, #24]	; (8008c30 <_isatty_r+0x1c>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	602b      	str	r3, [r5, #0]
 8008c20:	f7f8 fff0 	bl	8001c04 <_isatty>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_isatty_r+0x1a>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_isatty_r+0x1a>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	2000047c 	.word	0x2000047c

08008c34 <_lseek_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_lseek_r+0x20>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7f9 f835 	bl	8001cb2 <_lseek>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_lseek_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_lseek_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	2000047c 	.word	0x2000047c

08008c58 <__ascii_mbtowc>:
 8008c58:	b082      	sub	sp, #8
 8008c5a:	b901      	cbnz	r1, 8008c5e <__ascii_mbtowc+0x6>
 8008c5c:	a901      	add	r1, sp, #4
 8008c5e:	b142      	cbz	r2, 8008c72 <__ascii_mbtowc+0x1a>
 8008c60:	b14b      	cbz	r3, 8008c76 <__ascii_mbtowc+0x1e>
 8008c62:	7813      	ldrb	r3, [r2, #0]
 8008c64:	600b      	str	r3, [r1, #0]
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	1e10      	subs	r0, r2, #0
 8008c6a:	bf18      	it	ne
 8008c6c:	2001      	movne	r0, #1
 8008c6e:	b002      	add	sp, #8
 8008c70:	4770      	bx	lr
 8008c72:	4610      	mov	r0, r2
 8008c74:	e7fb      	b.n	8008c6e <__ascii_mbtowc+0x16>
 8008c76:	f06f 0001 	mvn.w	r0, #1
 8008c7a:	e7f8      	b.n	8008c6e <__ascii_mbtowc+0x16>

08008c7c <__malloc_lock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_lock+0x8>)
 8008c7e:	f7ff ba1a 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	20000470 	.word	0x20000470

08008c88 <__malloc_unlock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_unlock+0x8>)
 8008c8a:	f7ff ba15 	b.w	80080b8 <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20000470 	.word	0x20000470

08008c94 <__sfputc_r>:
 8008c94:	6893      	ldr	r3, [r2, #8]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	b410      	push	{r4}
 8008c9c:	6093      	str	r3, [r2, #8]
 8008c9e:	da08      	bge.n	8008cb2 <__sfputc_r+0x1e>
 8008ca0:	6994      	ldr	r4, [r2, #24]
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	db01      	blt.n	8008caa <__sfputc_r+0x16>
 8008ca6:	290a      	cmp	r1, #10
 8008ca8:	d103      	bne.n	8008cb2 <__sfputc_r+0x1e>
 8008caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cae:	f000 b95d 	b.w	8008f6c <__swbuf_r>
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	1c58      	adds	r0, r3, #1
 8008cb6:	6010      	str	r0, [r2, #0]
 8008cb8:	7019      	strb	r1, [r3, #0]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <__sfputs_r>:
 8008cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	4614      	mov	r4, r2
 8008cca:	18d5      	adds	r5, r2, r3
 8008ccc:	42ac      	cmp	r4, r5
 8008cce:	d101      	bne.n	8008cd4 <__sfputs_r+0x12>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e007      	b.n	8008ce4 <__sfputs_r+0x22>
 8008cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ffda 	bl	8008c94 <__sfputc_r>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d1f3      	bne.n	8008ccc <__sfputs_r+0xa>
 8008ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ce8 <_vfiprintf_r>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	460d      	mov	r5, r1
 8008cee:	b09d      	sub	sp, #116	; 0x74
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	4698      	mov	r8, r3
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	b118      	cbz	r0, 8008d00 <_vfiprintf_r+0x18>
 8008cf8:	6983      	ldr	r3, [r0, #24]
 8008cfa:	b90b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x18>
 8008cfc:	f7ff f938 	bl	8007f70 <__sinit>
 8008d00:	4b89      	ldr	r3, [pc, #548]	; (8008f28 <_vfiprintf_r+0x240>)
 8008d02:	429d      	cmp	r5, r3
 8008d04:	d11b      	bne.n	8008d3e <_vfiprintf_r+0x56>
 8008d06:	6875      	ldr	r5, [r6, #4]
 8008d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0a:	07d9      	lsls	r1, r3, #31
 8008d0c:	d405      	bmi.n	8008d1a <_vfiprintf_r+0x32>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	059a      	lsls	r2, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_vfiprintf_r+0x32>
 8008d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d16:	f7ff f9ce 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	071b      	lsls	r3, r3, #28
 8008d1e:	d501      	bpl.n	8008d24 <_vfiprintf_r+0x3c>
 8008d20:	692b      	ldr	r3, [r5, #16]
 8008d22:	b9eb      	cbnz	r3, 8008d60 <_vfiprintf_r+0x78>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 f980 	bl	800902c <__swsetup_r>
 8008d2c:	b1c0      	cbz	r0, 8008d60 <_vfiprintf_r+0x78>
 8008d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d30:	07dc      	lsls	r4, r3, #31
 8008d32:	d50e      	bpl.n	8008d52 <_vfiprintf_r+0x6a>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d38:	b01d      	add	sp, #116	; 0x74
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	4b7b      	ldr	r3, [pc, #492]	; (8008f2c <_vfiprintf_r+0x244>)
 8008d40:	429d      	cmp	r5, r3
 8008d42:	d101      	bne.n	8008d48 <_vfiprintf_r+0x60>
 8008d44:	68b5      	ldr	r5, [r6, #8]
 8008d46:	e7df      	b.n	8008d08 <_vfiprintf_r+0x20>
 8008d48:	4b79      	ldr	r3, [pc, #484]	; (8008f30 <_vfiprintf_r+0x248>)
 8008d4a:	429d      	cmp	r5, r3
 8008d4c:	bf08      	it	eq
 8008d4e:	68f5      	ldreq	r5, [r6, #12]
 8008d50:	e7da      	b.n	8008d08 <_vfiprintf_r+0x20>
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	0598      	lsls	r0, r3, #22
 8008d56:	d4ed      	bmi.n	8008d34 <_vfiprintf_r+0x4c>
 8008d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d5a:	f7ff f9ad 	bl	80080b8 <__retarget_lock_release_recursive>
 8008d5e:	e7e9      	b.n	8008d34 <_vfiprintf_r+0x4c>
 8008d60:	2300      	movs	r3, #0
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	2320      	movs	r3, #32
 8008d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6e:	2330      	movs	r3, #48	; 0x30
 8008d70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f34 <_vfiprintf_r+0x24c>
 8008d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d78:	f04f 0901 	mov.w	r9, #1
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	469a      	mov	sl, r3
 8008d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d84:	b10a      	cbz	r2, 8008d8a <_vfiprintf_r+0xa2>
 8008d86:	2a25      	cmp	r2, #37	; 0x25
 8008d88:	d1f9      	bne.n	8008d7e <_vfiprintf_r+0x96>
 8008d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8e:	d00b      	beq.n	8008da8 <_vfiprintf_r+0xc0>
 8008d90:	465b      	mov	r3, fp
 8008d92:	4622      	mov	r2, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff ff93 	bl	8008cc2 <__sfputs_r>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	f000 80aa 	beq.w	8008ef6 <_vfiprintf_r+0x20e>
 8008da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da4:	445a      	add	r2, fp
 8008da6:	9209      	str	r2, [sp, #36]	; 0x24
 8008da8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 80a2 	beq.w	8008ef6 <_vfiprintf_r+0x20e>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	9307      	str	r3, [sp, #28]
 8008dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8008dca:	4654      	mov	r4, sl
 8008dcc:	2205      	movs	r2, #5
 8008dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd2:	4858      	ldr	r0, [pc, #352]	; (8008f34 <_vfiprintf_r+0x24c>)
 8008dd4:	f7f7 fa3c 	bl	8000250 <memchr>
 8008dd8:	9a04      	ldr	r2, [sp, #16]
 8008dda:	b9d8      	cbnz	r0, 8008e14 <_vfiprintf_r+0x12c>
 8008ddc:	06d1      	lsls	r1, r2, #27
 8008dde:	bf44      	itt	mi
 8008de0:	2320      	movmi	r3, #32
 8008de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de6:	0713      	lsls	r3, r2, #28
 8008de8:	bf44      	itt	mi
 8008dea:	232b      	movmi	r3, #43	; 0x2b
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	f89a 3000 	ldrb.w	r3, [sl]
 8008df4:	2b2a      	cmp	r3, #42	; 0x2a
 8008df6:	d015      	beq.n	8008e24 <_vfiprintf_r+0x13c>
 8008df8:	9a07      	ldr	r2, [sp, #28]
 8008dfa:	4654      	mov	r4, sl
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f04f 0c0a 	mov.w	ip, #10
 8008e02:	4621      	mov	r1, r4
 8008e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e08:	3b30      	subs	r3, #48	; 0x30
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	d94e      	bls.n	8008eac <_vfiprintf_r+0x1c4>
 8008e0e:	b1b0      	cbz	r0, 8008e3e <_vfiprintf_r+0x156>
 8008e10:	9207      	str	r2, [sp, #28]
 8008e12:	e014      	b.n	8008e3e <_vfiprintf_r+0x156>
 8008e14:	eba0 0308 	sub.w	r3, r0, r8
 8008e18:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	46a2      	mov	sl, r4
 8008e22:	e7d2      	b.n	8008dca <_vfiprintf_r+0xe2>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	1d19      	adds	r1, r3, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	9103      	str	r1, [sp, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bfbb      	ittet	lt
 8008e30:	425b      	neglt	r3, r3
 8008e32:	f042 0202 	orrlt.w	r2, r2, #2
 8008e36:	9307      	strge	r3, [sp, #28]
 8008e38:	9307      	strlt	r3, [sp, #28]
 8008e3a:	bfb8      	it	lt
 8008e3c:	9204      	strlt	r2, [sp, #16]
 8008e3e:	7823      	ldrb	r3, [r4, #0]
 8008e40:	2b2e      	cmp	r3, #46	; 0x2e
 8008e42:	d10c      	bne.n	8008e5e <_vfiprintf_r+0x176>
 8008e44:	7863      	ldrb	r3, [r4, #1]
 8008e46:	2b2a      	cmp	r3, #42	; 0x2a
 8008e48:	d135      	bne.n	8008eb6 <_vfiprintf_r+0x1ce>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	9203      	str	r2, [sp, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bfb8      	it	lt
 8008e56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e5a:	3402      	adds	r4, #2
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f44 <_vfiprintf_r+0x25c>
 8008e62:	7821      	ldrb	r1, [r4, #0]
 8008e64:	2203      	movs	r2, #3
 8008e66:	4650      	mov	r0, sl
 8008e68:	f7f7 f9f2 	bl	8000250 <memchr>
 8008e6c:	b140      	cbz	r0, 8008e80 <_vfiprintf_r+0x198>
 8008e6e:	2340      	movs	r3, #64	; 0x40
 8008e70:	eba0 000a 	sub.w	r0, r0, sl
 8008e74:	fa03 f000 	lsl.w	r0, r3, r0
 8008e78:	9b04      	ldr	r3, [sp, #16]
 8008e7a:	4303      	orrs	r3, r0
 8008e7c:	3401      	adds	r4, #1
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	482c      	ldr	r0, [pc, #176]	; (8008f38 <_vfiprintf_r+0x250>)
 8008e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e8a:	2206      	movs	r2, #6
 8008e8c:	f7f7 f9e0 	bl	8000250 <memchr>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d03f      	beq.n	8008f14 <_vfiprintf_r+0x22c>
 8008e94:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <_vfiprintf_r+0x254>)
 8008e96:	bb1b      	cbnz	r3, 8008ee0 <_vfiprintf_r+0x1f8>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	3307      	adds	r3, #7
 8008e9c:	f023 0307 	bic.w	r3, r3, #7
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea6:	443b      	add	r3, r7
 8008ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eaa:	e767      	b.n	8008d7c <_vfiprintf_r+0x94>
 8008eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	e7a5      	b.n	8008e02 <_vfiprintf_r+0x11a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	3401      	adds	r4, #1
 8008eba:	9305      	str	r3, [sp, #20]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	f04f 0c0a 	mov.w	ip, #10
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec8:	3a30      	subs	r2, #48	; 0x30
 8008eca:	2a09      	cmp	r2, #9
 8008ecc:	d903      	bls.n	8008ed6 <_vfiprintf_r+0x1ee>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0c5      	beq.n	8008e5e <_vfiprintf_r+0x176>
 8008ed2:	9105      	str	r1, [sp, #20]
 8008ed4:	e7c3      	b.n	8008e5e <_vfiprintf_r+0x176>
 8008ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eda:	4604      	mov	r4, r0
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7f0      	b.n	8008ec2 <_vfiprintf_r+0x1da>
 8008ee0:	ab03      	add	r3, sp, #12
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <_vfiprintf_r+0x258>)
 8008ee8:	a904      	add	r1, sp, #16
 8008eea:	4630      	mov	r0, r6
 8008eec:	f7fd fcb4 	bl	8006858 <_printf_float>
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	1c78      	adds	r0, r7, #1
 8008ef4:	d1d6      	bne.n	8008ea4 <_vfiprintf_r+0x1bc>
 8008ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef8:	07d9      	lsls	r1, r3, #31
 8008efa:	d405      	bmi.n	8008f08 <_vfiprintf_r+0x220>
 8008efc:	89ab      	ldrh	r3, [r5, #12]
 8008efe:	059a      	lsls	r2, r3, #22
 8008f00:	d402      	bmi.n	8008f08 <_vfiprintf_r+0x220>
 8008f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f04:	f7ff f8d8 	bl	80080b8 <__retarget_lock_release_recursive>
 8008f08:	89ab      	ldrh	r3, [r5, #12]
 8008f0a:	065b      	lsls	r3, r3, #25
 8008f0c:	f53f af12 	bmi.w	8008d34 <_vfiprintf_r+0x4c>
 8008f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f12:	e711      	b.n	8008d38 <_vfiprintf_r+0x50>
 8008f14:	ab03      	add	r3, sp, #12
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	462a      	mov	r2, r5
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <_vfiprintf_r+0x258>)
 8008f1c:	a904      	add	r1, sp, #16
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7fd ff26 	bl	8006d70 <_printf_i>
 8008f24:	e7e4      	b.n	8008ef0 <_vfiprintf_r+0x208>
 8008f26:	bf00      	nop
 8008f28:	08009658 	.word	0x08009658
 8008f2c:	08009678 	.word	0x08009678
 8008f30:	08009638 	.word	0x08009638
 8008f34:	0800983a 	.word	0x0800983a
 8008f38:	08009844 	.word	0x08009844
 8008f3c:	08006859 	.word	0x08006859
 8008f40:	08008cc3 	.word	0x08008cc3
 8008f44:	08009840 	.word	0x08009840

08008f48 <_read_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d07      	ldr	r5, [pc, #28]	; (8008f68 <_read_r+0x20>)
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	4608      	mov	r0, r1
 8008f50:	4611      	mov	r1, r2
 8008f52:	2200      	movs	r2, #0
 8008f54:	602a      	str	r2, [r5, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	f7f8 febc 	bl	8001cd4 <_read>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_read_r+0x1e>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_read_r+0x1e>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	2000047c 	.word	0x2000047c

08008f6c <__swbuf_r>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	460e      	mov	r6, r1
 8008f70:	4614      	mov	r4, r2
 8008f72:	4605      	mov	r5, r0
 8008f74:	b118      	cbz	r0, 8008f7e <__swbuf_r+0x12>
 8008f76:	6983      	ldr	r3, [r0, #24]
 8008f78:	b90b      	cbnz	r3, 8008f7e <__swbuf_r+0x12>
 8008f7a:	f7fe fff9 	bl	8007f70 <__sinit>
 8008f7e:	4b21      	ldr	r3, [pc, #132]	; (8009004 <__swbuf_r+0x98>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	d12b      	bne.n	8008fdc <__swbuf_r+0x70>
 8008f84:	686c      	ldr	r4, [r5, #4]
 8008f86:	69a3      	ldr	r3, [r4, #24]
 8008f88:	60a3      	str	r3, [r4, #8]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	071a      	lsls	r2, r3, #28
 8008f8e:	d52f      	bpl.n	8008ff0 <__swbuf_r+0x84>
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	b36b      	cbz	r3, 8008ff0 <__swbuf_r+0x84>
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	6820      	ldr	r0, [r4, #0]
 8008f98:	1ac0      	subs	r0, r0, r3
 8008f9a:	6963      	ldr	r3, [r4, #20]
 8008f9c:	b2f6      	uxtb	r6, r6
 8008f9e:	4283      	cmp	r3, r0
 8008fa0:	4637      	mov	r7, r6
 8008fa2:	dc04      	bgt.n	8008fae <__swbuf_r+0x42>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7fe ff4e 	bl	8007e48 <_fflush_r>
 8008fac:	bb30      	cbnz	r0, 8008ffc <__swbuf_r+0x90>
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	60a3      	str	r3, [r4, #8]
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	6022      	str	r2, [r4, #0]
 8008fba:	701e      	strb	r6, [r3, #0]
 8008fbc:	6963      	ldr	r3, [r4, #20]
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	4283      	cmp	r3, r0
 8008fc2:	d004      	beq.n	8008fce <__swbuf_r+0x62>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d506      	bpl.n	8008fd8 <__swbuf_r+0x6c>
 8008fca:	2e0a      	cmp	r6, #10
 8008fcc:	d104      	bne.n	8008fd8 <__swbuf_r+0x6c>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7fe ff39 	bl	8007e48 <_fflush_r>
 8008fd6:	b988      	cbnz	r0, 8008ffc <__swbuf_r+0x90>
 8008fd8:	4638      	mov	r0, r7
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <__swbuf_r+0x9c>)
 8008fde:	429c      	cmp	r4, r3
 8008fe0:	d101      	bne.n	8008fe6 <__swbuf_r+0x7a>
 8008fe2:	68ac      	ldr	r4, [r5, #8]
 8008fe4:	e7cf      	b.n	8008f86 <__swbuf_r+0x1a>
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <__swbuf_r+0xa0>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	bf08      	it	eq
 8008fec:	68ec      	ldreq	r4, [r5, #12]
 8008fee:	e7ca      	b.n	8008f86 <__swbuf_r+0x1a>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f81a 	bl	800902c <__swsetup_r>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d0cb      	beq.n	8008f94 <__swbuf_r+0x28>
 8008ffc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009000:	e7ea      	b.n	8008fd8 <__swbuf_r+0x6c>
 8009002:	bf00      	nop
 8009004:	08009658 	.word	0x08009658
 8009008:	08009678 	.word	0x08009678
 800900c:	08009638 	.word	0x08009638

08009010 <__ascii_wctomb>:
 8009010:	b149      	cbz	r1, 8009026 <__ascii_wctomb+0x16>
 8009012:	2aff      	cmp	r2, #255	; 0xff
 8009014:	bf85      	ittet	hi
 8009016:	238a      	movhi	r3, #138	; 0x8a
 8009018:	6003      	strhi	r3, [r0, #0]
 800901a:	700a      	strbls	r2, [r1, #0]
 800901c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009020:	bf98      	it	ls
 8009022:	2001      	movls	r0, #1
 8009024:	4770      	bx	lr
 8009026:	4608      	mov	r0, r1
 8009028:	4770      	bx	lr
	...

0800902c <__swsetup_r>:
 800902c:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <__swsetup_r+0xcc>)
 800902e:	b570      	push	{r4, r5, r6, lr}
 8009030:	681d      	ldr	r5, [r3, #0]
 8009032:	4606      	mov	r6, r0
 8009034:	460c      	mov	r4, r1
 8009036:	b125      	cbz	r5, 8009042 <__swsetup_r+0x16>
 8009038:	69ab      	ldr	r3, [r5, #24]
 800903a:	b913      	cbnz	r3, 8009042 <__swsetup_r+0x16>
 800903c:	4628      	mov	r0, r5
 800903e:	f7fe ff97 	bl	8007f70 <__sinit>
 8009042:	4b2e      	ldr	r3, [pc, #184]	; (80090fc <__swsetup_r+0xd0>)
 8009044:	429c      	cmp	r4, r3
 8009046:	d10f      	bne.n	8009068 <__swsetup_r+0x3c>
 8009048:	686c      	ldr	r4, [r5, #4]
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009050:	0719      	lsls	r1, r3, #28
 8009052:	d42c      	bmi.n	80090ae <__swsetup_r+0x82>
 8009054:	06dd      	lsls	r5, r3, #27
 8009056:	d411      	bmi.n	800907c <__swsetup_r+0x50>
 8009058:	2309      	movs	r3, #9
 800905a:	6033      	str	r3, [r6, #0]
 800905c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009066:	e03e      	b.n	80090e6 <__swsetup_r+0xba>
 8009068:	4b25      	ldr	r3, [pc, #148]	; (8009100 <__swsetup_r+0xd4>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <__swsetup_r+0x46>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7eb      	b.n	800904a <__swsetup_r+0x1e>
 8009072:	4b24      	ldr	r3, [pc, #144]	; (8009104 <__swsetup_r+0xd8>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7e6      	b.n	800904a <__swsetup_r+0x1e>
 800907c:	0758      	lsls	r0, r3, #29
 800907e:	d512      	bpl.n	80090a6 <__swsetup_r+0x7a>
 8009080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009082:	b141      	cbz	r1, 8009096 <__swsetup_r+0x6a>
 8009084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009088:	4299      	cmp	r1, r3
 800908a:	d002      	beq.n	8009092 <__swsetup_r+0x66>
 800908c:	4630      	mov	r0, r6
 800908e:	f7ff fc29 	bl	80088e4 <_free_r>
 8009092:	2300      	movs	r3, #0
 8009094:	6363      	str	r3, [r4, #52]	; 0x34
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	2300      	movs	r3, #0
 80090a0:	6063      	str	r3, [r4, #4]
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	f043 0308 	orr.w	r3, r3, #8
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	b94b      	cbnz	r3, 80090c6 <__swsetup_r+0x9a>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090bc:	d003      	beq.n	80090c6 <__swsetup_r+0x9a>
 80090be:	4621      	mov	r1, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7ff f81f 	bl	8008104 <__smakebuf_r>
 80090c6:	89a0      	ldrh	r0, [r4, #12]
 80090c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090cc:	f010 0301 	ands.w	r3, r0, #1
 80090d0:	d00a      	beq.n	80090e8 <__swsetup_r+0xbc>
 80090d2:	2300      	movs	r3, #0
 80090d4:	60a3      	str	r3, [r4, #8]
 80090d6:	6963      	ldr	r3, [r4, #20]
 80090d8:	425b      	negs	r3, r3
 80090da:	61a3      	str	r3, [r4, #24]
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	b943      	cbnz	r3, 80090f2 <__swsetup_r+0xc6>
 80090e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090e4:	d1ba      	bne.n	800905c <__swsetup_r+0x30>
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	0781      	lsls	r1, r0, #30
 80090ea:	bf58      	it	pl
 80090ec:	6963      	ldrpl	r3, [r4, #20]
 80090ee:	60a3      	str	r3, [r4, #8]
 80090f0:	e7f4      	b.n	80090dc <__swsetup_r+0xb0>
 80090f2:	2000      	movs	r0, #0
 80090f4:	e7f7      	b.n	80090e6 <__swsetup_r+0xba>
 80090f6:	bf00      	nop
 80090f8:	2000000c 	.word	0x2000000c
 80090fc:	08009658 	.word	0x08009658
 8009100:	08009678 	.word	0x08009678
 8009104:	08009638 	.word	0x08009638

08009108 <abort>:
 8009108:	b508      	push	{r3, lr}
 800910a:	2006      	movs	r0, #6
 800910c:	f000 f82c 	bl	8009168 <raise>
 8009110:	2001      	movs	r0, #1
 8009112:	f000 f9ad 	bl	8009470 <_exit>

08009116 <_raise_r>:
 8009116:	291f      	cmp	r1, #31
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4604      	mov	r4, r0
 800911c:	460d      	mov	r5, r1
 800911e:	d904      	bls.n	800912a <_raise_r+0x14>
 8009120:	2316      	movs	r3, #22
 8009122:	6003      	str	r3, [r0, #0]
 8009124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800912c:	b112      	cbz	r2, 8009134 <_raise_r+0x1e>
 800912e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009132:	b94b      	cbnz	r3, 8009148 <_raise_r+0x32>
 8009134:	4620      	mov	r0, r4
 8009136:	f000 f831 	bl	800919c <_getpid_r>
 800913a:	462a      	mov	r2, r5
 800913c:	4601      	mov	r1, r0
 800913e:	4620      	mov	r0, r4
 8009140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009144:	f000 b818 	b.w	8009178 <_kill_r>
 8009148:	2b01      	cmp	r3, #1
 800914a:	d00a      	beq.n	8009162 <_raise_r+0x4c>
 800914c:	1c59      	adds	r1, r3, #1
 800914e:	d103      	bne.n	8009158 <_raise_r+0x42>
 8009150:	2316      	movs	r3, #22
 8009152:	6003      	str	r3, [r0, #0]
 8009154:	2001      	movs	r0, #1
 8009156:	e7e7      	b.n	8009128 <_raise_r+0x12>
 8009158:	2400      	movs	r4, #0
 800915a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800915e:	4628      	mov	r0, r5
 8009160:	4798      	blx	r3
 8009162:	2000      	movs	r0, #0
 8009164:	e7e0      	b.n	8009128 <_raise_r+0x12>
	...

08009168 <raise>:
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <raise+0xc>)
 800916a:	4601      	mov	r1, r0
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f7ff bfd2 	b.w	8009116 <_raise_r>
 8009172:	bf00      	nop
 8009174:	2000000c 	.word	0x2000000c

08009178 <_kill_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d07      	ldr	r5, [pc, #28]	; (8009198 <_kill_r+0x20>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	f000 f96b 	bl	8009460 <_kill>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d102      	bne.n	8009194 <_kill_r+0x1c>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	b103      	cbz	r3, 8009194 <_kill_r+0x1c>
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	bd38      	pop	{r3, r4, r5, pc}
 8009196:	bf00      	nop
 8009198:	2000047c 	.word	0x2000047c

0800919c <_getpid_r>:
 800919c:	f000 b958 	b.w	8009450 <_getpid>

080091a0 <floorf>:
 80091a0:	ee10 3a10 	vmov	r3, s0
 80091a4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80091a8:	3a7f      	subs	r2, #127	; 0x7f
 80091aa:	2a16      	cmp	r2, #22
 80091ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091b0:	dc2a      	bgt.n	8009208 <floorf+0x68>
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	da11      	bge.n	80091da <floorf+0x3a>
 80091b6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009218 <floorf+0x78>
 80091ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80091be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80091c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c6:	dd05      	ble.n	80091d4 <floorf+0x34>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da23      	bge.n	8009214 <floorf+0x74>
 80091cc:	4a13      	ldr	r2, [pc, #76]	; (800921c <floorf+0x7c>)
 80091ce:	2900      	cmp	r1, #0
 80091d0:	bf18      	it	ne
 80091d2:	4613      	movne	r3, r2
 80091d4:	ee00 3a10 	vmov	s0, r3
 80091d8:	4770      	bx	lr
 80091da:	4911      	ldr	r1, [pc, #68]	; (8009220 <floorf+0x80>)
 80091dc:	4111      	asrs	r1, r2
 80091de:	420b      	tst	r3, r1
 80091e0:	d0fa      	beq.n	80091d8 <floorf+0x38>
 80091e2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009218 <floorf+0x78>
 80091e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80091ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80091ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f2:	ddef      	ble.n	80091d4 <floorf+0x34>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bfbe      	ittt	lt
 80091f8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80091fc:	fa40 f202 	asrlt.w	r2, r0, r2
 8009200:	189b      	addlt	r3, r3, r2
 8009202:	ea23 0301 	bic.w	r3, r3, r1
 8009206:	e7e5      	b.n	80091d4 <floorf+0x34>
 8009208:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800920c:	d3e4      	bcc.n	80091d8 <floorf+0x38>
 800920e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009212:	4770      	bx	lr
 8009214:	2300      	movs	r3, #0
 8009216:	e7dd      	b.n	80091d4 <floorf+0x34>
 8009218:	7149f2ca 	.word	0x7149f2ca
 800921c:	bf800000 	.word	0xbf800000
 8009220:	007fffff 	.word	0x007fffff

08009224 <fmaxf>:
 8009224:	b508      	push	{r3, lr}
 8009226:	ed2d 8b02 	vpush	{d8}
 800922a:	eeb0 8a40 	vmov.f32	s16, s0
 800922e:	eef0 8a60 	vmov.f32	s17, s1
 8009232:	f000 f82d 	bl	8009290 <__fpclassifyf>
 8009236:	b148      	cbz	r0, 800924c <fmaxf+0x28>
 8009238:	eeb0 0a68 	vmov.f32	s0, s17
 800923c:	f000 f828 	bl	8009290 <__fpclassifyf>
 8009240:	b130      	cbz	r0, 8009250 <fmaxf+0x2c>
 8009242:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924a:	dc01      	bgt.n	8009250 <fmaxf+0x2c>
 800924c:	eeb0 8a68 	vmov.f32	s16, s17
 8009250:	eeb0 0a48 	vmov.f32	s0, s16
 8009254:	ecbd 8b02 	vpop	{d8}
 8009258:	bd08      	pop	{r3, pc}

0800925a <fminf>:
 800925a:	b508      	push	{r3, lr}
 800925c:	ed2d 8b02 	vpush	{d8}
 8009260:	eeb0 8a40 	vmov.f32	s16, s0
 8009264:	eef0 8a60 	vmov.f32	s17, s1
 8009268:	f000 f812 	bl	8009290 <__fpclassifyf>
 800926c:	b148      	cbz	r0, 8009282 <fminf+0x28>
 800926e:	eeb0 0a68 	vmov.f32	s0, s17
 8009272:	f000 f80d 	bl	8009290 <__fpclassifyf>
 8009276:	b130      	cbz	r0, 8009286 <fminf+0x2c>
 8009278:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800927c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009280:	d401      	bmi.n	8009286 <fminf+0x2c>
 8009282:	eeb0 8a68 	vmov.f32	s16, s17
 8009286:	eeb0 0a48 	vmov.f32	s0, s16
 800928a:	ecbd 8b02 	vpop	{d8}
 800928e:	bd08      	pop	{r3, pc}

08009290 <__fpclassifyf>:
 8009290:	ee10 3a10 	vmov	r3, s0
 8009294:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009298:	d00d      	beq.n	80092b6 <__fpclassifyf+0x26>
 800929a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800929e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80092a2:	d30a      	bcc.n	80092ba <__fpclassifyf+0x2a>
 80092a4:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <__fpclassifyf+0x34>)
 80092a6:	1e42      	subs	r2, r0, #1
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d908      	bls.n	80092be <__fpclassifyf+0x2e>
 80092ac:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80092b0:	4258      	negs	r0, r3
 80092b2:	4158      	adcs	r0, r3
 80092b4:	4770      	bx	lr
 80092b6:	2002      	movs	r0, #2
 80092b8:	4770      	bx	lr
 80092ba:	2004      	movs	r0, #4
 80092bc:	4770      	bx	lr
 80092be:	2003      	movs	r0, #3
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	007ffffe 	.word	0x007ffffe

080092c8 <fmodf>:
 80092c8:	b508      	push	{r3, lr}
 80092ca:	ed2d 8b02 	vpush	{d8}
 80092ce:	eef0 8a40 	vmov.f32	s17, s0
 80092d2:	eeb0 8a60 	vmov.f32	s16, s1
 80092d6:	f000 f835 	bl	8009344 <__ieee754_fmodf>
 80092da:	eef4 8a48 	vcmp.f32	s17, s16
 80092de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e2:	d60c      	bvs.n	80092fe <fmodf+0x36>
 80092e4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009304 <fmodf+0x3c>
 80092e8:	eeb4 8a68 	vcmp.f32	s16, s17
 80092ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f0:	d105      	bne.n	80092fe <fmodf+0x36>
 80092f2:	f7fd f9ed 	bl	80066d0 <__errno>
 80092f6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80092fa:	2321      	movs	r3, #33	; 0x21
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	ecbd 8b02 	vpop	{d8}
 8009302:	bd08      	pop	{r3, pc}
 8009304:	00000000 	.word	0x00000000

08009308 <sqrtf>:
 8009308:	b508      	push	{r3, lr}
 800930a:	ed2d 8b02 	vpush	{d8}
 800930e:	eeb0 8a40 	vmov.f32	s16, s0
 8009312:	f000 f899 	bl	8009448 <__ieee754_sqrtf>
 8009316:	eeb4 8a48 	vcmp.f32	s16, s16
 800931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931e:	d60c      	bvs.n	800933a <sqrtf+0x32>
 8009320:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009340 <sqrtf+0x38>
 8009324:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932c:	d505      	bpl.n	800933a <sqrtf+0x32>
 800932e:	f7fd f9cf 	bl	80066d0 <__errno>
 8009332:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009336:	2321      	movs	r3, #33	; 0x21
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	ecbd 8b02 	vpop	{d8}
 800933e:	bd08      	pop	{r3, pc}
 8009340:	00000000 	.word	0x00000000

08009344 <__ieee754_fmodf>:
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	ee10 5a90 	vmov	r5, s1
 800934a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800934e:	d009      	beq.n	8009364 <__ieee754_fmodf+0x20>
 8009350:	ee10 2a10 	vmov	r2, s0
 8009354:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009358:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800935c:	da02      	bge.n	8009364 <__ieee754_fmodf+0x20>
 800935e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009362:	dd04      	ble.n	800936e <__ieee754_fmodf+0x2a>
 8009364:	ee60 0a20 	vmul.f32	s1, s0, s1
 8009368:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800936c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800936e:	42a3      	cmp	r3, r4
 8009370:	dbfc      	blt.n	800936c <__ieee754_fmodf+0x28>
 8009372:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8009376:	d105      	bne.n	8009384 <__ieee754_fmodf+0x40>
 8009378:	4b32      	ldr	r3, [pc, #200]	; (8009444 <__ieee754_fmodf+0x100>)
 800937a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800937e:	ed93 0a00 	vldr	s0, [r3]
 8009382:	e7f3      	b.n	800936c <__ieee754_fmodf+0x28>
 8009384:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8009388:	d13f      	bne.n	800940a <__ieee754_fmodf+0xc6>
 800938a:	0219      	lsls	r1, r3, #8
 800938c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009390:	2900      	cmp	r1, #0
 8009392:	dc37      	bgt.n	8009404 <__ieee754_fmodf+0xc0>
 8009394:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8009398:	d13d      	bne.n	8009416 <__ieee754_fmodf+0xd2>
 800939a:	0227      	lsls	r7, r4, #8
 800939c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80093a0:	2f00      	cmp	r7, #0
 80093a2:	da35      	bge.n	8009410 <__ieee754_fmodf+0xcc>
 80093a4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80093a8:	bfbb      	ittet	lt
 80093aa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80093ae:	1a12      	sublt	r2, r2, r0
 80093b0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80093b4:	4093      	lsllt	r3, r2
 80093b6:	bfa8      	it	ge
 80093b8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80093bc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80093c0:	bfb5      	itete	lt
 80093c2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80093c6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80093ca:	1a52      	sublt	r2, r2, r1
 80093cc:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80093d0:	bfb8      	it	lt
 80093d2:	4094      	lsllt	r4, r2
 80093d4:	1a40      	subs	r0, r0, r1
 80093d6:	1b1a      	subs	r2, r3, r4
 80093d8:	bb00      	cbnz	r0, 800941c <__ieee754_fmodf+0xd8>
 80093da:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80093de:	bf38      	it	cc
 80093e0:	4613      	movcc	r3, r2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0c8      	beq.n	8009378 <__ieee754_fmodf+0x34>
 80093e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093ea:	db1f      	blt.n	800942c <__ieee754_fmodf+0xe8>
 80093ec:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80093f0:	db1f      	blt.n	8009432 <__ieee754_fmodf+0xee>
 80093f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80093f6:	317f      	adds	r1, #127	; 0x7f
 80093f8:	4333      	orrs	r3, r6
 80093fa:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80093fe:	ee00 3a10 	vmov	s0, r3
 8009402:	e7b3      	b.n	800936c <__ieee754_fmodf+0x28>
 8009404:	3801      	subs	r0, #1
 8009406:	0049      	lsls	r1, r1, #1
 8009408:	e7c2      	b.n	8009390 <__ieee754_fmodf+0x4c>
 800940a:	15d8      	asrs	r0, r3, #23
 800940c:	387f      	subs	r0, #127	; 0x7f
 800940e:	e7c1      	b.n	8009394 <__ieee754_fmodf+0x50>
 8009410:	3901      	subs	r1, #1
 8009412:	007f      	lsls	r7, r7, #1
 8009414:	e7c4      	b.n	80093a0 <__ieee754_fmodf+0x5c>
 8009416:	15e1      	asrs	r1, r4, #23
 8009418:	397f      	subs	r1, #127	; 0x7f
 800941a:	e7c3      	b.n	80093a4 <__ieee754_fmodf+0x60>
 800941c:	2a00      	cmp	r2, #0
 800941e:	da02      	bge.n	8009426 <__ieee754_fmodf+0xe2>
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	3801      	subs	r0, #1
 8009424:	e7d7      	b.n	80093d6 <__ieee754_fmodf+0x92>
 8009426:	d0a7      	beq.n	8009378 <__ieee754_fmodf+0x34>
 8009428:	0053      	lsls	r3, r2, #1
 800942a:	e7fa      	b.n	8009422 <__ieee754_fmodf+0xde>
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	3901      	subs	r1, #1
 8009430:	e7d9      	b.n	80093e6 <__ieee754_fmodf+0xa2>
 8009432:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8009436:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800943a:	3182      	adds	r1, #130	; 0x82
 800943c:	410b      	asrs	r3, r1
 800943e:	4333      	orrs	r3, r6
 8009440:	e7dd      	b.n	80093fe <__ieee754_fmodf+0xba>
 8009442:	bf00      	nop
 8009444:	0800994c 	.word	0x0800994c

08009448 <__ieee754_sqrtf>:
 8009448:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800944c:	4770      	bx	lr
	...

08009450 <_getpid>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <_getpid+0xc>)
 8009452:	2258      	movs	r2, #88	; 0x58
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800945a:	4770      	bx	lr
 800945c:	2000047c 	.word	0x2000047c

08009460 <_kill>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <_kill+0xc>)
 8009462:	2258      	movs	r2, #88	; 0x58
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800946a:	4770      	bx	lr
 800946c:	2000047c 	.word	0x2000047c

08009470 <_exit>:
 8009470:	e7fe      	b.n	8009470 <_exit>
	...

08009474 <_init>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr

08009480 <_fini>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr
