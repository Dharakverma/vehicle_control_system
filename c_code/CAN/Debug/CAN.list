
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009354  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009558  08009558  00019558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099bc  080099bc  00020348  2**0
                  CONTENTS
  4 .ARM          00000008  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c4  080099c4  00020348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  080099cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000348  08009d14  00020348  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08009d14  00020680  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001529b  00000000  00000000  00020376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002824  00000000  00000000  00035611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00037e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00038e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050f1  00000000  00000000  00039d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148cb  00000000  00000000  0003ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107253  00000000  00000000  000536d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  0015a978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0015fbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0015fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000348 	.word	0x20000348
 800021c:	00000000 	.word	0x00000000
 8000220:	0800953c 	.word	0x0800953c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000034c 	.word	0x2000034c
 800023c:	0800953c 	.word	0x0800953c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <look1_iflf_binlxpw>:
/* Real-time model */
static RT_MODEL_controller_T controller_M_;
RT_MODEL_controller_T *const controller_M = &controller_M_;
real32_T look1_iflf_binlxpw(real32_T u0, const real32_T bp0[], const real32_T
  table[], uint32_T maxIndex)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80005fe:	60b8      	str	r0, [r7, #8]
 8000600:	6079      	str	r1, [r7, #4]
 8000602:	603a      	str	r2, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	ed97 7a03 	vldr	s14, [r7, #12]
 800060e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d816      	bhi.n	8000646 <look1_iflf_binlxpw+0x52>
    iLeft = 0U;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	ed97 7a03 	vldr	s14, [r7, #12]
 8000626:	ee77 6a67 	vsub.f32	s13, s14, s15
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	3304      	adds	r3, #4
 800062e:	ed93 7a00 	vldr	s14, [r3]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8000644:	e073      	b.n	800072e <look1_iflf_binlxpw+0x13a>
  } else if (u0 < bp0[maxIndex]) {
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4413      	add	r3, r2
 800064e:	edd3 7a00 	vldr	s15, [r3]
 8000652:	ed97 7a03 	vldr	s14, [r7, #12]
 8000656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065e:	d541      	bpl.n	80006e4 <look1_iflf_binlxpw+0xf0>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
    iLeft = 0U;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
    iRght = maxIndex;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U) {
 800066e:	e016      	b.n	800069e <look1_iflf_binlxpw+0xaa>
      if (u0 < bp0[bpIdx]) {
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	4413      	add	r3, r2
 8000678:	edd3 7a00 	vldr	s15, [r3]
 800067c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000688:	d502      	bpl.n	8000690 <look1_iflf_binlxpw+0x9c>
        iRght = bpIdx;
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	e001      	b.n	8000694 <look1_iflf_binlxpw+0xa0>
      } else {
        iLeft = bpIdx;
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	623b      	str	r3, [r7, #32]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000694:	69ba      	ldr	r2, [r7, #24]
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	4413      	add	r3, r2
 800069a:	085b      	lsrs	r3, r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d8e3      	bhi.n	8000670 <look1_iflf_binlxpw+0x7c>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	3301      	adds	r3, #1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	4413      	add	r3, r2
 80006c6:	ed93 7a00 	vldr	s14, [r3]
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	4413      	add	r3, r2
 80006d2:	edd3 7a00 	vldr	s15, [r3]
 80006d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80006e2:	e024      	b.n	800072e <look1_iflf_binlxpw+0x13a>
  } else {
    iLeft = maxIndex - 1U;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	623b      	str	r3, [r7, #32]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80006f0:	4413      	add	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	4413      	add	r3, r2
 80006f8:	edd3 7a00 	vldr	s15, [r3]
 80006fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000700:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	ed93 7a00 	vldr	s14, [r3]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	4413      	add	r3, r2
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800072a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  yL_0d0 = table[iLeft];
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	617b      	str	r3, [r7, #20]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	3301      	adds	r3, #1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	ed93 7a00 	vldr	s14, [r3]
 8000748:	edd7 7a05 	vldr	s15, [r7, #20]
 800074c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000750:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000758:	edd7 7a05 	vldr	s15, [r7, #20]
 800075c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000760:	eeb0 0a67 	vmov.f32	s0, s15
 8000764:	372c      	adds	r7, #44	; 0x2c
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <controller_step>:

/* Model step function */
void controller_step(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
  /* Chart: '<S3>/Chart' incorporates:
   *  Delay: '<S3>/Delay'
   *  Delay: '<S3>/Delay1'
   *  Delay: '<S3>/Delay2'
   */
  if (controller_DW.is_active_c3_governor_lib == 0U) {
 8000776:	4b97      	ldr	r3, [pc, #604]	; (80009d4 <controller_step+0x264>)
 8000778:	7c1b      	ldrb	r3, [r3, #16]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10f      	bne.n	800079e <controller_step+0x2e>
    controller_DW.is_active_c3_governor_lib = 1U;
 800077e:	4b95      	ldr	r3, [pc, #596]	; (80009d4 <controller_step+0x264>)
 8000780:	2201      	movs	r2, #1
 8000782:	741a      	strb	r2, [r3, #16]
    controller_DW.is_c3_governor_lib = controlle_IN_Initialize_outputs;
 8000784:	4b93      	ldr	r3, [pc, #588]	; (80009d4 <controller_step+0x264>)
 8000786:	2201      	movs	r2, #1
 8000788:	731a      	strb	r2, [r3, #12]
    controller_B.GOV_e_miCmd = CMD_INIT;
 800078a:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <controller_step+0x268>)
 800078c:	2200      	movs	r2, #0
 800078e:	725a      	strb	r2, [r3, #9]
    controller_B.GOV_e_diCmd = DI_CMD_INIT;
 8000790:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <controller_step+0x268>)
 8000792:	2200      	movs	r2, #0
 8000794:	729a      	strb	r2, [r3, #10]
    controller_DW.motorStartCount = 0U;
 8000796:	4b8f      	ldr	r3, [pc, #572]	; (80009d4 <controller_step+0x264>)
 8000798:	2200      	movs	r2, #0
 800079a:	809a      	strh	r2, [r3, #4]
 800079c:	e0e5      	b.n	800096a <controller_step+0x1fa>
  } else {
    switch (controller_DW.is_c3_governor_lib) {
 800079e:	4b8d      	ldr	r3, [pc, #564]	; (80009d4 <controller_step+0x264>)
 80007a0:	7b1b      	ldrb	r3, [r3, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	f200 80bf 	bhi.w	8000928 <controller_step+0x1b8>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <controller_step+0x40>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	080007d5 	.word	0x080007d5
 80007b8:	0800080f 	.word	0x0800080f
 80007bc:	08000827 	.word	0x08000827
     case controlle_IN_Initialize_outputs:
      controller_B.GOV_e_diCmd = DI_CMD_INIT;
 80007c0:	4b85      	ldr	r3, [pc, #532]	; (80009d8 <controller_step+0x268>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	729a      	strb	r2, [r3, #10]
      controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 80007c6:	4b83      	ldr	r3, [pc, #524]	; (80009d4 <controller_step+0x264>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	731a      	strb	r2, [r3, #12]
      controller_DW.is_STARTUP = controller_IN_HV_startup;
 80007cc:	4b81      	ldr	r3, [pc, #516]	; (80009d4 <controller_step+0x264>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	735a      	strb	r2, [r3, #13]
      break;
 80007d2:	e0ca      	b.n	800096a <controller_step+0x1fa>

     case controller_IN_RUNNING:
      if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 80007d4:	4b7f      	ldr	r3, [pc, #508]	; (80009d4 <controller_step+0x264>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d109      	bne.n	80007f0 <controller_step+0x80>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 80007dc:	4b7d      	ldr	r3, [pc, #500]	; (80009d4 <controller_step+0x264>)
 80007de:	2203      	movs	r2, #3
 80007e0:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_HV_run_error;
 80007e2:	4b7c      	ldr	r3, [pc, #496]	; (80009d4 <controller_step+0x264>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 80007e8:	4b7b      	ldr	r3, [pc, #492]	; (80009d8 <controller_step+0x268>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	729a      	strb	r2, [r3, #10]
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 80007ee:	e0bb      	b.n	8000968 <controller_step+0x1f8>
      } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 80007f0:	4b78      	ldr	r3, [pc, #480]	; (80009d4 <controller_step+0x264>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	f040 80b7 	bne.w	8000968 <controller_step+0x1f8>
        controller_DW.is_c3_governor_lib = controller_IN_RUNNING_ERROR;
 80007fa:	4b76      	ldr	r3, [pc, #472]	; (80009d4 <controller_step+0x264>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	731a      	strb	r2, [r3, #12]
        controller_DW.is_RUNNING_ERROR = controller_IN_Motor_run_error;
 8000800:	4b74      	ldr	r3, [pc, #464]	; (80009d4 <controller_step+0x264>)
 8000802:	2202      	movs	r2, #2
 8000804:	73da      	strb	r2, [r3, #15]
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <controller_step+0x268>)
 8000808:	2202      	movs	r2, #2
 800080a:	729a      	strb	r2, [r3, #10]
      break;
 800080c:	e0ac      	b.n	8000968 <controller_step+0x1f8>

     case controller_IN_RUNNING_ERROR:
      if (controller_DW.is_RUNNING_ERROR == controller_IN_HV_run_error) {
 800080e:	4b71      	ldr	r3, [pc, #452]	; (80009d4 <controller_step+0x264>)
 8000810:	7bdb      	ldrb	r3, [r3, #15]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d103      	bne.n	800081e <controller_step+0xae>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 8000816:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <controller_step+0x268>)
 8000818:	2202      	movs	r2, #2
 800081a:	729a      	strb	r2, [r3, #10]
      } else {
        /* case IN_Motor_run_error: */
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
      }
      break;
 800081c:	e0a5      	b.n	800096a <controller_step+0x1fa>
        controller_B.GOV_e_diCmd = SYSTEM_ERROR;
 800081e:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <controller_step+0x268>)
 8000820:	2202      	movs	r2, #2
 8000822:	729a      	strb	r2, [r3, #10]
      break;
 8000824:	e0a1      	b.n	800096a <controller_step+0x1fa>

     case controller_IN_STARTUP:
      {
        if (controller_DW.Delay_DSTATE_f == ERR_STARTUP) {
 8000826:	4b6b      	ldr	r3, [pc, #428]	; (80009d4 <controller_step+0x264>)
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	2b08      	cmp	r3, #8
 800082c:	d109      	bne.n	8000842 <controller_step+0xd2>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800082e:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <controller_step+0x264>)
 8000830:	2200      	movs	r2, #0
 8000832:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000834:	4b67      	ldr	r3, [pc, #412]	; (80009d4 <controller_step+0x264>)
 8000836:	2205      	movs	r2, #5
 8000838:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = controller_IN_HV_startup_error;
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <controller_step+0x264>)
 800083c:	2203      	movs	r2, #3
 800083e:	739a      	strb	r2, [r3, #14]
            }
            break;
          }
        }
      }
      break;
 8000840:	e093      	b.n	800096a <controller_step+0x1fa>
        } else if (controller_DW.Delay2_DSTATE == DI_ERROR) {
 8000842:	4b64      	ldr	r3, [pc, #400]	; (80009d4 <controller_step+0x264>)
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d109      	bne.n	800085e <controller_step+0xee>
          controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800084a:	4b62      	ldr	r3, [pc, #392]	; (80009d4 <controller_step+0x264>)
 800084c:	2200      	movs	r2, #0
 800084e:	735a      	strb	r2, [r3, #13]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <controller_step+0x264>)
 8000852:	2205      	movs	r2, #5
 8000854:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP_ERROR = contro_IN_DriverInterface_Error;
 8000856:	4b5f      	ldr	r3, [pc, #380]	; (80009d4 <controller_step+0x264>)
 8000858:	2201      	movs	r2, #1
 800085a:	739a      	strb	r2, [r3, #14]
      break;
 800085c:	e085      	b.n	800096a <controller_step+0x1fa>
        } else if (controller_DW.Delay1_DSTATE == MI_STS_ERROR) {
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <controller_step+0x264>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b05      	cmp	r3, #5
 8000864:	d11a      	bne.n	800089c <controller_step+0x12c>
          if (controller_DW.motorStartCount >= 5) {
 8000866:	4b5b      	ldr	r3, [pc, #364]	; (80009d4 <controller_step+0x264>)
 8000868:	889b      	ldrh	r3, [r3, #4]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d90c      	bls.n	8000888 <controller_step+0x118>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800086e:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <controller_step+0x264>)
 8000870:	2200      	movs	r2, #0
 8000872:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 8000874:	4b57      	ldr	r3, [pc, #348]	; (80009d4 <controller_step+0x264>)
 8000876:	2205      	movs	r2, #5
 8000878:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Motor_faulted;
 800087a:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <controller_step+0x264>)
 800087c:	2204      	movs	r2, #4
 800087e:	739a      	strb	r2, [r3, #14]
            controller_B.GOV_e_miCmd = CMD_SHUTDOWN;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <controller_step+0x268>)
 8000882:	2203      	movs	r2, #3
 8000884:	725a      	strb	r2, [r3, #9]
      break;
 8000886:	e070      	b.n	800096a <controller_step+0x1fa>
            controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 8000888:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <controller_step+0x264>)
 800088a:	2200      	movs	r2, #0
 800088c:	735a      	strb	r2, [r3, #13]
            controller_DW.is_c3_governor_lib = controller_IN_STARTUP_ERROR;
 800088e:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <controller_step+0x264>)
 8000890:	2205      	movs	r2, #5
 8000892:	731a      	strb	r2, [r3, #12]
            controller_DW.is_STARTUP_ERROR = controller_IN_Err_reset;
 8000894:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <controller_step+0x264>)
 8000896:	2202      	movs	r2, #2
 8000898:	739a      	strb	r2, [r3, #14]
      break;
 800089a:	e066      	b.n	800096a <controller_step+0x1fa>
          switch (controller_DW.is_STARTUP) {
 800089c:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <controller_step+0x264>)
 800089e:	7b5b      	ldrb	r3, [r3, #13]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d002      	beq.n	80008aa <controller_step+0x13a>
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d00f      	beq.n	80008c8 <controller_step+0x158>
 80008a8:	e02a      	b.n	8000900 <controller_step+0x190>
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <controller_step+0x264>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d134      	bne.n	800091c <controller_step+0x1ac>
                (controller_DW.Delay2_DSTATE == DRV_START_REQ)) {
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <controller_step+0x264>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
            if ((controller_DW.Delay1_DSTATE == RUNNING) &&
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d130      	bne.n	800091c <controller_step+0x1ac>
              controller_DW.is_STARTUP = controller_IN_Send_ReadyToDrive;
 80008ba:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <controller_step+0x264>)
 80008bc:	2203      	movs	r2, #3
 80008be:	735a      	strb	r2, [r3, #13]
              controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 80008c0:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <controller_step+0x268>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	729a      	strb	r2, [r3, #10]
            break;
 80008c6:	e029      	b.n	800091c <controller_step+0x1ac>
              if (controller_DW.Delay_DSTATE_f == BM_RUNNING) {
 80008c8:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <controller_step+0x264>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	d127      	bne.n	8000920 <controller_step+0x1b0>
                controller_DW.is_STARTUP = contro_IN_Command_motor_startup;
 80008d0:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <controller_step+0x264>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	735a      	strb	r2, [r3, #13]
                controller_B.GOV_e_miCmd = CMD_STARTUP;
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <controller_step+0x268>)
 80008d8:	2202      	movs	r2, #2
 80008da:	725a      	strb	r2, [r3, #9]
                tmp = controller_DW.motorStartCount + 1U;
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <controller_step+0x264>)
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
                if (controller_DW.motorStartCount + 1U > 65535U) {
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <controller_step+0x264>)
 80008e6:	889b      	ldrh	r3, [r3, #4]
 80008e8:	3301      	adds	r3, #1
 80008ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ee:	d302      	bcc.n	80008f6 <controller_step+0x186>
                  tmp = 65535U;
 80008f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f4:	60bb      	str	r3, [r7, #8]
                controller_DW.motorStartCount = (uint16_T)tmp;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <controller_step+0x264>)
 80008fc:	809a      	strh	r2, [r3, #4]
            break;
 80008fe:	e00f      	b.n	8000920 <controller_step+0x1b0>
            controller_B.GOV_e_diCmd = READY_TO_DRIVE;
 8000900:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <controller_step+0x268>)
 8000902:	2201      	movs	r2, #1
 8000904:	729a      	strb	r2, [r3, #10]
            if (controller_DW.Delay2_DSTATE == DI_RUNNING) {
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <controller_step+0x264>)
 8000908:	789b      	ldrb	r3, [r3, #2]
 800090a:	2b06      	cmp	r3, #6
 800090c:	d10a      	bne.n	8000924 <controller_step+0x1b4>
              controller_DW.is_STARTUP = controller_IN_NO_ACTIVE_CHILD;
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <controller_step+0x264>)
 8000910:	2200      	movs	r2, #0
 8000912:	735a      	strb	r2, [r3, #13]
              controller_DW.is_c3_governor_lib = controller_IN_RUNNING;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <controller_step+0x264>)
 8000916:	2202      	movs	r2, #2
 8000918:	731a      	strb	r2, [r3, #12]
            break;
 800091a:	e003      	b.n	8000924 <controller_step+0x1b4>
            break;
 800091c:	bf00      	nop
 800091e:	e024      	b.n	800096a <controller_step+0x1fa>
            break;
 8000920:	bf00      	nop
 8000922:	e022      	b.n	800096a <controller_step+0x1fa>
            break;
 8000924:	bf00      	nop
      break;
 8000926:	e020      	b.n	800096a <controller_step+0x1fa>

     default:
      /* case IN_STARTUP_ERROR: */
      switch (controller_DW.is_STARTUP_ERROR) {
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <controller_step+0x264>)
 800092a:	7b9b      	ldrb	r3, [r3, #14]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d017      	beq.n	8000960 <controller_step+0x1f0>
 8000930:	2b03      	cmp	r3, #3
 8000932:	dc17      	bgt.n	8000964 <controller_step+0x1f4>
 8000934:	2b01      	cmp	r3, #1
 8000936:	d013      	beq.n	8000960 <controller_step+0x1f0>
 8000938:	2b02      	cmp	r3, #2
 800093a:	d113      	bne.n	8000964 <controller_step+0x1f4>
       case contro_IN_DriverInterface_Error:
       case controller_IN_HV_startup_error:
        break;

       case controller_IN_Err_reset:
        if (controller_DW.Delay1_DSTATE == OFF) {
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <controller_step+0x264>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b06      	cmp	r3, #6
 8000942:	d109      	bne.n	8000958 <controller_step+0x1e8>
          controller_DW.is_STARTUP_ERROR = controller_IN_NO_ACTIVE_CHILD;
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <controller_step+0x264>)
 8000946:	2200      	movs	r2, #0
 8000948:	739a      	strb	r2, [r3, #14]
          controller_DW.is_c3_governor_lib = controller_IN_STARTUP;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <controller_step+0x264>)
 800094c:	2204      	movs	r2, #4
 800094e:	731a      	strb	r2, [r3, #12]
          controller_DW.is_STARTUP = controller_IN_HV_startup;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <controller_step+0x264>)
 8000952:	2202      	movs	r2, #2
 8000954:	735a      	strb	r2, [r3, #13]
        } else {
          controller_B.GOV_e_miCmd = ERR_RESET;
        }
        break;
 8000956:	e006      	b.n	8000966 <controller_step+0x1f6>
          controller_B.GOV_e_miCmd = ERR_RESET;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <controller_step+0x268>)
 800095a:	2204      	movs	r2, #4
 800095c:	725a      	strb	r2, [r3, #9]
        break;
 800095e:	e002      	b.n	8000966 <controller_step+0x1f6>
        break;
 8000960:	bf00      	nop
 8000962:	e002      	b.n	800096a <controller_step+0x1fa>

       default:
        /* case IN_Motor_faulted: */
        break;
 8000964:	bf00      	nop
      }
      break;
 8000966:	e000      	b.n	800096a <controller_step+0x1fa>
      break;
 8000968:	bf00      	nop

  /* Chart: '<S2>/Chart' incorporates:
   *  Delay: '<S3>/Delay2'
   *  Inport: '<Root>/DI_b_DriverButton'
   */
  if (controller_DW.temporalCounter_i1_a < 15U) {
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <controller_step+0x264>)
 800096c:	7d5b      	ldrb	r3, [r3, #21]
 800096e:	2b0e      	cmp	r3, #14
 8000970:	d805      	bhi.n	800097e <controller_step+0x20e>
    controller_DW.temporalCounter_i1_a++;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <controller_step+0x264>)
 8000974:	7d5b      	ldrb	r3, [r3, #21]
 8000976:	3301      	adds	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <controller_step+0x264>)
 800097c:	755a      	strb	r2, [r3, #21]
  }

  if (controller_DW.is_active_c3_driver_interface_l == 0U) {
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <controller_step+0x264>)
 8000980:	7d1b      	ldrb	r3, [r3, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10f      	bne.n	80009a6 <controller_step+0x236>
    controller_DW.is_active_c3_driver_interface_l = 1U;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <controller_step+0x264>)
 8000988:	2201      	movs	r2, #1
 800098a:	751a      	strb	r2, [r3, #20]
    controller_DW.is_c3_driver_interface_lib = controller_IN_INIT;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <controller_step+0x264>)
 800098e:	2203      	movs	r2, #3
 8000990:	745a      	strb	r2, [r3, #17]
    controller_DW.Delay2_DSTATE = DI_STS_INIT;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <controller_step+0x264>)
 8000994:	2201      	movs	r2, #1
 8000996:	709a      	strb	r2, [r3, #2]
    controller_B.b_ReadyToDrive = false;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <controller_step+0x268>)
 800099a:	2200      	movs	r2, #0
 800099c:	72da      	strb	r2, [r3, #11]

    /* Outport: '<Root>/DI_b_driverSpeaker' incorporates:
     *  Delay: '<S3>/Delay2'
     */
    controller_Y.DI_b_driverSpeaker = false;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <controller_step+0x26c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	711a      	strb	r2, [r3, #4]
 80009a4:	e097      	b.n	8000ad6 <controller_step+0x366>
  } else {
    switch (controller_DW.is_c3_driver_interface_lib) {
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <controller_step+0x264>)
 80009a8:	7c5b      	ldrb	r3, [r3, #17]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d07c      	beq.n	8000aa8 <controller_step+0x338>
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	f300 808a 	bgt.w	8000ac8 <controller_step+0x358>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d002      	beq.n	80009be <controller_step+0x24e>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d004      	beq.n	80009c6 <controller_step+0x256>
 80009bc:	e084      	b.n	8000ac8 <controller_step+0x358>
     case controller_IN_DI_error:
      controller_DW.Delay2_DSTATE = DI_ERROR;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <controller_step+0x264>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	709a      	strb	r2, [r3, #2]
      break;
 80009c4:	e087      	b.n	8000ad6 <controller_step+0x366>

     case controller_IN_DI_running:
      switch (controller_DW.is_DI_running) {
 80009c6:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <controller_step+0x264>)
 80009c8:	7c9b      	ldrb	r3, [r3, #18]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d008      	beq.n	80009e0 <controller_step+0x270>
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d020      	beq.n	8000a14 <controller_step+0x2a4>
 80009d2:	e04f      	b.n	8000a74 <controller_step+0x304>
 80009d4:	20000370 	.word	0x20000370
 80009d8:	20000364 	.word	0x20000364
 80009dc:	200003e0 	.word	0x200003e0
       case contr_IN_Driver_requested_start:
        controller_DW.Delay2_DSTATE = DRV_START_REQ;
 80009e0:	4bc1      	ldr	r3, [pc, #772]	; (8000ce8 <controller_step+0x578>)
 80009e2:	2205      	movs	r2, #5
 80009e4:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == READY_TO_DRIVE) {
 80009e6:	4bc1      	ldr	r3, [pc, #772]	; (8000cec <controller_step+0x57c>)
 80009e8:	7a9b      	ldrb	r3, [r3, #10]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d156      	bne.n	8000a9c <controller_step+0x32c>
          controller_DW.is_DI_running = controller_IN_Ready_to_drive;
 80009ee:	4bbe      	ldr	r3, [pc, #760]	; (8000ce8 <controller_step+0x578>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	749a      	strb	r2, [r3, #18]
          controller_B.b_ReadyToDrive = true;
 80009f4:	4bbd      	ldr	r3, [pc, #756]	; (8000cec <controller_step+0x57c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	72da      	strb	r2, [r3, #11]
          controller_DW.Delay2_DSTATE = DI_RUNNING;
 80009fa:	4bbb      	ldr	r3, [pc, #748]	; (8000ce8 <controller_step+0x578>)
 80009fc:	2206      	movs	r2, #6
 80009fe:	709a      	strb	r2, [r3, #2]
          controller_DW.is_Ready_to_drive = controller_IN_SpeakerOn_;
 8000a00:	4bb9      	ldr	r3, [pc, #740]	; (8000ce8 <controller_step+0x578>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	74da      	strb	r2, [r3, #19]
          controller_DW.temporalCounter_i1_a = 0U;
 8000a06:	4bb8      	ldr	r3, [pc, #736]	; (8000ce8 <controller_step+0x578>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	755a      	strb	r2, [r3, #21]

          /* Outport: '<Root>/DI_b_driverSpeaker' */
          controller_Y.DI_b_driverSpeaker = true;
 8000a0c:	4bb8      	ldr	r3, [pc, #736]	; (8000cf0 <controller_step+0x580>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	711a      	strb	r2, [r3, #4]
        }
        break;
 8000a12:	e043      	b.n	8000a9c <controller_step+0x32c>

       case controller_IN_Ready_to_drive:
        controller_B.b_ReadyToDrive = true;
 8000a14:	4bb5      	ldr	r3, [pc, #724]	; (8000cec <controller_step+0x57c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	72da      	strb	r2, [r3, #11]
        controller_DW.Delay2_DSTATE = DI_RUNNING;
 8000a1a:	4bb3      	ldr	r3, [pc, #716]	; (8000ce8 <controller_step+0x578>)
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	709a      	strb	r2, [r3, #2]
        if (controller_B.GOV_e_diCmd == SYSTEM_ERROR) {
 8000a20:	4bb2      	ldr	r3, [pc, #712]	; (8000cec <controller_step+0x57c>)
 8000a22:	7a9b      	ldrb	r3, [r3, #10]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d10f      	bne.n	8000a48 <controller_step+0x2d8>
          controller_DW.is_Ready_to_drive = controller_IN_NO_ACTIVE_CHILD;
 8000a28:	4baf      	ldr	r3, [pc, #700]	; (8000ce8 <controller_step+0x578>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	74da      	strb	r2, [r3, #19]
          controller_DW.is_DI_running = controller_IN_NO_ACTIVE_CHILD;
 8000a2e:	4bae      	ldr	r3, [pc, #696]	; (8000ce8 <controller_step+0x578>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	749a      	strb	r2, [r3, #18]
          controller_DW.is_c3_driver_interface_lib =
 8000a34:	4bac      	ldr	r3, [pc, #688]	; (8000ce8 <controller_step+0x578>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	745a      	strb	r2, [r3, #17]
            controller_IN_Vehicle_coasting;
          controller_B.b_ReadyToDrive = false;
 8000a3a:	4bac      	ldr	r3, [pc, #688]	; (8000cec <controller_step+0x57c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	72da      	strb	r2, [r3, #11]
          controller_DW.Delay2_DSTATE = DI_IDLE;
 8000a40:	4ba9      	ldr	r3, [pc, #676]	; (8000ce8 <controller_step+0x578>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	709a      	strb	r2, [r3, #2]

            /* Outport: '<Root>/DI_b_driverSpeaker' */
            controller_Y.DI_b_driverSpeaker = false;
          }
        }
        break;
 8000a46:	e02b      	b.n	8000aa0 <controller_step+0x330>
        } else if (controller_DW.is_Ready_to_drive == controller_IN_SpeakerOff)
 8000a48:	4ba7      	ldr	r3, [pc, #668]	; (8000ce8 <controller_step+0x578>)
 8000a4a:	7cdb      	ldrb	r3, [r3, #19]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d103      	bne.n	8000a58 <controller_step+0x2e8>
          controller_Y.DI_b_driverSpeaker = false;
 8000a50:	4ba7      	ldr	r3, [pc, #668]	; (8000cf0 <controller_step+0x580>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	711a      	strb	r2, [r3, #4]
        break;
 8000a56:	e023      	b.n	8000aa0 <controller_step+0x330>
          controller_Y.DI_b_driverSpeaker = true;
 8000a58:	4ba5      	ldr	r3, [pc, #660]	; (8000cf0 <controller_step+0x580>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	711a      	strb	r2, [r3, #4]
          if (controller_DW.temporalCounter_i1_a >= 10U) {
 8000a5e:	4ba2      	ldr	r3, [pc, #648]	; (8000ce8 <controller_step+0x578>)
 8000a60:	7d5b      	ldrb	r3, [r3, #21]
 8000a62:	2b09      	cmp	r3, #9
 8000a64:	d91c      	bls.n	8000aa0 <controller_step+0x330>
            controller_DW.is_Ready_to_drive = controller_IN_SpeakerOff;
 8000a66:	4ba0      	ldr	r3, [pc, #640]	; (8000ce8 <controller_step+0x578>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	74da      	strb	r2, [r3, #19]
            controller_Y.DI_b_driverSpeaker = false;
 8000a6c:	4ba0      	ldr	r3, [pc, #640]	; (8000cf0 <controller_step+0x580>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	711a      	strb	r2, [r3, #4]
        break;
 8000a72:	e015      	b.n	8000aa0 <controller_step+0x330>

       default:
        /* case IN_Waiting_for_driver: */
        controller_DW.Delay2_DSTATE = WAITING_FOR_DRVR;
 8000a74:	4b9c      	ldr	r3, [pc, #624]	; (8000ce8 <controller_step+0x578>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	709a      	strb	r2, [r3, #2]
        if (controller_U.DI_b_DriverButton == 1.0) {
 8000a7a:	4b9e      	ldr	r3, [pc, #632]	; (8000cf4 <controller_step+0x584>)
 8000a7c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a84:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8c:	d10a      	bne.n	8000aa4 <controller_step+0x334>
          controller_DW.is_DI_running = contr_IN_Driver_requested_start;
 8000a8e:	4b96      	ldr	r3, [pc, #600]	; (8000ce8 <controller_step+0x578>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	749a      	strb	r2, [r3, #18]
          controller_DW.Delay2_DSTATE = DRV_START_REQ;
 8000a94:	4b94      	ldr	r3, [pc, #592]	; (8000ce8 <controller_step+0x578>)
 8000a96:	2205      	movs	r2, #5
 8000a98:	709a      	strb	r2, [r3, #2]
        }
        break;
 8000a9a:	e003      	b.n	8000aa4 <controller_step+0x334>
        break;
 8000a9c:	bf00      	nop
 8000a9e:	e01a      	b.n	8000ad6 <controller_step+0x366>
        break;
 8000aa0:	bf00      	nop
 8000aa2:	e018      	b.n	8000ad6 <controller_step+0x366>
        break;
 8000aa4:	bf00      	nop
      }
      break;
 8000aa6:	e016      	b.n	8000ad6 <controller_step+0x366>

     case controller_IN_INIT:
      controller_B.b_ReadyToDrive = false;
 8000aa8:	4b90      	ldr	r3, [pc, #576]	; (8000cec <controller_step+0x57c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	72da      	strb	r2, [r3, #11]

      /* Outport: '<Root>/DI_b_driverSpeaker' */
      controller_Y.DI_b_driverSpeaker = false;
 8000aae:	4b90      	ldr	r3, [pc, #576]	; (8000cf0 <controller_step+0x580>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
      controller_DW.is_c3_driver_interface_lib = controller_IN_DI_running;
 8000ab4:	4b8c      	ldr	r3, [pc, #560]	; (8000ce8 <controller_step+0x578>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	745a      	strb	r2, [r3, #17]
      controller_DW.is_DI_running = controlle_IN_Waiting_for_driver;
 8000aba:	4b8b      	ldr	r3, [pc, #556]	; (8000ce8 <controller_step+0x578>)
 8000abc:	2203      	movs	r2, #3
 8000abe:	749a      	strb	r2, [r3, #18]
      controller_DW.Delay2_DSTATE = WAITING_FOR_DRVR;
 8000ac0:	4b89      	ldr	r3, [pc, #548]	; (8000ce8 <controller_step+0x578>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	709a      	strb	r2, [r3, #2]
      break;
 8000ac6:	e006      	b.n	8000ad6 <controller_step+0x366>

     default:
      /* case IN_Vehicle_coasting: */
      controller_B.b_ReadyToDrive = false;
 8000ac8:	4b88      	ldr	r3, [pc, #544]	; (8000cec <controller_step+0x57c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	72da      	strb	r2, [r3, #11]
      controller_DW.Delay2_DSTATE = DI_IDLE;
 8000ace:	4b86      	ldr	r3, [pc, #536]	; (8000ce8 <controller_step+0x578>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	709a      	strb	r2, [r3, #2]
      break;
 8000ad4:	bf00      	nop
   *  Product: '<S20>/Divide'
   *  RelationalOperator: '<S19>/Lower Test'
   *  RelationalOperator: '<S19>/Upper Test'
   *  Sum: '<S20>/Subtract'
   */
  if ((controller_U.DI_V_BrakePedalPos >= 0.0F) &&
 8000ad6:	4b87      	ldr	r3, [pc, #540]	; (8000cf4 <controller_step+0x584>)
 8000ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae4:	db0d      	blt.n	8000b02 <controller_step+0x392>
      (controller_U.DI_V_BrakePedalPos <= 1024.0F)) {
 8000ae6:	4b83      	ldr	r3, [pc, #524]	; (8000cf4 <controller_step+0x584>)
 8000ae8:	edd3 7a02 	vldr	s15, [r3, #8]
  if ((controller_U.DI_V_BrakePedalPos >= 0.0F) &&
 8000aec:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000cf8 <controller_step+0x588>
 8000af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	d803      	bhi.n	8000b02 <controller_step+0x392>
    rtb_Switch2 = 0.0F;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e010      	b.n	8000b24 <controller_step+0x3b4>
  } else {
    rtb_Switch2 = (controller_U.DI_V_BrakePedalPos - 1024.0F) / 1024.0F * 100.0F;
 8000b02:	4b7c      	ldr	r3, [pc, #496]	; (8000cf4 <controller_step+0x584>)
 8000b04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b08:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8000cf8 <controller_step+0x588>
 8000b0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b10:	eddf 6a79 	vldr	s13, [pc, #484]	; 8000cf8 <controller_step+0x588>
 8000b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b18:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8000cfc <controller_step+0x58c>
 8000b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b20:	edc7 7a03 	vstr	s15, [r7, #12]
   *  Gain: '<S5>/convertToAmps3'
   *  Inport: '<Root>/AMK_ActualVelocity'
   *  Inport: '<Root>/AMK_MagnetizingCurrent'
   */
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
    controller_U.AMK_MagnetizingCurrent, 0.0F);
 8000b24:	4b73      	ldr	r3, [pc, #460]	; (8000cf4 <controller_step+0x584>)
 8000b26:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
  rtb_TorqueLimit = fmaxf(0.0999984741F * (real32_T)
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b32:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000d00 <controller_step+0x590>
 8000b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3a:	eddf 0a72 	vldr	s1, [pc, #456]	; 8000d04 <controller_step+0x594>
 8000b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b42:	f008 fc75 	bl	8009430 <fmaxf>
 8000b46:	ed87 0a01 	vstr	s0, [r7, #4]
  a = fminf(controller_ConstB.Gain1, 52.0F);
 8000b4a:	4b6f      	ldr	r3, [pc, #444]	; (8000d08 <controller_step+0x598>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8000d0c <controller_step+0x59c>
 8000b54:	eeb0 0a67 	vmov.f32	s0, s15
 8000b58:	f008 fc85 	bl	8009466 <fminf>
 8000b5c:	ed87 0a00 	vstr	s0, [r7]
  rtb_TorqueLimit = fminf(fmaxf(fmaxf(sqrtf(a * a - rtb_TorqueLimit *
 8000b60:	edd7 7a00 	vldr	s15, [r7]
 8000b64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b74:	eeb0 0a67 	vmov.f32	s0, s15
 8000b78:	f008 fcac 	bl	80094d4 <sqrtf>
 8000b7c:	eef0 7a40 	vmov.f32	s15, s0
 8000b80:	eddf 0a60 	vldr	s1, [pc, #384]	; 8000d04 <controller_step+0x594>
 8000b84:	eeb0 0a67 	vmov.f32	s0, s15
 8000b88:	f008 fc52 	bl	8009430 <fmaxf>
 8000b8c:	eef0 7a40 	vmov.f32	s15, s0
    rtb_TorqueLimit), 0.0F) * 600.0F / ((real32_T)
 8000b90:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000d10 <controller_step+0x5a0>
 8000b94:	ee27 7a87 	vmul.f32	s14, s15, s14
    controller_U.AMK_ActualVelocity * 3.14159274F / 30.0F), 0.0F), 27.0F);
 8000b98:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <controller_step+0x584>)
 8000b9a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
    rtb_TorqueLimit), 0.0F) * 600.0F / ((real32_T)
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    controller_U.AMK_ActualVelocity * 3.14159274F / 30.0F), 0.0F), 27.0F);
 8000ba6:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8000d14 <controller_step+0x5a4>
 8000baa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000bae:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8000bb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
  rtb_TorqueLimit = fminf(fmaxf(fmaxf(sqrtf(a * a - rtb_TorqueLimit *
 8000bb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000bba:	eddf 0a52 	vldr	s1, [pc, #328]	; 8000d04 <controller_step+0x594>
 8000bbe:	eeb0 0a66 	vmov.f32	s0, s13
 8000bc2:	f008 fc35 	bl	8009430 <fmaxf>
 8000bc6:	eef0 7a40 	vmov.f32	s15, s0
 8000bca:	eef3 0a0b 	vmov.f32	s1, #59	; 0x41d80000  27.0
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	f008 fc48 	bl	8009466 <fminf>
 8000bd6:	ed87 0a01 	vstr	s0, [r7, #4]
   *  MinMax: '<S5>/Min'
   *  Product: '<S5>/Divide'
   *  RelationalOperator: '<S17>/Lower Test'
   *  RelationalOperator: '<S17>/Upper Test'
   */
  if (rtb_Switch2 > 0.0F) {
 8000bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	dd03      	ble.n	8000bf0 <controller_step+0x480>
    rtb_Switch2 = 0.0F;
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e04b      	b.n	8000c88 <controller_step+0x518>
  } else {
    if (!controller_B.b_ReadyToDrive) {
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <controller_step+0x57c>)
 8000bf2:	7adb      	ldrb	r3, [r3, #11]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d103      	bne.n	8000c00 <controller_step+0x490>
       */
      /* If: '<S2>/If' incorporates:
       *  Constant: '<S2>/Constant'
       *  SignalConversion generated from: '<S8>/In1'
       */
      rtb_Switch2 = 0.0F;
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e034      	b.n	8000c6a <controller_step+0x4fa>

      /* End of Outputs for SubSystem: '<S2>/If Action Subsystem' */
    } else if ((controller_U.DI_V_AccelPedalPos2 >= 0.0F) &&
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <controller_step+0x584>)
 8000c02:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	db1b      	blt.n	8000c48 <controller_step+0x4d8>
               (controller_U.DI_V_AccelPedalPos2 <= 1024.0F)) {
 8000c10:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <controller_step+0x584>)
 8000c12:	edd3 7a07 	vldr	s15, [r3, #28]
    } else if ((controller_U.DI_V_AccelPedalPos2 >= 0.0F) &&
 8000c16:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000cf8 <controller_step+0x588>
 8000c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c22:	d811      	bhi.n	8000c48 <controller_step+0x4d8>
       *  Gain: '<S12>/Gain'
       *  Inport: '<Root>/DI_V_AccelPedalPos2'
       *  Product: '<S18>/Divide'
       *  Sum: '<S18>/Subtract'
       */
      rtb_Switch2 = (controller_U.DI_V_AccelPedalPos2 - 1024.0F) / 1024.0F *
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <controller_step+0x584>)
 8000c26:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c2a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000cf8 <controller_step+0x588>
 8000c2e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000c32:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000cf8 <controller_step+0x588>
 8000c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000cfc <controller_step+0x58c>
 8000c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c42:	edc7 7a03 	vstr	s15, [r7, #12]
 8000c46:	e010      	b.n	8000c6a <controller_step+0x4fa>
       *  Gain: '<S11>/Gain'
       *  Inport: '<Root>/DI_V_AccelPedalPos1'
       *  Product: '<S16>/Divide'
       *  Sum: '<S16>/Subtract'
       */
      rtb_Switch2 = (controller_U.DI_V_AccelPedalPos1 - 1024.0F) / 1024.0F *
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <controller_step+0x584>)
 8000c4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000cf8 <controller_step+0x588>
 8000c52:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000c56:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000cf8 <controller_step+0x588>
 8000c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000cfc <controller_step+0x58c>
 8000c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c66:	edc7 7a03 	vstr	s15, [r7, #12]
        100.0F;
    }

    rtb_Switch2 = look1_iflf_binlxpw(rtb_Switch2, controller_ConstP.pooled3,
 8000c6a:	2214      	movs	r2, #20
 8000c6c:	492a      	ldr	r1, [pc, #168]	; (8000d18 <controller_step+0x5a8>)
 8000c6e:	482a      	ldr	r0, [pc, #168]	; (8000d18 <controller_step+0x5a8>)
 8000c70:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c74:	f7ff fcbe 	bl	80005f4 <look1_iflf_binlxpw>
 8000c78:	eeb0 7a40 	vmov.f32	s14, s0
      controller_ConstP.pooled3, 20U) * fminf(rtb_TorqueLimit, rtb_TorqueLimit);
 8000c7c:	edd7 7a01 	vldr	s15, [r7, #4]
    rtb_Switch2 = look1_iflf_binlxpw(rtb_Switch2, controller_ConstP.pooled3,
 8000c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c84:	edc7 7a03 	vstr	s15, [r7, #12]
   *  Inport: '<Root>/AMK_bInverterOn'
   *  Inport: '<Root>/AMK_bQuitDcOn'
   *  Inport: '<Root>/AMK_bQuitInverterOn'
   *  Inport: '<Root>/AMK_bSystemReady'
   */
  if (controller_DW.temporalCounter_i1 < 7U) {
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <controller_step+0x578>)
 8000c8a:	7adb      	ldrb	r3, [r3, #11]
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	d805      	bhi.n	8000c9c <controller_step+0x52c>
    controller_DW.temporalCounter_i1++;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <controller_step+0x578>)
 8000c92:	7adb      	ldrb	r3, [r3, #11]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <controller_step+0x578>)
 8000c9a:	72da      	strb	r2, [r3, #11]
  }

  if (controller_DW.is_active_c3_motor_interface_li == 0U) {
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <controller_step+0x578>)
 8000c9e:	7a9b      	ldrb	r3, [r3, #10]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d13b      	bne.n	8000d1c <controller_step+0x5ac>
    controller_DW.is_active_c3_motor_interface_li = 1U;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <controller_step+0x578>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	729a      	strb	r2, [r3, #10]
    controller_DW.is_c3_motor_interface_lib = contr_IN_motorOff_waitingForGov;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <controller_step+0x578>)
 8000cac:	2206      	movs	r2, #6
 8000cae:	719a      	strb	r2, [r3, #6]
    controller_B.MI_motorStatus = OFF;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <controller_step+0x57c>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	721a      	strb	r2, [r3, #8]

    /* Outport: '<Root>/AMK_bInverterOn_tx' */
    controller_Y.AMK_bInverterOn_tx = 0U;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <controller_step+0x580>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	715a      	strb	r2, [r3, #5]

    /* Outport: '<Root>/AMK_bDcOn_tx' */
    controller_Y.AMK_bDcOn_tx = 0U;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <controller_step+0x580>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	719a      	strb	r2, [r3, #6]

    /* Outport: '<Root>/AMK_bEnable' */
    controller_Y.AMK_bEnable = 0U;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <controller_step+0x580>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	71da      	strb	r2, [r3, #7]

    /* Outport: '<Root>/AMK_bErrorReset' */
    controller_Y.AMK_bErrorReset = 0U;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <controller_step+0x580>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	721a      	strb	r2, [r3, #8]

    /* Outport: '<Root>/AMK_TargetVelocity' */
    controller_Y.AMK_TargetVelocity = 0.0F;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <controller_step+0x580>)
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
    controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <controller_step+0x57c>)
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
    controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <controller_step+0x57c>)
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	e236      	b.n	8001156 <controller_step+0x9e6>
 8000ce8:	20000370 	.word	0x20000370
 8000cec:	20000364 	.word	0x20000364
 8000cf0:	200003e0 	.word	0x200003e0
 8000cf4:	20000390 	.word	0x20000390
 8000cf8:	44800000 	.word	0x44800000
 8000cfc:	42c80000 	.word	0x42c80000
 8000d00:	3dcccc00 	.word	0x3dcccc00
 8000d04:	00000000 	.word	0x00000000
 8000d08:	08009574 	.word	0x08009574
 8000d0c:	42500000 	.word	0x42500000
 8000d10:	44160000 	.word	0x44160000
 8000d14:	40490fdb 	.word	0x40490fdb
 8000d18:	08009578 	.word	0x08009578
  } else {
    switch (controller_DW.is_c3_motor_interface_lib) {
 8000d1c:	4ba9      	ldr	r3, [pc, #676]	; (8000fc4 <controller_step+0x854>)
 8000d1e:	799b      	ldrb	r3, [r3, #6]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	f200 81fa 	bhi.w	800111c <controller_step+0x9ac>
 8000d28:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <controller_step+0x5c0>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000d45 	.word	0x08000d45
 8000d34:	08000d7b 	.word	0x08000d7b
 8000d38:	08000e51 	.word	0x08000e51
 8000d3c:	08000ebf 	.word	0x08000ebf
 8000d40:	08000fdd 	.word	0x08000fdd
     case controller_IN_AMK_errorDetected:
      if (controller_B.GOV_e_miCmd == ERR_RESET) {
 8000d44:	4ba0      	ldr	r3, [pc, #640]	; (8000fc8 <controller_step+0x858>)
 8000d46:	7a5b      	ldrb	r3, [r3, #9]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	f040 8201 	bne.w	8001150 <controller_step+0x9e0>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_errorReset;
 8000d4e:	4b9d      	ldr	r3, [pc, #628]	; (8000fc4 <controller_step+0x854>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_errorReset = contr_IN_enforceSetpointsZero_p;
 8000d54:	4b9b      	ldr	r3, [pc, #620]	; (8000fc4 <controller_step+0x854>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	721a      	strb	r2, [r3, #8]

        /* Outport: '<Root>/AMK_TargetVelocity' */
        controller_Y.AMK_TargetVelocity = 0.0F;
 8000d5a:	4b9c      	ldr	r3, [pc, #624]	; (8000fcc <controller_step+0x85c>)
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
        controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000d62:	4b99      	ldr	r3, [pc, #612]	; (8000fc8 <controller_step+0x858>)
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000d6a:	4b97      	ldr	r3, [pc, #604]	; (8000fc8 <controller_step+0x858>)
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000d72:	4b96      	ldr	r3, [pc, #600]	; (8000fcc <controller_step+0x85c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	715a      	strb	r2, [r3, #5]
      }
      break;
 8000d78:	e1ea      	b.n	8001150 <controller_step+0x9e0>

     case controller_IN_AMK_errorReset:
      switch (controller_DW.is_AMK_errorReset) {
 8000d7a:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <controller_step+0x854>)
 8000d7c:	7a1b      	ldrb	r3, [r3, #8]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d026      	beq.n	8000dd0 <controller_step+0x660>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	dc35      	bgt.n	8000df2 <controller_step+0x682>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <controller_step+0x620>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d012      	beq.n	8000db4 <controller_step+0x644>
 8000d8e:	e030      	b.n	8000df2 <controller_step+0x682>
       case contr_IN_enforceSetpointsZero_p:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000d90:	4b8e      	ldr	r3, [pc, #568]	; (8000fcc <controller_step+0x85c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000d96:	4b8e      	ldr	r3, [pc, #568]	; (8000fd0 <controller_step+0x860>)
 8000d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14f      	bne.n	8000e40 <controller_step+0x6d0>
          controller_DW.is_AMK_errorReset = controller_IN_toggleEnable;
 8000da0:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <controller_step+0x854>)
 8000da2:	2203      	movs	r2, #3
 8000da4:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000da6:	4b87      	ldr	r3, [pc, #540]	; (8000fc4 <controller_step+0x854>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000dac:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <controller_step+0x85c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	71da      	strb	r2, [r3, #7]
        }
        break;
 8000db2:	e045      	b.n	8000e40 <controller_step+0x6d0>

       case controller_IN_sendReset:
        /* Outport: '<Root>/AMK_bErrorReset' */
        controller_Y.AMK_bErrorReset = 1U;
 8000db4:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <controller_step+0x85c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	721a      	strb	r2, [r3, #8]
        if (controller_DW.temporalCounter_i1 >= 3U) {
 8000dba:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <controller_step+0x854>)
 8000dbc:	7adb      	ldrb	r3, [r3, #11]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d940      	bls.n	8000e44 <controller_step+0x6d4>
          controller_DW.is_AMK_errorReset = controller_IN_toggleReset;
 8000dc2:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <controller_step+0x854>)
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <controller_step+0x85c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000dce:	e039      	b.n	8000e44 <controller_step+0x6d4>

       case controller_IN_toggleEnable:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000dd0:	4b7e      	ldr	r3, [pc, #504]	; (8000fcc <controller_step+0x85c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	71da      	strb	r2, [r3, #7]
        if (controller_DW.temporalCounter_i1 >= 3U) {
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <controller_step+0x854>)
 8000dd8:	7adb      	ldrb	r3, [r3, #11]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d934      	bls.n	8000e48 <controller_step+0x6d8>
          controller_DW.is_AMK_errorReset = controller_IN_sendReset;
 8000dde:	4b79      	ldr	r3, [pc, #484]	; (8000fc4 <controller_step+0x854>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	721a      	strb	r2, [r3, #8]
          controller_DW.temporalCounter_i1 = 0U;
 8000de4:	4b77      	ldr	r3, [pc, #476]	; (8000fc4 <controller_step+0x854>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 1U;
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <controller_step+0x85c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	721a      	strb	r2, [r3, #8]
        }
        break;
 8000df0:	e02a      	b.n	8000e48 <controller_step+0x6d8>

       default:
        /* Outport: '<Root>/AMK_bErrorReset' */
        /* case IN_toggleReset: */
        controller_Y.AMK_bErrorReset = 0U;
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <controller_step+0x85c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	721a      	strb	r2, [r3, #8]
        if (controller_U.AMK_bSystemReady) {
 8000df8:	4b75      	ldr	r3, [pc, #468]	; (8000fd0 <controller_step+0x860>)
 8000dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d024      	beq.n	8000e4c <controller_step+0x6dc>
          controller_DW.is_AMK_errorReset = controller_IN_NO_ACTIVE_CHILD;
 8000e02:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <controller_step+0x854>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	721a      	strb	r2, [r3, #8]
          controller_DW.is_c3_motor_interface_lib =
 8000e08:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <controller_step+0x854>)
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000e0e:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <controller_step+0x858>)
 8000e10:	2206      	movs	r2, #6
 8000e12:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000e14:	4b6d      	ldr	r3, [pc, #436]	; (8000fcc <controller_step+0x85c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000e1a:	4b6c      	ldr	r3, [pc, #432]	; (8000fcc <controller_step+0x85c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	719a      	strb	r2, [r3, #6]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000e20:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <controller_step+0x85c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0.0F;
 8000e26:	4b69      	ldr	r3, [pc, #420]	; (8000fcc <controller_step+0x85c>)
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
          controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000e2e:	4b66      	ldr	r3, [pc, #408]	; (8000fc8 <controller_step+0x858>)
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
          controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000e36:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <controller_step+0x858>)
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
        }
        break;
 8000e3e:	e005      	b.n	8000e4c <controller_step+0x6dc>
        break;
 8000e40:	bf00      	nop
 8000e42:	e188      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000e44:	bf00      	nop
 8000e46:	e186      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000e48:	bf00      	nop
 8000e4a:	e184      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000e4c:	bf00      	nop
      }
      break;
 8000e4e:	e182      	b.n	8001156 <controller_step+0x9e6>

     case controller_IN_AMK_running:
      if (controller_U.AMK_bError) {
 8000e50:	4b5f      	ldr	r3, [pc, #380]	; (8000fd0 <controller_step+0x860>)
 8000e52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <controller_step+0x6f8>
        controller_DW.is_c3_motor_interface_lib =
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <controller_step+0x854>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	719a      	strb	r2, [r3, #6]
          controller_IN_AMK_errorDetected;
        controller_B.MI_motorStatus = MI_STS_ERROR;
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <controller_step+0x858>)
 8000e62:	2205      	movs	r2, #5
 8000e64:	721a      	strb	r2, [r3, #8]
         */
        controller_Y.AMK_TargetVelocity = 20000.0F;
        controller_B.AMK_TorqueLimitPositiv = rtb_Switch2;
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
      }
      break;
 8000e66:	e176      	b.n	8001156 <controller_step+0x9e6>
      } else if (controller_B.GOV_e_miCmd == CMD_SHUTDOWN) {
 8000e68:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <controller_step+0x858>)
 8000e6a:	7a5b      	ldrb	r3, [r3, #9]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d118      	bne.n	8000ea2 <controller_step+0x732>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_shutdown;
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <controller_step+0x854>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_shutdown = control_IN_enforceSetpointsZero;
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <controller_step+0x854>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	725a      	strb	r2, [r3, #9]
        controller_B.MI_motorStatus = SHUTDOWN;
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <controller_step+0x858>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	721a      	strb	r2, [r3, #8]
        controller_Y.AMK_TargetVelocity = 0.0F;
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <controller_step+0x85c>)
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
        controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <controller_step+0x858>)
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <controller_step+0x858>)
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <controller_step+0x85c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	715a      	strb	r2, [r3, #5]
      break;
 8000ea0:	e159      	b.n	8001156 <controller_step+0x9e6>
        controller_B.MI_motorStatus = RUNNING;
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <controller_step+0x858>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	721a      	strb	r2, [r3, #8]
        controller_Y.AMK_TargetVelocity = 20000.0F;
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <controller_step+0x85c>)
 8000eaa:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <controller_step+0x864>)
 8000eac:	60da      	str	r2, [r3, #12]
        controller_B.AMK_TorqueLimitPositiv = rtb_Switch2;
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <controller_step+0x858>)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6013      	str	r3, [r2, #0]
        controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <controller_step+0x858>)
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
      break;
 8000ebc:	e14b      	b.n	8001156 <controller_step+0x9e6>

     case controller_IN_AMK_shutdown:
      switch (controller_DW.is_AMK_shutdown) {
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <controller_step+0x854>)
 8000ec0:	7a5b      	ldrb	r3, [r3, #9]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d002      	beq.n	8000ecc <controller_step+0x75c>
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d01e      	beq.n	8000f08 <controller_step+0x798>
 8000eca:	e03b      	b.n	8000f44 <controller_step+0x7d4>
       case controller_IN_commandOff:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 0U;
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <controller_step+0x85c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	71da      	strb	r2, [r3, #7]
        if (!controller_U.AMK_bQuitDcOn) {
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <controller_step+0x860>)
 8000ed4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <controller_step+0x77a>
          controller_DW.is_AMK_shutdown = controller_IN_toggleDCon;
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <controller_step+0x854>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 0U;
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <controller_step+0x85c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000ee8:	e067      	b.n	8000fba <controller_step+0x84a>
        } else if (controller_U.AMK_bError) {
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <controller_step+0x860>)
 8000eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d062      	beq.n	8000fba <controller_step+0x84a>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <controller_step+0x854>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000efa:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <controller_step+0x854>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <controller_step+0x858>)
 8000f02:	2205      	movs	r2, #5
 8000f04:	721a      	strb	r2, [r3, #8]
        break;
 8000f06:	e058      	b.n	8000fba <controller_step+0x84a>

       case control_IN_enforceSetpointsZero:
        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 0U;
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <controller_step+0x85c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	715a      	strb	r2, [r3, #5]
        if (!controller_U.AMK_bInverterOn) {
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <controller_step+0x860>)
 8000f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <controller_step+0x7b6>
          controller_DW.is_AMK_shutdown = controller_IN_commandOff;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <controller_step+0x854>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	725a      	strb	r2, [r3, #9]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <controller_step+0x85c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	71da      	strb	r2, [r3, #7]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f24:	e04b      	b.n	8000fbe <controller_step+0x84e>
        } else if (controller_U.AMK_bError) {
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <controller_step+0x860>)
 8000f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d046      	beq.n	8000fbe <controller_step+0x84e>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <controller_step+0x854>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <controller_step+0x854>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <controller_step+0x858>)
 8000f3e:	2205      	movs	r2, #5
 8000f40:	721a      	strb	r2, [r3, #8]
        break;
 8000f42:	e03c      	b.n	8000fbe <controller_step+0x84e>

       default:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        /* case IN_toggleDCon: */
        controller_Y.AMK_bDcOn_tx = 0U;
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <controller_step+0x85c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	719a      	strb	r2, [r3, #6]
        if ((!controller_U.AMK_bDcOn) && (!controller_U.AMK_bQuitDcOn)) {
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <controller_step+0x860>)
 8000f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d123      	bne.n	8000f9c <controller_step+0x82c>
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <controller_step+0x860>)
 8000f56:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11e      	bne.n	8000f9c <controller_step+0x82c>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <controller_step+0x854>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <controller_step+0x854>)
 8000f66:	2206      	movs	r2, #6
 8000f68:	719a      	strb	r2, [r3, #6]
            contr_IN_motorOff_waitingForGov;
          controller_B.MI_motorStatus = OFF;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <controller_step+0x858>)
 8000f6c:	2206      	movs	r2, #6
 8000f6e:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 0U;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <controller_step+0x85c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	715a      	strb	r2, [r3, #5]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 0U;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <controller_step+0x85c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bErrorReset' */
          controller_Y.AMK_bErrorReset = 0U;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <controller_step+0x85c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	721a      	strb	r2, [r3, #8]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0.0F;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <controller_step+0x85c>)
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
          controller_B.AMK_TorqueLimitPositiv = 0.0F;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <controller_step+0x858>)
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
          controller_B.AMK_TorqueLimitNegativ = 0.0F;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <controller_step+0x858>)
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8000f9a:	e01d      	b.n	8000fd8 <controller_step+0x868>
        } else if (controller_U.AMK_bError) {
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <controller_step+0x860>)
 8000f9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d018      	beq.n	8000fd8 <controller_step+0x868>
          controller_DW.is_AMK_shutdown = controller_IN_NO_ACTIVE_CHILD;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <controller_step+0x854>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	725a      	strb	r2, [r3, #9]
          controller_DW.is_c3_motor_interface_lib =
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <controller_step+0x854>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <controller_step+0x858>)
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	721a      	strb	r2, [r3, #8]
        break;
 8000fb8:	e00e      	b.n	8000fd8 <controller_step+0x868>
        break;
 8000fba:	bf00      	nop
 8000fbc:	e0cb      	b.n	8001156 <controller_step+0x9e6>
        break;
 8000fbe:	bf00      	nop
 8000fc0:	e0c9      	b.n	8001156 <controller_step+0x9e6>
 8000fc2:	bf00      	nop
 8000fc4:	20000370 	.word	0x20000370
 8000fc8:	20000364 	.word	0x20000364
 8000fcc:	200003e0 	.word	0x200003e0
 8000fd0:	20000390 	.word	0x20000390
 8000fd4:	469c4000 	.word	0x469c4000
        break;
 8000fd8:	bf00      	nop
      }
      break;
 8000fda:	e0bc      	b.n	8001156 <controller_step+0x9e6>

     case controller_IN_AMK_startup:
      switch (controller_DW.is_AMK_startup) {
 8000fdc:	4ba3      	ldr	r3, [pc, #652]	; (800126c <controller_step+0xafc>)
 8000fde:	79db      	ldrb	r3, [r3, #7]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d049      	beq.n	8001078 <controller_step+0x908>
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	dc76      	bgt.n	80010d6 <controller_step+0x966>
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d002      	beq.n	8000ff2 <controller_step+0x882>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d026      	beq.n	800103e <controller_step+0x8ce>
 8000ff0:	e071      	b.n	80010d6 <controller_step+0x966>
       case controller_IN_commandOn:
        /* Outport: '<Root>/AMK_bEnable' */
        controller_Y.AMK_bEnable = 1U;
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	; (8001270 <controller_step+0xb00>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	71da      	strb	r2, [r3, #7]

        /* Outport: '<Root>/AMK_bInverterOn_tx' */
        controller_Y.AMK_bInverterOn_tx = 1U;
 8000ff8:	4b9d      	ldr	r3, [pc, #628]	; (8001270 <controller_step+0xb00>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	715a      	strb	r2, [r3, #5]
        if (controller_U.AMK_bInverterOn && controller_U.AMK_bQuitInverterOn) {
 8000ffe:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <controller_step+0xb04>)
 8001000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <controller_step+0x8b0>
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <controller_step+0xb04>)
 800100a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <controller_step+0x8b0>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8001012:	4b96      	ldr	r3, [pc, #600]	; (800126c <controller_step+0xafc>)
 8001014:	2200      	movs	r2, #0
 8001016:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_running;
 8001018:	4b94      	ldr	r3, [pc, #592]	; (800126c <controller_step+0xafc>)
 800101a:	2203      	movs	r2, #3
 800101c:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 800101e:	e075      	b.n	800110c <controller_step+0x99c>
        } else if (controller_U.AMK_bError) {
 8001020:	4b94      	ldr	r3, [pc, #592]	; (8001274 <controller_step+0xb04>)
 8001022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001026:	2b00      	cmp	r3, #0
 8001028:	d070      	beq.n	800110c <controller_step+0x99c>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 800102a:	4b90      	ldr	r3, [pc, #576]	; (800126c <controller_step+0xafc>)
 800102c:	2200      	movs	r2, #0
 800102e:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 8001030:	4b8e      	ldr	r3, [pc, #568]	; (800126c <controller_step+0xafc>)
 8001032:	2201      	movs	r2, #1
 8001034:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001036:	4b90      	ldr	r3, [pc, #576]	; (8001278 <controller_step+0xb08>)
 8001038:	2205      	movs	r2, #5
 800103a:	721a      	strb	r2, [r3, #8]
        break;
 800103c:	e066      	b.n	800110c <controller_step+0x99c>

       case control_IN_enforceSetpointsZero:
        if (controller_DW.temporalCounter_i1 >= 5U) {
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <controller_step+0xafc>)
 8001040:	7adb      	ldrb	r3, [r3, #11]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d909      	bls.n	800105a <controller_step+0x8ea>
          controller_DW.is_AMK_startup = controller_IN_commandOn;
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <controller_step+0xafc>)
 8001048:	2201      	movs	r2, #1
 800104a:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bEnable' */
          controller_Y.AMK_bEnable = 1U;
 800104c:	4b88      	ldr	r3, [pc, #544]	; (8001270 <controller_step+0xb00>)
 800104e:	2201      	movs	r2, #1
 8001050:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bInverterOn_tx' */
          controller_Y.AMK_bInverterOn_tx = 1U;
 8001052:	4b87      	ldr	r3, [pc, #540]	; (8001270 <controller_step+0xb00>)
 8001054:	2201      	movs	r2, #1
 8001056:	715a      	strb	r2, [r3, #5]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 8001058:	e05a      	b.n	8001110 <controller_step+0x9a0>
        } else if (controller_U.AMK_bError) {
 800105a:	4b86      	ldr	r3, [pc, #536]	; (8001274 <controller_step+0xb04>)
 800105c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001060:	2b00      	cmp	r3, #0
 8001062:	d055      	beq.n	8001110 <controller_step+0x9a0>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 8001064:	4b81      	ldr	r3, [pc, #516]	; (800126c <controller_step+0xafc>)
 8001066:	2200      	movs	r2, #0
 8001068:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 800106a:	4b80      	ldr	r3, [pc, #512]	; (800126c <controller_step+0xafc>)
 800106c:	2201      	movs	r2, #1
 800106e:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <controller_step+0xb08>)
 8001072:	2205      	movs	r2, #5
 8001074:	721a      	strb	r2, [r3, #8]
        break;
 8001076:	e04b      	b.n	8001110 <controller_step+0x9a0>

       case controller_IN_toggleDCon:
        /* Outport: '<Root>/AMK_bDcOn_tx' */
        controller_Y.AMK_bDcOn_tx = 1U;
 8001078:	4b7d      	ldr	r3, [pc, #500]	; (8001270 <controller_step+0xb00>)
 800107a:	2201      	movs	r2, #1
 800107c:	719a      	strb	r2, [r3, #6]
        if (controller_U.AMK_bDcOn && controller_U.AMK_bQuitDcOn) {
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <controller_step+0xb04>)
 8001080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d017      	beq.n	80010b8 <controller_step+0x948>
 8001088:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <controller_step+0xb04>)
 800108a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800108e:	2b00      	cmp	r3, #0
 8001090:	d012      	beq.n	80010b8 <controller_step+0x948>
          controller_DW.is_AMK_startup = control_IN_enforceSetpointsZero;
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <controller_step+0xafc>)
 8001094:	2202      	movs	r2, #2
 8001096:	71da      	strb	r2, [r3, #7]
          controller_DW.temporalCounter_i1 = 0U;
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <controller_step+0xafc>)
 800109a:	2200      	movs	r2, #0
 800109c:	72da      	strb	r2, [r3, #11]

          /* Outport: '<Root>/AMK_TargetVelocity' */
          controller_Y.AMK_TargetVelocity = 0.0F;
 800109e:	4b74      	ldr	r3, [pc, #464]	; (8001270 <controller_step+0xb00>)
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
          controller_B.AMK_TorqueLimitPositiv = 0.0F;
 80010a6:	4b74      	ldr	r3, [pc, #464]	; (8001278 <controller_step+0xb08>)
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
          controller_B.AMK_TorqueLimitNegativ = 0.0F;
 80010ae:	4b72      	ldr	r3, [pc, #456]	; (8001278 <controller_step+0xb08>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 80010b6:	e02d      	b.n	8001114 <controller_step+0x9a4>
        } else if (controller_U.AMK_bError) {
 80010b8:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <controller_step+0xb04>)
 80010ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d028      	beq.n	8001114 <controller_step+0x9a4>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 80010c2:	4b6a      	ldr	r3, [pc, #424]	; (800126c <controller_step+0xafc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <controller_step+0xafc>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 80010ce:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <controller_step+0xb08>)
 80010d0:	2205      	movs	r2, #5
 80010d2:	721a      	strb	r2, [r3, #8]
        break;
 80010d4:	e01e      	b.n	8001114 <controller_step+0x9a4>

       default:
        /* case IN_waiting_sysReady: */
        if (controller_U.AMK_bSystemReady) {
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <controller_step+0xb04>)
 80010d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <controller_step+0x97e>
          controller_DW.is_AMK_startup = controller_IN_toggleDCon;
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <controller_step+0xafc>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	71da      	strb	r2, [r3, #7]

          /* Outport: '<Root>/AMK_bDcOn_tx' */
          controller_Y.AMK_bDcOn_tx = 1U;
 80010e6:	4b62      	ldr	r3, [pc, #392]	; (8001270 <controller_step+0xb00>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	719a      	strb	r2, [r3, #6]
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
          controller_DW.is_c3_motor_interface_lib =
            controller_IN_AMK_errorDetected;
          controller_B.MI_motorStatus = MI_STS_ERROR;
        }
        break;
 80010ec:	e014      	b.n	8001118 <controller_step+0x9a8>
        } else if (controller_U.AMK_bError) {
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <controller_step+0xb04>)
 80010f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00f      	beq.n	8001118 <controller_step+0x9a8>
          controller_DW.is_AMK_startup = controller_IN_NO_ACTIVE_CHILD;
 80010f8:	4b5c      	ldr	r3, [pc, #368]	; (800126c <controller_step+0xafc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	71da      	strb	r2, [r3, #7]
          controller_DW.is_c3_motor_interface_lib =
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <controller_step+0xafc>)
 8001100:	2201      	movs	r2, #1
 8001102:	719a      	strb	r2, [r3, #6]
          controller_B.MI_motorStatus = MI_STS_ERROR;
 8001104:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <controller_step+0xb08>)
 8001106:	2205      	movs	r2, #5
 8001108:	721a      	strb	r2, [r3, #8]
        break;
 800110a:	e005      	b.n	8001118 <controller_step+0x9a8>
        break;
 800110c:	bf00      	nop
 800110e:	e022      	b.n	8001156 <controller_step+0x9e6>
        break;
 8001110:	bf00      	nop
 8001112:	e020      	b.n	8001156 <controller_step+0x9e6>
        break;
 8001114:	bf00      	nop
 8001116:	e01e      	b.n	8001156 <controller_step+0x9e6>
        break;
 8001118:	bf00      	nop
      }
      break;
 800111a:	e01c      	b.n	8001156 <controller_step+0x9e6>

     default:
      /* Outport: '<Root>/AMK_bInverterOn_tx' */
      /* case IN_motorOff_waitingForGov: */
      controller_Y.AMK_bInverterOn_tx = 0U;
 800111c:	4b54      	ldr	r3, [pc, #336]	; (8001270 <controller_step+0xb00>)
 800111e:	2200      	movs	r2, #0
 8001120:	715a      	strb	r2, [r3, #5]

      /* Outport: '<Root>/AMK_bDcOn_tx' */
      controller_Y.AMK_bDcOn_tx = 0U;
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <controller_step+0xb00>)
 8001124:	2200      	movs	r2, #0
 8001126:	719a      	strb	r2, [r3, #6]

      /* Outport: '<Root>/AMK_bEnable' */
      controller_Y.AMK_bEnable = 0U;
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <controller_step+0xb00>)
 800112a:	2200      	movs	r2, #0
 800112c:	71da      	strb	r2, [r3, #7]

      /* Outport: '<Root>/AMK_bErrorReset' */
      controller_Y.AMK_bErrorReset = 0U;
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <controller_step+0xb00>)
 8001130:	2200      	movs	r2, #0
 8001132:	721a      	strb	r2, [r3, #8]
      if (controller_B.GOV_e_miCmd == CMD_STARTUP) {
 8001134:	4b50      	ldr	r3, [pc, #320]	; (8001278 <controller_step+0xb08>)
 8001136:	7a5b      	ldrb	r3, [r3, #9]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d10b      	bne.n	8001154 <controller_step+0x9e4>
        controller_DW.is_c3_motor_interface_lib = controller_IN_AMK_startup;
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <controller_step+0xafc>)
 800113e:	2205      	movs	r2, #5
 8001140:	719a      	strb	r2, [r3, #6]
        controller_DW.is_AMK_startup = controller_IN_waiting_sysReady;
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <controller_step+0xafc>)
 8001144:	2204      	movs	r2, #4
 8001146:	71da      	strb	r2, [r3, #7]
        controller_B.MI_motorStatus = STARTUP;
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <controller_step+0xb08>)
 800114a:	2202      	movs	r2, #2
 800114c:	721a      	strb	r2, [r3, #8]
      }
      break;
 800114e:	e001      	b.n	8001154 <controller_step+0x9e4>
      break;
 8001150:	bf00      	nop
 8001152:	e000      	b.n	8001156 <controller_step+0x9e6>
      break;
 8001154:	bf00      	nop

  /* Outport: '<Root>/AMK_TorqueLimitPositiv' incorporates:
   *  Gain: '<S4>/Gain'
   */
  controller_Y.AMK_TorqueLimitPositiv = 1000.0F *
    controller_B.AMK_TorqueLimitPositiv;
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <controller_step+0xb08>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
  controller_Y.AMK_TorqueLimitPositiv = 1000.0F *
 800115c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800127c <controller_step+0xb0c>
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <controller_step+0xb00>)
 8001166:	edc3 7a04 	vstr	s15, [r3, #16]

  /* Outport: '<Root>/AMK_TorqueLimitNegativ' incorporates:
   *  Gain: '<S4>/Gain1'
   */
  controller_Y.AMK_TorqueLimitNegativ = 1000.0F *
    controller_B.AMK_TorqueLimitNegativ;
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <controller_step+0xb08>)
 800116c:	edd3 7a01 	vldr	s15, [r3, #4]
  controller_Y.AMK_TorqueLimitNegativ = 1000.0F *
 8001170:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800127c <controller_step+0xb0c>
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <controller_step+0xb00>)
 800117a:	edc3 7a05 	vstr	s15, [r3, #20]
   *  Delay: '<S3>/Delay'
   *  Inport: '<Root>/BM_b_HVnegContactorSts'
   *  Inport: '<Root>/BM_b_HVposContactorSts'
   *  Inport: '<Root>/BM_b_prechrgContactorSts'
   */
  if (controller_DW.temporalCounter_i1_p < 7U) {
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <controller_step+0xafc>)
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b06      	cmp	r3, #6
 8001184:	d805      	bhi.n	8001192 <controller_step+0xa22>
    controller_DW.temporalCounter_i1_p++;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <controller_step+0xafc>)
 8001188:	7e1b      	ldrb	r3, [r3, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <controller_step+0xafc>)
 8001190:	761a      	strb	r2, [r3, #24]
  }

  if (controller_DW.is_active_c3_battery_monitor_li == 0U) {
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <controller_step+0xafc>)
 8001194:	7ddb      	ldrb	r3, [r3, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <controller_step+0xa3e>
    controller_DW.is_active_c3_battery_monitor_li = 1U;
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <controller_step+0xafc>)
 800119c:	2201      	movs	r2, #1
 800119e:	75da      	strb	r2, [r3, #23]
    controller_DW.is_c3_battery_monitor_lib = controller_IN_InitialState;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <controller_step+0xafc>)
 80011a2:	2208      	movs	r2, #8
 80011a4:	759a      	strb	r2, [r3, #22]
    controller_DW.Delay_DSTATE_f = BM_INIT;
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <controller_step+0xafc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	705a      	strb	r2, [r3, #1]
 80011ac:	e22a      	b.n	8001604 <controller_step+0xe94>
  } else {
    switch (controller_DW.is_c3_battery_monitor_lib) {
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <controller_step+0xafc>)
 80011b0:	7d9b      	ldrb	r3, [r3, #22]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	f200 81f3 	bhi.w	80015a0 <controller_step+0xe30>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <controller_step+0xa50>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011f1 	.word	0x080011f1
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	08001201 	.word	0x08001201
 80011cc:	08001209 	.word	0x08001209
 80011d0:	08001211 	.word	0x08001211
 80011d4:	08001219 	.word	0x08001219
 80011d8:	08001221 	.word	0x08001221
 80011dc:	08001229 	.word	0x08001229
 80011e0:	080013ef 	.word	0x080013ef
 80011e4:	0800145d 	.word	0x0800145d
 80011e8:	080014c7 	.word	0x080014c7
 80011ec:	08001539 	.word	0x08001539
     case controll_IN_ErrorAllClosedState:
      controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <controller_step+0xafc>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	705a      	strb	r2, [r3, #1]
      break;
 80011f6:	e205      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_ErrorHVPositive:
      controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <controller_step+0xafc>)
 80011fa:	220d      	movs	r2, #13
 80011fc:	705a      	strb	r2, [r3, #1]
      break;
 80011fe:	e201      	b.n	8001604 <controller_step+0xe94>

     case IN_ErrorInitializePrechargeStat:
      controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <controller_step+0xafc>)
 8001202:	2209      	movs	r2, #9
 8001204:	705a      	strb	r2, [r3, #1]
      break;
 8001206:	e1fd      	b.n	8001604 <controller_step+0xe94>

     case co_IN_ErrorPrechargeClosedState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <controller_step+0xafc>)
 800120a:	2207      	movs	r2, #7
 800120c:	705a      	strb	r2, [r3, #1]
      break;
 800120e:	e1f9      	b.n	8001604 <controller_step+0xe94>

     case controll_IN_ErrorPrechargeState:
      controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <controller_step+0xafc>)
 8001212:	220a      	movs	r2, #10
 8001214:	705a      	strb	r2, [r3, #1]
      break;
 8001216:	e1f5      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_ErrorRunningState:
      controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <controller_step+0xafc>)
 800121a:	220b      	movs	r2, #11
 800121c:	705a      	strb	r2, [r3, #1]
      break;
 800121e:	e1f1      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_ErrorStartupState:
      controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <controller_step+0xafc>)
 8001222:	2208      	movs	r2, #8
 8001224:	705a      	strb	r2, [r3, #1]
      break;
 8001226:	e1ed      	b.n	8001604 <controller_step+0xe94>

     case controller_IN_InitialState:
      controller_DW.Delay_DSTATE_f = BM_INIT;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <controller_step+0xafc>)
 800122a:	2201      	movs	r2, #1
 800122c:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <controller_step+0xb04>)
 8001230:	ed93 7b08 	vldr	d7, [r3, #32]
 8001234:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123c:	d120      	bne.n	8001280 <controller_step+0xb10>
          (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <controller_step+0xb04>)
 8001240:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001244:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d118      	bne.n	8001280 <controller_step+0xb10>
          (controller_U.BM_b_HVposContactorSts == 0.0)) {
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <controller_step+0xb04>)
 8001250:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 8001254:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d110      	bne.n	8001280 <controller_step+0xb10>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState1;
 800125e:	4b03      	ldr	r3, [pc, #12]	; (800126c <controller_step+0xafc>)
 8001260:	220d      	movs	r2, #13
 8001262:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = BM_IDLE;
 8001264:	4b01      	ldr	r3, [pc, #4]	; (800126c <controller_step+0xafc>)
 8001266:	2202      	movs	r2, #2
 8001268:	705a      	strb	r2, [r3, #1]
 800126a:	e0bf      	b.n	80013ec <controller_step+0xc7c>
 800126c:	20000370 	.word	0x20000370
 8001270:	200003e0 	.word	0x200003e0
 8001274:	20000390 	.word	0x20000390
 8001278:	20000364 	.word	0x20000364
 800127c:	447a0000 	.word	0x447a0000
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 8001280:	4bab      	ldr	r3, [pc, #684]	; (8001530 <controller_step+0xdc0>)
 8001282:	ed93 7b08 	vldr	d7, [r3, #32]
 8001286:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800128a:	eeb4 7b46 	vcmp.f64	d7, d6
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d116      	bne.n	80012c2 <controller_step+0xb52>
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 8001294:	4ba6      	ldr	r3, [pc, #664]	; (8001530 <controller_step+0xdc0>)
 8001296:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800129a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d10e      	bne.n	80012c2 <controller_step+0xb52>
                 (controller_U.BM_b_HVposContactorSts == 0.0)) {
 80012a4:	4ba2      	ldr	r3, [pc, #648]	; (8001530 <controller_step+0xdc0>)
 80012a6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 80012aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d106      	bne.n	80012c2 <controller_step+0xb52>
        controller_DW.is_c3_battery_monitor_lib =
 80012b4:	4b9f      	ldr	r3, [pc, #636]	; (8001534 <controller_step+0xdc4>)
 80012b6:	2204      	movs	r2, #4
 80012b8:	759a      	strb	r2, [r3, #22]
          co_IN_ErrorPrechargeClosedState;
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE_CLOSED;
 80012ba:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <controller_step+0xdc4>)
 80012bc:	2207      	movs	r2, #7
 80012be:	705a      	strb	r2, [r3, #1]
 80012c0:	e094      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 80012c2:	4b9b      	ldr	r3, [pc, #620]	; (8001530 <controller_step+0xdc0>)
 80012c4:	ed93 7b08 	vldr	d7, [r3, #32]
 80012c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d11a      	bne.n	800130c <controller_step+0xb9c>
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80012d6:	4b96      	ldr	r3, [pc, #600]	; (8001530 <controller_step+0xdc0>)
 80012d8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 80012dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d110      	bne.n	800130c <controller_step+0xb9c>
                 (controller_U.BM_b_HVposContactorSts == 1.0)) {
 80012ea:	4b91      	ldr	r3, [pc, #580]	; (8001530 <controller_step+0xdc0>)
 80012ec:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80012f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012f4:	eeb4 7b46 	vcmp.f64	d7, d6
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d106      	bne.n	800130c <controller_step+0xb9c>
        controller_DW.is_c3_battery_monitor_lib =
 80012fe:	4b8d      	ldr	r3, [pc, #564]	; (8001534 <controller_step+0xdc4>)
 8001300:	2201      	movs	r2, #1
 8001302:	759a      	strb	r2, [r3, #22]
          controll_IN_ErrorAllClosedState;
        controller_DW.Delay_DSTATE_f = ERR_ALL_CLOSED;
 8001304:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <controller_step+0xdc4>)
 8001306:	220c      	movs	r2, #12
 8001308:	705a      	strb	r2, [r3, #1]
 800130a:	e06f      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <controller_step+0xdc0>)
 800130e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d118      	bne.n	800134e <controller_step+0xbde>
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 800131c:	4b84      	ldr	r3, [pc, #528]	; (8001530 <controller_step+0xdc0>)
 800131e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d110      	bne.n	800134e <controller_step+0xbde>
                 (controller_U.BM_b_HVposContactorSts == 1.0)) {
 800132c:	4b80      	ldr	r3, [pc, #512]	; (8001530 <controller_step+0xdc0>)
 800132e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 0.0) &&
 8001332:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001336:	eeb4 7b46 	vcmp.f64	d7, d6
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d106      	bne.n	800134e <controller_step+0xbde>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_ErrorHVPositive;
 8001340:	4b7c      	ldr	r3, [pc, #496]	; (8001534 <controller_step+0xdc4>)
 8001342:	2202      	movs	r2, #2
 8001344:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_HV_POSITIVE;
 8001346:	4b7b      	ldr	r3, [pc, #492]	; (8001534 <controller_step+0xdc4>)
 8001348:	220d      	movs	r2, #13
 800134a:	705a      	strb	r2, [r3, #1]
 800134c:	e04e      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <controller_step+0xdc0>)
 8001350:	ed93 7b08 	vldr	d7, [r3, #32]
 8001354:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001358:	eeb4 7b46 	vcmp.f64	d7, d6
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d11b      	bne.n	800139a <controller_step+0xc2a>
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001362:	4b73      	ldr	r3, [pc, #460]	; (8001530 <controller_step+0xdc0>)
 8001364:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 8001368:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800136c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d111      	bne.n	800139a <controller_step+0xc2a>
                 (controller_U.BM_b_HVposContactorSts == 0.0)) {
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <controller_step+0xdc0>)
 8001378:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 800137c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d109      	bne.n	800139a <controller_step+0xc2a>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_PrechargeState;
 8001386:	4b6b      	ldr	r3, [pc, #428]	; (8001534 <controller_step+0xdc4>)
 8001388:	220a      	movs	r2, #10
 800138a:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <controller_step+0xdc4>)
 800138e:	2200      	movs	r2, #0
 8001390:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = PRECHARGE;
 8001392:	4b68      	ldr	r3, [pc, #416]	; (8001534 <controller_step+0xdc4>)
 8001394:	2205      	movs	r2, #5
 8001396:	705a      	strb	r2, [r3, #1]
 8001398:	e028      	b.n	80013ec <controller_step+0xc7c>
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 800139a:	4b65      	ldr	r3, [pc, #404]	; (8001530 <controller_step+0xdc0>)
 800139c:	ed93 7b08 	vldr	d7, [r3, #32]
 80013a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	f040 8121 	bne.w	80015ee <controller_step+0xe7e>
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80013ac:	4b60      	ldr	r3, [pc, #384]	; (8001530 <controller_step+0xdc0>)
 80013ae:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      } else if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80013b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013b6:	eeb4 7b46 	vcmp.f64	d7, d6
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	f040 8116 	bne.w	80015ee <controller_step+0xe7e>
                 (controller_U.BM_b_HVposContactorSts == 1.0)) {
 80013c2:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <controller_step+0xdc0>)
 80013c4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
                 (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80013c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	f040 810b 	bne.w	80015ee <controller_step+0xe7e>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <controller_step+0xdc4>)
 80013da:	220b      	movs	r2, #11
 80013dc:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <controller_step+0xdc4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <controller_step+0xdc4>)
 80013e6:	2206      	movs	r2, #6
 80013e8:	705a      	strb	r2, [r3, #1]
      }
      break;
 80013ea:	e100      	b.n	80015ee <controller_step+0xe7e>
 80013ec:	e0ff      	b.n	80015ee <controller_step+0xe7e>

     case con_IN_InitializePrechargeState:
      controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <controller_step+0xdc4>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <controller_step+0xdc0>)
 80013f6:	ed93 7b08 	vldr	d7, [r3, #32]
 80013fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013fe:	eeb4 7b46 	vcmp.f64	d7, d6
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d11d      	bne.n	8001444 <controller_step+0xcd4>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <controller_step+0xdc0>)
 800140a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800140e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001412:	eeb4 7b46 	vcmp.f64	d7, d6
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d113      	bne.n	8001444 <controller_step+0xcd4>
          (controller_U.BM_b_HVposContactorSts == 1.0)) {
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <controller_step+0xdc0>)
 800141e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001422:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001426:	eeb4 7b46 	vcmp.f64	d7, d6
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d109      	bne.n	8001444 <controller_step+0xcd4>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_PrechargeState;
 8001430:	4b40      	ldr	r3, [pc, #256]	; (8001534 <controller_step+0xdc4>)
 8001432:	220a      	movs	r2, #10
 8001434:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <controller_step+0xdc4>)
 8001438:	2200      	movs	r2, #0
 800143a:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = PRECHARGE;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <controller_step+0xdc4>)
 800143e:	2205      	movs	r2, #5
 8001440:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          IN_ErrorInitializePrechargeStat;
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
      }
      break;
 8001442:	e0d6      	b.n	80015f2 <controller_step+0xe82>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <controller_step+0xdc4>)
 8001446:	7e1b      	ldrb	r3, [r3, #24]
 8001448:	2b04      	cmp	r3, #4
 800144a:	f240 80d2 	bls.w	80015f2 <controller_step+0xe82>
        controller_DW.is_c3_battery_monitor_lib =
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <controller_step+0xdc4>)
 8001450:	2203      	movs	r2, #3
 8001452:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_INIT_PRECHARGE;
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <controller_step+0xdc4>)
 8001456:	2209      	movs	r2, #9
 8001458:	705a      	strb	r2, [r3, #1]
      break;
 800145a:	e0ca      	b.n	80015f2 <controller_step+0xe82>

     case controller_IN_PrechargeState:
      controller_DW.Delay_DSTATE_f = PRECHARGE;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <controller_step+0xdc4>)
 800145e:	2205      	movs	r2, #5
 8001460:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <controller_step+0xdc0>)
 8001464:	ed93 7b08 	vldr	d7, [r3, #32]
 8001468:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	d11d      	bne.n	80014ae <controller_step+0xd3e>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <controller_step+0xdc0>)
 8001474:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 8001478:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800147c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d113      	bne.n	80014ae <controller_step+0xd3e>
          (controller_U.BM_b_HVposContactorSts == 1.0)) {
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <controller_step+0xdc0>)
 8001488:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 800148c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001490:	eeb4 7b46 	vcmp.f64	d7, d6
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d109      	bne.n	80014ae <controller_step+0xd3e>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <controller_step+0xdc4>)
 800149c:	220b      	movs	r2, #11
 800149e:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <controller_step+0xdc4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <controller_step+0xdc4>)
 80014a8:	2206      	movs	r2, #6
 80014aa:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          controll_IN_ErrorPrechargeState;
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
      }
      break;
 80014ac:	e0a3      	b.n	80015f6 <controller_step+0xe86>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <controller_step+0xdc4>)
 80014b0:	7e1b      	ldrb	r3, [r3, #24]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	f240 809f 	bls.w	80015f6 <controller_step+0xe86>
        controller_DW.is_c3_battery_monitor_lib =
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <controller_step+0xdc4>)
 80014ba:	2205      	movs	r2, #5
 80014bc:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_PRECHARGE;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <controller_step+0xdc4>)
 80014c0:	220a      	movs	r2, #10
 80014c2:	705a      	strb	r2, [r3, #1]
      break;
 80014c4:	e097      	b.n	80015f6 <controller_step+0xe86>

     case controller_IN_RunningState:
      controller_DW.Delay_DSTATE_f = BM_RUNNING;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <controller_step+0xdc4>)
 80014c8:	2206      	movs	r2, #6
 80014ca:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <controller_step+0xdc0>)
 80014ce:	ed93 7b08 	vldr	d7, [r3, #32]
 80014d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d11d      	bne.n	8001518 <controller_step+0xda8>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <controller_step+0xdc0>)
 80014de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80014e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d113      	bne.n	8001518 <controller_step+0xda8>
          (controller_U.BM_b_HVposContactorSts == 1.0)) {
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <controller_step+0xdc0>)
 80014f2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80014f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d109      	bne.n	8001518 <controller_step+0xda8>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_RunningState;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <controller_step+0xdc4>)
 8001506:	220b      	movs	r2, #11
 8001508:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <controller_step+0xdc4>)
 800150c:	2200      	movs	r2, #0
 800150e:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_RUNNING;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <controller_step+0xdc4>)
 8001512:	2206      	movs	r2, #6
 8001514:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorRunningState;
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
      }
      break;
 8001516:	e070      	b.n	80015fa <controller_step+0xe8a>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <controller_step+0xdc4>)
 800151a:	7e1b      	ldrb	r3, [r3, #24]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d96c      	bls.n	80015fa <controller_step+0xe8a>
        controller_DW.is_c3_battery_monitor_lib =
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <controller_step+0xdc4>)
 8001522:	2206      	movs	r2, #6
 8001524:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_RUNNING;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <controller_step+0xdc4>)
 8001528:	220b      	movs	r2, #11
 800152a:	705a      	strb	r2, [r3, #1]
      break;
 800152c:	e065      	b.n	80015fa <controller_step+0xe8a>
 800152e:	bf00      	nop
 8001530:	20000390 	.word	0x20000390
 8001534:	20000370 	.word	0x20000370

     case controller_IN_StartupState:
      controller_DW.Delay_DSTATE_f = BM_STARTUP;
 8001538:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <controller_step+0xeb4>)
 800153a:	2203      	movs	r2, #3
 800153c:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <controller_step+0xeb8>)
 8001540:	ed93 7b08 	vldr	d7, [r3, #32]
 8001544:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001548:	eeb4 7b46 	vcmp.f64	d7, d6
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d11b      	bne.n	800158a <controller_step+0xe1a>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <controller_step+0xeb8>)
 8001554:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 1.0) &&
 8001558:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800155c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d111      	bne.n	800158a <controller_step+0xe1a>
          (controller_U.BM_b_HVposContactorSts == 0.0)) {
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <controller_step+0xeb8>)
 8001568:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 800156c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d109      	bne.n	800158a <controller_step+0xe1a>
        controller_DW.is_c3_battery_monitor_lib =
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <controller_step+0xeb4>)
 8001578:	2209      	movs	r2, #9
 800157a:	759a      	strb	r2, [r3, #22]
          con_IN_InitializePrechargeState;
        controller_DW.temporalCounter_i1_p = 0U;
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <controller_step+0xeb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = INIT_PRECHARGE;
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <controller_step+0xeb4>)
 8001584:	2204      	movs	r2, #4
 8001586:	705a      	strb	r2, [r3, #1]
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
        controller_DW.is_c3_battery_monitor_lib =
          controller_IN_ErrorStartupState;
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
      }
      break;
 8001588:	e039      	b.n	80015fe <controller_step+0xe8e>
      } else if (controller_DW.temporalCounter_i1_p >= 5U) {
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <controller_step+0xeb4>)
 800158c:	7e1b      	ldrb	r3, [r3, #24]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d935      	bls.n	80015fe <controller_step+0xe8e>
        controller_DW.is_c3_battery_monitor_lib =
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <controller_step+0xeb4>)
 8001594:	2207      	movs	r2, #7
 8001596:	759a      	strb	r2, [r3, #22]
        controller_DW.Delay_DSTATE_f = ERR_STARTUP;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <controller_step+0xeb4>)
 800159a:	2208      	movs	r2, #8
 800159c:	705a      	strb	r2, [r3, #1]
      break;
 800159e:	e02e      	b.n	80015fe <controller_step+0xe8e>

     default:
      /* case IN_StartupState1: */
      controller_DW.Delay_DSTATE_f = BM_IDLE;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <controller_step+0xeb4>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	705a      	strb	r2, [r3, #1]
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <controller_step+0xeb8>)
 80015a8:	ed93 7b08 	vldr	d7, [r3, #32]
 80015ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	d125      	bne.n	8001602 <controller_step+0xe92>
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <controller_step+0xeb8>)
 80015b8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
      if ((controller_U.BM_b_prechrgContactorSts == 0.0) &&
 80015bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d11b      	bne.n	8001602 <controller_step+0xe92>
          (controller_U.BM_b_HVposContactorSts == 0.0)) {
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <controller_step+0xeb8>)
 80015cc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
          (controller_U.BM_b_HVnegContactorSts == 1.0) &&
 80015d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	d113      	bne.n	8001602 <controller_step+0xe92>
        controller_DW.is_c3_battery_monitor_lib = controller_IN_StartupState;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <controller_step+0xeb4>)
 80015dc:	220c      	movs	r2, #12
 80015de:	759a      	strb	r2, [r3, #22]
        controller_DW.temporalCounter_i1_p = 0U;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <controller_step+0xeb4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	761a      	strb	r2, [r3, #24]
        controller_DW.Delay_DSTATE_f = BM_STARTUP;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <controller_step+0xeb4>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	705a      	strb	r2, [r3, #1]
      }
      break;
 80015ec:	e009      	b.n	8001602 <controller_step+0xe92>
      break;
 80015ee:	bf00      	nop
 80015f0:	e008      	b.n	8001604 <controller_step+0xe94>
      break;
 80015f2:	bf00      	nop
 80015f4:	e006      	b.n	8001604 <controller_step+0xe94>
      break;
 80015f6:	bf00      	nop
 80015f8:	e004      	b.n	8001604 <controller_step+0xe94>
      break;
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <controller_step+0xe94>
      break;
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <controller_step+0xe94>
      break;
 8001602:	bf00      	nop
   *  Constant: '<S4>/Constant1'
   *  Delay: '<S3>/Delay1'
   *  RelationalOperator: '<S4>/motorErrorActive'
   *  Switch: '<S4>/Switch1'
   */
  if (controller_B.MI_motorStatus == MI_STS_ERROR) {
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <controller_step+0xebc>)
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d103      	bne.n	8001614 <controller_step+0xea4>
    controller_DW.Delay1_DSTATE = MI_STS_ERROR;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <controller_step+0xeb4>)
 800160e:	2205      	movs	r2, #5
 8001610:	701a      	strb	r2, [r3, #0]
  } else {
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
  }

  /* End of Switch: '<S4>/Switch' */
}
 8001612:	e003      	b.n	800161c <controller_step+0xeac>
    controller_DW.Delay1_DSTATE = controller_B.MI_motorStatus;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <controller_step+0xebc>)
 8001616:	7a1a      	ldrb	r2, [r3, #8]
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <controller_step+0xeb4>)
 800161a:	701a      	strb	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000370 	.word	0x20000370
 8001628:	20000390 	.word	0x20000390
 800162c:	20000364 	.word	0x20000364

08001630 <rt_OneStep>:
 * example code indicates where these should take place relative to executing
 * the generated code step function.  Overrun behavior should be tailored to
 * your application needs.  This example simply sets an error status in the
 * real-time model and returns from rt_OneStep.
 */
void rt_OneStep(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <rt_OneStep+0x28>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <rt_OneStep+0x16>
    rtmSetErrorStatus(controller_M, "Overrun");
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <rt_OneStep+0x2c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <rt_OneStep+0x30>)
 8001642:	601a      	str	r2, [r3, #0]
    return;
 8001644:	e007      	b.n	8001656 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <rt_OneStep+0x28>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  controller_step();
 800164c:	f7ff f890 	bl	8000770 <controller_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <rt_OneStep+0x28>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200003fc 	.word	0x200003fc
 800165c:	08009570 	.word	0x08009570
 8001660:	08009558 	.word	0x08009558

08001664 <reverseBits>:


int DLC = 8;

uint32_t reverseBits(uint32_t num)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    uint32_t NO_OF_BITS = sizeof(num) * 8;
 800166c:	2320      	movs	r3, #32
 800166e:	60fb      	str	r3, [r7, #12]
    uint32_t reverse_num = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NO_OF_BITS; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e016      	b.n	80016a8 <reverseBits+0x44>
        if ((num & (1 << i)))
 800167a:	2201      	movs	r2, #1
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	461a      	mov	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <reverseBits+0x3e>
            reverse_num |= 1 << ((NO_OF_BITS - 1) - i);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	3b01      	subs	r3, #1
 8001694:	2201      	movs	r2, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	461a      	mov	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NO_OF_BITS; i++) {
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3301      	adds	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8e4      	bhi.n	800167a <reverseBits+0x16>
    }
    return reverse_num;
 80016b0:	697b      	ldr	r3, [r7, #20]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <IncomingCANMessageHandler>:
	{0x287,     &AMK1_TempIGBT,               	48,      	16}

};

//right now it checks value, will need to change it to update variables
void IncomingCANMessageHandler(uint32_t * ID, uint8_t RxData[]){
 80016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c4:	b09d      	sub	sp, #116	; 0x74
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6278      	str	r0, [r7, #36]	; 0x24
 80016ca:	6239      	str	r1, [r7, #32]
	/*This function add all RxData to a uint64 line,
	 * then get the bits we want by bit shifting 'final'
	 * according to offset and length*/
	uint32_t a = RxData[0];
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t b = RxData[1];
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3301      	adds	r3, #1
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t c = RxData[2];
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	3302      	adds	r3, #2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t d = RxData[3];
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	3303      	adds	r3, #3
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t e = RxData[4];
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	3304      	adds	r3, #4
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t f = RxData[5];
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	3305      	adds	r3, #5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t g = RxData[6];
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	3306      	adds	r3, #6
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t h = RxData[7];
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	3307      	adds	r3, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint64_t firstSegment = 0;
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint32_t secondSegment = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t finalRxData = 0;
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    //add all the unit8 arrays to a uint64 line
	firstSegment =  a << 24 | b << 16 | c << 8 | d;
 8001726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001728:	061a      	lsls	r2, r3, #24
 800172a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	431a      	orrs	r2, r3
 8001736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001738:	4313      	orrs	r3, r2
 800173a:	2200      	movs	r2, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	60fa      	str	r2, [r7, #12]
 8001740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001744:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	secondSegment = e << 24 | f << 16 | g << 8 | h;
 8001748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800174a:	061a      	lsls	r2, r3, #24
 800174c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
 8001752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	4313      	orrs	r3, r2
 8001758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800175a:	4313      	orrs	r3, r2
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
	finalRxData = firstSegment << 32 | secondSegment;
 800175e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0011      	movs	r1, r2
 800176c:	2000      	movs	r0, #0
 800176e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001770:	2200      	movs	r2, #0
 8001772:	461c      	mov	r4, r3
 8001774:	4615      	mov	r5, r2
 8001776:	ea40 0304 	orr.w	r3, r0, r4
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	ea41 0305 	orr.w	r3, r1, r5
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001786:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    for(int i = 0; i < MAX_RECEIVE_TABLE_SIZE; i++){
 800178a:	2300      	movs	r3, #0
 800178c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800178e:	e0e1      	b.n	8001954 <IncomingCANMessageHandler+0x294>

        if (RecieveMessageTable[i].ID == *ID){
 8001790:	4975      	ldr	r1, [pc, #468]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 8001792:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d158      	bne.n	800185a <IncomingCANMessageHandler+0x19a>
            //*RecieveMessageTable[i].pointerToUserVariable = CAN_MESSAGE>>(DLC*8 - RecieveMessageTable[i].offset - RecieveMessageTable[i].length) & 0xFFFFFFFFFFFFFFFF>>(64 - RecieveMessageTable[i].length);
            //bit shifting 'final' according to offset and length
        	*RecieveMessageTable[i].pointerToUserVariable = finalRxData>>(DLC*8 - RecieveMessageTable[i].offset - RecieveMessageTable[i].length) & 0xFFFFFFFFFFFFFFFF>>(64 - RecieveMessageTable[i].length);
 80017a8:	4b70      	ldr	r3, [pc, #448]	; (800196c <IncomingCANMessageHandler+0x2ac>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	00d9      	lsls	r1, r3, #3
 80017ae:	486e      	ldr	r0, [pc, #440]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 80017b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4403      	add	r3, r0
 80017bc:	3308      	adds	r3, #8
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	1ac9      	subs	r1, r1, r3
 80017c2:	4869      	ldr	r0, [pc, #420]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 80017c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4403      	add	r3, r0
 80017d0:	330a      	adds	r3, #10
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	1ac9      	subs	r1, r1, r3
 80017d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017da:	f1c1 0420 	rsb	r4, r1, #32
 80017de:	f1a1 0020 	sub.w	r0, r1, #32
 80017e2:	fa22 f801 	lsr.w	r8, r2, r1
 80017e6:	fa03 f404 	lsl.w	r4, r3, r4
 80017ea:	ea48 0804 	orr.w	r8, r8, r4
 80017ee:	fa23 f000 	lsr.w	r0, r3, r0
 80017f2:	ea48 0800 	orr.w	r8, r8, r0
 80017f6:	fa23 f901 	lsr.w	r9, r3, r1
 80017fa:	fa1f f588 	uxth.w	r5, r8
 80017fe:	495a      	ldr	r1, [pc, #360]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 8001800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	330a      	adds	r3, #10
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 8001814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181c:	f1c1 0420 	rsb	r4, r1, #32
 8001820:	f1a1 0020 	sub.w	r0, r1, #32
 8001824:	fa22 fa01 	lsr.w	sl, r2, r1
 8001828:	fa03 f404 	lsl.w	r4, r3, r4
 800182c:	ea4a 0a04 	orr.w	sl, sl, r4
 8001830:	fa23 f000 	lsr.w	r0, r3, r0
 8001834:	ea4a 0a00 	orr.w	sl, sl, r0
 8001838:	fa23 fb01 	lsr.w	fp, r3, r1
 800183c:	fa1f f18a 	uxth.w	r1, sl
 8001840:	4849      	ldr	r0, [pc, #292]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 8001842:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4403      	add	r3, r0
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	ea05 0201 	and.w	r2, r5, r1
 8001856:	b292      	uxth	r2, r2
 8001858:	801a      	strh	r2, [r3, #0]
        }
        if(RecieveMessageTable[i].length > 1){
 800185a:	4943      	ldr	r1, [pc, #268]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 800185c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	330a      	adds	r3, #10
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d96e      	bls.n	800194e <IncomingCANMessageHandler+0x28e>
			uint32_t temp = finalRxData>>(DLC*8 - RecieveMessageTable[i].offset - RecieveMessageTable[i].length) & 0xFFFFFFFFFFFFFFFF>>(64 - RecieveMessageTable[i].length);
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <IncomingCANMessageHandler+0x2ac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	00d9      	lsls	r1, r3, #3
 8001876:	483c      	ldr	r0, [pc, #240]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 8001878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4403      	add	r3, r0
 8001884:	3308      	adds	r3, #8
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	1ac9      	subs	r1, r1, r3
 800188a:	4837      	ldr	r0, [pc, #220]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 800188c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4403      	add	r3, r0
 8001898:	330a      	adds	r3, #10
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	1ac9      	subs	r1, r1, r3
 800189e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018a2:	f1c1 0420 	rsb	r4, r1, #32
 80018a6:	f1a1 0020 	sub.w	r0, r1, #32
 80018aa:	fa22 f501 	lsr.w	r5, r2, r1
 80018ae:	61bd      	str	r5, [r7, #24]
 80018b0:	fa03 f404 	lsl.w	r4, r3, r4
 80018b4:	69bd      	ldr	r5, [r7, #24]
 80018b6:	4325      	orrs	r5, r4
 80018b8:	61bd      	str	r5, [r7, #24]
 80018ba:	fa23 f000 	lsr.w	r0, r3, r0
 80018be:	69bc      	ldr	r4, [r7, #24]
 80018c0:	4304      	orrs	r4, r0
 80018c2:	61bc      	str	r4, [r7, #24]
 80018c4:	40cb      	lsrs	r3, r1
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69bd      	ldr	r5, [r7, #24]
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 80018cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	330a      	adds	r3, #10
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	f1c1 0420 	rsb	r4, r1, #32
 80018ec:	f1a1 0020 	sub.w	r0, r1, #32
 80018f0:	fa22 f601 	lsr.w	r6, r2, r1
 80018f4:	613e      	str	r6, [r7, #16]
 80018f6:	fa03 f404 	lsl.w	r4, r3, r4
 80018fa:	693e      	ldr	r6, [r7, #16]
 80018fc:	4326      	orrs	r6, r4
 80018fe:	613e      	str	r6, [r7, #16]
 8001900:	fa23 f000 	lsr.w	r0, r3, r0
 8001904:	693c      	ldr	r4, [r7, #16]
 8001906:	4304      	orrs	r4, r0
 8001908:	613c      	str	r4, [r7, #16]
 800190a:	40cb      	lsrs	r3, r1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	402b      	ands	r3, r5
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
			temp = reverseBits(temp);
 8001914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001916:	f7ff fea5 	bl	8001664 <reverseBits>
 800191a:	62f8      	str	r0, [r7, #44]	; 0x2c
			*RecieveMessageTable[i].pointerToUserVariable = temp>>(32 - RecieveMessageTable[i].length);
 800191c:	4912      	ldr	r1, [pc, #72]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 800191e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	330a      	adds	r3, #10
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	f1c3 0320 	rsb	r3, r3, #32
 8001932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001934:	fa22 f003 	lsr.w	r0, r2, r3
 8001938:	490b      	ldr	r1, [pc, #44]	; (8001968 <IncomingCANMessageHandler+0x2a8>)
 800193a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b282      	uxth	r2, r0
 800194c:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < MAX_RECEIVE_TABLE_SIZE; i++){
 800194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001950:	3301      	adds	r3, #1
 8001952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001956:	2b1d      	cmp	r3, #29
 8001958:	f67f af1a 	bls.w	8001790 <IncomingCANMessageHandler+0xd0>
		}
    }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3774      	adds	r7, #116	; 0x74
 8001962:	46bd      	mov	sp, r7
 8001964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001968:	20000004 	.word	0x20000004
 800196c:	20000000 	.word	0x20000000

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b099      	sub	sp, #100	; 0x64
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001976:	f000 ffbe 	bl	80028f6 <HAL_Init>
  TIM_HandleTypeDef htime2;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197a:	f000 f8cf 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197e:	f000 fa8b 	bl	8001e98 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001982:	f000 f9cb 	bl	8001d1c <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001986:	f000 fa57 	bl	8001e38 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800198a:	f000 f923 	bl	8001bd4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800198e:	f000 f973 	bl	8001c78 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001992:	f000 f9f9 	bl	8001d88 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  // Start 0.2s timer interrupt
  HAL_TIM_Base_Start_IT(&htime2);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fdc0 	bl	8005520 <HAL_TIM_Base_Start_IT>

  UART_st uart3 = {
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <main+0x180>)
 80019a2:	1d3c      	adds	r4, r7, #4
 80019a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  .mode = UART_TX_RX,
	  .datasize = UART_Datasize_8,
	  .uart_num = 3
  };

  Printf_Init(&uart3);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fb1f 	bl	8001ff0 <Printf_Init>

  CAN_Config();
 80019b2:	f000 fac9 	bl	8001f48 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80019b6:	2102      	movs	r1, #2
 80019b8:	484e      	ldr	r0, [pc, #312]	; (8001af4 <main+0x184>)
 80019ba:	f001 ff55 	bl	8003868 <HAL_CAN_ActivateNotification>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <main+0x58>
	{
	  Error_Handler();
 80019c4:	f000 fb0e 	bl	8001fe4 <Error_Handler>
	}

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80019c8:	2101      	movs	r1, #1
 80019ca:	484a      	ldr	r0, [pc, #296]	; (8001af4 <main+0x184>)
 80019cc:	f001 ff4c 	bl	8003868 <HAL_CAN_ActivateNotification>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <main+0x6a>
  {
	  Error_Handler();
 80019d6:	f000 fb05 	bl	8001fe4 <Error_Handler>
  }

  TxHeader.DLC = 8;
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <main+0x188>)
 80019dc:	2208      	movs	r2, #8
 80019de:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80019e0:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <main+0x188>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <main+0x188>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x200;
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <main+0x188>)
 80019ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f2:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <main+0x188>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	751a      	strb	r2, [r3, #20]

  TxHeader2.DLC = 8;
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <main+0x18c>)
 80019fc:	2208      	movs	r2, #8
 80019fe:	611a      	str	r2, [r3, #16]
  TxHeader2.IDE = CAN_ID_STD;
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <main+0x18c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <main+0x18c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x200;
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <main+0x18c>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	601a      	str	r2, [r3, #0]
  TxHeader2.TransmitGlobalTime = DISABLE;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <main+0x18c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	751a      	strb	r2, [r3, #20]

  TxHeader3.DLC = 8;
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <main+0x190>)
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	611a      	str	r2, [r3, #16]
  TxHeader3.IDE = CAN_ID_STD;
 8001a20:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <main+0x190>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  TxHeader3.RTR = CAN_RTR_DATA;
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <main+0x190>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  TxHeader3.StdId = 0x500;
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <main+0x190>)
 8001a2e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001a32:	601a      	str	r2, [r3, #0]
  TxHeader3.TransmitGlobalTime = DISABLE;
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <main+0x190>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	751a      	strb	r2, [r3, #20]

  TxHeader4.DLC = 8;
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <main+0x194>)
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	611a      	str	r2, [r3, #16]
  TxHeader4.IDE = CAN_ID_STD;
 8001a40:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <main+0x194>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  TxHeader4.RTR = CAN_RTR_DATA;
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <main+0x194>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  TxHeader4.StdId = 0x200;
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <main+0x194>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	601a      	str	r2, [r3, #0]
  TxHeader4.TransmitGlobalTime = DISABLE;
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <main+0x194>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	751a      	strb	r2, [r3, #20]

  TxData2[0] = 0xAB;
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <main+0x198>)
 8001a5c:	22ab      	movs	r2, #171	; 0xab
 8001a5e:	701a      	strb	r2, [r3, #0]
  TxData2[1] = 0xCD;
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <main+0x198>)
 8001a62:	22cd      	movs	r2, #205	; 0xcd
 8001a64:	705a      	strb	r2, [r3, #1]
  TxData2[2] = 0xEF;
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <main+0x198>)
 8001a68:	22ef      	movs	r2, #239	; 0xef
 8001a6a:	709a      	strb	r2, [r3, #2]
  TxData2[3] = 0x12;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <main+0x198>)
 8001a6e:	2212      	movs	r2, #18
 8001a70:	70da      	strb	r2, [r3, #3]
  TxData2[4] = 0x33;
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <main+0x198>)
 8001a74:	2233      	movs	r2, #51	; 0x33
 8001a76:	711a      	strb	r2, [r3, #4]
  TxData2[5] = 0x21;
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <main+0x198>)
 8001a7a:	2221      	movs	r2, #33	; 0x21
 8001a7c:	715a      	strb	r2, [r3, #5]
  TxData2[6] = 0x69;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <main+0x198>)
 8001a80:	2269      	movs	r2, #105	; 0x69
 8001a82:	719a      	strb	r2, [r3, #6]
  TxData2[7] = 0x69;
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <main+0x198>)
 8001a86:	2269      	movs	r2, #105	; 0x69
 8001a88:	71da      	strb	r2, [r3, #7]

  TxData3[0] = 0x01;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <main+0x19c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
  TxData3[1] = 0x02;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <main+0x19c>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	705a      	strb	r2, [r3, #1]
  TxData3[2] = 0xFF;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <main+0x19c>)
 8001a98:	22ff      	movs	r2, #255	; 0xff
 8001a9a:	709a      	strb	r2, [r3, #2]
  TxData3[3] = 0xFF;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <main+0x19c>)
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	70da      	strb	r2, [r3, #3]
  TxData3[4] = 0xFF;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <main+0x19c>)
 8001aa4:	22ff      	movs	r2, #255	; 0xff
 8001aa6:	711a      	strb	r2, [r3, #4]
  TxData3[5] = 0xFF;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <main+0x19c>)
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	715a      	strb	r2, [r3, #5]
  TxData3[6] = 0xFF;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <main+0x19c>)
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	719a      	strb	r2, [r3, #6]
  TxData3[7] = 0xFF;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <main+0x19c>)
 8001ab6:	22ff      	movs	r2, #255	; 0xff
 8001ab8:	71da      	strb	r2, [r3, #7]

  // Init adc 1 and 2
  MX_ADC1_Init();
 8001aba:	f000 f88b 	bl	8001bd4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001abe:	f000 f8db 	bl	8001c78 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)  {
	// Get ADC value
	HAL_ADC_Start(&hadc1);
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <main+0x1a0>)
 8001ac4:	f000 ffdc 	bl	8002a80 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <main+0x1a0>)
 8001ace:	f001 f8a5 	bl	8002c1c <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <main+0x1a0>)
 8001ad4:	f001 f92d 	bl	8002d32 <HAL_ADC_GetValue>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <main+0x1a4>)
 8001adc:	6013      	str	r3, [r2, #0]
	counter++;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <main+0x1a8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <main+0x1a8>)
 8001ae6:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	f000 ff61 	bl	80029b0 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8001aee:	e7e8      	b.n	8001ac2 <main+0x152>
 8001af0:	08009560 	.word	0x08009560
 8001af4:	20000490 	.word	0x20000490
 8001af8:	200005c8 	.word	0x200005c8
 8001afc:	200005e0 	.word	0x200005e0
 8001b00:	200005f8 	.word	0x200005f8
 8001b04:	20000610 	.word	0x20000610
 8001b08:	20000644 	.word	0x20000644
 8001b0c:	2000064c 	.word	0x2000064c
 8001b10:	20000400 	.word	0x20000400
 8001b14:	2000065c 	.word	0x2000065c
 8001b18:	20000660 	.word	0x20000660

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	2234      	movs	r2, #52	; 0x34
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 ff42 	bl	80069b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <SystemClock_Config+0xb0>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <SystemClock_Config+0xb0>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <SystemClock_Config+0xb0>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <SystemClock_Config+0xb4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <SystemClock_Config+0xb4>)
 8001b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <SystemClock_Config+0xb4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 fbb5 	bl	80042f8 <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001b94:	f000 fa26 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b98:	230f      	movs	r3, #15
 8001b9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fe4e 	bl	8004854 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bbe:	f000 fa11 	bl	8001fe4 <Error_Handler>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3750      	adds	r7, #80	; 0x50
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001be8:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <MX_ADC1_Init+0x9c>)
 8001bea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <MX_ADC1_Init+0xa0>)
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c34:	f000 fee0 	bl	80029f8 <HAL_ADC_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f000 f9d1 	bl	8001fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <MX_ADC1_Init+0x98>)
 8001c54:	f001 f87a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c5e:	f000 f9c1 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000400 	.word	0x20000400
 8001c70:	40012000 	.word	0x40012000
 8001c74:	0f000001 	.word	0x0f000001

08001c78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
 {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001c8c:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <MX_ADC2_Init+0x9c>)
 8001c8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cb8:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <MX_ADC2_Init+0xa0>)
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cd8:	f000 fe8e 	bl	80029f8 <HAL_ADC_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f000 f97f 	bl	8001fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_ADC2_Init+0x98>)
 8001cf8:	f001 f828 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001d02:	f000 f96f 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000448 	.word	0x20000448
 8001d14:	40012100 	.word	0x40012100
 8001d18:	0f000001 	.word	0x0f000001

08001d1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <MX_CAN1_Init+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d28:	220a      	movs	r2, #10
 8001d2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d3a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001d3e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d6e:	f001 fa3d 	bl	80031ec <HAL_CAN_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d78:	f000 f934 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000490 	.word	0x20000490
 8001d84:	40006400 	.word	0x40006400

08001d88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001dbe:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd0:	4813      	ldr	r0, [pc, #76]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001dd2:	f003 fb4d 	bl	8005470 <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ddc:	f000 f902 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4619      	mov	r1, r3
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001dee:	f003 fd2f 	bl	8005850 <HAL_TIM_ConfigClockSource>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001df8:	f000 f8f4 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_TIM2_Init+0x98>)
 8001e0a:	f003 ff4d 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e14:	f000 f8e6 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200004b8 	.word	0x200004b8

08001e24 <HAL_TIM_PeriodElapsedCallback>:

// Callback function for 0.2ms time based IRQ to run control system
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  rt_OneStep();
 8001e2c:	f7ff fc00 	bl	8001630 <rt_OneStep>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <MX_USART3_UART_Init+0x5c>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_USART3_UART_Init+0x58>)
 8001e7c:	f003 ffc0 	bl	8005e00 <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e86:	f000 f8ad 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000504 	.word	0x20000504
 8001e94:	40004800 	.word	0x40004800

08001e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_GPIO_Init+0xa8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001f14:	480b      	ldr	r0, [pc, #44]	; (8001f44 <MX_GPIO_Init+0xac>)
 8001f16:	f002 f9bb 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001f1a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_GPIO_Init+0xac>)
 8001f34:	f002 f800 	bl	8003f38 <HAL_GPIO_Init>

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020400 	.word	0x40020400

08001f48 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001f72:	230e      	movs	r3, #14
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001f76:	463b      	mov	r3, r7
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <CAN_Config+0x5c>)
 8001f7c:	f001 fa32 	bl	80033e4 <HAL_CAN_ConfigFilter>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001f86:	f000 f82d 	bl	8001fe4 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <CAN_Config+0x5c>)
 8001f8c:	f001 fb16 	bl	80035bc <HAL_CAN_Start>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8001f96:	f000 f825 	bl	8001fe4 <Error_Handler>
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000490 	.word	0x20000490

08001fa8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001fb8:	f001 fb44 	bl	8003644 <HAL_CAN_GetRxMessage>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8001fc2:	f000 f80f 	bl	8001fe4 <Error_Handler>
	}

	IncomingCANMessageHandler(&RxHeader.StdId, RxData);
 8001fc6:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001fca:	f7ff fb79 	bl	80016c0 <IncomingCANMessageHandler>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000654 	.word	0x20000654
 8001fdc:	20000628 	.word	0x20000628
 8001fe0:	20000490 	.word	0x20000490

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <Printf_Init>:

// Must be global
UART_st* Printer;


UART_Return_et Printf_Init(UART_st* uart) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  UART_Return_et response;

  // Set global to selected UART
  Printer = uart;
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <Printf_Init+0x3c>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
  response = UART_Init(uart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fbcf 	bl	80027a2 <UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]

  if (response != UART_OK) {
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <Printf_Init+0x22>
      return response;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	e008      	b.n	8002024 <Printf_Init+0x34>
  }

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */

  setvbuf(stdout, NULL, _IONBF, 0);
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <Printf_Init+0x40>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	2300      	movs	r3, #0
 800201a:	2202      	movs	r2, #2
 800201c:	2100      	movs	r1, #0
 800201e:	f005 f915 	bl	800724c <setvbuf>

  return UART_OK;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000664 	.word	0x20000664
 8002030:	20000178 	.word	0x20000178

08002034 <_isatty>:


int _isatty(int fd) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db04      	blt.n	800204c <_isatty+0x18>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b02      	cmp	r3, #2
 8002046:	dc01      	bgt.n	800204c <_isatty+0x18>
    return 1;
 8002048:	2301      	movs	r3, #1
 800204a:	e005      	b.n	8002058 <_isatty+0x24>

  errno = EBADF;
 800204c:	f004 fc88 	bl	8006960 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	2209      	movs	r2, #9
 8002054:	601a      	str	r2, [r3, #0]
  return 0;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

int _write(int fd, char* ptr, int len) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d002      	beq.n	8002078 <_write+0x18>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d110      	bne.n	800209a <_write+0x3a>
    response = UART_Transmit(Printer, (uint8_t*) ptr, len);
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <_write+0x50>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fbd5 	bl	8002832 <UART_Transmit>
 8002088:	4603      	mov	r3, r0
 800208a:	75fb      	strb	r3, [r7, #23]

    if (response == UART_OK)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <_write+0x36>
      return len;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	e008      	b.n	80020a8 <_write+0x48>
    else
      return EIO;
 8002096:	2305      	movs	r3, #5
 8002098:	e006      	b.n	80020a8 <_write+0x48>
  }

  errno = EBADF;
 800209a:	f004 fc61 	bl	8006960 <__errno>
 800209e:	4603      	mov	r3, r0
 80020a0:	2209      	movs	r2, #9
 80020a2:	601a      	str	r2, [r3, #0]
  return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000664 	.word	0x20000664

080020b4 <_close>:


int _close(int fd) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db04      	blt.n	80020cc <_close+0x18>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	dc01      	bgt.n	80020cc <_close+0x18>
    return 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e006      	b.n	80020da <_close+0x26>

  errno = EBADF;
 80020cc:	f004 fc48 	bl	8006960 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2209      	movs	r2, #9
 80020d4:	601a      	str	r2, [r3, #0]
  return -1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]

  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 80020ee:	f004 fc37 	bl	8006960 <__errno>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2209      	movs	r2, #9
 80020f6:	601a      	str	r2, [r3, #0]
  return -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_read>:

int _read(int fd, char* ptr, int len) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDIN_FILENO) {
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d110      	bne.n	8002138 <_read+0x34>
    response = UART_Receive(Printer, (uint8_t*) ptr, len);
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <_read+0x4c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fba2 	bl	800286a <UART_Receive>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]
    if (response == UART_OK)
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <_read+0x30>
      return 1;
 8002130:	2301      	movs	r3, #1
 8002132:	e008      	b.n	8002146 <_read+0x42>
    else
      return EIO;
 8002134:	2305      	movs	r3, #5
 8002136:	e006      	b.n	8002146 <_read+0x42>
  }

  errno = EBADF;
 8002138:	f004 fc12 	bl	8006960 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	2209      	movs	r2, #9
 8002140:	601a      	str	r2, [r3, #0]
  return -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000664 	.word	0x20000664

08002154 <_fstat>:


int _fstat(int fd, struct stat* st) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db08      	blt.n	8002176 <_fstat+0x22>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	dc05      	bgt.n	8002176 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002170:	605a      	str	r2, [r3, #4]
    return 0;
 8002172:	2300      	movs	r3, #0
 8002174:	e005      	b.n	8002182 <_fstat+0x2e>
  }

  errno = EBADF;
 8002176:	f004 fbf3 	bl	8006960 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2209      	movs	r2, #9
 800217e:	601a      	str	r2, [r3, #0]
  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_MspInit+0x44>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_MspInit+0x44>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_MspInit+0x44>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_MspInit+0x44>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_MspInit+0x44>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_MspInit+0x44>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_ADC_MspInit+0xc8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d124      	bne.n	8002240 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002226:	2301      	movs	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	481a      	ldr	r0, [pc, #104]	; (80022a4 <HAL_ADC_MspInit+0xd0>)
 800223a:	f001 fe7d 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800223e:	e028      	b.n	8002292 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_ADC_MspInit+0xd4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d123      	bne.n	8002292 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_ADC_MspInit+0xcc>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800227a:	2302      	movs	r3, #2
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_ADC_MspInit+0xd0>)
 800228e:	f001 fe53 	bl	8003f38 <HAL_GPIO_Init>
}
 8002292:	bf00      	nop
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40012000 	.word	0x40012000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40012100 	.word	0x40012100

080022ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_CAN_MspInit+0x9c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d137      	bne.n	800233e <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_CAN_MspInit+0xa0>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_CAN_MspInit+0xa0>)
 80022d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_CAN_MspInit+0xa0>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_CAN_MspInit+0xa0>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_CAN_MspInit+0xa0>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_CAN_MspInit+0xa0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022fe:	2303      	movs	r3, #3
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800230e:	2309      	movs	r3, #9
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	480d      	ldr	r0, [pc, #52]	; (8002350 <HAL_CAN_MspInit+0xa4>)
 800231a:	f001 fe0d 	bl	8003f38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2013      	movs	r0, #19
 8002324:	f001 fdd1 	bl	8003eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002328:	2013      	movs	r0, #19
 800232a:	f001 fdea 	bl	8003f02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2014      	movs	r0, #20
 8002334:	f001 fdc9 	bl	8003eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002338:	2014      	movs	r0, #20
 800233a:	f001 fde2 	bl	8003f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40006400 	.word	0x40006400
 800234c:	40023800 	.word	0x40023800
 8002350:	40020c00 	.word	0x40020c00

08002354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002364:	d113      	bne.n	800238e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_TIM_Base_MspInit+0x44>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_TIM_Base_MspInit+0x44>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_TIM_Base_MspInit+0x44>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	201c      	movs	r0, #28
 8002384:	f001 fda1 	bl	8003eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002388:	201c      	movs	r0, #28
 800238a:	f001 fdba 	bl	8003f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0ae      	sub	sp, #184	; 0xb8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2290      	movs	r2, #144	; 0x90
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 faf9 	bl	80069b4 <memset>
  if(huart->Instance==USART3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_UART_MspInit+0xb4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d13c      	bne.n	8002446 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fc20 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023e6:	f7ff fdfd 	bl	8001fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_UART_MspInit+0xb8>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_UART_MspInit+0xb8>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_UART_MspInit+0xb8>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_UART_MspInit+0xb8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_UART_MspInit+0xb8>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_UART_MspInit+0xb8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800241a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800241e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002434:	2307      	movs	r3, #7
 8002436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_UART_MspInit+0xbc>)
 8002442:	f001 fd79 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	37b8      	adds	r7, #184	; 0xb8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40004800 	.word	0x40004800
 8002454:	40023800 	.word	0x40023800
 8002458:	40020c00 	.word	0x40020c00

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <NMI_Handler+0x4>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a8:	f000 fa62 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80024b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <CAN1_TX_IRQHandler+0x18>)
 80024ba:	f001 ff02 	bl	80042c2 <HAL_GPIO_TogglePin>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024be:	4803      	ldr	r0, [pc, #12]	; (80024cc <CAN1_TX_IRQHandler+0x1c>)
 80024c0:	f001 f9f8 	bl	80038b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020400 	.word	0x40020400
 80024cc:	20000490 	.word	0x20000490

080024d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <CAN1_RX0_IRQHandler+0x10>)
 80024d6:	f001 f9ed 	bl	80038b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000490 	.word	0x20000490

080024e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <TIM2_IRQHandler+0x10>)
 80024ea:	f003 f891 	bl	8005610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200004b8 	.word	0x200004b8

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f004 fa1a 	bl	8006960 <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20080000 	.word	0x20080000
 8002558:	00000400 	.word	0x00000400
 800255c:	20000668 	.word	0x20000668
 8002560:	20000680 	.word	0x20000680

08002564 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <UART_Select>:

/*------------- PRIVATE FUNCTION DEFINITIONS ------------ */

// UART_Select configures the corresponding UART number from a UART_st
static UART_Return_et UART_Select(UART_st* uart)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	// Switch case for selection of 8 UARTS
	switch(uart->uart_num)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	791b      	ldrb	r3, [r3, #4]
 8002594:	3b01      	subs	r3, #1
 8002596:	2b07      	cmp	r3, #7
 8002598:	d83a      	bhi.n	8002610 <UART_Select+0x88>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <UART_Select+0x18>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025c1 	.word	0x080025c1
 80025a4:	080025cb 	.word	0x080025cb
 80025a8:	080025d5 	.word	0x080025d5
 80025ac:	080025df 	.word	0x080025df
 80025b0:	080025e9 	.word	0x080025e9
 80025b4:	080025f3 	.word	0x080025f3
 80025b8:	080025fd 	.word	0x080025fd
 80025bc:	08002607 	.word	0x08002607
	{
		case 1:
			uart->huart -> Instance = USART1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <UART_Select+0x9c>)
 80025c6:	601a      	str	r2, [r3, #0]
			break;
 80025c8:	e024      	b.n	8002614 <UART_Select+0x8c>
		case 2:
			uart->huart -> Instance = USART2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <UART_Select+0xa0>)
 80025d0:	601a      	str	r2, [r3, #0]
			break;
 80025d2:	e01f      	b.n	8002614 <UART_Select+0x8c>
		case 3:
			uart->huart -> Instance = USART3;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <UART_Select+0xa4>)
 80025da:	601a      	str	r2, [r3, #0]
			break;
 80025dc:	e01a      	b.n	8002614 <UART_Select+0x8c>
		case 4:
			uart->huart -> Instance = UART4;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <UART_Select+0xa8>)
 80025e4:	601a      	str	r2, [r3, #0]
			break;
 80025e6:	e015      	b.n	8002614 <UART_Select+0x8c>
		case 5:
			uart->huart -> Instance = UART5;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <UART_Select+0xac>)
 80025ee:	601a      	str	r2, [r3, #0]
			break;
 80025f0:	e010      	b.n	8002614 <UART_Select+0x8c>
		case 6:
			uart->huart -> Instance = USART6;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <UART_Select+0xb0>)
 80025f8:	601a      	str	r2, [r3, #0]
			break;
 80025fa:	e00b      	b.n	8002614 <UART_Select+0x8c>
		case 7:
			uart->huart -> Instance = UART7;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <UART_Select+0xb4>)
 8002602:	601a      	str	r2, [r3, #0]
			break;
 8002604:	e006      	b.n	8002614 <UART_Select+0x8c>
		case 8:
			uart->huart -> Instance = UART8;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <UART_Select+0xb8>)
 800260c:	601a      	str	r2, [r3, #0]
			break;
 800260e:	e001      	b.n	8002614 <UART_Select+0x8c>
		default:
			return INVALID_UART_NUM;
 8002610:	2305      	movs	r3, #5
 8002612:	e000      	b.n	8002616 <UART_Select+0x8e>
	}

	return UART_OK;
 8002614:	2301      	movs	r3, #1
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40011000 	.word	0x40011000
 8002628:	40004400 	.word	0x40004400
 800262c:	40004800 	.word	0x40004800
 8002630:	40004c00 	.word	0x40004c00
 8002634:	40005000 	.word	0x40005000
 8002638:	40011400 	.word	0x40011400
 800263c:	40007800 	.word	0x40007800
 8002640:	40007c00 	.word	0x40007c00

08002644 <UART_Baud_Rate_Select>:

// UART_Baud_Rate_Select configures the baud rate from the one specified in baudrate
static UART_Return_et UART_Baud_Rate_Select(UART_st* uart)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	// Baud rate must be between 123 Bits/s and 500 KBits/s, stated in .ioc requirements
	if(uart->baudrate < MIN_UART_BAUDRATE || uart->baudrate > MAX_UART_BAUDRATE){
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b7a      	cmp	r3, #122	; 0x7a
 8002652:	d904      	bls.n	800265e <UART_Baud_Rate_Select+0x1a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <UART_Baud_Rate_Select+0x38>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <UART_Baud_Rate_Select+0x1e>
		return BAUDRATE_OUT_OF_BOUNDS;
 800265e:	2302      	movs	r3, #2
 8002660:	e005      	b.n	800266e <UART_Baud_Rate_Select+0x2a>
	}

	uart->huart->Init.BaudRate = uart->baudrate;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	605a      	str	r2, [r3, #4]

	return UART_OK;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	0007a120 	.word	0x0007a120

08002680 <UART_Datasize_Select>:

// UART_Datasize_Select configures the data size from a UART_Datasize_et
static UART_Return_et UART_Datasize_Select(UART_st* uart)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	switch(uart->datasize)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7b1b      	ldrb	r3, [r3, #12]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d011      	beq.n	80026b4 <UART_Datasize_Select+0x34>
 8002690:	2b09      	cmp	r3, #9
 8002692:	dc15      	bgt.n	80026c0 <UART_Datasize_Select+0x40>
 8002694:	2b07      	cmp	r3, #7
 8002696:	d002      	beq.n	800269e <UART_Datasize_Select+0x1e>
 8002698:	2b08      	cmp	r3, #8
 800269a:	d006      	beq.n	80026aa <UART_Datasize_Select+0x2a>
 800269c:	e010      	b.n	80026c0 <UART_Datasize_Select+0x40>
	{
		case UART_Datasize_7:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_7B;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a6:	609a      	str	r2, [r3, #8]
			break;
 80026a8:	e00c      	b.n	80026c4 <UART_Datasize_Select+0x44>
		case UART_Datasize_8:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
			break;
 80026b2:	e007      	b.n	80026c4 <UART_Datasize_Select+0x44>
		case UART_Datasize_9:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_9B;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026bc:	609a      	str	r2, [r3, #8]
			break;
 80026be:	e001      	b.n	80026c4 <UART_Datasize_Select+0x44>
		default:
			return INVALID_DATASIZE;
 80026c0:	2306      	movs	r3, #6
 80026c2:	e000      	b.n	80026c6 <UART_Datasize_Select+0x46>
	}

	return UART_OK;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <UART_Mode_Select>:

// UART_Mode_Select configures the mode based on a UART_Mode_et
static UART_Return_et UART_Mode_Select(UART_st* uart)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	switch(uart->mode)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7b5b      	ldrb	r3, [r3, #13]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d010      	beq.n	8002704 <UART_Mode_Select+0x32>
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	dc13      	bgt.n	800270e <UART_Mode_Select+0x3c>
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d002      	beq.n	80026f0 <UART_Mode_Select+0x1e>
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d005      	beq.n	80026fa <UART_Mode_Select+0x28>
 80026ee:	e00e      	b.n	800270e <UART_Mode_Select+0x3c>
	{
		case UART_RX:
			uart->huart -> Init.Mode = UART_MODE_RX;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2204      	movs	r2, #4
 80026f6:	615a      	str	r2, [r3, #20]
			break;
 80026f8:	e00b      	b.n	8002712 <UART_Mode_Select+0x40>
		case UART_TX:
			uart->huart -> Init.Mode = UART_MODE_TX;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2208      	movs	r2, #8
 8002700:	615a      	str	r2, [r3, #20]
			break;
 8002702:	e006      	b.n	8002712 <UART_Mode_Select+0x40>
		case UART_TX_RX:
			uart->huart -> Init.Mode = UART_MODE_TX_RX;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	220c      	movs	r2, #12
 800270a:	615a      	str	r2, [r3, #20]
			break;
 800270c:	e001      	b.n	8002712 <UART_Mode_Select+0x40>
		default:
			return INVALID_MODE;
 800270e:	2303      	movs	r3, #3
 8002710:	e000      	b.n	8002714 <UART_Mode_Select+0x42>
	}

	return UART_OK;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <UART_MSB_Select>:

// UART_MSB_Select configures the bit position based on a UART_Bit_Position_et
static UART_Return_et UART_MSB_Select(UART_st* uart)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	switch(uart->bit_position){
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7b9b      	ldrb	r3, [r3, #14]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <UART_MSB_Select+0x16>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d005      	beq.n	8002740 <UART_MSB_Select+0x20>
 8002734:	e00e      	b.n	8002754 <UART_MSB_Select+0x34>
		case LSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800273e:	e00b      	b.n	8002758 <UART_MSB_Select+0x38>
		case MSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
			uart->huart -> AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002750:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 8002752:	e001      	b.n	8002758 <UART_MSB_Select+0x38>
		default:
			return INVALID_BIT_POSITION;
 8002754:	2304      	movs	r3, #4
 8002756:	e000      	b.n	800275a <UART_MSB_Select+0x3a>
	}

	return UART_OK;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <UART_Default_Configs>:

// Current configurations that are not being modified
static void UART_Default_Configs(UART_st* uart)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
	uart->huart -> Init.StopBits = UART_STOPBITS_1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
	uart->huart -> Init.Parity = UART_PARITY_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
	uart->huart -> Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
	uart->huart -> Init.OverSampling = UART_OVERSAMPLING_16;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
	uart->huart -> Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <UART_Init>:

/*------------- PUBLIC FUNCTION DEFINITIONS ------------- */

UART_Return_et UART_Init(UART_st* uart)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	UART_Return_et response;

	response = UART_Select(uart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff feec 	bl	8002588 <UART_Select>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <UART_Init+0x1c>
		return response;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	e035      	b.n	800282a <UART_Init+0x88>
	}

	response = UART_Baud_Rate_Select(uart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff40 	bl	8002644 <UART_Baud_Rate_Select>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <UART_Init+0x30>
		return response;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	e02b      	b.n	800282a <UART_Init+0x88>
	}

	response = UART_Datasize_Select(uart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ff54 	bl	8002680 <UART_Datasize_Select>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <UART_Init+0x44>
		return response;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	e021      	b.n	800282a <UART_Init+0x88>
	}

	response = UART_Mode_Select(uart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff73 	bl	80026d2 <UART_Mode_Select>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <UART_Init+0x58>
		return response;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	e017      	b.n	800282a <UART_Init+0x88>
	}

	response = UART_MSB_Select(uart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ff90 	bl	8002720 <UART_MSB_Select>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <UART_Init+0x6c>
		return response;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	e00d      	b.n	800282a <UART_Init+0x88>
	}

	UART_Default_Configs(uart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffa9 	bl	8002766 <UART_Default_Configs>

	if (HAL_UART_Init(uart->huart) != HAL_OK) { Error_Handler(); }
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 faf1 	bl	8005e00 <HAL_UART_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <UART_Init+0x86>
 8002824:	f7ff fbde 	bl	8001fe4 <Error_Handler>

	return UART_OK;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <UART_Transmit>:

// Uses the HAL UART Transmit to transmit a buffer's contents over the channel specified in the uart struct
UART_Return_et UART_Transmit(UART_st* uart, uint8_t tx_buf[], uint8_t buf_len)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tx_response;

	tx_response = HAL_UART_Transmit(uart->huart, tx_buf, buf_len, TIMEOUT);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	b29a      	uxth	r2, r3
 8002848:	f241 3388 	movw	r3, #5000	; 0x1388
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	f003 fb25 	bl	8005e9c <HAL_UART_Transmit>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
	if (tx_response != HAL_OK) {
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <UART_Transmit+0x2e>
		return TRANSMIT_FAILED;
 800285c:	2307      	movs	r3, #7
 800285e:	e000      	b.n	8002862 <UART_Transmit+0x30>
	}

	return UART_OK;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <UART_Receive>:

// TODO: check the rx_buf dataframe being sent (casting currently)
UART_Return_et UART_Receive(UART_st* uart, uint8_t rx_buf[], uint8_t buf_len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rx_response;

	rx_response = HAL_UART_Receive(uart->huart, rx_buf, buf_len, TIMEOUT);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f241 3388 	movw	r3, #5000	; 0x1388
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	f003 fb8c 	bl	8005fa2 <HAL_UART_Receive>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]
	if (rx_response != HAL_OK) {
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <UART_Receive+0x2e>
		return RECEIVE_FAILED;
 8002894:	2308      	movs	r3, #8
 8002896:	e000      	b.n	800289a <UART_Receive+0x30>
	}

	return UART_OK;
 8002898:	2301      	movs	r3, #1
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028aa:	490e      	ldr	r1, [pc, #56]	; (80028e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b0:	e002      	b.n	80028b8 <LoopCopyDataInit>

080028b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b6:	3304      	adds	r3, #4

080028b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028bc:	d3f9      	bcc.n	80028b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028c0:	4c0b      	ldr	r4, [pc, #44]	; (80028f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c4:	e001      	b.n	80028ca <LoopFillZerobss>

080028c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c8:	3204      	adds	r2, #4

080028ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028cc:	d3fb      	bcc.n	80028c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ce:	f7ff fe49 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028d2:	f004 f84b 	bl	800696c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d6:	f7ff f84b 	bl	8001970 <main>
  bx  lr    
 80028da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 80028e8:	080099cc 	.word	0x080099cc
  ldr r2, =_sbss
 80028ec:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 80028f0:	20000680 	.word	0x20000680

080028f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC_IRQHandler>

080028f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fa:	2003      	movs	r0, #3
 80028fc:	f001 fada 	bl	8003eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002900:	200f      	movs	r0, #15
 8002902:	f000 f805 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002906:	f7ff fc41 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x54>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_InitTick+0x58>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f001 faf5 	bl	8003f1e <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800294c:	f001 fabd 	bl	8003eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_InitTick+0x5c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000016c 	.word	0x2000016c
 8002968:	20000174 	.word	0x20000174
 800296c:	20000170 	.word	0x20000170

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000174 	.word	0x20000174
 8002994:	2000066c 	.word	0x2000066c

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2000066c 	.word	0x2000066c

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000174 	.word	0x20000174

080029f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e031      	b.n	8002a72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fbdc 	bl	80021d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_ADC_Init+0x84>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	f043 0202 	orr.w	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fad6 	bl	8002ff8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
 8002a62:	e001      	b.n	8002a68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	ffffeefd 	.word	0xffffeefd

08002a80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Start+0x1a>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0ad      	b.n	8002bf6 <HAL_ADC_Start+0x176>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d018      	beq.n	8002ae2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_ADC_Start+0x184>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	; (8002c08 <HAL_ADC_Start+0x188>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0c9a      	lsrs	r2, r3, #18
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d175      	bne.n	8002bdc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af4:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <HAL_ADC_Start+0x18c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f023 0206 	bic.w	r2, r3, #6
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
 8002b38:	e002      	b.n	8002b40 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_ADC_Start+0x190>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d143      	bne.n	8002bf4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	e03a      	b.n	8002bf4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <HAL_ADC_Start+0x194>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10e      	bne.n	8002ba6 <HAL_ADC_Start+0x126>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ba4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_ADC_Start+0x190>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d120      	bne.n	8002bf4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_ADC_Start+0x198>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d11b      	bne.n	8002bf4 <HAL_ADC_Start+0x174>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e00b      	b.n	8002bf4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0210 	orr.w	r2, r3, #16
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2000016c 	.word	0x2000016c
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	fffff8fe 	.word	0xfffff8fe
 8002c10:	40012300 	.word	0x40012300
 8002c14:	40012000 	.word	0x40012000
 8002c18:	40012200 	.word	0x40012200

08002c1c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c38:	d113      	bne.n	8002c62 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d10b      	bne.n	8002c62 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e063      	b.n	8002d2a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c62:	f7ff fe99 	bl	8002998 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c68:	e021      	b.n	8002cae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d01d      	beq.n	8002cae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <HAL_ADC_PollForConversion+0x6c>
 8002c78:	f7ff fe8e 	bl	8002998 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d212      	bcs.n	8002cae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d00b      	beq.n	8002cae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e03d      	b.n	8002d2a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d1d6      	bne.n	8002c6a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0212 	mvn.w	r2, #18
 8002cc4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d123      	bne.n	8002d28 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11f      	bne.n	8002d28 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d111      	bne.n	8002d28 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e136      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x28a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d93a      	bls.n	8002dee <HAL_ADC_ConfigChannel+0xa2>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d80:	d035      	beq.n	8002dee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68d9      	ldr	r1, [r3, #12]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	3b1e      	subs	r3, #30
 8002d98:	2207      	movs	r2, #7
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a8d      	ldr	r2, [pc, #564]	; (8002fe4 <HAL_ADC_ConfigChannel+0x298>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10a      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68d9      	ldr	r1, [r3, #12]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	061a      	lsls	r2, r3, #24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc6:	e035      	b.n	8002e34 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68d9      	ldr	r1, [r3, #12]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4403      	add	r3, r0
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	409a      	lsls	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dec:	e022      	b.n	8002e34 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6919      	ldr	r1, [r3, #16]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	2207      	movs	r2, #7
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6919      	ldr	r1, [r3, #16]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4403      	add	r3, r0
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b06      	cmp	r3, #6
 8002e3a:	d824      	bhi.n	8002e86 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b05      	subs	r3, #5
 8002e4e:	221f      	movs	r2, #31
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43da      	mvns	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	3b05      	subs	r3, #5
 8002e78:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34
 8002e84:	e04c      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d824      	bhi.n	8002ed8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b23      	subs	r3, #35	; 0x23
 8002ea0:	221f      	movs	r2, #31
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	400a      	ands	r2, r1
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b23      	subs	r3, #35	; 0x23
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed6:	e023      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b41      	subs	r3, #65	; 0x41
 8002eea:	221f      	movs	r2, #31
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	3b41      	subs	r3, #65	; 0x41
 8002f14:	fa00 f203 	lsl.w	r2, r0, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10a      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1f4>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f32:	d105      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f3e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10f      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x21e>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	d10b      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4a25      	ldr	r2, [pc, #148]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f5c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f68:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d12b      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x280>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_ADC_ConfigChannel+0x298>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x23a>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b11      	cmp	r3, #17
 8002f84:	d122      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f90:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a15      	ldr	r2, [pc, #84]	; (8002fec <HAL_ADC_ConfigChannel+0x2a0>)
 8002f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f9c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_ADC_ConfigChannel+0x298>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d111      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9a      	lsrs	r2, r3, #18
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fbe:	e002      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	10000012 	.word	0x10000012
 8002fe8:	40012000 	.word	0x40012000
 8002fec:	40012300 	.word	0x40012300
 8002ff0:	2000016c 	.word	0x2000016c
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003000:	4b78      	ldr	r3, [pc, #480]	; (80031e4 <ADC_Init+0x1ec>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a77      	ldr	r2, [pc, #476]	; (80031e4 <ADC_Init+0x1ec>)
 8003006:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800300a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800300c:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <ADC_Init+0x1ec>)
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4973      	ldr	r1, [pc, #460]	; (80031e4 <ADC_Init+0x1ec>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800304c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <ADC_Init+0x1f0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	e00f      	b.n	80030f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0202 	bic.w	r2, r2, #2
 8003100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800313e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	3b01      	subs	r3, #1
 800314c:	035a      	lsls	r2, r3, #13
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e007      	b.n	8003168 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	3b01      	subs	r3, #1
 8003184:	051a      	lsls	r2, r3, #20
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800319c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031aa:	025a      	lsls	r2, r3, #9
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	029a      	lsls	r2, r3, #10
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40012300 	.word	0x40012300
 80031e8:	0f000001 	.word	0x0f000001

080031ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0ed      	b.n	80033da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff f84e 	bl	80022ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003220:	f7ff fbba 	bl	8002998 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003226:	e012      	b.n	800324e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003228:	f7ff fbb6 	bl	8002998 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b0a      	cmp	r3, #10
 8003234:	d90b      	bls.n	800324e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2205      	movs	r2, #5
 8003246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0c5      	b.n	80033da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0e5      	beq.n	8003228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0202 	bic.w	r2, r2, #2
 800326a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800326c:	f7ff fb94 	bl	8002998 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003272:	e012      	b.n	800329a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003274:	f7ff fb90 	bl	8002998 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b0a      	cmp	r3, #10
 8003280:	d90b      	bls.n	800329a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2205      	movs	r2, #5
 8003292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e09f      	b.n	80033da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e5      	bne.n	8003274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e1b      	ldrb	r3, [r3, #24]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e007      	b.n	80032d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7e5b      	ldrb	r3, [r3, #25]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d108      	bne.n	80032ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e007      	b.n	80032fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7e9b      	ldrb	r3, [r3, #26]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d108      	bne.n	8003316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0220 	orr.w	r2, r2, #32
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e007      	b.n	8003326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0220 	bic.w	r2, r2, #32
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7edb      	ldrb	r3, [r3, #27]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d108      	bne.n	8003340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0210 	bic.w	r2, r2, #16
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e007      	b.n	8003350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0210 	orr.w	r2, r2, #16
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7f1b      	ldrb	r3, [r3, #28]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d108      	bne.n	800336a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0208 	orr.w	r2, r2, #8
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e007      	b.n	800337a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7f5b      	ldrb	r3, [r3, #29]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0204 	orr.w	r2, r2, #4
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e007      	b.n	80033a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d003      	beq.n	800340a <HAL_CAN_ConfigFilter+0x26>
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b02      	cmp	r3, #2
 8003406:	f040 80c7 	bne.w	8003598 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a69      	ldr	r2, [pc, #420]	; (80035b4 <HAL_CAN_ConfigFilter+0x1d0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d001      	beq.n	8003418 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003414:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <HAL_CAN_ConfigFilter+0x1d4>)
 8003416:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_CAN_ConfigFilter+0x1d4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d111      	bne.n	8003454 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003436:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	431a      	orrs	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2201      	movs	r2, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d123      	bne.n	80034c6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43db      	mvns	r3, r3
 8003488:	401a      	ands	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3248      	adds	r2, #72	; 0x48
 80034a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	3348      	adds	r3, #72	; 0x48
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d122      	bne.n	8003514 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3248      	adds	r2, #72	; 0x48
 80034f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003508:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800350a:	6979      	ldr	r1, [r7, #20]
 800350c:	3348      	adds	r3, #72	; 0x48
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800352e:	e007      	b.n	8003540 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800355a:	e007      	b.n	800356c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	431a      	orrs	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	431a      	orrs	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e006      	b.n	80035a6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40003400 	.word	0x40003400
 80035b8:	40006400 	.word	0x40006400

080035bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d12e      	bne.n	800362e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035e8:	f7ff f9d6 	bl	8002998 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035ee:	e012      	b.n	8003616 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035f0:	f7ff f9d2 	bl	8002998 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b0a      	cmp	r3, #10
 80035fc:	d90b      	bls.n	8003616 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2205      	movs	r2, #5
 800360e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e012      	b.n	800363c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e006      	b.n	800363c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003658:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d003      	beq.n	8003668 <HAL_CAN_GetRxMessage+0x24>
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b02      	cmp	r3, #2
 8003664:	f040 80f3 	bne.w	800384e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0e7      	b.n	800385c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0d8      	b.n	800385c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	331b      	adds	r3, #27
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0204 	and.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10c      	bne.n	80036e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	331b      	adds	r3, #27
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	4413      	add	r3, r2
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0d5b      	lsrs	r3, r3, #21
 80036d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e00b      	b.n	80036fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	331b      	adds	r3, #27
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	08db      	lsrs	r3, r3, #3
 80036f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	331b      	adds	r3, #27
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	4413      	add	r3, r2
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0202 	and.w	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	331b      	adds	r3, #27
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	331b      	adds	r3, #27
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4413      	add	r3, r2
 8003734:	3304      	adds	r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	b2da      	uxtb	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	331b      	adds	r3, #27
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	4413      	add	r3, r2
 8003762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	4413      	add	r3, r2
 8003778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	0a1a      	lsrs	r2, r3, #8
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	4413      	add	r3, r2
 8003792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0c1a      	lsrs	r2, r3, #16
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	3302      	adds	r3, #2
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	0e1a      	lsrs	r2, r3, #24
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	3303      	adds	r3, #3
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	3304      	adds	r3, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4413      	add	r3, r2
 80037de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0a1a      	lsrs	r2, r3, #8
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	3305      	adds	r3, #5
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	0c1a      	lsrs	r2, r3, #16
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	3306      	adds	r3, #6
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e1a      	lsrs	r2, r3, #24
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	3307      	adds	r3, #7
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0220 	orr.w	r2, r2, #32
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e007      	b.n	800384a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e006      	b.n	800385c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003878:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <HAL_CAN_ActivateNotification+0x1e>
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d109      	bne.n	800389a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6959      	ldr	r1, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e006      	b.n	80038a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d07c      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f983 	bl	8003c22 <HAL_CAN_TxMailbox0CompleteCallback>
 800391c:	e016      	b.n	800394c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e00c      	b.n	800394c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	e002      	b.n	800394c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f989 	bl	8003c5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d024      	beq.n	80039a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800395e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f963 	bl	8003c36 <HAL_CAN_TxMailbox1CompleteCallback>
 8003970:	e016      	b.n	80039a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e00c      	b.n	80039a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e002      	b.n	80039a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f969 	bl	8003c72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d024      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f943 	bl	8003c4a <HAL_CAN_TxMailbox2CompleteCallback>
 80039c4:	e016      	b.n	80039f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
 80039d8:	e00c      	b.n	80039f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e002      	b.n	80039f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f949 	bl	8003c86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2208      	movs	r2, #8
 8003a32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f930 	bl	8003c9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe faa8 	bl	8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2208      	movs	r2, #8
 8003a96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f912 	bl	8003cc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8f9 	bl	8003cae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8fc 	bl	8003cd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2208      	movs	r2, #8
 8003af8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8f5 	bl	8003cea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d07b      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d072      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f043 0302 	orr.w	r3, r3, #2
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d043      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d03e      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b82:	2b60      	cmp	r3, #96	; 0x60
 8003b84:	d02b      	beq.n	8003bde <HAL_CAN_IRQHandler+0x32a>
 8003b86:	2b60      	cmp	r3, #96	; 0x60
 8003b88:	d82e      	bhi.n	8003be8 <HAL_CAN_IRQHandler+0x334>
 8003b8a:	2b50      	cmp	r3, #80	; 0x50
 8003b8c:	d022      	beq.n	8003bd4 <HAL_CAN_IRQHandler+0x320>
 8003b8e:	2b50      	cmp	r3, #80	; 0x50
 8003b90:	d82a      	bhi.n	8003be8 <HAL_CAN_IRQHandler+0x334>
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d019      	beq.n	8003bca <HAL_CAN_IRQHandler+0x316>
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d826      	bhi.n	8003be8 <HAL_CAN_IRQHandler+0x334>
 8003b9a:	2b30      	cmp	r3, #48	; 0x30
 8003b9c:	d010      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x30c>
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d822      	bhi.n	8003be8 <HAL_CAN_IRQHandler+0x334>
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d002      	beq.n	8003bac <HAL_CAN_IRQHandler+0x2f8>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d005      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003baa:	e01d      	b.n	8003be8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f043 0308 	orr.w	r3, r3, #8
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bb4:	e019      	b.n	8003bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	f043 0310 	orr.w	r3, r3, #16
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bbe:	e014      	b.n	8003bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f043 0320 	orr.w	r3, r3, #32
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bc8:	e00f      	b.n	8003bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bd2:	e00a      	b.n	8003bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bdc:	e005      	b.n	8003bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003be6:	e000      	b.n	8003bea <HAL_CAN_IRQHandler+0x336>
            break;
 8003be8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bf8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f872 	bl	8003cfe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3728      	adds	r7, #40	; 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <__NVIC_SetPriorityGrouping+0x40>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d30:	4013      	ands	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <__NVIC_SetPriorityGrouping+0x44>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d42:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <__NVIC_SetPriorityGrouping+0x40>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	60d3      	str	r3, [r2, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00
 8003d58:	05fa0000 	.word	0x05fa0000

08003d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <__NVIC_GetPriorityGrouping+0x18>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	0a1b      	lsrs	r3, r3, #8
 8003d66:	f003 0307 	and.w	r3, r3, #7
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000ed00 	.word	0xe000ed00

08003d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	db0b      	blt.n	8003da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	f003 021f 	and.w	r2, r3, #31
 8003d90:	4907      	ldr	r1, [pc, #28]	; (8003db0 <__NVIC_EnableIRQ+0x38>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2001      	movs	r0, #1
 8003d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000e100 	.word	0xe000e100

08003db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	490c      	ldr	r1, [pc, #48]	; (8003e00 <__NVIC_SetPriority+0x4c>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ddc:	e00a      	b.n	8003df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <__NVIC_SetPriority+0x50>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	3b04      	subs	r3, #4
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	440b      	add	r3, r1
 8003df2:	761a      	strb	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f1c3 0307 	rsb	r3, r3, #7
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	bf28      	it	cs
 8003e26:	2304      	movcs	r3, #4
 8003e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d902      	bls.n	8003e38 <NVIC_EncodePriority+0x30>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3b03      	subs	r3, #3
 8003e36:	e000      	b.n	8003e3a <NVIC_EncodePriority+0x32>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	43d9      	mvns	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e60:	4313      	orrs	r3, r2
         );
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e80:	d301      	bcc.n	8003e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e82:	2301      	movs	r3, #1
 8003e84:	e00f      	b.n	8003ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <SysTick_Config+0x40>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e8e:	210f      	movs	r1, #15
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e94:	f7ff ff8e 	bl	8003db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <SysTick_Config+0x40>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <SysTick_Config+0x40>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	e000e010 	.word	0xe000e010

08003eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff29 	bl	8003d14 <__NVIC_SetPriorityGrouping>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003edc:	f7ff ff3e 	bl	8003d5c <__NVIC_GetPriorityGrouping>
 8003ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	6978      	ldr	r0, [r7, #20]
 8003ee8:	f7ff ff8e 	bl	8003e08 <NVIC_EncodePriority>
 8003eec:	4602      	mov	r2, r0
 8003eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff5d 	bl	8003db4 <__NVIC_SetPriority>
}
 8003efa:	bf00      	nop
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	4603      	mov	r3, r0
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff31 	bl	8003d78 <__NVIC_EnableIRQ>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ffa2 	bl	8003e70 <SysTick_Config>
 8003f2c:	4603      	mov	r3, r0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e175      	b.n	8004244 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f58:	2201      	movs	r2, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	f040 8164 	bne.w	800423e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d005      	beq.n	8003f8e <HAL_GPIO_Init+0x56>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d130      	bne.n	8003ff0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2203      	movs	r2, #3
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 0201 	and.w	r2, r3, #1
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d017      	beq.n	800402c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	2203      	movs	r2, #3
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d123      	bne.n	8004080 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	08da      	lsrs	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3208      	adds	r2, #8
 8004040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	08da      	lsrs	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3208      	adds	r2, #8
 800407a:	69b9      	ldr	r1, [r7, #24]
 800407c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80be 	beq.w	800423e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c2:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_GPIO_Init+0x324>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	4a65      	ldr	r2, [pc, #404]	; (800425c <HAL_GPIO_Init+0x324>)
 80040c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040cc:	6453      	str	r3, [r2, #68]	; 0x44
 80040ce:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_GPIO_Init+0x324>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80040da:	4a61      	ldr	r2, [pc, #388]	; (8004260 <HAL_GPIO_Init+0x328>)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	3302      	adds	r3, #2
 80040e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_GPIO_Init+0x32c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d037      	beq.n	8004176 <HAL_GPIO_Init+0x23e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a57      	ldr	r2, [pc, #348]	; (8004268 <HAL_GPIO_Init+0x330>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d031      	beq.n	8004172 <HAL_GPIO_Init+0x23a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a56      	ldr	r2, [pc, #344]	; (800426c <HAL_GPIO_Init+0x334>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <HAL_GPIO_Init+0x236>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a55      	ldr	r2, [pc, #340]	; (8004270 <HAL_GPIO_Init+0x338>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d025      	beq.n	800416a <HAL_GPIO_Init+0x232>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a54      	ldr	r2, [pc, #336]	; (8004274 <HAL_GPIO_Init+0x33c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <HAL_GPIO_Init+0x22e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a53      	ldr	r2, [pc, #332]	; (8004278 <HAL_GPIO_Init+0x340>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_GPIO_Init+0x22a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_GPIO_Init+0x344>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_GPIO_Init+0x226>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a51      	ldr	r2, [pc, #324]	; (8004280 <HAL_GPIO_Init+0x348>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_Init+0x222>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a50      	ldr	r2, [pc, #320]	; (8004284 <HAL_GPIO_Init+0x34c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_Init+0x21e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4f      	ldr	r2, [pc, #316]	; (8004288 <HAL_GPIO_Init+0x350>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_Init+0x21a>
 800414e:	2309      	movs	r3, #9
 8004150:	e012      	b.n	8004178 <HAL_GPIO_Init+0x240>
 8004152:	230a      	movs	r3, #10
 8004154:	e010      	b.n	8004178 <HAL_GPIO_Init+0x240>
 8004156:	2308      	movs	r3, #8
 8004158:	e00e      	b.n	8004178 <HAL_GPIO_Init+0x240>
 800415a:	2307      	movs	r3, #7
 800415c:	e00c      	b.n	8004178 <HAL_GPIO_Init+0x240>
 800415e:	2306      	movs	r3, #6
 8004160:	e00a      	b.n	8004178 <HAL_GPIO_Init+0x240>
 8004162:	2305      	movs	r3, #5
 8004164:	e008      	b.n	8004178 <HAL_GPIO_Init+0x240>
 8004166:	2304      	movs	r3, #4
 8004168:	e006      	b.n	8004178 <HAL_GPIO_Init+0x240>
 800416a:	2303      	movs	r3, #3
 800416c:	e004      	b.n	8004178 <HAL_GPIO_Init+0x240>
 800416e:	2302      	movs	r3, #2
 8004170:	e002      	b.n	8004178 <HAL_GPIO_Init+0x240>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_GPIO_Init+0x240>
 8004176:	2300      	movs	r3, #0
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f002 0203 	and.w	r2, r2, #3
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	4093      	lsls	r3, r2
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004188:	4935      	ldr	r1, [pc, #212]	; (8004260 <HAL_GPIO_Init+0x328>)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004196:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_GPIO_Init+0x354>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ba:	4a34      	ldr	r2, [pc, #208]	; (800428c <HAL_GPIO_Init+0x354>)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_GPIO_Init+0x354>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e4:	4a29      	ldr	r2, [pc, #164]	; (800428c <HAL_GPIO_Init+0x354>)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_GPIO_Init+0x354>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800420e:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_GPIO_Init+0x354>)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_GPIO_Init+0x354>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <HAL_GPIO_Init+0x354>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	f67f ae86 	bls.w	8003f58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	40013800 	.word	0x40013800
 8004264:	40020000 	.word	0x40020000
 8004268:	40020400 	.word	0x40020400
 800426c:	40020800 	.word	0x40020800
 8004270:	40020c00 	.word	0x40020c00
 8004274:	40021000 	.word	0x40021000
 8004278:	40021400 	.word	0x40021400
 800427c:	40021800 	.word	0x40021800
 8004280:	40021c00 	.word	0x40021c00
 8004284:	40022000 	.word	0x40022000
 8004288:	40022400 	.word	0x40022400
 800428c:	40013c00 	.word	0x40013c00

08004290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
 800429c:	4613      	mov	r3, r2
 800429e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a0:	787b      	ldrb	r3, [r7, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042ac:	e003      	b.n	80042b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	041a      	lsls	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	619a      	str	r2, [r3, #24]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042d4:	887a      	ldrh	r2, [r7, #2]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4013      	ands	r3, r2
 80042da:	041a      	lsls	r2, r3, #16
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43d9      	mvns	r1, r3
 80042e0:	887b      	ldrh	r3, [r7, #2]
 80042e2:	400b      	ands	r3, r1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	619a      	str	r2, [r3, #24]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e29b      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8087 	beq.w	800442a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800431c:	4b96      	ldr	r3, [pc, #600]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004328:	4b93      	ldr	r3, [pc, #588]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d112      	bne.n	800435a <HAL_RCC_OscConfig+0x62>
 8004334:	4b90      	ldr	r3, [pc, #576]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004340:	d10b      	bne.n	800435a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004342:	4b8d      	ldr	r3, [pc, #564]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06c      	beq.n	8004428 <HAL_RCC_OscConfig+0x130>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d168      	bne.n	8004428 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e275      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x7a>
 8004364:	4b84      	ldr	r3, [pc, #528]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a83      	ldr	r2, [pc, #524]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e02e      	b.n	80043d0 <HAL_RCC_OscConfig+0xd8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x9c>
 800437a:	4b7f      	ldr	r3, [pc, #508]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7e      	ldr	r2, [pc, #504]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b7c      	ldr	r3, [pc, #496]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7b      	ldr	r2, [pc, #492]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800438c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xd8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0xc0>
 800439e:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a75      	ldr	r2, [pc, #468]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b73      	ldr	r3, [pc, #460]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a72      	ldr	r2, [pc, #456]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xd8>
 80043b8:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6b      	ldr	r2, [pc, #428]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe fade 	bl	8002998 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fe fada 	bl	8002998 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e229      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b61      	ldr	r3, [pc, #388]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe8>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fe faca 	bl	8002998 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fe fac6 	bl	8002998 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e215      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b57      	ldr	r3, [pc, #348]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x110>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d069      	beq.n	800450a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004436:	4b50      	ldr	r3, [pc, #320]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b4d      	ldr	r3, [pc, #308]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x190>
 800444e:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b47      	ldr	r3, [pc, #284]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x17a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1e9      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b41      	ldr	r3, [pc, #260]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	493d      	ldr	r1, [pc, #244]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e040      	b.n	800450a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d023      	beq.n	80044d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b39      	ldr	r3, [pc, #228]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a38      	ldr	r2, [pc, #224]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fe fa7c 	bl	8002998 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fe fa78 	bl	8002998 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1c7      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b6:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4929      	ldr	r1, [pc, #164]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
 80044d6:	e018      	b.n	800450a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fa58 	bl	8002998 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fe fa54 	bl	8002998 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1a3      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d038      	beq.n	8004588 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d019      	beq.n	8004552 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fe fa35 	bl	8002998 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004532:	f7fe fa31 	bl	8002998 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e180      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x23a>
 8004550:	e01a      	b.n	8004588 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x280>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fe fa1b 	bl	8002998 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004566:	f7fe fa17 	bl	8002998 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d903      	bls.n	800457c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e166      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
 8004578:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ee      	bne.n	8004566 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a4 	beq.w	80046de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b8c      	ldr	r3, [pc, #560]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b89      	ldr	r3, [pc, #548]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4a88      	ldr	r2, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	; 0x40
 80045ae:	4b86      	ldr	r3, [pc, #536]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045be:	4b83      	ldr	r3, [pc, #524]	; (80047cc <HAL_RCC_OscConfig+0x4d4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045ca:	4b80      	ldr	r3, [pc, #512]	; (80047cc <HAL_RCC_OscConfig+0x4d4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7f      	ldr	r2, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x4d4>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fe f9df 	bl	8002998 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fe f9db 	bl	8002998 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e12a      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f0:	4b76      	ldr	r3, [pc, #472]	; (80047cc <HAL_RCC_OscConfig+0x4d4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x31a>
 8004604:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a6f      	ldr	r2, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6713      	str	r3, [r2, #112]	; 0x70
 8004610:	e02d      	b.n	800466e <HAL_RCC_OscConfig+0x376>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x33c>
 800461a:	4b6b      	ldr	r3, [pc, #428]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a6a      	ldr	r2, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a67      	ldr	r2, [pc, #412]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	e01c      	b.n	800466e <HAL_RCC_OscConfig+0x376>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x35e>
 800463c:	4b62      	ldr	r3, [pc, #392]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a61      	ldr	r2, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	e00b      	b.n	800466e <HAL_RCC_OscConfig+0x376>
 8004656:	4b5c      	ldr	r3, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d015      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fe f98f 	bl	8002998 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fe f98b 	bl	8002998 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0d8      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b4c      	ldr	r3, [pc, #304]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCC_OscConfig+0x386>
 80046a0:	e014      	b.n	80046cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fe f979 	bl	8002998 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fe f975 	bl	8002998 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0c2      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c0:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ee      	bne.n	80046aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80ae 	beq.w	8004844 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e8:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d06d      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d14b      	bne.n	8004794 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b32      	ldr	r3, [pc, #200]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a31      	ldr	r2, [pc, #196]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe f946 	bl	8002998 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fe f942 	bl	8002998 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e091      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fe f914 	bl	8002998 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004774:	f7fe f910 	bl	8002998 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e05f      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x47c>
 8004792:	e057      	b.n	8004844 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 800479a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe f8fa 	bl	8002998 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fe f8f6 	bl	8002998 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e045      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <HAL_RCC_OscConfig+0x4d0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4b0>
 80047c6:	e03d      	b.n	8004844 <HAL_RCC_OscConfig+0x54c>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047d0:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <HAL_RCC_OscConfig+0x558>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d030      	beq.n	8004840 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d129      	bne.n	8004840 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d122      	bne.n	8004840 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004806:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004808:	4293      	cmp	r3, r2
 800480a:	d119      	bne.n	8004840 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d10f      	bne.n	8004840 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0d0      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d910      	bls.n	800489c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 020f 	bic.w	r2, r3, #15
 8004882:	4965      	ldr	r1, [pc, #404]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0b8      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b4:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048cc:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a52      	ldr	r2, [pc, #328]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	494d      	ldr	r1, [pc, #308]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d040      	beq.n	8004978 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d115      	bne.n	8004936 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e073      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e06b      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004936:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f023 0203 	bic.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4936      	ldr	r1, [pc, #216]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004948:	f7fe f826 	bl	8002998 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	e00a      	b.n	8004966 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004950:	f7fe f822 	bl	8002998 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e053      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 020c 	and.w	r2, r3, #12
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	429a      	cmp	r2, r3
 8004976:	d1eb      	bne.n	8004950 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d210      	bcs.n	80049a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	4922      	ldr	r1, [pc, #136]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e032      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4916      	ldr	r1, [pc, #88]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	490e      	ldr	r1, [pc, #56]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049e6:	f000 f821 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	490a      	ldr	r1, [pc, #40]	; (8004a20 <HAL_RCC_ClockConfig+0x1cc>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1d0>)
 8004a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1d4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd ff82 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	080095cc 	.word	0x080095cc
 8004a24:	2000016c 	.word	0x2000016c
 8004a28:	20000170 	.word	0x20000170

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b090      	sub	sp, #64	; 0x40
 8004a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x40>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	f200 80a1 	bhi.w	8004b98 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5e:	e09b      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a64:	e09b      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a6a:	e098      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a76:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	623b      	str	r3, [r7, #32]
 8004a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a94:	2100      	movs	r1, #0
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a98:	fb03 f201 	mul.w	r2, r3, r1
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	fb00 f303 	mul.w	r3, r0, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a43      	ldr	r2, [pc, #268]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa6:	fba0 1202 	umull	r1, r2, r0, r2
 8004aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aac:	460a      	mov	r2, r1
 8004aae:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab2:	4413      	add	r3, r2
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	2200      	movs	r2, #0
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	61fa      	str	r2, [r7, #28]
 8004abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ac6:	f7fb fc13 	bl	80002f0 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad2:	e053      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	2200      	movs	r2, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	617a      	str	r2, [r7, #20]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ae6:	f04f 0b00 	mov.w	fp, #0
 8004aea:	4652      	mov	r2, sl
 8004aec:	465b      	mov	r3, fp
 8004aee:	f04f 0000 	mov.w	r0, #0
 8004af2:	f04f 0100 	mov.w	r1, #0
 8004af6:	0159      	lsls	r1, r3, #5
 8004af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004afc:	0150      	lsls	r0, r2, #5
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	ebb2 080a 	subs.w	r8, r2, sl
 8004b06:	eb63 090b 	sbc.w	r9, r3, fp
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b1e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b22:	eb63 0509 	sbc.w	r5, r3, r9
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	00eb      	lsls	r3, r5, #3
 8004b30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b34:	00e2      	lsls	r2, r4, #3
 8004b36:	4614      	mov	r4, r2
 8004b38:	461d      	mov	r5, r3
 8004b3a:	eb14 030a 	adds.w	r3, r4, sl
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	eb45 030b 	adc.w	r3, r5, fp
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b52:	4629      	mov	r1, r5
 8004b54:	028b      	lsls	r3, r1, #10
 8004b56:	4621      	mov	r1, r4
 8004b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	028a      	lsls	r2, r1, #10
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	2200      	movs	r2, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	60fa      	str	r2, [r7, #12]
 8004b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b70:	f7fb fbbe 	bl	80002f0 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3740      	adds	r7, #64	; 0x40
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	00f42400 	.word	0x00f42400
 8004bb4:	017d7840 	.word	0x017d7840

08004bb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	2000016c 	.word	0x2000016c

08004bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bd4:	f7ff fff0 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0a9b      	lsrs	r3, r3, #10
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	080095dc 	.word	0x080095dc

08004bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bfc:	f7ff ffdc 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0b5b      	lsrs	r3, r3, #13
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	080095dc 	.word	0x080095dc

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c48:	4b69      	ldr	r3, [pc, #420]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a68      	ldr	r2, [pc, #416]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c52:	6093      	str	r3, [r2, #8]
 8004c54:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5c:	4964      	ldr	r1, [pc, #400]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d017      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	4959      	ldr	r1, [pc, #356]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d017      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cb6:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	494a      	ldr	r1, [pc, #296]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd4:	d101      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 808b 	beq.w	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d04:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	4a39      	ldr	r2, [pc, #228]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d10:	4b37      	ldr	r3, [pc, #220]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d1c:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d28:	f7fd fe36 	bl	8002998 <HAL_GetTick>
 8004d2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fd fe32 	bl	8002998 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	; 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e38f      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d42:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d4e:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d035      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d02e      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d6c:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d76:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d94:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d114      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd fdfa 	bl	8002998 <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fd fdf6 	bl	8002998 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e351      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ee      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd6:	d111      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004de6:	400b      	ands	r3, r1
 8004de8:	4901      	ldr	r1, [pc, #4]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
 8004dee:	e00b      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40007000 	.word	0x40007000
 8004df8:	0ffffcff 	.word	0x0ffffcff
 8004dfc:	4bac      	ldr	r3, [pc, #688]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4aab      	ldr	r2, [pc, #684]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e06:	6093      	str	r3, [r2, #8]
 8004e08:	4ba9      	ldr	r3, [pc, #676]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e14:	49a6      	ldr	r1, [pc, #664]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d010      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e26:	4ba2      	ldr	r3, [pc, #648]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2c:	4aa0      	ldr	r2, [pc, #640]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e36:	4b9e      	ldr	r3, [pc, #632]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	499b      	ldr	r1, [pc, #620]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e54:	4b96      	ldr	r3, [pc, #600]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e62:	4993      	ldr	r1, [pc, #588]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e76:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e84:	498a      	ldr	r1, [pc, #552]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e98:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea6:	4982      	ldr	r1, [pc, #520]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eba:	4b7d      	ldr	r3, [pc, #500]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4979      	ldr	r1, [pc, #484]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004edc:	4b74      	ldr	r3, [pc, #464]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f023 0203 	bic.w	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4971      	ldr	r1, [pc, #452]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004efe:	4b6c      	ldr	r3, [pc, #432]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f023 020c 	bic.w	r2, r3, #12
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0c:	4968      	ldr	r1, [pc, #416]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f20:	4b63      	ldr	r3, [pc, #396]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	4960      	ldr	r1, [pc, #384]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	4957      	ldr	r1, [pc, #348]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f64:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	494f      	ldr	r1, [pc, #316]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f86:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	4946      	ldr	r1, [pc, #280]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fa8:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	493e      	ldr	r1, [pc, #248]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fca:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd8:	4935      	ldr	r1, [pc, #212]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fec:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ffa:	492d      	ldr	r1, [pc, #180]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d011      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501c:	4924      	ldr	r1, [pc, #144]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502c:	d101      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800502e:	2301      	movs	r3, #1
 8005030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800503e:	2301      	movs	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505c:	4914      	ldr	r1, [pc, #80]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005080:	490b      	ldr	r1, [pc, #44]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00f      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a4:	4902      	ldr	r1, [pc, #8]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050ac:	e002      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050c0:	4b8a      	ldr	r3, [pc, #552]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	4986      	ldr	r1, [pc, #536]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050e4:	4b81      	ldr	r3, [pc, #516]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f4:	497d      	ldr	r1, [pc, #500]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d006      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80d6 	beq.w	80052bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005110:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a75      	ldr	r2, [pc, #468]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005116:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800511a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511c:	f7fd fc3c 	bl	8002998 <HAL_GetTick>
 8005120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005124:	f7fd fc38 	bl	8002998 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e195      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d021      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	2b00      	cmp	r3, #0
 8005154:	d11d      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005156:	4b65      	ldr	r3, [pc, #404]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516a:	0e1b      	lsrs	r3, r3, #24
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	019a      	lsls	r2, r3, #6
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	4958      	ldr	r1, [pc, #352]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02e      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051bc:	d129      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051be:	4b4b      	ldr	r3, [pc, #300]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051cc:	4b47      	ldr	r3, [pc, #284]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d2:	0f1b      	lsrs	r3, r3, #28
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	019a      	lsls	r2, r3, #6
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	493e      	ldr	r1, [pc, #248]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051fa:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005200:	f023 021f 	bic.w	r2, r3, #31
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	3b01      	subs	r3, #1
 800520a:	4938      	ldr	r1, [pc, #224]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01d      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800521e:	4b33      	ldr	r3, [pc, #204]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800522c:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	0f1b      	lsrs	r3, r3, #28
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	019a      	lsls	r2, r3, #6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	4926      	ldr	r1, [pc, #152]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	019a      	lsls	r2, r3, #6
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	491a      	ldr	r1, [pc, #104]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fd fb7f 	bl	8002998 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800529e:	f7fd fb7b 	bl	8002998 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b64      	cmp	r3, #100	; 0x64
 80052aa:	d901      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0d8      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	f040 80ce 	bne.w	8005460 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a08      	ldr	r2, [pc, #32]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7fd fb62 	bl	8002998 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052d6:	e00b      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052d8:	f7fd fb5e 	bl	8002998 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d904      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0bb      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052f0:	4b5e      	ldr	r3, [pc, #376]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fc:	d0ec      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02e      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d12a      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005326:	4b51      	ldr	r3, [pc, #324]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005334:	4b4d      	ldr	r3, [pc, #308]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	0f1b      	lsrs	r3, r3, #28
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	019a      	lsls	r2, r3, #6
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	4944      	ldr	r1, [pc, #272]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005362:	4b42      	ldr	r3, [pc, #264]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005368:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	493d      	ldr	r1, [pc, #244]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d022      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800538c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005390:	d11d      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	0e1b      	lsrs	r3, r3, #24
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053a0:	4b32      	ldr	r3, [pc, #200]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	0f1b      	lsrs	r3, r3, #28
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	019a      	lsls	r2, r3, #6
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	061b      	lsls	r3, r3, #24
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	4929      	ldr	r1, [pc, #164]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d028      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	0e1b      	lsrs	r3, r3, #24
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	019a      	lsls	r2, r3, #6
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	431a      	orrs	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	071b      	lsls	r3, r3, #28
 800540e:	4917      	ldr	r1, [pc, #92]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4911      	ldr	r1, [pc, #68]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0e      	ldr	r2, [pc, #56]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fd faae 	bl	8002998 <HAL_GetTick>
 800543c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005440:	f7fd faaa 	bl	8002998 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e007      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545e:	d1ef      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800

08005470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e049      	b.n	8005516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fc ff5c 	bl	8002354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f000 fac0 	bl	8005a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e054      	b.n	80055e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1f      	ldr	r2, [pc, #124]	; (80055fc <HAL_TIM_Base_Start_IT+0xdc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <HAL_TIM_Base_Start_IT+0xe0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1c      	ldr	r2, [pc, #112]	; (8005604 <HAL_TIM_Base_Start_IT+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <HAL_TIM_Base_Start_IT+0xe8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d115      	bne.n	80055cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_TIM_Base_Start_IT+0xec>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b06      	cmp	r3, #6
 80055b0:	d015      	beq.n	80055de <HAL_TIM_Base_Start_IT+0xbe>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	d011      	beq.n	80055de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ca:	e008      	b.n	80055de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e000      	b.n	80055e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40010400 	.word	0x40010400
 8005604:	40014000 	.word	0x40014000
 8005608:	40001800 	.word	0x40001800
 800560c:	00010007 	.word	0x00010007

08005610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b02      	cmp	r3, #2
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0202 	mvn.w	r2, #2
 800563c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9d0 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9c2 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f9d3 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b04      	cmp	r3, #4
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b04      	cmp	r3, #4
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0204 	mvn.w	r2, #4
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9a6 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f998 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f9a9 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d122      	bne.n	8005714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d11b      	bne.n	8005714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0208 	mvn.w	r2, #8
 80056e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2204      	movs	r2, #4
 80056ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f97c 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f96e 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f97f 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b10      	cmp	r3, #16
 8005720:	d122      	bne.n	8005768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b10      	cmp	r3, #16
 800572e:	d11b      	bne.n	8005768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0210 	mvn.w	r2, #16
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2208      	movs	r2, #8
 800573e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f952 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f944 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f955 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0201 	mvn.w	r2, #1
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc fb48 	bl	8001e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fb0c 	bl	8005dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d10e      	bne.n	80057ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d107      	bne.n	80057ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 faff 	bl	8005dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d10e      	bne.n	800581a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f903 	bl	8005a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b20      	cmp	r3, #32
 8005826:	d10e      	bne.n	8005846 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b20      	cmp	r3, #32
 8005834:	d107      	bne.n	8005846 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f06f 0220 	mvn.w	r2, #32
 800583e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fabf 	bl	8005dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIM_ConfigClockSource+0x1c>
 8005868:	2302      	movs	r3, #2
 800586a:	e0b4      	b.n	80059d6 <HAL_TIM_ConfigClockSource+0x186>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4b56      	ldr	r3, [pc, #344]	; (80059e0 <HAL_TIM_ConfigClockSource+0x190>)
 8005888:	4013      	ands	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a4:	d03e      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0xd4>
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	f200 8087 	bhi.w	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b2:	f000 8086 	beq.w	80059c2 <HAL_TIM_ConfigClockSource+0x172>
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ba:	d87f      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b70      	cmp	r3, #112	; 0x70
 80058be:	d01a      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xa6>
 80058c0:	2b70      	cmp	r3, #112	; 0x70
 80058c2:	d87b      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b60      	cmp	r3, #96	; 0x60
 80058c6:	d050      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x11a>
 80058c8:	2b60      	cmp	r3, #96	; 0x60
 80058ca:	d877      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d03c      	beq.n	800594a <HAL_TIM_ConfigClockSource+0xfa>
 80058d0:	2b50      	cmp	r3, #80	; 0x50
 80058d2:	d873      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d058      	beq.n	800598a <HAL_TIM_ConfigClockSource+0x13a>
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d86f      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d064      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	2b30      	cmp	r3, #48	; 0x30
 80058e2:	d86b      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d060      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d867      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05c      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d05a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058f4:	e062      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6899      	ldr	r1, [r3, #8]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f000 f9af 	bl	8005c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	609a      	str	r2, [r3, #8]
      break;
 8005922:	e04f      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6899      	ldr	r1, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f000 f998 	bl	8005c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005946:	609a      	str	r2, [r3, #8]
      break;
 8005948:	e03c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	f000 f90c 	bl	8005b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2150      	movs	r1, #80	; 0x50
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f965 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 8005968:	e02c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	461a      	mov	r2, r3
 8005978:	f000 f92b 	bl	8005bd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2160      	movs	r1, #96	; 0x60
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f955 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 8005988:	e01c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	461a      	mov	r2, r3
 8005998:	f000 f8ec 	bl	8005b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2140      	movs	r1, #64	; 0x40
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f945 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 80059a8:	e00c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f000 f93c 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 80059ba:	e003      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	e000      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	fffeff88 	.word	0xfffeff88

080059e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a40      	ldr	r2, [pc, #256]	; (8005b48 <TIM_Base_SetConfig+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	d00f      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3d      	ldr	r2, [pc, #244]	; (8005b4c <TIM_Base_SetConfig+0x118>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3c      	ldr	r2, [pc, #240]	; (8005b50 <TIM_Base_SetConfig+0x11c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3b      	ldr	r2, [pc, #236]	; (8005b54 <TIM_Base_SetConfig+0x120>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a3a      	ldr	r2, [pc, #232]	; (8005b58 <TIM_Base_SetConfig+0x124>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2f      	ldr	r2, [pc, #188]	; (8005b48 <TIM_Base_SetConfig+0x114>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d027      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <TIM_Base_SetConfig+0x118>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d023      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2b      	ldr	r2, [pc, #172]	; (8005b50 <TIM_Base_SetConfig+0x11c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01f      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <TIM_Base_SetConfig+0x120>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <TIM_Base_SetConfig+0x124>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d017      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <TIM_Base_SetConfig+0x128>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <TIM_Base_SetConfig+0x12c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a26      	ldr	r2, [pc, #152]	; (8005b64 <TIM_Base_SetConfig+0x130>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a25      	ldr	r2, [pc, #148]	; (8005b68 <TIM_Base_SetConfig+0x134>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a24      	ldr	r2, [pc, #144]	; (8005b6c <TIM_Base_SetConfig+0x138>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <TIM_Base_SetConfig+0x13c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <TIM_Base_SetConfig+0x114>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0xf8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d103      	bne.n	8005b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	615a      	str	r2, [r3, #20]
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40010400 	.word	0x40010400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800
 8005b68:	40001800 	.word	0x40001800
 8005b6c:	40001c00 	.word	0x40001c00
 8005b70:	40002000 	.word	0x40002000

08005b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 030a 	bic.w	r3, r3, #10
 8005bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b087      	sub	sp, #28
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0210 	bic.w	r2, r3, #16
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	031b      	lsls	r3, r3, #12
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f043 0307 	orr.w	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e06d      	b.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a30      	ldr	r2, [pc, #192]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d108      	bne.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d01d      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10c      	bne.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40001800 	.word	0x40001800

08005dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e040      	b.n	8005e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fc faba 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f974 	bl	800612c <UART_SetConfig>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e022      	b.n	8005e94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fbcc 	bl	80065f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fc53 	bl	8006738 <UART_CheckIdleState>
 8005e92:	4603      	mov	r3, r0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d171      	bne.n	8005f98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Transmit+0x24>
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e06a      	b.n	8005f9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2221      	movs	r2, #33	; 0x21
 8005ed0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed2:	f7fc fd61 	bl	8002998 <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef0:	d108      	bne.n	8005f04 <HAL_UART_Transmit+0x68>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e003      	b.n	8005f0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f0c:	e02c      	b.n	8005f68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fc5a 	bl	80067d2 <UART_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e038      	b.n	8005f9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	3302      	adds	r3, #2
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	e007      	b.n	8005f56 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1cc      	bne.n	8005f0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2140      	movs	r1, #64	; 0x40
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fc27 	bl	80067d2 <UART_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e005      	b.n	8005f9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08a      	sub	sp, #40	; 0x28
 8005fa6:	af02      	add	r7, sp, #8
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	f040 80b1 	bne.w	8006120 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_UART_Receive+0x28>
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0a9      	b.n	8006122 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2222      	movs	r2, #34	; 0x22
 8005fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fe4:	f7fc fcd8 	bl	8002998 <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d10e      	bne.n	8006022 <HAL_UART_Receive+0x80>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_UART_Receive+0x76>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006012:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006016:	e02d      	b.n	8006074 <HAL_UART_Receive+0xd2>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	22ff      	movs	r2, #255	; 0xff
 800601c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006020:	e028      	b.n	8006074 <HAL_UART_Receive+0xd2>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <HAL_UART_Receive+0xa4>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <HAL_UART_Receive+0x9a>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	22ff      	movs	r2, #255	; 0xff
 8006036:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800603a:	e01b      	b.n	8006074 <HAL_UART_Receive+0xd2>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	227f      	movs	r2, #127	; 0x7f
 8006040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006044:	e016      	b.n	8006074 <HAL_UART_Receive+0xd2>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800604e:	d10d      	bne.n	800606c <HAL_UART_Receive+0xca>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <HAL_UART_Receive+0xc0>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	227f      	movs	r2, #127	; 0x7f
 800605c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006060:	e008      	b.n	8006074 <HAL_UART_Receive+0xd2>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	223f      	movs	r2, #63	; 0x3f
 8006066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800606a:	e003      	b.n	8006074 <HAL_UART_Receive+0xd2>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800607a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d108      	bne.n	8006098 <HAL_UART_Receive+0xf6>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	e003      	b.n	80060a0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80060a0:	e032      	b.n	8006108 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2120      	movs	r1, #32
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fb90 	bl	80067d2 <UART_WaitOnFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e032      	b.n	8006122 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10c      	bne.n	80060dc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	8a7b      	ldrh	r3, [r7, #18]
 80060cc:	4013      	ands	r3, r2
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	3302      	adds	r3, #2
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e00c      	b.n	80060f6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	8a7b      	ldrh	r3, [r7, #18]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	4013      	ands	r3, r2
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1c6      	bne.n	80060a2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4ba6      	ldr	r3, [pc, #664]	; (80063f0 <UART_SetConfig+0x2c4>)
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	430b      	orrs	r3, r1
 8006162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a94      	ldr	r2, [pc, #592]	; (80063f4 <UART_SetConfig+0x2c8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d120      	bne.n	80061ea <UART_SetConfig+0xbe>
 80061a8:	4b93      	ldr	r3, [pc, #588]	; (80063f8 <UART_SetConfig+0x2cc>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d816      	bhi.n	80061e4 <UART_SetConfig+0xb8>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x90>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061d3 	.word	0x080061d3
 80061c8:	080061df 	.word	0x080061df
 80061cc:	2301      	movs	r3, #1
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e150      	b.n	8006474 <UART_SetConfig+0x348>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e14d      	b.n	8006474 <UART_SetConfig+0x348>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e14a      	b.n	8006474 <UART_SetConfig+0x348>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e147      	b.n	8006474 <UART_SetConfig+0x348>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e144      	b.n	8006474 <UART_SetConfig+0x348>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a83      	ldr	r2, [pc, #524]	; (80063fc <UART_SetConfig+0x2d0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d132      	bne.n	800625a <UART_SetConfig+0x12e>
 80061f4:	4b80      	ldr	r3, [pc, #512]	; (80063f8 <UART_SetConfig+0x2cc>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d828      	bhi.n	8006254 <UART_SetConfig+0x128>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0xdc>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	0800623d 	.word	0x0800623d
 800620c:	08006255 	.word	0x08006255
 8006210:	08006255 	.word	0x08006255
 8006214:	08006255 	.word	0x08006255
 8006218:	08006249 	.word	0x08006249
 800621c:	08006255 	.word	0x08006255
 8006220:	08006255 	.word	0x08006255
 8006224:	08006255 	.word	0x08006255
 8006228:	08006243 	.word	0x08006243
 800622c:	08006255 	.word	0x08006255
 8006230:	08006255 	.word	0x08006255
 8006234:	08006255 	.word	0x08006255
 8006238:	0800624f 	.word	0x0800624f
 800623c:	2300      	movs	r3, #0
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e118      	b.n	8006474 <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e115      	b.n	8006474 <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e112      	b.n	8006474 <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e10f      	b.n	8006474 <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e10c      	b.n	8006474 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a68      	ldr	r2, [pc, #416]	; (8006400 <UART_SetConfig+0x2d4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d120      	bne.n	80062a6 <UART_SetConfig+0x17a>
 8006264:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800626e:	2b30      	cmp	r3, #48	; 0x30
 8006270:	d013      	beq.n	800629a <UART_SetConfig+0x16e>
 8006272:	2b30      	cmp	r3, #48	; 0x30
 8006274:	d814      	bhi.n	80062a0 <UART_SetConfig+0x174>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d009      	beq.n	800628e <UART_SetConfig+0x162>
 800627a:	2b20      	cmp	r3, #32
 800627c:	d810      	bhi.n	80062a0 <UART_SetConfig+0x174>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <UART_SetConfig+0x15c>
 8006282:	2b10      	cmp	r3, #16
 8006284:	d006      	beq.n	8006294 <UART_SetConfig+0x168>
 8006286:	e00b      	b.n	80062a0 <UART_SetConfig+0x174>
 8006288:	2300      	movs	r3, #0
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e0f2      	b.n	8006474 <UART_SetConfig+0x348>
 800628e:	2302      	movs	r3, #2
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e0ef      	b.n	8006474 <UART_SetConfig+0x348>
 8006294:	2304      	movs	r3, #4
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e0ec      	b.n	8006474 <UART_SetConfig+0x348>
 800629a:	2308      	movs	r3, #8
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e0e9      	b.n	8006474 <UART_SetConfig+0x348>
 80062a0:	2310      	movs	r3, #16
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e0e6      	b.n	8006474 <UART_SetConfig+0x348>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a56      	ldr	r2, [pc, #344]	; (8006404 <UART_SetConfig+0x2d8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d120      	bne.n	80062f2 <UART_SetConfig+0x1c6>
 80062b0:	4b51      	ldr	r3, [pc, #324]	; (80063f8 <UART_SetConfig+0x2cc>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ba:	2bc0      	cmp	r3, #192	; 0xc0
 80062bc:	d013      	beq.n	80062e6 <UART_SetConfig+0x1ba>
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	d814      	bhi.n	80062ec <UART_SetConfig+0x1c0>
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d009      	beq.n	80062da <UART_SetConfig+0x1ae>
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d810      	bhi.n	80062ec <UART_SetConfig+0x1c0>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <UART_SetConfig+0x1a8>
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d006      	beq.n	80062e0 <UART_SetConfig+0x1b4>
 80062d2:	e00b      	b.n	80062ec <UART_SetConfig+0x1c0>
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e0cc      	b.n	8006474 <UART_SetConfig+0x348>
 80062da:	2302      	movs	r3, #2
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e0c9      	b.n	8006474 <UART_SetConfig+0x348>
 80062e0:	2304      	movs	r3, #4
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e0c6      	b.n	8006474 <UART_SetConfig+0x348>
 80062e6:	2308      	movs	r3, #8
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e0c3      	b.n	8006474 <UART_SetConfig+0x348>
 80062ec:	2310      	movs	r3, #16
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e0c0      	b.n	8006474 <UART_SetConfig+0x348>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a44      	ldr	r2, [pc, #272]	; (8006408 <UART_SetConfig+0x2dc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d125      	bne.n	8006348 <UART_SetConfig+0x21c>
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <UART_SetConfig+0x2cc>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630a:	d017      	beq.n	800633c <UART_SetConfig+0x210>
 800630c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006310:	d817      	bhi.n	8006342 <UART_SetConfig+0x216>
 8006312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006316:	d00b      	beq.n	8006330 <UART_SetConfig+0x204>
 8006318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631c:	d811      	bhi.n	8006342 <UART_SetConfig+0x216>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <UART_SetConfig+0x1fe>
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d006      	beq.n	8006336 <UART_SetConfig+0x20a>
 8006328:	e00b      	b.n	8006342 <UART_SetConfig+0x216>
 800632a:	2300      	movs	r3, #0
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e0a1      	b.n	8006474 <UART_SetConfig+0x348>
 8006330:	2302      	movs	r3, #2
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e09e      	b.n	8006474 <UART_SetConfig+0x348>
 8006336:	2304      	movs	r3, #4
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e09b      	b.n	8006474 <UART_SetConfig+0x348>
 800633c:	2308      	movs	r3, #8
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e098      	b.n	8006474 <UART_SetConfig+0x348>
 8006342:	2310      	movs	r3, #16
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e095      	b.n	8006474 <UART_SetConfig+0x348>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2f      	ldr	r2, [pc, #188]	; (800640c <UART_SetConfig+0x2e0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d125      	bne.n	800639e <UART_SetConfig+0x272>
 8006352:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <UART_SetConfig+0x2cc>)
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800635c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006360:	d017      	beq.n	8006392 <UART_SetConfig+0x266>
 8006362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006366:	d817      	bhi.n	8006398 <UART_SetConfig+0x26c>
 8006368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636c:	d00b      	beq.n	8006386 <UART_SetConfig+0x25a>
 800636e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006372:	d811      	bhi.n	8006398 <UART_SetConfig+0x26c>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <UART_SetConfig+0x254>
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637c:	d006      	beq.n	800638c <UART_SetConfig+0x260>
 800637e:	e00b      	b.n	8006398 <UART_SetConfig+0x26c>
 8006380:	2301      	movs	r3, #1
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e076      	b.n	8006474 <UART_SetConfig+0x348>
 8006386:	2302      	movs	r3, #2
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e073      	b.n	8006474 <UART_SetConfig+0x348>
 800638c:	2304      	movs	r3, #4
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e070      	b.n	8006474 <UART_SetConfig+0x348>
 8006392:	2308      	movs	r3, #8
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e06d      	b.n	8006474 <UART_SetConfig+0x348>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e06a      	b.n	8006474 <UART_SetConfig+0x348>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <UART_SetConfig+0x2e4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d138      	bne.n	800641a <UART_SetConfig+0x2ee>
 80063a8:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <UART_SetConfig+0x2cc>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b6:	d017      	beq.n	80063e8 <UART_SetConfig+0x2bc>
 80063b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063bc:	d82a      	bhi.n	8006414 <UART_SetConfig+0x2e8>
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c2:	d00b      	beq.n	80063dc <UART_SetConfig+0x2b0>
 80063c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c8:	d824      	bhi.n	8006414 <UART_SetConfig+0x2e8>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <UART_SetConfig+0x2aa>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	d006      	beq.n	80063e2 <UART_SetConfig+0x2b6>
 80063d4:	e01e      	b.n	8006414 <UART_SetConfig+0x2e8>
 80063d6:	2300      	movs	r3, #0
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e04b      	b.n	8006474 <UART_SetConfig+0x348>
 80063dc:	2302      	movs	r3, #2
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e048      	b.n	8006474 <UART_SetConfig+0x348>
 80063e2:	2304      	movs	r3, #4
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e045      	b.n	8006474 <UART_SetConfig+0x348>
 80063e8:	2308      	movs	r3, #8
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e042      	b.n	8006474 <UART_SetConfig+0x348>
 80063ee:	bf00      	nop
 80063f0:	efff69f3 	.word	0xefff69f3
 80063f4:	40011000 	.word	0x40011000
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40004400 	.word	0x40004400
 8006400:	40004800 	.word	0x40004800
 8006404:	40004c00 	.word	0x40004c00
 8006408:	40005000 	.word	0x40005000
 800640c:	40011400 	.word	0x40011400
 8006410:	40007800 	.word	0x40007800
 8006414:	2310      	movs	r3, #16
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e02c      	b.n	8006474 <UART_SetConfig+0x348>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a72      	ldr	r2, [pc, #456]	; (80065e8 <UART_SetConfig+0x4bc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d125      	bne.n	8006470 <UART_SetConfig+0x344>
 8006424:	4b71      	ldr	r3, [pc, #452]	; (80065ec <UART_SetConfig+0x4c0>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800642e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006432:	d017      	beq.n	8006464 <UART_SetConfig+0x338>
 8006434:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006438:	d817      	bhi.n	800646a <UART_SetConfig+0x33e>
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643e:	d00b      	beq.n	8006458 <UART_SetConfig+0x32c>
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006444:	d811      	bhi.n	800646a <UART_SetConfig+0x33e>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <UART_SetConfig+0x326>
 800644a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644e:	d006      	beq.n	800645e <UART_SetConfig+0x332>
 8006450:	e00b      	b.n	800646a <UART_SetConfig+0x33e>
 8006452:	2300      	movs	r3, #0
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e00d      	b.n	8006474 <UART_SetConfig+0x348>
 8006458:	2302      	movs	r3, #2
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e00a      	b.n	8006474 <UART_SetConfig+0x348>
 800645e:	2304      	movs	r3, #4
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e007      	b.n	8006474 <UART_SetConfig+0x348>
 8006464:	2308      	movs	r3, #8
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e004      	b.n	8006474 <UART_SetConfig+0x348>
 800646a:	2310      	movs	r3, #16
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e001      	b.n	8006474 <UART_SetConfig+0x348>
 8006470:	2310      	movs	r3, #16
 8006472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647c:	d15b      	bne.n	8006536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800647e:	7ffb      	ldrb	r3, [r7, #31]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d828      	bhi.n	80064d6 <UART_SetConfig+0x3aa>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x360>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064c1 	.word	0x080064c1
 8006498:	080064d7 	.word	0x080064d7
 800649c:	080064c7 	.word	0x080064c7
 80064a0:	080064d7 	.word	0x080064d7
 80064a4:	080064d7 	.word	0x080064d7
 80064a8:	080064d7 	.word	0x080064d7
 80064ac:	080064cf 	.word	0x080064cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fe fb8e 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e013      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b8:	f7fe fb9e 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 80064bc:	61b8      	str	r0, [r7, #24]
        break;
 80064be:	e00f      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c0:	4b4b      	ldr	r3, [pc, #300]	; (80065f0 <UART_SetConfig+0x4c4>)
 80064c2:	61bb      	str	r3, [r7, #24]
        break;
 80064c4:	e00c      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fe fab1 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80064ca:	61b8      	str	r0, [r7, #24]
        break;
 80064cc:	e008      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d2:	61bb      	str	r3, [r7, #24]
        break;
 80064d4:	e004      	b.n	80064e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	77bb      	strb	r3, [r7, #30]
        break;
 80064de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d074      	beq.n	80065d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	005a      	lsls	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	441a      	add	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d916      	bls.n	8006530 <UART_SetConfig+0x404>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d212      	bcs.n	8006530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	b29b      	uxth	r3, r3
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	b29a      	uxth	r2, r3
 8006520:	89fb      	ldrh	r3, [r7, #14]
 8006522:	4313      	orrs	r3, r2
 8006524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	89fa      	ldrh	r2, [r7, #14]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	e04f      	b.n	80065d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	77bb      	strb	r3, [r7, #30]
 8006534:	e04c      	b.n	80065d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006536:	7ffb      	ldrb	r3, [r7, #31]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d828      	bhi.n	800658e <UART_SetConfig+0x462>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x418>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	0800658f 	.word	0x0800658f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800658f 	.word	0x0800658f
 800655c:	0800658f 	.word	0x0800658f
 8006560:	0800658f 	.word	0x0800658f
 8006564:	08006587 	.word	0x08006587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006568:	f7fe fb32 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 800656c:	61b8      	str	r0, [r7, #24]
        break;
 800656e:	e013      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fe fb42 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 8006574:	61b8      	str	r0, [r7, #24]
        break;
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <UART_SetConfig+0x4c4>)
 800657a:	61bb      	str	r3, [r7, #24]
        break;
 800657c:	e00c      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fe fa55 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8006582:	61b8      	str	r0, [r7, #24]
        break;
 8006584:	e008      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e004      	b.n	8006598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	77bb      	strb	r3, [r7, #30]
        break;
 8006596:	bf00      	nop
    }

    if (pclk != 0U)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	085a      	lsrs	r2, r3, #1
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	441a      	add	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d909      	bls.n	80065cc <UART_SetConfig+0x4a0>
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065be:	d205      	bcs.n	80065cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60da      	str	r2, [r3, #12]
 80065ca:	e001      	b.n	80065d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40007c00 	.word	0x40007c00
 80065ec:	40023800 	.word	0x40023800
 80065f0:	00f42400 	.word	0x00f42400

080065f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01a      	beq.n	800670a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f2:	d10a      	bne.n	800670a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006748:	f7fc f926 	bl	8002998 <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b08      	cmp	r3, #8
 800675a:	d10e      	bne.n	800677a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f831 	bl	80067d2 <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e027      	b.n	80067ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b04      	cmp	r3, #4
 8006786:	d10e      	bne.n	80067a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f81b 	bl	80067d2 <UART_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e011      	b.n	80067ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b09c      	sub	sp, #112	; 0x70
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e2:	e0a7      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ea:	f000 80a3 	beq.w	8006934 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7fc f8d3 	bl	8002998 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <UART_WaitOnFlagUntilTimeout+0x32>
 80067fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006800:	2b00      	cmp	r3, #0
 8006802:	d13f      	bne.n	8006884 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006818:	667b      	str	r3, [r7, #100]	; 0x64
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006824:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e6      	bne.n	8006804 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	663b      	str	r3, [r7, #96]	; 0x60
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006856:	64ba      	str	r2, [r7, #72]	; 0x48
 8006858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800685c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e5      	bne.n	8006836 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e068      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d050      	beq.n	8006934 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a0:	d148      	bne.n	8006934 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
 80068cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	613b      	str	r3, [r7, #16]
   return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068fe:	623a      	str	r2, [r7, #32]
 8006900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	69f9      	ldr	r1, [r7, #28]
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	61bb      	str	r3, [r7, #24]
   return(result);
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e010      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69da      	ldr	r2, [r3, #28]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	429a      	cmp	r2, r3
 8006950:	f43f af48 	beq.w	80067e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3770      	adds	r7, #112	; 0x70
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <__errno>:
 8006960:	4b01      	ldr	r3, [pc, #4]	; (8006968 <__errno+0x8>)
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000178 	.word	0x20000178

0800696c <__libc_init_array>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4d0d      	ldr	r5, [pc, #52]	; (80069a4 <__libc_init_array+0x38>)
 8006970:	4c0d      	ldr	r4, [pc, #52]	; (80069a8 <__libc_init_array+0x3c>)
 8006972:	1b64      	subs	r4, r4, r5
 8006974:	10a4      	asrs	r4, r4, #2
 8006976:	2600      	movs	r6, #0
 8006978:	42a6      	cmp	r6, r4
 800697a:	d109      	bne.n	8006990 <__libc_init_array+0x24>
 800697c:	4d0b      	ldr	r5, [pc, #44]	; (80069ac <__libc_init_array+0x40>)
 800697e:	4c0c      	ldr	r4, [pc, #48]	; (80069b0 <__libc_init_array+0x44>)
 8006980:	f002 fddc 	bl	800953c <_init>
 8006984:	1b64      	subs	r4, r4, r5
 8006986:	10a4      	asrs	r4, r4, #2
 8006988:	2600      	movs	r6, #0
 800698a:	42a6      	cmp	r6, r4
 800698c:	d105      	bne.n	800699a <__libc_init_array+0x2e>
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	f855 3b04 	ldr.w	r3, [r5], #4
 8006994:	4798      	blx	r3
 8006996:	3601      	adds	r6, #1
 8006998:	e7ee      	b.n	8006978 <__libc_init_array+0xc>
 800699a:	f855 3b04 	ldr.w	r3, [r5], #4
 800699e:	4798      	blx	r3
 80069a0:	3601      	adds	r6, #1
 80069a2:	e7f2      	b.n	800698a <__libc_init_array+0x1e>
 80069a4:	080099c4 	.word	0x080099c4
 80069a8:	080099c4 	.word	0x080099c4
 80069ac:	080099c4 	.word	0x080099c4
 80069b0:	080099c8 	.word	0x080099c8

080069b4 <memset>:
 80069b4:	4402      	add	r2, r0
 80069b6:	4603      	mov	r3, r0
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d100      	bne.n	80069be <memset+0xa>
 80069bc:	4770      	bx	lr
 80069be:	f803 1b01 	strb.w	r1, [r3], #1
 80069c2:	e7f9      	b.n	80069b8 <memset+0x4>

080069c4 <__cvt>:
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	ed2d 8b02 	vpush	{d8}
 80069ca:	eeb0 8b40 	vmov.f64	d8, d0
 80069ce:	b085      	sub	sp, #20
 80069d0:	4617      	mov	r7, r2
 80069d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80069d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069d6:	ee18 2a90 	vmov	r2, s17
 80069da:	f025 0520 	bic.w	r5, r5, #32
 80069de:	2a00      	cmp	r2, #0
 80069e0:	bfb6      	itet	lt
 80069e2:	222d      	movlt	r2, #45	; 0x2d
 80069e4:	2200      	movge	r2, #0
 80069e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80069ea:	2d46      	cmp	r5, #70	; 0x46
 80069ec:	460c      	mov	r4, r1
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	d004      	beq.n	80069fc <__cvt+0x38>
 80069f2:	2d45      	cmp	r5, #69	; 0x45
 80069f4:	d100      	bne.n	80069f8 <__cvt+0x34>
 80069f6:	3401      	adds	r4, #1
 80069f8:	2102      	movs	r1, #2
 80069fa:	e000      	b.n	80069fe <__cvt+0x3a>
 80069fc:	2103      	movs	r1, #3
 80069fe:	ab03      	add	r3, sp, #12
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	ab02      	add	r3, sp, #8
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	4622      	mov	r2, r4
 8006a08:	4633      	mov	r3, r6
 8006a0a:	eeb0 0b48 	vmov.f64	d0, d8
 8006a0e:	f000 fd6f 	bl	80074f0 <_dtoa_r>
 8006a12:	2d47      	cmp	r5, #71	; 0x47
 8006a14:	d101      	bne.n	8006a1a <__cvt+0x56>
 8006a16:	07fb      	lsls	r3, r7, #31
 8006a18:	d51a      	bpl.n	8006a50 <__cvt+0x8c>
 8006a1a:	2d46      	cmp	r5, #70	; 0x46
 8006a1c:	eb00 0204 	add.w	r2, r0, r4
 8006a20:	d10c      	bne.n	8006a3c <__cvt+0x78>
 8006a22:	7803      	ldrb	r3, [r0, #0]
 8006a24:	2b30      	cmp	r3, #48	; 0x30
 8006a26:	d107      	bne.n	8006a38 <__cvt+0x74>
 8006a28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a30:	bf1c      	itt	ne
 8006a32:	f1c4 0401 	rsbne	r4, r4, #1
 8006a36:	6034      	strne	r4, [r6, #0]
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	bf08      	it	eq
 8006a46:	9203      	streq	r2, [sp, #12]
 8006a48:	2130      	movs	r1, #48	; 0x30
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d307      	bcc.n	8006a60 <__cvt+0x9c>
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a54:	1a1b      	subs	r3, r3, r0
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	b005      	add	sp, #20
 8006a5a:	ecbd 8b02 	vpop	{d8}
 8006a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a60:	1c5c      	adds	r4, r3, #1
 8006a62:	9403      	str	r4, [sp, #12]
 8006a64:	7019      	strb	r1, [r3, #0]
 8006a66:	e7f0      	b.n	8006a4a <__cvt+0x86>

08006a68 <__exponent>:
 8006a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	bfb8      	it	lt
 8006a70:	4249      	neglt	r1, r1
 8006a72:	f803 2b02 	strb.w	r2, [r3], #2
 8006a76:	bfb4      	ite	lt
 8006a78:	222d      	movlt	r2, #45	; 0x2d
 8006a7a:	222b      	movge	r2, #43	; 0x2b
 8006a7c:	2909      	cmp	r1, #9
 8006a7e:	7042      	strb	r2, [r0, #1]
 8006a80:	dd2a      	ble.n	8006ad8 <__exponent+0x70>
 8006a82:	f10d 0407 	add.w	r4, sp, #7
 8006a86:	46a4      	mov	ip, r4
 8006a88:	270a      	movs	r7, #10
 8006a8a:	46a6      	mov	lr, r4
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a92:	fb07 1516 	mls	r5, r7, r6, r1
 8006a96:	3530      	adds	r5, #48	; 0x30
 8006a98:	2a63      	cmp	r2, #99	; 0x63
 8006a9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006a9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	dcf1      	bgt.n	8006a8a <__exponent+0x22>
 8006aa6:	3130      	adds	r1, #48	; 0x30
 8006aa8:	f1ae 0502 	sub.w	r5, lr, #2
 8006aac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ab0:	1c44      	adds	r4, r0, #1
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4561      	cmp	r1, ip
 8006ab6:	d30a      	bcc.n	8006ace <__exponent+0x66>
 8006ab8:	f10d 0209 	add.w	r2, sp, #9
 8006abc:	eba2 020e 	sub.w	r2, r2, lr
 8006ac0:	4565      	cmp	r5, ip
 8006ac2:	bf88      	it	hi
 8006ac4:	2200      	movhi	r2, #0
 8006ac6:	4413      	add	r3, r2
 8006ac8:	1a18      	subs	r0, r3, r0
 8006aca:	b003      	add	sp, #12
 8006acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ad2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ad6:	e7ed      	b.n	8006ab4 <__exponent+0x4c>
 8006ad8:	2330      	movs	r3, #48	; 0x30
 8006ada:	3130      	adds	r1, #48	; 0x30
 8006adc:	7083      	strb	r3, [r0, #2]
 8006ade:	70c1      	strb	r1, [r0, #3]
 8006ae0:	1d03      	adds	r3, r0, #4
 8006ae2:	e7f1      	b.n	8006ac8 <__exponent+0x60>
 8006ae4:	0000      	movs	r0, r0
	...

08006ae8 <_printf_float>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	b08b      	sub	sp, #44	; 0x2c
 8006aee:	460c      	mov	r4, r1
 8006af0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006af4:	4616      	mov	r6, r2
 8006af6:	461f      	mov	r7, r3
 8006af8:	4605      	mov	r5, r0
 8006afa:	f001 fc1f 	bl	800833c <_localeconv_r>
 8006afe:	f8d0 b000 	ldr.w	fp, [r0]
 8006b02:	4658      	mov	r0, fp
 8006b04:	f7f9 fb9c 	bl	8000240 <strlen>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9308      	str	r3, [sp, #32]
 8006b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b14:	6822      	ldr	r2, [r4, #0]
 8006b16:	3307      	adds	r3, #7
 8006b18:	f023 0307 	bic.w	r3, r3, #7
 8006b1c:	f103 0108 	add.w	r1, r3, #8
 8006b20:	f8c8 1000 	str.w	r1, [r8]
 8006b24:	4682      	mov	sl, r0
 8006b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b2a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006b2e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006d90 <_printf_float+0x2a8>
 8006b32:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006b36:	eeb0 6bc0 	vabs.f64	d6, d0
 8006b3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8006b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b42:	dd24      	ble.n	8006b8e <_printf_float+0xa6>
 8006b44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	d502      	bpl.n	8006b54 <_printf_float+0x6c>
 8006b4e:	232d      	movs	r3, #45	; 0x2d
 8006b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b54:	4b90      	ldr	r3, [pc, #576]	; (8006d98 <_printf_float+0x2b0>)
 8006b56:	4891      	ldr	r0, [pc, #580]	; (8006d9c <_printf_float+0x2b4>)
 8006b58:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b5c:	bf94      	ite	ls
 8006b5e:	4698      	movls	r8, r3
 8006b60:	4680      	movhi	r8, r0
 8006b62:	2303      	movs	r3, #3
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	9304      	str	r3, [sp, #16]
 8006b70:	9700      	str	r7, [sp, #0]
 8006b72:	4633      	mov	r3, r6
 8006b74:	aa09      	add	r2, sp, #36	; 0x24
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f9d3 	bl	8006f24 <_printf_common>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f040 808a 	bne.w	8006c98 <_printf_float+0x1b0>
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b88:	b00b      	add	sp, #44	; 0x2c
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b96:	d709      	bvc.n	8006bac <_printf_float+0xc4>
 8006b98:	ee10 3a90 	vmov	r3, s1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfbc      	itt	lt
 8006ba0:	232d      	movlt	r3, #45	; 0x2d
 8006ba2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ba6:	487e      	ldr	r0, [pc, #504]	; (8006da0 <_printf_float+0x2b8>)
 8006ba8:	4b7e      	ldr	r3, [pc, #504]	; (8006da4 <_printf_float+0x2bc>)
 8006baa:	e7d5      	b.n	8006b58 <_printf_float+0x70>
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006bb2:	9104      	str	r1, [sp, #16]
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	d13c      	bne.n	8006c32 <_printf_float+0x14a>
 8006bb8:	2306      	movs	r3, #6
 8006bba:	6063      	str	r3, [r4, #4]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9303      	str	r3, [sp, #12]
 8006bc0:	ab08      	add	r3, sp, #32
 8006bc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bca:	ab07      	add	r3, sp, #28
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	6022      	str	r2, [r4, #0]
 8006bd2:	f10d 031b 	add.w	r3, sp, #27
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f7ff fef4 	bl	80069c4 <__cvt>
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	9907      	ldr	r1, [sp, #28]
 8006be0:	2b47      	cmp	r3, #71	; 0x47
 8006be2:	4680      	mov	r8, r0
 8006be4:	d108      	bne.n	8006bf8 <_printf_float+0x110>
 8006be6:	1cc8      	adds	r0, r1, #3
 8006be8:	db02      	blt.n	8006bf0 <_printf_float+0x108>
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	4299      	cmp	r1, r3
 8006bee:	dd41      	ble.n	8006c74 <_printf_float+0x18c>
 8006bf0:	f1a9 0902 	sub.w	r9, r9, #2
 8006bf4:	fa5f f989 	uxtb.w	r9, r9
 8006bf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bfc:	d820      	bhi.n	8006c40 <_printf_float+0x158>
 8006bfe:	3901      	subs	r1, #1
 8006c00:	464a      	mov	r2, r9
 8006c02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c06:	9107      	str	r1, [sp, #28]
 8006c08:	f7ff ff2e 	bl	8006a68 <__exponent>
 8006c0c:	9a08      	ldr	r2, [sp, #32]
 8006c0e:	9004      	str	r0, [sp, #16]
 8006c10:	1813      	adds	r3, r2, r0
 8006c12:	2a01      	cmp	r2, #1
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	dc02      	bgt.n	8006c1e <_printf_float+0x136>
 8006c18:	6822      	ldr	r2, [r4, #0]
 8006c1a:	07d2      	lsls	r2, r2, #31
 8006c1c:	d501      	bpl.n	8006c22 <_printf_float+0x13a>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0a2      	beq.n	8006b70 <_printf_float+0x88>
 8006c2a:	232d      	movs	r3, #45	; 0x2d
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c30:	e79e      	b.n	8006b70 <_printf_float+0x88>
 8006c32:	9904      	ldr	r1, [sp, #16]
 8006c34:	2947      	cmp	r1, #71	; 0x47
 8006c36:	d1c1      	bne.n	8006bbc <_printf_float+0xd4>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1bf      	bne.n	8006bbc <_printf_float+0xd4>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e7bc      	b.n	8006bba <_printf_float+0xd2>
 8006c40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c44:	d118      	bne.n	8006c78 <_printf_float+0x190>
 8006c46:	2900      	cmp	r1, #0
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	dd0b      	ble.n	8006c64 <_printf_float+0x17c>
 8006c4c:	6121      	str	r1, [r4, #16]
 8006c4e:	b913      	cbnz	r3, 8006c56 <_printf_float+0x16e>
 8006c50:	6822      	ldr	r2, [r4, #0]
 8006c52:	07d0      	lsls	r0, r2, #31
 8006c54:	d502      	bpl.n	8006c5c <_printf_float+0x174>
 8006c56:	3301      	adds	r3, #1
 8006c58:	440b      	add	r3, r1
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	e7de      	b.n	8006c22 <_printf_float+0x13a>
 8006c64:	b913      	cbnz	r3, 8006c6c <_printf_float+0x184>
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	07d2      	lsls	r2, r2, #31
 8006c6a:	d501      	bpl.n	8006c70 <_printf_float+0x188>
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	e7f4      	b.n	8006c5a <_printf_float+0x172>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7f2      	b.n	8006c5a <_printf_float+0x172>
 8006c74:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	db05      	blt.n	8006c8a <_printf_float+0x1a2>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6121      	str	r1, [r4, #16]
 8006c82:	07d8      	lsls	r0, r3, #31
 8006c84:	d5ea      	bpl.n	8006c5c <_printf_float+0x174>
 8006c86:	1c4b      	adds	r3, r1, #1
 8006c88:	e7e7      	b.n	8006c5a <_printf_float+0x172>
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	bfd4      	ite	le
 8006c8e:	f1c1 0202 	rsble	r2, r1, #2
 8006c92:	2201      	movgt	r2, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	e7e0      	b.n	8006c5a <_printf_float+0x172>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	055a      	lsls	r2, r3, #21
 8006c9c:	d407      	bmi.n	8006cae <_printf_float+0x1c6>
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d12a      	bne.n	8006d02 <_printf_float+0x21a>
 8006cac:	e76a      	b.n	8006b84 <_printf_float+0x9c>
 8006cae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cb2:	f240 80e2 	bls.w	8006e7a <_printf_float+0x392>
 8006cb6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006cba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	d133      	bne.n	8006d2c <_printf_float+0x244>
 8006cc4:	4a38      	ldr	r2, [pc, #224]	; (8006da8 <_printf_float+0x2c0>)
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af58 	beq.w	8006b84 <_printf_float+0x9c>
 8006cd4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	db02      	blt.n	8006ce2 <_printf_float+0x1fa>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07d8      	lsls	r0, r3, #31
 8006ce0:	d50f      	bpl.n	8006d02 <_printf_float+0x21a>
 8006ce2:	4653      	mov	r3, sl
 8006ce4:	465a      	mov	r2, fp
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f af49 	beq.w	8006b84 <_printf_float+0x9c>
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	f104 091a 	add.w	r9, r4, #26
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4543      	cmp	r3, r8
 8006d00:	dc09      	bgt.n	8006d16 <_printf_float+0x22e>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	079b      	lsls	r3, r3, #30
 8006d06:	f100 8108 	bmi.w	8006f1a <_printf_float+0x432>
 8006d0a:	68e0      	ldr	r0, [r4, #12]
 8006d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	bfb8      	it	lt
 8006d12:	4618      	movlt	r0, r3
 8006d14:	e738      	b.n	8006b88 <_printf_float+0xa0>
 8006d16:	2301      	movs	r3, #1
 8006d18:	464a      	mov	r2, r9
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f af2f 	beq.w	8006b84 <_printf_float+0x9c>
 8006d26:	f108 0801 	add.w	r8, r8, #1
 8006d2a:	e7e6      	b.n	8006cfa <_printf_float+0x212>
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dc3c      	bgt.n	8006dac <_printf_float+0x2c4>
 8006d32:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <_printf_float+0x2c0>)
 8006d34:	2301      	movs	r3, #1
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f43f af21 	beq.w	8006b84 <_printf_float+0x9c>
 8006d42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	d102      	bne.n	8006d50 <_printf_float+0x268>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	07d9      	lsls	r1, r3, #31
 8006d4e:	d5d8      	bpl.n	8006d02 <_printf_float+0x21a>
 8006d50:	4653      	mov	r3, sl
 8006d52:	465a      	mov	r2, fp
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af12 	beq.w	8006b84 <_printf_float+0x9c>
 8006d60:	f04f 0900 	mov.w	r9, #0
 8006d64:	f104 0a1a 	add.w	sl, r4, #26
 8006d68:	9b07      	ldr	r3, [sp, #28]
 8006d6a:	425b      	negs	r3, r3
 8006d6c:	454b      	cmp	r3, r9
 8006d6e:	dc01      	bgt.n	8006d74 <_printf_float+0x28c>
 8006d70:	9b08      	ldr	r3, [sp, #32]
 8006d72:	e795      	b.n	8006ca0 <_printf_float+0x1b8>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4652      	mov	r2, sl
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f af00 	beq.w	8006b84 <_printf_float+0x9c>
 8006d84:	f109 0901 	add.w	r9, r9, #1
 8006d88:	e7ee      	b.n	8006d68 <_printf_float+0x280>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
 8006d90:	ffffffff 	.word	0xffffffff
 8006d94:	7fefffff 	.word	0x7fefffff
 8006d98:	080095e8 	.word	0x080095e8
 8006d9c:	080095ec 	.word	0x080095ec
 8006da0:	080095f4 	.word	0x080095f4
 8006da4:	080095f0 	.word	0x080095f0
 8006da8:	080095f8 	.word	0x080095f8
 8006dac:	9a08      	ldr	r2, [sp, #32]
 8006dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006db0:	429a      	cmp	r2, r3
 8006db2:	bfa8      	it	ge
 8006db4:	461a      	movge	r2, r3
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	4691      	mov	r9, r2
 8006dba:	dc38      	bgt.n	8006e2e <_printf_float+0x346>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9305      	str	r3, [sp, #20]
 8006dc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dc4:	f104 021a 	add.w	r2, r4, #26
 8006dc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dca:	9905      	ldr	r1, [sp, #20]
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	eba3 0309 	sub.w	r3, r3, r9
 8006dd2:	428b      	cmp	r3, r1
 8006dd4:	dc33      	bgt.n	8006e3e <_printf_float+0x356>
 8006dd6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	db3c      	blt.n	8006e58 <_printf_float+0x370>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	07da      	lsls	r2, r3, #31
 8006de2:	d439      	bmi.n	8006e58 <_printf_float+0x370>
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	9a04      	ldr	r2, [sp, #16]
 8006de8:	9907      	ldr	r1, [sp, #28]
 8006dea:	1a9a      	subs	r2, r3, r2
 8006dec:	eba3 0901 	sub.w	r9, r3, r1
 8006df0:	4591      	cmp	r9, r2
 8006df2:	bfa8      	it	ge
 8006df4:	4691      	movge	r9, r2
 8006df6:	f1b9 0f00 	cmp.w	r9, #0
 8006dfa:	dc35      	bgt.n	8006e68 <_printf_float+0x380>
 8006dfc:	f04f 0800 	mov.w	r8, #0
 8006e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e04:	f104 0a1a 	add.w	sl, r4, #26
 8006e08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	eba3 0309 	sub.w	r3, r3, r9
 8006e12:	4543      	cmp	r3, r8
 8006e14:	f77f af75 	ble.w	8006d02 <_printf_float+0x21a>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4652      	mov	r2, sl
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f aeae 	beq.w	8006b84 <_printf_float+0x9c>
 8006e28:	f108 0801 	add.w	r8, r8, #1
 8006e2c:	e7ec      	b.n	8006e08 <_printf_float+0x320>
 8006e2e:	4613      	mov	r3, r2
 8006e30:	4631      	mov	r1, r6
 8006e32:	4642      	mov	r2, r8
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1bf      	bne.n	8006dbc <_printf_float+0x2d4>
 8006e3c:	e6a2      	b.n	8006b84 <_printf_float+0x9c>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	9204      	str	r2, [sp, #16]
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	f43f ae9b 	beq.w	8006b84 <_printf_float+0x9c>
 8006e4e:	9b05      	ldr	r3, [sp, #20]
 8006e50:	9a04      	ldr	r2, [sp, #16]
 8006e52:	3301      	adds	r3, #1
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	e7b7      	b.n	8006dc8 <_printf_float+0x2e0>
 8006e58:	4653      	mov	r3, sl
 8006e5a:	465a      	mov	r2, fp
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	d1be      	bne.n	8006de4 <_printf_float+0x2fc>
 8006e66:	e68d      	b.n	8006b84 <_printf_float+0x9c>
 8006e68:	9a04      	ldr	r2, [sp, #16]
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4442      	add	r2, r8
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	d1c1      	bne.n	8006dfc <_printf_float+0x314>
 8006e78:	e684      	b.n	8006b84 <_printf_float+0x9c>
 8006e7a:	9a08      	ldr	r2, [sp, #32]
 8006e7c:	2a01      	cmp	r2, #1
 8006e7e:	dc01      	bgt.n	8006e84 <_printf_float+0x39c>
 8006e80:	07db      	lsls	r3, r3, #31
 8006e82:	d537      	bpl.n	8006ef4 <_printf_float+0x40c>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4642      	mov	r2, r8
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f ae78 	beq.w	8006b84 <_printf_float+0x9c>
 8006e94:	4653      	mov	r3, sl
 8006e96:	465a      	mov	r2, fp
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f43f ae70 	beq.w	8006b84 <_printf_float+0x9c>
 8006ea4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006ea8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb0:	d01b      	beq.n	8006eea <_printf_float+0x402>
 8006eb2:	9b08      	ldr	r3, [sp, #32]
 8006eb4:	f108 0201 	add.w	r2, r8, #1
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d10e      	bne.n	8006ee2 <_printf_float+0x3fa>
 8006ec4:	e65e      	b.n	8006b84 <_printf_float+0x9c>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	464a      	mov	r2, r9
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f ae57 	beq.w	8006b84 <_printf_float+0x9c>
 8006ed6:	f108 0801 	add.w	r8, r8, #1
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4543      	cmp	r3, r8
 8006ee0:	dcf1      	bgt.n	8006ec6 <_printf_float+0x3de>
 8006ee2:	9b04      	ldr	r3, [sp, #16]
 8006ee4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ee8:	e6db      	b.n	8006ca2 <_printf_float+0x1ba>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	f104 091a 	add.w	r9, r4, #26
 8006ef2:	e7f2      	b.n	8006eda <_printf_float+0x3f2>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	e7df      	b.n	8006eba <_printf_float+0x3d2>
 8006efa:	2301      	movs	r3, #1
 8006efc:	464a      	mov	r2, r9
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae3d 	beq.w	8006b84 <_printf_float+0x9c>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	4543      	cmp	r3, r8
 8006f16:	dcf0      	bgt.n	8006efa <_printf_float+0x412>
 8006f18:	e6f7      	b.n	8006d0a <_printf_float+0x222>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0919 	add.w	r9, r4, #25
 8006f22:	e7f4      	b.n	8006f0e <_printf_float+0x426>

08006f24 <_printf_common>:
 8006f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	4616      	mov	r6, r2
 8006f2a:	4699      	mov	r9, r3
 8006f2c:	688a      	ldr	r2, [r1, #8]
 8006f2e:	690b      	ldr	r3, [r1, #16]
 8006f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bfb8      	it	lt
 8006f38:	4613      	movlt	r3, r2
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f40:	4607      	mov	r7, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	b10a      	cbz	r2, 8006f4a <_printf_common+0x26>
 8006f46:	3301      	adds	r3, #1
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	0699      	lsls	r1, r3, #26
 8006f4e:	bf42      	ittt	mi
 8006f50:	6833      	ldrmi	r3, [r6, #0]
 8006f52:	3302      	addmi	r3, #2
 8006f54:	6033      	strmi	r3, [r6, #0]
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	f015 0506 	ands.w	r5, r5, #6
 8006f5c:	d106      	bne.n	8006f6c <_printf_common+0x48>
 8006f5e:	f104 0a19 	add.w	sl, r4, #25
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	6832      	ldr	r2, [r6, #0]
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dc26      	bgt.n	8006fba <_printf_common+0x96>
 8006f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f70:	1e13      	subs	r3, r2, #0
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	bf18      	it	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	0692      	lsls	r2, r2, #26
 8006f7a:	d42b      	bmi.n	8006fd4 <_printf_common+0xb0>
 8006f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f80:	4649      	mov	r1, r9
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c0      	blx	r8
 8006f86:	3001      	adds	r0, #1
 8006f88:	d01e      	beq.n	8006fc8 <_printf_common+0xa4>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	68e5      	ldr	r5, [r4, #12]
 8006f8e:	6832      	ldr	r2, [r6, #0]
 8006f90:	f003 0306 	and.w	r3, r3, #6
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	bf08      	it	eq
 8006f98:	1aad      	subeq	r5, r5, r2
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	bf0c      	ite	eq
 8006fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa4:	2500      	movne	r5, #0
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bfc4      	itt	gt
 8006faa:	1a9b      	subgt	r3, r3, r2
 8006fac:	18ed      	addgt	r5, r5, r3
 8006fae:	2600      	movs	r6, #0
 8006fb0:	341a      	adds	r4, #26
 8006fb2:	42b5      	cmp	r5, r6
 8006fb4:	d11a      	bne.n	8006fec <_printf_common+0xc8>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e008      	b.n	8006fcc <_printf_common+0xa8>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	47c0      	blx	r8
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d103      	bne.n	8006fd0 <_printf_common+0xac>
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	e7c6      	b.n	8006f62 <_printf_common+0x3e>
 8006fd4:	18e1      	adds	r1, r4, r3
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	2030      	movs	r0, #48	; 0x30
 8006fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fde:	4422      	add	r2, r4
 8006fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fe8:	3302      	adds	r3, #2
 8006fea:	e7c7      	b.n	8006f7c <_printf_common+0x58>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	47c0      	blx	r8
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d0e6      	beq.n	8006fc8 <_printf_common+0xa4>
 8006ffa:	3601      	adds	r6, #1
 8006ffc:	e7d9      	b.n	8006fb2 <_printf_common+0x8e>
	...

08007000 <_printf_i>:
 8007000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	7e0f      	ldrb	r7, [r1, #24]
 8007006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007008:	2f78      	cmp	r7, #120	; 0x78
 800700a:	4691      	mov	r9, r2
 800700c:	4680      	mov	r8, r0
 800700e:	460c      	mov	r4, r1
 8007010:	469a      	mov	sl, r3
 8007012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007016:	d807      	bhi.n	8007028 <_printf_i+0x28>
 8007018:	2f62      	cmp	r7, #98	; 0x62
 800701a:	d80a      	bhi.n	8007032 <_printf_i+0x32>
 800701c:	2f00      	cmp	r7, #0
 800701e:	f000 80d8 	beq.w	80071d2 <_printf_i+0x1d2>
 8007022:	2f58      	cmp	r7, #88	; 0x58
 8007024:	f000 80a3 	beq.w	800716e <_printf_i+0x16e>
 8007028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800702c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007030:	e03a      	b.n	80070a8 <_printf_i+0xa8>
 8007032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007036:	2b15      	cmp	r3, #21
 8007038:	d8f6      	bhi.n	8007028 <_printf_i+0x28>
 800703a:	a101      	add	r1, pc, #4	; (adr r1, 8007040 <_printf_i+0x40>)
 800703c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007040:	08007099 	.word	0x08007099
 8007044:	080070ad 	.word	0x080070ad
 8007048:	08007029 	.word	0x08007029
 800704c:	08007029 	.word	0x08007029
 8007050:	08007029 	.word	0x08007029
 8007054:	08007029 	.word	0x08007029
 8007058:	080070ad 	.word	0x080070ad
 800705c:	08007029 	.word	0x08007029
 8007060:	08007029 	.word	0x08007029
 8007064:	08007029 	.word	0x08007029
 8007068:	08007029 	.word	0x08007029
 800706c:	080071b9 	.word	0x080071b9
 8007070:	080070dd 	.word	0x080070dd
 8007074:	0800719b 	.word	0x0800719b
 8007078:	08007029 	.word	0x08007029
 800707c:	08007029 	.word	0x08007029
 8007080:	080071db 	.word	0x080071db
 8007084:	08007029 	.word	0x08007029
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007029 	.word	0x08007029
 8007090:	08007029 	.word	0x08007029
 8007094:	080071a3 	.word	0x080071a3
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	1d1a      	adds	r2, r3, #4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	602a      	str	r2, [r5, #0]
 80070a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0a3      	b.n	80071f4 <_printf_i+0x1f4>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	6829      	ldr	r1, [r5, #0]
 80070b0:	0606      	lsls	r6, r0, #24
 80070b2:	f101 0304 	add.w	r3, r1, #4
 80070b6:	d50a      	bpl.n	80070ce <_printf_i+0xce>
 80070b8:	680e      	ldr	r6, [r1, #0]
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	2e00      	cmp	r6, #0
 80070be:	da03      	bge.n	80070c8 <_printf_i+0xc8>
 80070c0:	232d      	movs	r3, #45	; 0x2d
 80070c2:	4276      	negs	r6, r6
 80070c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c8:	485e      	ldr	r0, [pc, #376]	; (8007244 <_printf_i+0x244>)
 80070ca:	230a      	movs	r3, #10
 80070cc:	e019      	b.n	8007102 <_printf_i+0x102>
 80070ce:	680e      	ldr	r6, [r1, #0]
 80070d0:	602b      	str	r3, [r5, #0]
 80070d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070d6:	bf18      	it	ne
 80070d8:	b236      	sxthne	r6, r6
 80070da:	e7ef      	b.n	80070bc <_printf_i+0xbc>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	6029      	str	r1, [r5, #0]
 80070e4:	0601      	lsls	r1, r0, #24
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0xec>
 80070e8:	681e      	ldr	r6, [r3, #0]
 80070ea:	e002      	b.n	80070f2 <_printf_i+0xf2>
 80070ec:	0646      	lsls	r6, r0, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0xe8>
 80070f0:	881e      	ldrh	r6, [r3, #0]
 80070f2:	4854      	ldr	r0, [pc, #336]	; (8007244 <_printf_i+0x244>)
 80070f4:	2f6f      	cmp	r7, #111	; 0x6f
 80070f6:	bf0c      	ite	eq
 80070f8:	2308      	moveq	r3, #8
 80070fa:	230a      	movne	r3, #10
 80070fc:	2100      	movs	r1, #0
 80070fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007102:	6865      	ldr	r5, [r4, #4]
 8007104:	60a5      	str	r5, [r4, #8]
 8007106:	2d00      	cmp	r5, #0
 8007108:	bfa2      	ittt	ge
 800710a:	6821      	ldrge	r1, [r4, #0]
 800710c:	f021 0104 	bicge.w	r1, r1, #4
 8007110:	6021      	strge	r1, [r4, #0]
 8007112:	b90e      	cbnz	r6, 8007118 <_printf_i+0x118>
 8007114:	2d00      	cmp	r5, #0
 8007116:	d04d      	beq.n	80071b4 <_printf_i+0x1b4>
 8007118:	4615      	mov	r5, r2
 800711a:	fbb6 f1f3 	udiv	r1, r6, r3
 800711e:	fb03 6711 	mls	r7, r3, r1, r6
 8007122:	5dc7      	ldrb	r7, [r0, r7]
 8007124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007128:	4637      	mov	r7, r6
 800712a:	42bb      	cmp	r3, r7
 800712c:	460e      	mov	r6, r1
 800712e:	d9f4      	bls.n	800711a <_printf_i+0x11a>
 8007130:	2b08      	cmp	r3, #8
 8007132:	d10b      	bne.n	800714c <_printf_i+0x14c>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07de      	lsls	r6, r3, #31
 8007138:	d508      	bpl.n	800714c <_printf_i+0x14c>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6861      	ldr	r1, [r4, #4]
 800713e:	4299      	cmp	r1, r3
 8007140:	bfde      	ittt	le
 8007142:	2330      	movle	r3, #48	; 0x30
 8007144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007148:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800714c:	1b52      	subs	r2, r2, r5
 800714e:	6122      	str	r2, [r4, #16]
 8007150:	f8cd a000 	str.w	sl, [sp]
 8007154:	464b      	mov	r3, r9
 8007156:	aa03      	add	r2, sp, #12
 8007158:	4621      	mov	r1, r4
 800715a:	4640      	mov	r0, r8
 800715c:	f7ff fee2 	bl	8006f24 <_printf_common>
 8007160:	3001      	adds	r0, #1
 8007162:	d14c      	bne.n	80071fe <_printf_i+0x1fe>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007168:	b004      	add	sp, #16
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716e:	4835      	ldr	r0, [pc, #212]	; (8007244 <_printf_i+0x244>)
 8007170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007174:	6829      	ldr	r1, [r5, #0]
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	f851 6b04 	ldr.w	r6, [r1], #4
 800717c:	6029      	str	r1, [r5, #0]
 800717e:	061d      	lsls	r5, r3, #24
 8007180:	d514      	bpl.n	80071ac <_printf_i+0x1ac>
 8007182:	07df      	lsls	r7, r3, #31
 8007184:	bf44      	itt	mi
 8007186:	f043 0320 	orrmi.w	r3, r3, #32
 800718a:	6023      	strmi	r3, [r4, #0]
 800718c:	b91e      	cbnz	r6, 8007196 <_printf_i+0x196>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	f023 0320 	bic.w	r3, r3, #32
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	2310      	movs	r3, #16
 8007198:	e7b0      	b.n	80070fc <_printf_i+0xfc>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	f043 0320 	orr.w	r3, r3, #32
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	2378      	movs	r3, #120	; 0x78
 80071a4:	4828      	ldr	r0, [pc, #160]	; (8007248 <_printf_i+0x248>)
 80071a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071aa:	e7e3      	b.n	8007174 <_printf_i+0x174>
 80071ac:	0659      	lsls	r1, r3, #25
 80071ae:	bf48      	it	mi
 80071b0:	b2b6      	uxthmi	r6, r6
 80071b2:	e7e6      	b.n	8007182 <_printf_i+0x182>
 80071b4:	4615      	mov	r5, r2
 80071b6:	e7bb      	b.n	8007130 <_printf_i+0x130>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	6826      	ldr	r6, [r4, #0]
 80071bc:	6961      	ldr	r1, [r4, #20]
 80071be:	1d18      	adds	r0, r3, #4
 80071c0:	6028      	str	r0, [r5, #0]
 80071c2:	0635      	lsls	r5, r6, #24
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	d501      	bpl.n	80071cc <_printf_i+0x1cc>
 80071c8:	6019      	str	r1, [r3, #0]
 80071ca:	e002      	b.n	80071d2 <_printf_i+0x1d2>
 80071cc:	0670      	lsls	r0, r6, #25
 80071ce:	d5fb      	bpl.n	80071c8 <_printf_i+0x1c8>
 80071d0:	8019      	strh	r1, [r3, #0]
 80071d2:	2300      	movs	r3, #0
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	4615      	mov	r5, r2
 80071d8:	e7ba      	b.n	8007150 <_printf_i+0x150>
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	1d1a      	adds	r2, r3, #4
 80071de:	602a      	str	r2, [r5, #0]
 80071e0:	681d      	ldr	r5, [r3, #0]
 80071e2:	6862      	ldr	r2, [r4, #4]
 80071e4:	2100      	movs	r1, #0
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7f9 f832 	bl	8000250 <memchr>
 80071ec:	b108      	cbz	r0, 80071f2 <_printf_i+0x1f2>
 80071ee:	1b40      	subs	r0, r0, r5
 80071f0:	6060      	str	r0, [r4, #4]
 80071f2:	6863      	ldr	r3, [r4, #4]
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	2300      	movs	r3, #0
 80071f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fc:	e7a8      	b.n	8007150 <_printf_i+0x150>
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	462a      	mov	r2, r5
 8007202:	4649      	mov	r1, r9
 8007204:	4640      	mov	r0, r8
 8007206:	47d0      	blx	sl
 8007208:	3001      	adds	r0, #1
 800720a:	d0ab      	beq.n	8007164 <_printf_i+0x164>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	079b      	lsls	r3, r3, #30
 8007210:	d413      	bmi.n	800723a <_printf_i+0x23a>
 8007212:	68e0      	ldr	r0, [r4, #12]
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	4298      	cmp	r0, r3
 8007218:	bfb8      	it	lt
 800721a:	4618      	movlt	r0, r3
 800721c:	e7a4      	b.n	8007168 <_printf_i+0x168>
 800721e:	2301      	movs	r3, #1
 8007220:	4632      	mov	r2, r6
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d09b      	beq.n	8007164 <_printf_i+0x164>
 800722c:	3501      	adds	r5, #1
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	9903      	ldr	r1, [sp, #12]
 8007232:	1a5b      	subs	r3, r3, r1
 8007234:	42ab      	cmp	r3, r5
 8007236:	dcf2      	bgt.n	800721e <_printf_i+0x21e>
 8007238:	e7eb      	b.n	8007212 <_printf_i+0x212>
 800723a:	2500      	movs	r5, #0
 800723c:	f104 0619 	add.w	r6, r4, #25
 8007240:	e7f5      	b.n	800722e <_printf_i+0x22e>
 8007242:	bf00      	nop
 8007244:	080095fa 	.word	0x080095fa
 8007248:	0800960b 	.word	0x0800960b

0800724c <setvbuf>:
 800724c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007250:	461d      	mov	r5, r3
 8007252:	4b5d      	ldr	r3, [pc, #372]	; (80073c8 <setvbuf+0x17c>)
 8007254:	681f      	ldr	r7, [r3, #0]
 8007256:	4604      	mov	r4, r0
 8007258:	460e      	mov	r6, r1
 800725a:	4690      	mov	r8, r2
 800725c:	b127      	cbz	r7, 8007268 <setvbuf+0x1c>
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	b913      	cbnz	r3, 8007268 <setvbuf+0x1c>
 8007262:	4638      	mov	r0, r7
 8007264:	f000 ffcc 	bl	8008200 <__sinit>
 8007268:	4b58      	ldr	r3, [pc, #352]	; (80073cc <setvbuf+0x180>)
 800726a:	429c      	cmp	r4, r3
 800726c:	d167      	bne.n	800733e <setvbuf+0xf2>
 800726e:	687c      	ldr	r4, [r7, #4]
 8007270:	f1b8 0f02 	cmp.w	r8, #2
 8007274:	d006      	beq.n	8007284 <setvbuf+0x38>
 8007276:	f1b8 0f01 	cmp.w	r8, #1
 800727a:	f200 809f 	bhi.w	80073bc <setvbuf+0x170>
 800727e:	2d00      	cmp	r5, #0
 8007280:	f2c0 809c 	blt.w	80073bc <setvbuf+0x170>
 8007284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007286:	07db      	lsls	r3, r3, #31
 8007288:	d405      	bmi.n	8007296 <setvbuf+0x4a>
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	0598      	lsls	r0, r3, #22
 800728e:	d402      	bmi.n	8007296 <setvbuf+0x4a>
 8007290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007292:	f001 f858 	bl	8008346 <__retarget_lock_acquire_recursive>
 8007296:	4621      	mov	r1, r4
 8007298:	4638      	mov	r0, r7
 800729a:	f000 ff1d 	bl	80080d8 <_fflush_r>
 800729e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072a0:	b141      	cbz	r1, 80072b4 <setvbuf+0x68>
 80072a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d002      	beq.n	80072b0 <setvbuf+0x64>
 80072aa:	4638      	mov	r0, r7
 80072ac:	f001 fc62 	bl	8008b74 <_free_r>
 80072b0:	2300      	movs	r3, #0
 80072b2:	6363      	str	r3, [r4, #52]	; 0x34
 80072b4:	2300      	movs	r3, #0
 80072b6:	61a3      	str	r3, [r4, #24]
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	0619      	lsls	r1, r3, #24
 80072be:	d503      	bpl.n	80072c8 <setvbuf+0x7c>
 80072c0:	6921      	ldr	r1, [r4, #16]
 80072c2:	4638      	mov	r0, r7
 80072c4:	f001 fc56 	bl	8008b74 <_free_r>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	f1b8 0f02 	cmp.w	r8, #2
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	d06c      	beq.n	80073b4 <setvbuf+0x168>
 80072da:	ab01      	add	r3, sp, #4
 80072dc:	466a      	mov	r2, sp
 80072de:	4621      	mov	r1, r4
 80072e0:	4638      	mov	r0, r7
 80072e2:	f001 f832 	bl	800834a <__swhatbuf_r>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	4318      	orrs	r0, r3
 80072ea:	81a0      	strh	r0, [r4, #12]
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	d130      	bne.n	8007352 <setvbuf+0x106>
 80072f0:	9d00      	ldr	r5, [sp, #0]
 80072f2:	4628      	mov	r0, r5
 80072f4:	f001 f88e 	bl	8008414 <malloc>
 80072f8:	4606      	mov	r6, r0
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d155      	bne.n	80073aa <setvbuf+0x15e>
 80072fe:	f8dd 9000 	ldr.w	r9, [sp]
 8007302:	45a9      	cmp	r9, r5
 8007304:	d14a      	bne.n	800739c <setvbuf+0x150>
 8007306:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800730a:	2200      	movs	r2, #0
 800730c:	60a2      	str	r2, [r4, #8]
 800730e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007312:	6022      	str	r2, [r4, #0]
 8007314:	6122      	str	r2, [r4, #16]
 8007316:	2201      	movs	r2, #1
 8007318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800731c:	6162      	str	r2, [r4, #20]
 800731e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007320:	f043 0302 	orr.w	r3, r3, #2
 8007324:	07d2      	lsls	r2, r2, #31
 8007326:	81a3      	strh	r3, [r4, #12]
 8007328:	d405      	bmi.n	8007336 <setvbuf+0xea>
 800732a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800732e:	d102      	bne.n	8007336 <setvbuf+0xea>
 8007330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007332:	f001 f809 	bl	8008348 <__retarget_lock_release_recursive>
 8007336:	4628      	mov	r0, r5
 8007338:	b003      	add	sp, #12
 800733a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800733e:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <setvbuf+0x184>)
 8007340:	429c      	cmp	r4, r3
 8007342:	d101      	bne.n	8007348 <setvbuf+0xfc>
 8007344:	68bc      	ldr	r4, [r7, #8]
 8007346:	e793      	b.n	8007270 <setvbuf+0x24>
 8007348:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <setvbuf+0x188>)
 800734a:	429c      	cmp	r4, r3
 800734c:	bf08      	it	eq
 800734e:	68fc      	ldreq	r4, [r7, #12]
 8007350:	e78e      	b.n	8007270 <setvbuf+0x24>
 8007352:	2e00      	cmp	r6, #0
 8007354:	d0cd      	beq.n	80072f2 <setvbuf+0xa6>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	b913      	cbnz	r3, 8007360 <setvbuf+0x114>
 800735a:	4638      	mov	r0, r7
 800735c:	f000 ff50 	bl	8008200 <__sinit>
 8007360:	f1b8 0f01 	cmp.w	r8, #1
 8007364:	bf08      	it	eq
 8007366:	89a3      	ldrheq	r3, [r4, #12]
 8007368:	6026      	str	r6, [r4, #0]
 800736a:	bf04      	itt	eq
 800736c:	f043 0301 	orreq.w	r3, r3, #1
 8007370:	81a3      	strheq	r3, [r4, #12]
 8007372:	89a2      	ldrh	r2, [r4, #12]
 8007374:	f012 0308 	ands.w	r3, r2, #8
 8007378:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800737c:	d01c      	beq.n	80073b8 <setvbuf+0x16c>
 800737e:	07d3      	lsls	r3, r2, #31
 8007380:	bf41      	itttt	mi
 8007382:	2300      	movmi	r3, #0
 8007384:	426d      	negmi	r5, r5
 8007386:	60a3      	strmi	r3, [r4, #8]
 8007388:	61a5      	strmi	r5, [r4, #24]
 800738a:	bf58      	it	pl
 800738c:	60a5      	strpl	r5, [r4, #8]
 800738e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007390:	f015 0501 	ands.w	r5, r5, #1
 8007394:	d115      	bne.n	80073c2 <setvbuf+0x176>
 8007396:	f412 7f00 	tst.w	r2, #512	; 0x200
 800739a:	e7c8      	b.n	800732e <setvbuf+0xe2>
 800739c:	4648      	mov	r0, r9
 800739e:	f001 f839 	bl	8008414 <malloc>
 80073a2:	4606      	mov	r6, r0
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d0ae      	beq.n	8007306 <setvbuf+0xba>
 80073a8:	464d      	mov	r5, r9
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e7d0      	b.n	8007356 <setvbuf+0x10a>
 80073b4:	2500      	movs	r5, #0
 80073b6:	e7a8      	b.n	800730a <setvbuf+0xbe>
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	e7e8      	b.n	800738e <setvbuf+0x142>
 80073bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073c0:	e7b9      	b.n	8007336 <setvbuf+0xea>
 80073c2:	2500      	movs	r5, #0
 80073c4:	e7b7      	b.n	8007336 <setvbuf+0xea>
 80073c6:	bf00      	nop
 80073c8:	20000178 	.word	0x20000178
 80073cc:	080096cc 	.word	0x080096cc
 80073d0:	080096ec 	.word	0x080096ec
 80073d4:	080096ac 	.word	0x080096ac

080073d8 <quorem>:
 80073d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	6903      	ldr	r3, [r0, #16]
 80073de:	690c      	ldr	r4, [r1, #16]
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	4607      	mov	r7, r0
 80073e4:	f2c0 8081 	blt.w	80074ea <quorem+0x112>
 80073e8:	3c01      	subs	r4, #1
 80073ea:	f101 0814 	add.w	r8, r1, #20
 80073ee:	f100 0514 	add.w	r5, r0, #20
 80073f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007400:	3301      	adds	r3, #1
 8007402:	429a      	cmp	r2, r3
 8007404:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800740c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007410:	d331      	bcc.n	8007476 <quorem+0x9e>
 8007412:	f04f 0e00 	mov.w	lr, #0
 8007416:	4640      	mov	r0, r8
 8007418:	46ac      	mov	ip, r5
 800741a:	46f2      	mov	sl, lr
 800741c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007420:	b293      	uxth	r3, r2
 8007422:	fb06 e303 	mla	r3, r6, r3, lr
 8007426:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800742a:	b29b      	uxth	r3, r3
 800742c:	ebaa 0303 	sub.w	r3, sl, r3
 8007430:	f8dc a000 	ldr.w	sl, [ip]
 8007434:	0c12      	lsrs	r2, r2, #16
 8007436:	fa13 f38a 	uxtah	r3, r3, sl
 800743a:	fb06 e202 	mla	r2, r6, r2, lr
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007446:	b292      	uxth	r2, r2
 8007448:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800744c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007450:	f8bd 3000 	ldrh.w	r3, [sp]
 8007454:	4581      	cmp	r9, r0
 8007456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745a:	f84c 3b04 	str.w	r3, [ip], #4
 800745e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007462:	d2db      	bcs.n	800741c <quorem+0x44>
 8007464:	f855 300b 	ldr.w	r3, [r5, fp]
 8007468:	b92b      	cbnz	r3, 8007476 <quorem+0x9e>
 800746a:	9b01      	ldr	r3, [sp, #4]
 800746c:	3b04      	subs	r3, #4
 800746e:	429d      	cmp	r5, r3
 8007470:	461a      	mov	r2, r3
 8007472:	d32e      	bcc.n	80074d2 <quorem+0xfa>
 8007474:	613c      	str	r4, [r7, #16]
 8007476:	4638      	mov	r0, r7
 8007478:	f001 fa64 	bl	8008944 <__mcmp>
 800747c:	2800      	cmp	r0, #0
 800747e:	db24      	blt.n	80074ca <quorem+0xf2>
 8007480:	3601      	adds	r6, #1
 8007482:	4628      	mov	r0, r5
 8007484:	f04f 0c00 	mov.w	ip, #0
 8007488:	f858 2b04 	ldr.w	r2, [r8], #4
 800748c:	f8d0 e000 	ldr.w	lr, [r0]
 8007490:	b293      	uxth	r3, r2
 8007492:	ebac 0303 	sub.w	r3, ip, r3
 8007496:	0c12      	lsrs	r2, r2, #16
 8007498:	fa13 f38e 	uxtah	r3, r3, lr
 800749c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074aa:	45c1      	cmp	r9, r8
 80074ac:	f840 3b04 	str.w	r3, [r0], #4
 80074b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074b4:	d2e8      	bcs.n	8007488 <quorem+0xb0>
 80074b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074be:	b922      	cbnz	r2, 80074ca <quorem+0xf2>
 80074c0:	3b04      	subs	r3, #4
 80074c2:	429d      	cmp	r5, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	d30a      	bcc.n	80074de <quorem+0x106>
 80074c8:	613c      	str	r4, [r7, #16]
 80074ca:	4630      	mov	r0, r6
 80074cc:	b003      	add	sp, #12
 80074ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	3b04      	subs	r3, #4
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	d1cc      	bne.n	8007474 <quorem+0x9c>
 80074da:	3c01      	subs	r4, #1
 80074dc:	e7c7      	b.n	800746e <quorem+0x96>
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	3b04      	subs	r3, #4
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d1f0      	bne.n	80074c8 <quorem+0xf0>
 80074e6:	3c01      	subs	r4, #1
 80074e8:	e7eb      	b.n	80074c2 <quorem+0xea>
 80074ea:	2000      	movs	r0, #0
 80074ec:	e7ee      	b.n	80074cc <quorem+0xf4>
	...

080074f0 <_dtoa_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	ed2d 8b02 	vpush	{d8}
 80074f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074fa:	b091      	sub	sp, #68	; 0x44
 80074fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007500:	ec59 8b10 	vmov	r8, r9, d0
 8007504:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007506:	9106      	str	r1, [sp, #24]
 8007508:	4606      	mov	r6, r0
 800750a:	9208      	str	r2, [sp, #32]
 800750c:	930c      	str	r3, [sp, #48]	; 0x30
 800750e:	b975      	cbnz	r5, 800752e <_dtoa_r+0x3e>
 8007510:	2010      	movs	r0, #16
 8007512:	f000 ff7f 	bl	8008414 <malloc>
 8007516:	4602      	mov	r2, r0
 8007518:	6270      	str	r0, [r6, #36]	; 0x24
 800751a:	b920      	cbnz	r0, 8007526 <_dtoa_r+0x36>
 800751c:	4baa      	ldr	r3, [pc, #680]	; (80077c8 <_dtoa_r+0x2d8>)
 800751e:	21ea      	movs	r1, #234	; 0xea
 8007520:	48aa      	ldr	r0, [pc, #680]	; (80077cc <_dtoa_r+0x2dc>)
 8007522:	f001 fc6d 	bl	8008e00 <__assert_func>
 8007526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800752a:	6005      	str	r5, [r0, #0]
 800752c:	60c5      	str	r5, [r0, #12]
 800752e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007530:	6819      	ldr	r1, [r3, #0]
 8007532:	b151      	cbz	r1, 800754a <_dtoa_r+0x5a>
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	604a      	str	r2, [r1, #4]
 8007538:	2301      	movs	r3, #1
 800753a:	4093      	lsls	r3, r2
 800753c:	608b      	str	r3, [r1, #8]
 800753e:	4630      	mov	r0, r6
 8007540:	f000 ffbe 	bl	80084c0 <_Bfree>
 8007544:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f1b9 0300 	subs.w	r3, r9, #0
 800754e:	bfbb      	ittet	lt
 8007550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007554:	9303      	strlt	r3, [sp, #12]
 8007556:	2300      	movge	r3, #0
 8007558:	2201      	movlt	r2, #1
 800755a:	bfac      	ite	ge
 800755c:	6023      	strge	r3, [r4, #0]
 800755e:	6022      	strlt	r2, [r4, #0]
 8007560:	4b9b      	ldr	r3, [pc, #620]	; (80077d0 <_dtoa_r+0x2e0>)
 8007562:	9c03      	ldr	r4, [sp, #12]
 8007564:	43a3      	bics	r3, r4
 8007566:	d11c      	bne.n	80075a2 <_dtoa_r+0xb2>
 8007568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800756a:	f242 730f 	movw	r3, #9999	; 0x270f
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007574:	ea53 0308 	orrs.w	r3, r3, r8
 8007578:	f000 84fd 	beq.w	8007f76 <_dtoa_r+0xa86>
 800757c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800757e:	b963      	cbnz	r3, 800759a <_dtoa_r+0xaa>
 8007580:	4b94      	ldr	r3, [pc, #592]	; (80077d4 <_dtoa_r+0x2e4>)
 8007582:	e01f      	b.n	80075c4 <_dtoa_r+0xd4>
 8007584:	4b94      	ldr	r3, [pc, #592]	; (80077d8 <_dtoa_r+0x2e8>)
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	3308      	adds	r3, #8
 800758a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	9801      	ldr	r0, [sp, #4]
 8007590:	b011      	add	sp, #68	; 0x44
 8007592:	ecbd 8b02 	vpop	{d8}
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	4b8e      	ldr	r3, [pc, #568]	; (80077d4 <_dtoa_r+0x2e4>)
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	3303      	adds	r3, #3
 80075a0:	e7f3      	b.n	800758a <_dtoa_r+0x9a>
 80075a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80075a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80075aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ae:	d10b      	bne.n	80075c8 <_dtoa_r+0xd8>
 80075b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b2:	2301      	movs	r3, #1
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 84d9 	beq.w	8007f70 <_dtoa_r+0xa80>
 80075be:	4887      	ldr	r0, [pc, #540]	; (80077dc <_dtoa_r+0x2ec>)
 80075c0:	6018      	str	r0, [r3, #0]
 80075c2:	1e43      	subs	r3, r0, #1
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	e7e2      	b.n	800758e <_dtoa_r+0x9e>
 80075c8:	a90f      	add	r1, sp, #60	; 0x3c
 80075ca:	aa0e      	add	r2, sp, #56	; 0x38
 80075cc:	4630      	mov	r0, r6
 80075ce:	eeb0 0b48 	vmov.f64	d0, d8
 80075d2:	f001 fa5d 	bl	8008a90 <__d2b>
 80075d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80075da:	4605      	mov	r5, r0
 80075dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80075de:	2900      	cmp	r1, #0
 80075e0:	d046      	beq.n	8007670 <_dtoa_r+0x180>
 80075e2:	ee18 4a90 	vmov	r4, s17
 80075e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075ea:	ec53 2b18 	vmov	r2, r3, d8
 80075ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80075f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80075fa:	2400      	movs	r4, #0
 80075fc:	ec43 2b16 	vmov	d6, r2, r3
 8007600:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007604:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80077b0 <_dtoa_r+0x2c0>
 8007608:	ee36 7b47 	vsub.f64	d7, d6, d7
 800760c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80077b8 <_dtoa_r+0x2c8>
 8007610:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007614:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80077c0 <_dtoa_r+0x2d0>
 8007618:	ee07 1a90 	vmov	s15, r1
 800761c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007620:	eeb0 7b46 	vmov.f64	d7, d6
 8007624:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007628:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800762c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007634:	ee16 ba90 	vmov	fp, s13
 8007638:	940a      	str	r4, [sp, #40]	; 0x28
 800763a:	d508      	bpl.n	800764e <_dtoa_r+0x15e>
 800763c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007640:	eeb4 6b47 	vcmp.f64	d6, d7
 8007644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007648:	bf18      	it	ne
 800764a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800764e:	f1bb 0f16 	cmp.w	fp, #22
 8007652:	d82f      	bhi.n	80076b4 <_dtoa_r+0x1c4>
 8007654:	4b62      	ldr	r3, [pc, #392]	; (80077e0 <_dtoa_r+0x2f0>)
 8007656:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800765a:	ed93 7b00 	vldr	d7, [r3]
 800765e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007666:	d501      	bpl.n	800766c <_dtoa_r+0x17c>
 8007668:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800766c:	2300      	movs	r3, #0
 800766e:	e022      	b.n	80076b6 <_dtoa_r+0x1c6>
 8007670:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007672:	4401      	add	r1, r0
 8007674:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007678:	2b20      	cmp	r3, #32
 800767a:	bfc1      	itttt	gt
 800767c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007680:	fa04 f303 	lslgt.w	r3, r4, r3
 8007684:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007688:	fa28 f804 	lsrgt.w	r8, r8, r4
 800768c:	bfd6      	itet	le
 800768e:	f1c3 0320 	rsble	r3, r3, #32
 8007692:	ea43 0808 	orrgt.w	r8, r3, r8
 8007696:	fa08 f803 	lslle.w	r8, r8, r3
 800769a:	ee07 8a90 	vmov	s15, r8
 800769e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80076a2:	3901      	subs	r1, #1
 80076a4:	ee17 4a90 	vmov	r4, s15
 80076a8:	ec53 2b17 	vmov	r2, r3, d7
 80076ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80076b0:	2401      	movs	r4, #1
 80076b2:	e7a3      	b.n	80075fc <_dtoa_r+0x10c>
 80076b4:	2301      	movs	r3, #1
 80076b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b8:	1a43      	subs	r3, r0, r1
 80076ba:	1e5a      	subs	r2, r3, #1
 80076bc:	bf45      	ittet	mi
 80076be:	f1c3 0301 	rsbmi	r3, r3, #1
 80076c2:	9304      	strmi	r3, [sp, #16]
 80076c4:	2300      	movpl	r3, #0
 80076c6:	2300      	movmi	r3, #0
 80076c8:	9205      	str	r2, [sp, #20]
 80076ca:	bf54      	ite	pl
 80076cc:	9304      	strpl	r3, [sp, #16]
 80076ce:	9305      	strmi	r3, [sp, #20]
 80076d0:	f1bb 0f00 	cmp.w	fp, #0
 80076d4:	db18      	blt.n	8007708 <_dtoa_r+0x218>
 80076d6:	9b05      	ldr	r3, [sp, #20]
 80076d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80076dc:	445b      	add	r3, fp
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	2300      	movs	r3, #0
 80076e2:	9a06      	ldr	r2, [sp, #24]
 80076e4:	2a09      	cmp	r2, #9
 80076e6:	d849      	bhi.n	800777c <_dtoa_r+0x28c>
 80076e8:	2a05      	cmp	r2, #5
 80076ea:	bfc4      	itt	gt
 80076ec:	3a04      	subgt	r2, #4
 80076ee:	9206      	strgt	r2, [sp, #24]
 80076f0:	9a06      	ldr	r2, [sp, #24]
 80076f2:	f1a2 0202 	sub.w	r2, r2, #2
 80076f6:	bfcc      	ite	gt
 80076f8:	2400      	movgt	r4, #0
 80076fa:	2401      	movle	r4, #1
 80076fc:	2a03      	cmp	r2, #3
 80076fe:	d848      	bhi.n	8007792 <_dtoa_r+0x2a2>
 8007700:	e8df f002 	tbb	[pc, r2]
 8007704:	3a2c2e0b 	.word	0x3a2c2e0b
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	2200      	movs	r2, #0
 800770c:	eba3 030b 	sub.w	r3, r3, fp
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	9209      	str	r2, [sp, #36]	; 0x24
 8007714:	f1cb 0300 	rsb	r3, fp, #0
 8007718:	e7e3      	b.n	80076e2 <_dtoa_r+0x1f2>
 800771a:	2200      	movs	r2, #0
 800771c:	9207      	str	r2, [sp, #28]
 800771e:	9a08      	ldr	r2, [sp, #32]
 8007720:	2a00      	cmp	r2, #0
 8007722:	dc39      	bgt.n	8007798 <_dtoa_r+0x2a8>
 8007724:	f04f 0a01 	mov.w	sl, #1
 8007728:	46d1      	mov	r9, sl
 800772a:	4652      	mov	r2, sl
 800772c:	f8cd a020 	str.w	sl, [sp, #32]
 8007730:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007732:	2100      	movs	r1, #0
 8007734:	6079      	str	r1, [r7, #4]
 8007736:	2004      	movs	r0, #4
 8007738:	f100 0c14 	add.w	ip, r0, #20
 800773c:	4594      	cmp	ip, r2
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	d92f      	bls.n	80077a2 <_dtoa_r+0x2b2>
 8007742:	4630      	mov	r0, r6
 8007744:	930d      	str	r3, [sp, #52]	; 0x34
 8007746:	f000 fe7b 	bl	8008440 <_Balloc>
 800774a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800774c:	9001      	str	r0, [sp, #4]
 800774e:	4602      	mov	r2, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	d149      	bne.n	80077e8 <_dtoa_r+0x2f8>
 8007754:	4b23      	ldr	r3, [pc, #140]	; (80077e4 <_dtoa_r+0x2f4>)
 8007756:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800775a:	e6e1      	b.n	8007520 <_dtoa_r+0x30>
 800775c:	2201      	movs	r2, #1
 800775e:	e7dd      	b.n	800771c <_dtoa_r+0x22c>
 8007760:	2200      	movs	r2, #0
 8007762:	9207      	str	r2, [sp, #28]
 8007764:	9a08      	ldr	r2, [sp, #32]
 8007766:	eb0b 0a02 	add.w	sl, fp, r2
 800776a:	f10a 0901 	add.w	r9, sl, #1
 800776e:	464a      	mov	r2, r9
 8007770:	2a01      	cmp	r2, #1
 8007772:	bfb8      	it	lt
 8007774:	2201      	movlt	r2, #1
 8007776:	e7db      	b.n	8007730 <_dtoa_r+0x240>
 8007778:	2201      	movs	r2, #1
 800777a:	e7f2      	b.n	8007762 <_dtoa_r+0x272>
 800777c:	2401      	movs	r4, #1
 800777e:	2200      	movs	r2, #0
 8007780:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007784:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007788:	2100      	movs	r1, #0
 800778a:	46d1      	mov	r9, sl
 800778c:	2212      	movs	r2, #18
 800778e:	9108      	str	r1, [sp, #32]
 8007790:	e7ce      	b.n	8007730 <_dtoa_r+0x240>
 8007792:	2201      	movs	r2, #1
 8007794:	9207      	str	r2, [sp, #28]
 8007796:	e7f5      	b.n	8007784 <_dtoa_r+0x294>
 8007798:	f8dd a020 	ldr.w	sl, [sp, #32]
 800779c:	46d1      	mov	r9, sl
 800779e:	4652      	mov	r2, sl
 80077a0:	e7c6      	b.n	8007730 <_dtoa_r+0x240>
 80077a2:	3101      	adds	r1, #1
 80077a4:	6079      	str	r1, [r7, #4]
 80077a6:	0040      	lsls	r0, r0, #1
 80077a8:	e7c6      	b.n	8007738 <_dtoa_r+0x248>
 80077aa:	bf00      	nop
 80077ac:	f3af 8000 	nop.w
 80077b0:	636f4361 	.word	0x636f4361
 80077b4:	3fd287a7 	.word	0x3fd287a7
 80077b8:	8b60c8b3 	.word	0x8b60c8b3
 80077bc:	3fc68a28 	.word	0x3fc68a28
 80077c0:	509f79fb 	.word	0x509f79fb
 80077c4:	3fd34413 	.word	0x3fd34413
 80077c8:	08009629 	.word	0x08009629
 80077cc:	08009640 	.word	0x08009640
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	08009625 	.word	0x08009625
 80077d8:	0800961c 	.word	0x0800961c
 80077dc:	080095f9 	.word	0x080095f9
 80077e0:	08009790 	.word	0x08009790
 80077e4:	0800969b 	.word	0x0800969b
 80077e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80077ea:	9901      	ldr	r1, [sp, #4]
 80077ec:	6011      	str	r1, [r2, #0]
 80077ee:	f1b9 0f0e 	cmp.w	r9, #14
 80077f2:	d86c      	bhi.n	80078ce <_dtoa_r+0x3de>
 80077f4:	2c00      	cmp	r4, #0
 80077f6:	d06a      	beq.n	80078ce <_dtoa_r+0x3de>
 80077f8:	f1bb 0f00 	cmp.w	fp, #0
 80077fc:	f340 80a0 	ble.w	8007940 <_dtoa_r+0x450>
 8007800:	49c1      	ldr	r1, [pc, #772]	; (8007b08 <_dtoa_r+0x618>)
 8007802:	f00b 020f 	and.w	r2, fp, #15
 8007806:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800780a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800780e:	ed92 7b00 	vldr	d7, [r2]
 8007812:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007816:	f000 8087 	beq.w	8007928 <_dtoa_r+0x438>
 800781a:	4abc      	ldr	r2, [pc, #752]	; (8007b0c <_dtoa_r+0x61c>)
 800781c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007820:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007824:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007828:	f001 010f 	and.w	r1, r1, #15
 800782c:	2203      	movs	r2, #3
 800782e:	48b7      	ldr	r0, [pc, #732]	; (8007b0c <_dtoa_r+0x61c>)
 8007830:	2900      	cmp	r1, #0
 8007832:	d17b      	bne.n	800792c <_dtoa_r+0x43c>
 8007834:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007838:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800783c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007842:	2900      	cmp	r1, #0
 8007844:	f000 80a2 	beq.w	800798c <_dtoa_r+0x49c>
 8007848:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800784c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007850:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007858:	f140 8098 	bpl.w	800798c <_dtoa_r+0x49c>
 800785c:	f1b9 0f00 	cmp.w	r9, #0
 8007860:	f000 8094 	beq.w	800798c <_dtoa_r+0x49c>
 8007864:	f1ba 0f00 	cmp.w	sl, #0
 8007868:	dd2f      	ble.n	80078ca <_dtoa_r+0x3da>
 800786a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800786e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007872:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007876:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800787a:	3201      	adds	r2, #1
 800787c:	4650      	mov	r0, sl
 800787e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007882:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007886:	ee07 2a90 	vmov	s15, r2
 800788a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800788e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007892:	ee15 4a90 	vmov	r4, s11
 8007896:	ec52 1b15 	vmov	r1, r2, d5
 800789a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800789e:	2800      	cmp	r0, #0
 80078a0:	d177      	bne.n	8007992 <_dtoa_r+0x4a2>
 80078a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80078a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80078aa:	ec42 1b17 	vmov	d7, r1, r2
 80078ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b6:	f300 8263 	bgt.w	8007d80 <_dtoa_r+0x890>
 80078ba:	eeb1 7b47 	vneg.f64	d7, d7
 80078be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c6:	f100 8258 	bmi.w	8007d7a <_dtoa_r+0x88a>
 80078ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	f2c0 811d 	blt.w	8007b10 <_dtoa_r+0x620>
 80078d6:	f1bb 0f0e 	cmp.w	fp, #14
 80078da:	f300 8119 	bgt.w	8007b10 <_dtoa_r+0x620>
 80078de:	4b8a      	ldr	r3, [pc, #552]	; (8007b08 <_dtoa_r+0x618>)
 80078e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078e4:	ed93 6b00 	vldr	d6, [r3]
 80078e8:	9b08      	ldr	r3, [sp, #32]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f280 80b7 	bge.w	8007a5e <_dtoa_r+0x56e>
 80078f0:	f1b9 0f00 	cmp.w	r9, #0
 80078f4:	f300 80b3 	bgt.w	8007a5e <_dtoa_r+0x56e>
 80078f8:	f040 823f 	bne.w	8007d7a <_dtoa_r+0x88a>
 80078fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007900:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007904:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007908:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	464c      	mov	r4, r9
 8007912:	464f      	mov	r7, r9
 8007914:	f280 8215 	bge.w	8007d42 <_dtoa_r+0x852>
 8007918:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800791c:	2331      	movs	r3, #49	; 0x31
 800791e:	f808 3b01 	strb.w	r3, [r8], #1
 8007922:	f10b 0b01 	add.w	fp, fp, #1
 8007926:	e211      	b.n	8007d4c <_dtoa_r+0x85c>
 8007928:	2202      	movs	r2, #2
 800792a:	e780      	b.n	800782e <_dtoa_r+0x33e>
 800792c:	07cc      	lsls	r4, r1, #31
 800792e:	d504      	bpl.n	800793a <_dtoa_r+0x44a>
 8007930:	ed90 6b00 	vldr	d6, [r0]
 8007934:	3201      	adds	r2, #1
 8007936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800793a:	1049      	asrs	r1, r1, #1
 800793c:	3008      	adds	r0, #8
 800793e:	e777      	b.n	8007830 <_dtoa_r+0x340>
 8007940:	d022      	beq.n	8007988 <_dtoa_r+0x498>
 8007942:	f1cb 0100 	rsb	r1, fp, #0
 8007946:	4a70      	ldr	r2, [pc, #448]	; (8007b08 <_dtoa_r+0x618>)
 8007948:	f001 000f 	and.w	r0, r1, #15
 800794c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007950:	ed92 7b00 	vldr	d7, [r2]
 8007954:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800795c:	486b      	ldr	r0, [pc, #428]	; (8007b0c <_dtoa_r+0x61c>)
 800795e:	1109      	asrs	r1, r1, #4
 8007960:	2400      	movs	r4, #0
 8007962:	2202      	movs	r2, #2
 8007964:	b929      	cbnz	r1, 8007972 <_dtoa_r+0x482>
 8007966:	2c00      	cmp	r4, #0
 8007968:	f43f af6a 	beq.w	8007840 <_dtoa_r+0x350>
 800796c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007970:	e766      	b.n	8007840 <_dtoa_r+0x350>
 8007972:	07cf      	lsls	r7, r1, #31
 8007974:	d505      	bpl.n	8007982 <_dtoa_r+0x492>
 8007976:	ed90 6b00 	vldr	d6, [r0]
 800797a:	3201      	adds	r2, #1
 800797c:	2401      	movs	r4, #1
 800797e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007982:	1049      	asrs	r1, r1, #1
 8007984:	3008      	adds	r0, #8
 8007986:	e7ed      	b.n	8007964 <_dtoa_r+0x474>
 8007988:	2202      	movs	r2, #2
 800798a:	e759      	b.n	8007840 <_dtoa_r+0x350>
 800798c:	465f      	mov	r7, fp
 800798e:	4648      	mov	r0, r9
 8007990:	e775      	b.n	800787e <_dtoa_r+0x38e>
 8007992:	ec42 1b17 	vmov	d7, r1, r2
 8007996:	4a5c      	ldr	r2, [pc, #368]	; (8007b08 <_dtoa_r+0x618>)
 8007998:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800799c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80079a0:	9a01      	ldr	r2, [sp, #4]
 80079a2:	1814      	adds	r4, r2, r0
 80079a4:	9a07      	ldr	r2, [sp, #28]
 80079a6:	b352      	cbz	r2, 80079fe <_dtoa_r+0x50e>
 80079a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80079ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80079b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80079b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80079bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079c4:	ee14 2a90 	vmov	r2, s9
 80079c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80079cc:	3230      	adds	r2, #48	; 0x30
 80079ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80079d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079da:	f808 2b01 	strb.w	r2, [r8], #1
 80079de:	d439      	bmi.n	8007a54 <_dtoa_r+0x564>
 80079e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80079e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80079e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ec:	d472      	bmi.n	8007ad4 <_dtoa_r+0x5e4>
 80079ee:	45a0      	cmp	r8, r4
 80079f0:	f43f af6b 	beq.w	80078ca <_dtoa_r+0x3da>
 80079f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80079f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80079fc:	e7e0      	b.n	80079c0 <_dtoa_r+0x4d0>
 80079fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a06:	4621      	mov	r1, r4
 8007a08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007a0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a10:	ee14 2a90 	vmov	r2, s9
 8007a14:	3230      	adds	r2, #48	; 0x30
 8007a16:	f808 2b01 	strb.w	r2, [r8], #1
 8007a1a:	45a0      	cmp	r8, r4
 8007a1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a24:	d118      	bne.n	8007a58 <_dtoa_r+0x568>
 8007a26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007a2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007a2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a36:	dc4d      	bgt.n	8007ad4 <_dtoa_r+0x5e4>
 8007a38:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a44:	f57f af41 	bpl.w	80078ca <_dtoa_r+0x3da>
 8007a48:	4688      	mov	r8, r1
 8007a4a:	3901      	subs	r1, #1
 8007a4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007a50:	2b30      	cmp	r3, #48	; 0x30
 8007a52:	d0f9      	beq.n	8007a48 <_dtoa_r+0x558>
 8007a54:	46bb      	mov	fp, r7
 8007a56:	e02a      	b.n	8007aae <_dtoa_r+0x5be>
 8007a58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a5c:	e7d6      	b.n	8007a0c <_dtoa_r+0x51c>
 8007a5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007a66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007a6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007a72:	ee15 3a10 	vmov	r3, s10
 8007a76:	3330      	adds	r3, #48	; 0x30
 8007a78:	f808 3b01 	strb.w	r3, [r8], #1
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	eba8 0303 	sub.w	r3, r8, r3
 8007a82:	4599      	cmp	r9, r3
 8007a84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007a88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007a8c:	d133      	bne.n	8007af6 <_dtoa_r+0x606>
 8007a8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007a92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9a:	dc1a      	bgt.n	8007ad2 <_dtoa_r+0x5e2>
 8007a9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	d103      	bne.n	8007aae <_dtoa_r+0x5be>
 8007aa6:	ee15 3a10 	vmov	r3, s10
 8007aaa:	07d9      	lsls	r1, r3, #31
 8007aac:	d411      	bmi.n	8007ad2 <_dtoa_r+0x5e2>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 fd05 	bl	80084c0 <_Bfree>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aba:	f888 3000 	strb.w	r3, [r8]
 8007abe:	f10b 0301 	add.w	r3, fp, #1
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f43f ad61 	beq.w	800758e <_dtoa_r+0x9e>
 8007acc:	f8c3 8000 	str.w	r8, [r3]
 8007ad0:	e55d      	b.n	800758e <_dtoa_r+0x9e>
 8007ad2:	465f      	mov	r7, fp
 8007ad4:	4643      	mov	r3, r8
 8007ad6:	4698      	mov	r8, r3
 8007ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007adc:	2a39      	cmp	r2, #57	; 0x39
 8007ade:	d106      	bne.n	8007aee <_dtoa_r+0x5fe>
 8007ae0:	9a01      	ldr	r2, [sp, #4]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d1f7      	bne.n	8007ad6 <_dtoa_r+0x5e6>
 8007ae6:	9901      	ldr	r1, [sp, #4]
 8007ae8:	2230      	movs	r2, #48	; 0x30
 8007aea:	3701      	adds	r7, #1
 8007aec:	700a      	strb	r2, [r1, #0]
 8007aee:	781a      	ldrb	r2, [r3, #0]
 8007af0:	3201      	adds	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	e7ae      	b.n	8007a54 <_dtoa_r+0x564>
 8007af6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007afa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	d1b2      	bne.n	8007a6a <_dtoa_r+0x57a>
 8007b04:	e7d3      	b.n	8007aae <_dtoa_r+0x5be>
 8007b06:	bf00      	nop
 8007b08:	08009790 	.word	0x08009790
 8007b0c:	08009768 	.word	0x08009768
 8007b10:	9907      	ldr	r1, [sp, #28]
 8007b12:	2900      	cmp	r1, #0
 8007b14:	f000 80d0 	beq.w	8007cb8 <_dtoa_r+0x7c8>
 8007b18:	9906      	ldr	r1, [sp, #24]
 8007b1a:	2901      	cmp	r1, #1
 8007b1c:	f300 80b4 	bgt.w	8007c88 <_dtoa_r+0x798>
 8007b20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b22:	2900      	cmp	r1, #0
 8007b24:	f000 80ac 	beq.w	8007c80 <_dtoa_r+0x790>
 8007b28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b30:	461c      	mov	r4, r3
 8007b32:	930a      	str	r3, [sp, #40]	; 0x28
 8007b34:	9b04      	ldr	r3, [sp, #16]
 8007b36:	4413      	add	r3, r2
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	9b05      	ldr	r3, [sp, #20]
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4413      	add	r3, r2
 8007b40:	4630      	mov	r0, r6
 8007b42:	9305      	str	r3, [sp, #20]
 8007b44:	f000 fd74 	bl	8008630 <__i2b>
 8007b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4a:	4607      	mov	r7, r0
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	dd0d      	ble.n	8007b6e <_dtoa_r+0x67e>
 8007b52:	9a05      	ldr	r2, [sp, #20]
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	dd0a      	ble.n	8007b6e <_dtoa_r+0x67e>
 8007b58:	4542      	cmp	r2, r8
 8007b5a:	9904      	ldr	r1, [sp, #16]
 8007b5c:	bfa8      	it	ge
 8007b5e:	4642      	movge	r2, r8
 8007b60:	1a89      	subs	r1, r1, r2
 8007b62:	9104      	str	r1, [sp, #16]
 8007b64:	9905      	ldr	r1, [sp, #20]
 8007b66:	eba8 0802 	sub.w	r8, r8, r2
 8007b6a:	1a8a      	subs	r2, r1, r2
 8007b6c:	9205      	str	r2, [sp, #20]
 8007b6e:	b303      	cbz	r3, 8007bb2 <_dtoa_r+0x6c2>
 8007b70:	9a07      	ldr	r2, [sp, #28]
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	f000 80a5 	beq.w	8007cc2 <_dtoa_r+0x7d2>
 8007b78:	2c00      	cmp	r4, #0
 8007b7a:	dd13      	ble.n	8007ba4 <_dtoa_r+0x6b4>
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	4622      	mov	r2, r4
 8007b80:	4630      	mov	r0, r6
 8007b82:	930d      	str	r3, [sp, #52]	; 0x34
 8007b84:	f000 fe14 	bl	80087b0 <__pow5mult>
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f000 fd64 	bl	800865c <__multiply>
 8007b94:	4629      	mov	r1, r5
 8007b96:	900a      	str	r0, [sp, #40]	; 0x28
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 fc91 	bl	80084c0 <_Bfree>
 8007b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba2:	4615      	mov	r5, r2
 8007ba4:	1b1a      	subs	r2, r3, r4
 8007ba6:	d004      	beq.n	8007bb2 <_dtoa_r+0x6c2>
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4630      	mov	r0, r6
 8007bac:	f000 fe00 	bl	80087b0 <__pow5mult>
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f000 fd3b 	bl	8008630 <__i2b>
 8007bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	f340 8081 	ble.w	8007cc6 <_dtoa_r+0x7d6>
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 fdf1 	bl	80087b0 <__pow5mult>
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	dd7a      	ble.n	8007ccc <_dtoa_r+0x7dc>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bda:	6922      	ldr	r2, [r4, #16]
 8007bdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007be0:	6910      	ldr	r0, [r2, #16]
 8007be2:	f000 fcd5 	bl	8008590 <__hi0bits>
 8007be6:	f1c0 0020 	rsb	r0, r0, #32
 8007bea:	9b05      	ldr	r3, [sp, #20]
 8007bec:	4418      	add	r0, r3
 8007bee:	f010 001f 	ands.w	r0, r0, #31
 8007bf2:	f000 808c 	beq.w	8007d0e <_dtoa_r+0x81e>
 8007bf6:	f1c0 0220 	rsb	r2, r0, #32
 8007bfa:	2a04      	cmp	r2, #4
 8007bfc:	f340 8085 	ble.w	8007d0a <_dtoa_r+0x81a>
 8007c00:	f1c0 001c 	rsb	r0, r0, #28
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	4403      	add	r3, r0
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	4403      	add	r3, r0
 8007c0e:	4480      	add	r8, r0
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd05      	ble.n	8007c24 <_dtoa_r+0x734>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 fe21 	bl	8008864 <__lshift>
 8007c22:	4605      	mov	r5, r0
 8007c24:	9b05      	ldr	r3, [sp, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dd05      	ble.n	8007c36 <_dtoa_r+0x746>
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 fe18 	bl	8008864 <__lshift>
 8007c34:	4604      	mov	r4, r0
 8007c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d06a      	beq.n	8007d12 <_dtoa_r+0x822>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fe80 	bl	8008944 <__mcmp>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	da64      	bge.n	8007d12 <_dtoa_r+0x822>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	220a      	movs	r2, #10
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f000 fc58 	bl	8008504 <__multadd>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8191 	beq.w	8007f84 <_dtoa_r+0xa94>
 8007c62:	4639      	mov	r1, r7
 8007c64:	2300      	movs	r3, #0
 8007c66:	220a      	movs	r2, #10
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 fc4b 	bl	8008504 <__multadd>
 8007c6e:	f1ba 0f00 	cmp.w	sl, #0
 8007c72:	4607      	mov	r7, r0
 8007c74:	f300 808d 	bgt.w	8007d92 <_dtoa_r+0x8a2>
 8007c78:	9b06      	ldr	r3, [sp, #24]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	dc50      	bgt.n	8007d20 <_dtoa_r+0x830>
 8007c7e:	e088      	b.n	8007d92 <_dtoa_r+0x8a2>
 8007c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c86:	e751      	b.n	8007b2c <_dtoa_r+0x63c>
 8007c88:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	bfbf      	itttt	lt
 8007c90:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007c92:	1ae3      	sublt	r3, r4, r3
 8007c94:	18d2      	addlt	r2, r2, r3
 8007c96:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007c98:	bfb6      	itet	lt
 8007c9a:	4623      	movlt	r3, r4
 8007c9c:	1b1c      	subge	r4, r3, r4
 8007c9e:	2400      	movlt	r4, #0
 8007ca0:	f1b9 0f00 	cmp.w	r9, #0
 8007ca4:	bfb5      	itete	lt
 8007ca6:	9a04      	ldrlt	r2, [sp, #16]
 8007ca8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007cac:	eba2 0809 	sublt.w	r8, r2, r9
 8007cb0:	464a      	movge	r2, r9
 8007cb2:	bfb8      	it	lt
 8007cb4:	2200      	movlt	r2, #0
 8007cb6:	e73c      	b.n	8007b32 <_dtoa_r+0x642>
 8007cb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007cbc:	9f07      	ldr	r7, [sp, #28]
 8007cbe:	461c      	mov	r4, r3
 8007cc0:	e744      	b.n	8007b4c <_dtoa_r+0x65c>
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	e770      	b.n	8007ba8 <_dtoa_r+0x6b8>
 8007cc6:	9b06      	ldr	r3, [sp, #24]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	dc18      	bgt.n	8007cfe <_dtoa_r+0x80e>
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	b9b3      	cbnz	r3, 8007cfe <_dtoa_r+0x80e>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007cd6:	b9a2      	cbnz	r2, 8007d02 <_dtoa_r+0x812>
 8007cd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cdc:	0d12      	lsrs	r2, r2, #20
 8007cde:	0512      	lsls	r2, r2, #20
 8007ce0:	b18a      	cbz	r2, 8007d06 <_dtoa_r+0x816>
 8007ce2:	9b04      	ldr	r3, [sp, #16]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	9b05      	ldr	r3, [sp, #20]
 8007cea:	3301      	adds	r3, #1
 8007cec:	9305      	str	r3, [sp, #20]
 8007cee:	2301      	movs	r3, #1
 8007cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f af70 	bne.w	8007bda <_dtoa_r+0x6ea>
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	e775      	b.n	8007bea <_dtoa_r+0x6fa>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e7f6      	b.n	8007cf0 <_dtoa_r+0x800>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	e7f4      	b.n	8007cf0 <_dtoa_r+0x800>
 8007d06:	920a      	str	r2, [sp, #40]	; 0x28
 8007d08:	e7f3      	b.n	8007cf2 <_dtoa_r+0x802>
 8007d0a:	d082      	beq.n	8007c12 <_dtoa_r+0x722>
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	301c      	adds	r0, #28
 8007d10:	e778      	b.n	8007c04 <_dtoa_r+0x714>
 8007d12:	f1b9 0f00 	cmp.w	r9, #0
 8007d16:	dc37      	bgt.n	8007d88 <_dtoa_r+0x898>
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	dd34      	ble.n	8007d88 <_dtoa_r+0x898>
 8007d1e:	46ca      	mov	sl, r9
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	d10d      	bne.n	8007d42 <_dtoa_r+0x852>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4653      	mov	r3, sl
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 fbe9 	bl	8008504 <__multadd>
 8007d32:	4601      	mov	r1, r0
 8007d34:	4604      	mov	r4, r0
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 fe04 	bl	8008944 <__mcmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f73f adeb 	bgt.w	8007918 <_dtoa_r+0x428>
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d48:	ea6f 0b03 	mvn.w	fp, r3
 8007d4c:	f04f 0900 	mov.w	r9, #0
 8007d50:	4621      	mov	r1, r4
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 fbb4 	bl	80084c0 <_Bfree>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	f43f aea8 	beq.w	8007aae <_dtoa_r+0x5be>
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d005      	beq.n	8007d70 <_dtoa_r+0x880>
 8007d64:	45b9      	cmp	r9, r7
 8007d66:	d003      	beq.n	8007d70 <_dtoa_r+0x880>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f000 fba8 	bl	80084c0 <_Bfree>
 8007d70:	4639      	mov	r1, r7
 8007d72:	4630      	mov	r0, r6
 8007d74:	f000 fba4 	bl	80084c0 <_Bfree>
 8007d78:	e699      	b.n	8007aae <_dtoa_r+0x5be>
 8007d7a:	2400      	movs	r4, #0
 8007d7c:	4627      	mov	r7, r4
 8007d7e:	e7e0      	b.n	8007d42 <_dtoa_r+0x852>
 8007d80:	46bb      	mov	fp, r7
 8007d82:	4604      	mov	r4, r0
 8007d84:	4607      	mov	r7, r0
 8007d86:	e5c7      	b.n	8007918 <_dtoa_r+0x428>
 8007d88:	9b07      	ldr	r3, [sp, #28]
 8007d8a:	46ca      	mov	sl, r9
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 8100 	beq.w	8007f92 <_dtoa_r+0xaa2>
 8007d92:	f1b8 0f00 	cmp.w	r8, #0
 8007d96:	dd05      	ble.n	8007da4 <_dtoa_r+0x8b4>
 8007d98:	4639      	mov	r1, r7
 8007d9a:	4642      	mov	r2, r8
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 fd61 	bl	8008864 <__lshift>
 8007da2:	4607      	mov	r7, r0
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d05d      	beq.n	8007e66 <_dtoa_r+0x976>
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4630      	mov	r0, r6
 8007dae:	f000 fb47 	bl	8008440 <_Balloc>
 8007db2:	4680      	mov	r8, r0
 8007db4:	b928      	cbnz	r0, 8007dc2 <_dtoa_r+0x8d2>
 8007db6:	4b82      	ldr	r3, [pc, #520]	; (8007fc0 <_dtoa_r+0xad0>)
 8007db8:	4602      	mov	r2, r0
 8007dba:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007dbe:	f7ff bbaf 	b.w	8007520 <_dtoa_r+0x30>
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	3202      	adds	r2, #2
 8007dc6:	0092      	lsls	r2, r2, #2
 8007dc8:	f107 010c 	add.w	r1, r7, #12
 8007dcc:	300c      	adds	r0, #12
 8007dce:	f000 fb29 	bl	8008424 <memcpy>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f000 fd44 	bl	8008864 <__lshift>
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	3301      	adds	r3, #1
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	4453      	add	r3, sl
 8007de6:	9308      	str	r3, [sp, #32]
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	46b9      	mov	r9, r7
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	4607      	mov	r7, r0
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	4621      	mov	r1, r4
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	9302      	str	r3, [sp, #8]
 8007dfe:	f7ff faeb 	bl	80073d8 <quorem>
 8007e02:	4603      	mov	r3, r0
 8007e04:	3330      	adds	r3, #48	; 0x30
 8007e06:	9005      	str	r0, [sp, #20]
 8007e08:	4649      	mov	r1, r9
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0e:	f000 fd99 	bl	8008944 <__mcmp>
 8007e12:	463a      	mov	r2, r7
 8007e14:	4682      	mov	sl, r0
 8007e16:	4621      	mov	r1, r4
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 fdaf 	bl	800897c <__mdiff>
 8007e1e:	68c2      	ldr	r2, [r0, #12]
 8007e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e22:	4680      	mov	r8, r0
 8007e24:	bb0a      	cbnz	r2, 8007e6a <_dtoa_r+0x97a>
 8007e26:	4601      	mov	r1, r0
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 fd8b 	bl	8008944 <__mcmp>
 8007e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e30:	4602      	mov	r2, r0
 8007e32:	4641      	mov	r1, r8
 8007e34:	4630      	mov	r0, r6
 8007e36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007e3a:	f000 fb41 	bl	80084c0 <_Bfree>
 8007e3e:	9b06      	ldr	r3, [sp, #24]
 8007e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e46:	ea43 0102 	orr.w	r1, r3, r2
 8007e4a:	9b07      	ldr	r3, [sp, #28]
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e50:	d10d      	bne.n	8007e6e <_dtoa_r+0x97e>
 8007e52:	2b39      	cmp	r3, #57	; 0x39
 8007e54:	d029      	beq.n	8007eaa <_dtoa_r+0x9ba>
 8007e56:	f1ba 0f00 	cmp.w	sl, #0
 8007e5a:	dd01      	ble.n	8007e60 <_dtoa_r+0x970>
 8007e5c:	9b05      	ldr	r3, [sp, #20]
 8007e5e:	3331      	adds	r3, #49	; 0x31
 8007e60:	9a02      	ldr	r2, [sp, #8]
 8007e62:	7013      	strb	r3, [r2, #0]
 8007e64:	e774      	b.n	8007d50 <_dtoa_r+0x860>
 8007e66:	4638      	mov	r0, r7
 8007e68:	e7b8      	b.n	8007ddc <_dtoa_r+0x8ec>
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	e7e1      	b.n	8007e32 <_dtoa_r+0x942>
 8007e6e:	f1ba 0f00 	cmp.w	sl, #0
 8007e72:	db06      	blt.n	8007e82 <_dtoa_r+0x992>
 8007e74:	9906      	ldr	r1, [sp, #24]
 8007e76:	ea41 0a0a 	orr.w	sl, r1, sl
 8007e7a:	9907      	ldr	r1, [sp, #28]
 8007e7c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007e80:	d120      	bne.n	8007ec4 <_dtoa_r+0x9d4>
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	ddec      	ble.n	8007e60 <_dtoa_r+0x970>
 8007e86:	4629      	mov	r1, r5
 8007e88:	2201      	movs	r2, #1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	f000 fce9 	bl	8008864 <__lshift>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4605      	mov	r5, r0
 8007e96:	f000 fd55 	bl	8008944 <__mcmp>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	dc02      	bgt.n	8007ea6 <_dtoa_r+0x9b6>
 8007ea0:	d1de      	bne.n	8007e60 <_dtoa_r+0x970>
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d5dc      	bpl.n	8007e60 <_dtoa_r+0x970>
 8007ea6:	2b39      	cmp	r3, #57	; 0x39
 8007ea8:	d1d8      	bne.n	8007e5c <_dtoa_r+0x96c>
 8007eaa:	9a02      	ldr	r2, [sp, #8]
 8007eac:	2339      	movs	r3, #57	; 0x39
 8007eae:	7013      	strb	r3, [r2, #0]
 8007eb0:	4643      	mov	r3, r8
 8007eb2:	4698      	mov	r8, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007eba:	2a39      	cmp	r2, #57	; 0x39
 8007ebc:	d051      	beq.n	8007f62 <_dtoa_r+0xa72>
 8007ebe:	3201      	adds	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e745      	b.n	8007d50 <_dtoa_r+0x860>
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	dd03      	ble.n	8007ed0 <_dtoa_r+0x9e0>
 8007ec8:	2b39      	cmp	r3, #57	; 0x39
 8007eca:	d0ee      	beq.n	8007eaa <_dtoa_r+0x9ba>
 8007ecc:	3301      	adds	r3, #1
 8007ece:	e7c7      	b.n	8007e60 <_dtoa_r+0x970>
 8007ed0:	9a04      	ldr	r2, [sp, #16]
 8007ed2:	9908      	ldr	r1, [sp, #32]
 8007ed4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	d02b      	beq.n	8007f34 <_dtoa_r+0xa44>
 8007edc:	4629      	mov	r1, r5
 8007ede:	2300      	movs	r3, #0
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 fb0e 	bl	8008504 <__multadd>
 8007ee8:	45b9      	cmp	r9, r7
 8007eea:	4605      	mov	r5, r0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	f04f 020a 	mov.w	r2, #10
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	d107      	bne.n	8007f0a <_dtoa_r+0xa1a>
 8007efa:	f000 fb03 	bl	8008504 <__multadd>
 8007efe:	4681      	mov	r9, r0
 8007f00:	4607      	mov	r7, r0
 8007f02:	9b04      	ldr	r3, [sp, #16]
 8007f04:	3301      	adds	r3, #1
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	e774      	b.n	8007df4 <_dtoa_r+0x904>
 8007f0a:	f000 fafb 	bl	8008504 <__multadd>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4681      	mov	r9, r0
 8007f12:	2300      	movs	r3, #0
 8007f14:	220a      	movs	r2, #10
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 faf4 	bl	8008504 <__multadd>
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	e7f0      	b.n	8007f02 <_dtoa_r+0xa12>
 8007f20:	f1ba 0f00 	cmp.w	sl, #0
 8007f24:	9a01      	ldr	r2, [sp, #4]
 8007f26:	bfcc      	ite	gt
 8007f28:	46d0      	movgt	r8, sl
 8007f2a:	f04f 0801 	movle.w	r8, #1
 8007f2e:	4490      	add	r8, r2
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	4629      	mov	r1, r5
 8007f36:	2201      	movs	r2, #1
 8007f38:	4630      	mov	r0, r6
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	f000 fc92 	bl	8008864 <__lshift>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4605      	mov	r5, r0
 8007f44:	f000 fcfe 	bl	8008944 <__mcmp>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dcb1      	bgt.n	8007eb0 <_dtoa_r+0x9c0>
 8007f4c:	d102      	bne.n	8007f54 <_dtoa_r+0xa64>
 8007f4e:	9b02      	ldr	r3, [sp, #8]
 8007f50:	07db      	lsls	r3, r3, #31
 8007f52:	d4ad      	bmi.n	8007eb0 <_dtoa_r+0x9c0>
 8007f54:	4643      	mov	r3, r8
 8007f56:	4698      	mov	r8, r3
 8007f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f5c:	2a30      	cmp	r2, #48	; 0x30
 8007f5e:	d0fa      	beq.n	8007f56 <_dtoa_r+0xa66>
 8007f60:	e6f6      	b.n	8007d50 <_dtoa_r+0x860>
 8007f62:	9a01      	ldr	r2, [sp, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d1a4      	bne.n	8007eb2 <_dtoa_r+0x9c2>
 8007f68:	f10b 0b01 	add.w	fp, fp, #1
 8007f6c:	2331      	movs	r3, #49	; 0x31
 8007f6e:	e778      	b.n	8007e62 <_dtoa_r+0x972>
 8007f70:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <_dtoa_r+0xad4>)
 8007f72:	f7ff bb27 	b.w	80075c4 <_dtoa_r+0xd4>
 8007f76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f47f ab03 	bne.w	8007584 <_dtoa_r+0x94>
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <_dtoa_r+0xad8>)
 8007f80:	f7ff bb20 	b.w	80075c4 <_dtoa_r+0xd4>
 8007f84:	f1ba 0f00 	cmp.w	sl, #0
 8007f88:	dc03      	bgt.n	8007f92 <_dtoa_r+0xaa2>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	f73f aec7 	bgt.w	8007d20 <_dtoa_r+0x830>
 8007f92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f96:	4621      	mov	r1, r4
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f7ff fa1d 	bl	80073d8 <quorem>
 8007f9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007fa2:	f808 3b01 	strb.w	r3, [r8], #1
 8007fa6:	9a01      	ldr	r2, [sp, #4]
 8007fa8:	eba8 0202 	sub.w	r2, r8, r2
 8007fac:	4592      	cmp	sl, r2
 8007fae:	ddb7      	ble.n	8007f20 <_dtoa_r+0xa30>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 faa4 	bl	8008504 <__multadd>
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	e7ea      	b.n	8007f96 <_dtoa_r+0xaa6>
 8007fc0:	0800969b 	.word	0x0800969b
 8007fc4:	080095f8 	.word	0x080095f8
 8007fc8:	0800961c 	.word	0x0800961c

08007fcc <__sflush_r>:
 8007fcc:	898a      	ldrh	r2, [r1, #12]
 8007fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	0710      	lsls	r0, r2, #28
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	d458      	bmi.n	800808c <__sflush_r+0xc0>
 8007fda:	684b      	ldr	r3, [r1, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dc05      	bgt.n	8007fec <__sflush_r+0x20>
 8007fe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dc02      	bgt.n	8007fec <__sflush_r+0x20>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d0f9      	beq.n	8007fe6 <__sflush_r+0x1a>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ff8:	682f      	ldr	r7, [r5, #0]
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	d032      	beq.n	8008064 <__sflush_r+0x98>
 8007ffe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	075a      	lsls	r2, r3, #29
 8008004:	d505      	bpl.n	8008012 <__sflush_r+0x46>
 8008006:	6863      	ldr	r3, [r4, #4]
 8008008:	1ac0      	subs	r0, r0, r3
 800800a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800800c:	b10b      	cbz	r3, 8008012 <__sflush_r+0x46>
 800800e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008010:	1ac0      	subs	r0, r0, r3
 8008012:	2300      	movs	r3, #0
 8008014:	4602      	mov	r2, r0
 8008016:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008018:	6a21      	ldr	r1, [r4, #32]
 800801a:	4628      	mov	r0, r5
 800801c:	47b0      	blx	r6
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	d106      	bne.n	8008032 <__sflush_r+0x66>
 8008024:	6829      	ldr	r1, [r5, #0]
 8008026:	291d      	cmp	r1, #29
 8008028:	d82c      	bhi.n	8008084 <__sflush_r+0xb8>
 800802a:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <__sflush_r+0x108>)
 800802c:	40ca      	lsrs	r2, r1
 800802e:	07d6      	lsls	r6, r2, #31
 8008030:	d528      	bpl.n	8008084 <__sflush_r+0xb8>
 8008032:	2200      	movs	r2, #0
 8008034:	6062      	str	r2, [r4, #4]
 8008036:	04d9      	lsls	r1, r3, #19
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	d504      	bpl.n	8008048 <__sflush_r+0x7c>
 800803e:	1c42      	adds	r2, r0, #1
 8008040:	d101      	bne.n	8008046 <__sflush_r+0x7a>
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	b903      	cbnz	r3, 8008048 <__sflush_r+0x7c>
 8008046:	6560      	str	r0, [r4, #84]	; 0x54
 8008048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804a:	602f      	str	r7, [r5, #0]
 800804c:	2900      	cmp	r1, #0
 800804e:	d0ca      	beq.n	8007fe6 <__sflush_r+0x1a>
 8008050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008054:	4299      	cmp	r1, r3
 8008056:	d002      	beq.n	800805e <__sflush_r+0x92>
 8008058:	4628      	mov	r0, r5
 800805a:	f000 fd8b 	bl	8008b74 <_free_r>
 800805e:	2000      	movs	r0, #0
 8008060:	6360      	str	r0, [r4, #52]	; 0x34
 8008062:	e7c1      	b.n	8007fe8 <__sflush_r+0x1c>
 8008064:	6a21      	ldr	r1, [r4, #32]
 8008066:	2301      	movs	r3, #1
 8008068:	4628      	mov	r0, r5
 800806a:	47b0      	blx	r6
 800806c:	1c41      	adds	r1, r0, #1
 800806e:	d1c7      	bne.n	8008000 <__sflush_r+0x34>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0c4      	beq.n	8008000 <__sflush_r+0x34>
 8008076:	2b1d      	cmp	r3, #29
 8008078:	d001      	beq.n	800807e <__sflush_r+0xb2>
 800807a:	2b16      	cmp	r3, #22
 800807c:	d101      	bne.n	8008082 <__sflush_r+0xb6>
 800807e:	602f      	str	r7, [r5, #0]
 8008080:	e7b1      	b.n	8007fe6 <__sflush_r+0x1a>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	e7ad      	b.n	8007fe8 <__sflush_r+0x1c>
 800808c:	690f      	ldr	r7, [r1, #16]
 800808e:	2f00      	cmp	r7, #0
 8008090:	d0a9      	beq.n	8007fe6 <__sflush_r+0x1a>
 8008092:	0793      	lsls	r3, r2, #30
 8008094:	680e      	ldr	r6, [r1, #0]
 8008096:	bf08      	it	eq
 8008098:	694b      	ldreq	r3, [r1, #20]
 800809a:	600f      	str	r7, [r1, #0]
 800809c:	bf18      	it	ne
 800809e:	2300      	movne	r3, #0
 80080a0:	eba6 0807 	sub.w	r8, r6, r7
 80080a4:	608b      	str	r3, [r1, #8]
 80080a6:	f1b8 0f00 	cmp.w	r8, #0
 80080aa:	dd9c      	ble.n	8007fe6 <__sflush_r+0x1a>
 80080ac:	6a21      	ldr	r1, [r4, #32]
 80080ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080b0:	4643      	mov	r3, r8
 80080b2:	463a      	mov	r2, r7
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b0      	blx	r6
 80080b8:	2800      	cmp	r0, #0
 80080ba:	dc06      	bgt.n	80080ca <__sflush_r+0xfe>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080c8:	e78e      	b.n	8007fe8 <__sflush_r+0x1c>
 80080ca:	4407      	add	r7, r0
 80080cc:	eba8 0800 	sub.w	r8, r8, r0
 80080d0:	e7e9      	b.n	80080a6 <__sflush_r+0xda>
 80080d2:	bf00      	nop
 80080d4:	20400001 	.word	0x20400001

080080d8 <_fflush_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	690b      	ldr	r3, [r1, #16]
 80080dc:	4605      	mov	r5, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	b913      	cbnz	r3, 80080e8 <_fflush_r+0x10>
 80080e2:	2500      	movs	r5, #0
 80080e4:	4628      	mov	r0, r5
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	b118      	cbz	r0, 80080f2 <_fflush_r+0x1a>
 80080ea:	6983      	ldr	r3, [r0, #24]
 80080ec:	b90b      	cbnz	r3, 80080f2 <_fflush_r+0x1a>
 80080ee:	f000 f887 	bl	8008200 <__sinit>
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <_fflush_r+0x6c>)
 80080f4:	429c      	cmp	r4, r3
 80080f6:	d11b      	bne.n	8008130 <_fflush_r+0x58>
 80080f8:	686c      	ldr	r4, [r5, #4]
 80080fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0ef      	beq.n	80080e2 <_fflush_r+0xa>
 8008102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008104:	07d0      	lsls	r0, r2, #31
 8008106:	d404      	bmi.n	8008112 <_fflush_r+0x3a>
 8008108:	0599      	lsls	r1, r3, #22
 800810a:	d402      	bmi.n	8008112 <_fflush_r+0x3a>
 800810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810e:	f000 f91a 	bl	8008346 <__retarget_lock_acquire_recursive>
 8008112:	4628      	mov	r0, r5
 8008114:	4621      	mov	r1, r4
 8008116:	f7ff ff59 	bl	8007fcc <__sflush_r>
 800811a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800811c:	07da      	lsls	r2, r3, #31
 800811e:	4605      	mov	r5, r0
 8008120:	d4e0      	bmi.n	80080e4 <_fflush_r+0xc>
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	059b      	lsls	r3, r3, #22
 8008126:	d4dd      	bmi.n	80080e4 <_fflush_r+0xc>
 8008128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800812a:	f000 f90d 	bl	8008348 <__retarget_lock_release_recursive>
 800812e:	e7d9      	b.n	80080e4 <_fflush_r+0xc>
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <_fflush_r+0x70>)
 8008132:	429c      	cmp	r4, r3
 8008134:	d101      	bne.n	800813a <_fflush_r+0x62>
 8008136:	68ac      	ldr	r4, [r5, #8]
 8008138:	e7df      	b.n	80080fa <_fflush_r+0x22>
 800813a:	4b04      	ldr	r3, [pc, #16]	; (800814c <_fflush_r+0x74>)
 800813c:	429c      	cmp	r4, r3
 800813e:	bf08      	it	eq
 8008140:	68ec      	ldreq	r4, [r5, #12]
 8008142:	e7da      	b.n	80080fa <_fflush_r+0x22>
 8008144:	080096cc 	.word	0x080096cc
 8008148:	080096ec 	.word	0x080096ec
 800814c:	080096ac 	.word	0x080096ac

08008150 <std>:
 8008150:	2300      	movs	r3, #0
 8008152:	b510      	push	{r4, lr}
 8008154:	4604      	mov	r4, r0
 8008156:	e9c0 3300 	strd	r3, r3, [r0]
 800815a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800815e:	6083      	str	r3, [r0, #8]
 8008160:	8181      	strh	r1, [r0, #12]
 8008162:	6643      	str	r3, [r0, #100]	; 0x64
 8008164:	81c2      	strh	r2, [r0, #14]
 8008166:	6183      	str	r3, [r0, #24]
 8008168:	4619      	mov	r1, r3
 800816a:	2208      	movs	r2, #8
 800816c:	305c      	adds	r0, #92	; 0x5c
 800816e:	f7fe fc21 	bl	80069b4 <memset>
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <std+0x38>)
 8008174:	6263      	str	r3, [r4, #36]	; 0x24
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <std+0x3c>)
 8008178:	62a3      	str	r3, [r4, #40]	; 0x28
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <std+0x40>)
 800817c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800817e:	4b05      	ldr	r3, [pc, #20]	; (8008194 <std+0x44>)
 8008180:	6224      	str	r4, [r4, #32]
 8008182:	6323      	str	r3, [r4, #48]	; 0x30
 8008184:	bd10      	pop	{r4, pc}
 8008186:	bf00      	nop
 8008188:	08008d55 	.word	0x08008d55
 800818c:	08008d77 	.word	0x08008d77
 8008190:	08008daf 	.word	0x08008daf
 8008194:	08008dd3 	.word	0x08008dd3

08008198 <_cleanup_r>:
 8008198:	4901      	ldr	r1, [pc, #4]	; (80081a0 <_cleanup_r+0x8>)
 800819a:	f000 b8af 	b.w	80082fc <_fwalk_reent>
 800819e:	bf00      	nop
 80081a0:	080080d9 	.word	0x080080d9

080081a4 <__sfmoreglue>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	2268      	movs	r2, #104	; 0x68
 80081a8:	1e4d      	subs	r5, r1, #1
 80081aa:	4355      	muls	r5, r2
 80081ac:	460e      	mov	r6, r1
 80081ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081b2:	f000 fd4b 	bl	8008c4c <_malloc_r>
 80081b6:	4604      	mov	r4, r0
 80081b8:	b140      	cbz	r0, 80081cc <__sfmoreglue+0x28>
 80081ba:	2100      	movs	r1, #0
 80081bc:	e9c0 1600 	strd	r1, r6, [r0]
 80081c0:	300c      	adds	r0, #12
 80081c2:	60a0      	str	r0, [r4, #8]
 80081c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081c8:	f7fe fbf4 	bl	80069b4 <memset>
 80081cc:	4620      	mov	r0, r4
 80081ce:	bd70      	pop	{r4, r5, r6, pc}

080081d0 <__sfp_lock_acquire>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__sfp_lock_acquire+0x8>)
 80081d2:	f000 b8b8 	b.w	8008346 <__retarget_lock_acquire_recursive>
 80081d6:	bf00      	nop
 80081d8:	20000671 	.word	0x20000671

080081dc <__sfp_lock_release>:
 80081dc:	4801      	ldr	r0, [pc, #4]	; (80081e4 <__sfp_lock_release+0x8>)
 80081de:	f000 b8b3 	b.w	8008348 <__retarget_lock_release_recursive>
 80081e2:	bf00      	nop
 80081e4:	20000671 	.word	0x20000671

080081e8 <__sinit_lock_acquire>:
 80081e8:	4801      	ldr	r0, [pc, #4]	; (80081f0 <__sinit_lock_acquire+0x8>)
 80081ea:	f000 b8ac 	b.w	8008346 <__retarget_lock_acquire_recursive>
 80081ee:	bf00      	nop
 80081f0:	20000672 	.word	0x20000672

080081f4 <__sinit_lock_release>:
 80081f4:	4801      	ldr	r0, [pc, #4]	; (80081fc <__sinit_lock_release+0x8>)
 80081f6:	f000 b8a7 	b.w	8008348 <__retarget_lock_release_recursive>
 80081fa:	bf00      	nop
 80081fc:	20000672 	.word	0x20000672

08008200 <__sinit>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4604      	mov	r4, r0
 8008204:	f7ff fff0 	bl	80081e8 <__sinit_lock_acquire>
 8008208:	69a3      	ldr	r3, [r4, #24]
 800820a:	b11b      	cbz	r3, 8008214 <__sinit+0x14>
 800820c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008210:	f7ff bff0 	b.w	80081f4 <__sinit_lock_release>
 8008214:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008218:	6523      	str	r3, [r4, #80]	; 0x50
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <__sinit+0x68>)
 800821c:	4a13      	ldr	r2, [pc, #76]	; (800826c <__sinit+0x6c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	62a2      	str	r2, [r4, #40]	; 0x28
 8008222:	42a3      	cmp	r3, r4
 8008224:	bf04      	itt	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	61a3      	streq	r3, [r4, #24]
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f820 	bl	8008270 <__sfp>
 8008230:	6060      	str	r0, [r4, #4]
 8008232:	4620      	mov	r0, r4
 8008234:	f000 f81c 	bl	8008270 <__sfp>
 8008238:	60a0      	str	r0, [r4, #8]
 800823a:	4620      	mov	r0, r4
 800823c:	f000 f818 	bl	8008270 <__sfp>
 8008240:	2200      	movs	r2, #0
 8008242:	60e0      	str	r0, [r4, #12]
 8008244:	2104      	movs	r1, #4
 8008246:	6860      	ldr	r0, [r4, #4]
 8008248:	f7ff ff82 	bl	8008150 <std>
 800824c:	68a0      	ldr	r0, [r4, #8]
 800824e:	2201      	movs	r2, #1
 8008250:	2109      	movs	r1, #9
 8008252:	f7ff ff7d 	bl	8008150 <std>
 8008256:	68e0      	ldr	r0, [r4, #12]
 8008258:	2202      	movs	r2, #2
 800825a:	2112      	movs	r1, #18
 800825c:	f7ff ff78 	bl	8008150 <std>
 8008260:	2301      	movs	r3, #1
 8008262:	61a3      	str	r3, [r4, #24]
 8008264:	e7d2      	b.n	800820c <__sinit+0xc>
 8008266:	bf00      	nop
 8008268:	080095e4 	.word	0x080095e4
 800826c:	08008199 	.word	0x08008199

08008270 <__sfp>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	4607      	mov	r7, r0
 8008274:	f7ff ffac 	bl	80081d0 <__sfp_lock_acquire>
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <__sfp+0x84>)
 800827a:	681e      	ldr	r6, [r3, #0]
 800827c:	69b3      	ldr	r3, [r6, #24]
 800827e:	b913      	cbnz	r3, 8008286 <__sfp+0x16>
 8008280:	4630      	mov	r0, r6
 8008282:	f7ff ffbd 	bl	8008200 <__sinit>
 8008286:	3648      	adds	r6, #72	; 0x48
 8008288:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800828c:	3b01      	subs	r3, #1
 800828e:	d503      	bpl.n	8008298 <__sfp+0x28>
 8008290:	6833      	ldr	r3, [r6, #0]
 8008292:	b30b      	cbz	r3, 80082d8 <__sfp+0x68>
 8008294:	6836      	ldr	r6, [r6, #0]
 8008296:	e7f7      	b.n	8008288 <__sfp+0x18>
 8008298:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800829c:	b9d5      	cbnz	r5, 80082d4 <__sfp+0x64>
 800829e:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <__sfp+0x88>)
 80082a0:	60e3      	str	r3, [r4, #12]
 80082a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082a6:	6665      	str	r5, [r4, #100]	; 0x64
 80082a8:	f000 f84c 	bl	8008344 <__retarget_lock_init_recursive>
 80082ac:	f7ff ff96 	bl	80081dc <__sfp_lock_release>
 80082b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082b8:	6025      	str	r5, [r4, #0]
 80082ba:	61a5      	str	r5, [r4, #24]
 80082bc:	2208      	movs	r2, #8
 80082be:	4629      	mov	r1, r5
 80082c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082c4:	f7fe fb76 	bl	80069b4 <memset>
 80082c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082d0:	4620      	mov	r0, r4
 80082d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d4:	3468      	adds	r4, #104	; 0x68
 80082d6:	e7d9      	b.n	800828c <__sfp+0x1c>
 80082d8:	2104      	movs	r1, #4
 80082da:	4638      	mov	r0, r7
 80082dc:	f7ff ff62 	bl	80081a4 <__sfmoreglue>
 80082e0:	4604      	mov	r4, r0
 80082e2:	6030      	str	r0, [r6, #0]
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1d5      	bne.n	8008294 <__sfp+0x24>
 80082e8:	f7ff ff78 	bl	80081dc <__sfp_lock_release>
 80082ec:	230c      	movs	r3, #12
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	e7ee      	b.n	80082d0 <__sfp+0x60>
 80082f2:	bf00      	nop
 80082f4:	080095e4 	.word	0x080095e4
 80082f8:	ffff0001 	.word	0xffff0001

080082fc <_fwalk_reent>:
 80082fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008300:	4606      	mov	r6, r0
 8008302:	4688      	mov	r8, r1
 8008304:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008308:	2700      	movs	r7, #0
 800830a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800830e:	f1b9 0901 	subs.w	r9, r9, #1
 8008312:	d505      	bpl.n	8008320 <_fwalk_reent+0x24>
 8008314:	6824      	ldr	r4, [r4, #0]
 8008316:	2c00      	cmp	r4, #0
 8008318:	d1f7      	bne.n	800830a <_fwalk_reent+0xe>
 800831a:	4638      	mov	r0, r7
 800831c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008320:	89ab      	ldrh	r3, [r5, #12]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d907      	bls.n	8008336 <_fwalk_reent+0x3a>
 8008326:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800832a:	3301      	adds	r3, #1
 800832c:	d003      	beq.n	8008336 <_fwalk_reent+0x3a>
 800832e:	4629      	mov	r1, r5
 8008330:	4630      	mov	r0, r6
 8008332:	47c0      	blx	r8
 8008334:	4307      	orrs	r7, r0
 8008336:	3568      	adds	r5, #104	; 0x68
 8008338:	e7e9      	b.n	800830e <_fwalk_reent+0x12>
	...

0800833c <_localeconv_r>:
 800833c:	4800      	ldr	r0, [pc, #0]	; (8008340 <_localeconv_r+0x4>)
 800833e:	4770      	bx	lr
 8008340:	200002cc 	.word	0x200002cc

08008344 <__retarget_lock_init_recursive>:
 8008344:	4770      	bx	lr

08008346 <__retarget_lock_acquire_recursive>:
 8008346:	4770      	bx	lr

08008348 <__retarget_lock_release_recursive>:
 8008348:	4770      	bx	lr

0800834a <__swhatbuf_r>:
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	460e      	mov	r6, r1
 800834e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008352:	2900      	cmp	r1, #0
 8008354:	b096      	sub	sp, #88	; 0x58
 8008356:	4614      	mov	r4, r2
 8008358:	461d      	mov	r5, r3
 800835a:	da08      	bge.n	800836e <__swhatbuf_r+0x24>
 800835c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	602a      	str	r2, [r5, #0]
 8008364:	061a      	lsls	r2, r3, #24
 8008366:	d410      	bmi.n	800838a <__swhatbuf_r+0x40>
 8008368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836c:	e00e      	b.n	800838c <__swhatbuf_r+0x42>
 800836e:	466a      	mov	r2, sp
 8008370:	f000 fd86 	bl	8008e80 <_fstat_r>
 8008374:	2800      	cmp	r0, #0
 8008376:	dbf1      	blt.n	800835c <__swhatbuf_r+0x12>
 8008378:	9a01      	ldr	r2, [sp, #4]
 800837a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800837e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008382:	425a      	negs	r2, r3
 8008384:	415a      	adcs	r2, r3
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	e7ee      	b.n	8008368 <__swhatbuf_r+0x1e>
 800838a:	2340      	movs	r3, #64	; 0x40
 800838c:	2000      	movs	r0, #0
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	b016      	add	sp, #88	; 0x58
 8008392:	bd70      	pop	{r4, r5, r6, pc}

08008394 <__smakebuf_r>:
 8008394:	898b      	ldrh	r3, [r1, #12]
 8008396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008398:	079d      	lsls	r5, r3, #30
 800839a:	4606      	mov	r6, r0
 800839c:	460c      	mov	r4, r1
 800839e:	d507      	bpl.n	80083b0 <__smakebuf_r+0x1c>
 80083a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	2301      	movs	r3, #1
 80083aa:	6163      	str	r3, [r4, #20]
 80083ac:	b002      	add	sp, #8
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	ab01      	add	r3, sp, #4
 80083b2:	466a      	mov	r2, sp
 80083b4:	f7ff ffc9 	bl	800834a <__swhatbuf_r>
 80083b8:	9900      	ldr	r1, [sp, #0]
 80083ba:	4605      	mov	r5, r0
 80083bc:	4630      	mov	r0, r6
 80083be:	f000 fc45 	bl	8008c4c <_malloc_r>
 80083c2:	b948      	cbnz	r0, 80083d8 <__smakebuf_r+0x44>
 80083c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c8:	059a      	lsls	r2, r3, #22
 80083ca:	d4ef      	bmi.n	80083ac <__smakebuf_r+0x18>
 80083cc:	f023 0303 	bic.w	r3, r3, #3
 80083d0:	f043 0302 	orr.w	r3, r3, #2
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	e7e3      	b.n	80083a0 <__smakebuf_r+0xc>
 80083d8:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <__smakebuf_r+0x7c>)
 80083da:	62b3      	str	r3, [r6, #40]	; 0x28
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	6020      	str	r0, [r4, #0]
 80083e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	9b00      	ldr	r3, [sp, #0]
 80083e8:	6163      	str	r3, [r4, #20]
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	6120      	str	r0, [r4, #16]
 80083ee:	b15b      	cbz	r3, 8008408 <__smakebuf_r+0x74>
 80083f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 fd55 	bl	8008ea4 <_isatty_r>
 80083fa:	b128      	cbz	r0, 8008408 <__smakebuf_r+0x74>
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f023 0303 	bic.w	r3, r3, #3
 8008402:	f043 0301 	orr.w	r3, r3, #1
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	89a0      	ldrh	r0, [r4, #12]
 800840a:	4305      	orrs	r5, r0
 800840c:	81a5      	strh	r5, [r4, #12]
 800840e:	e7cd      	b.n	80083ac <__smakebuf_r+0x18>
 8008410:	08008199 	.word	0x08008199

08008414 <malloc>:
 8008414:	4b02      	ldr	r3, [pc, #8]	; (8008420 <malloc+0xc>)
 8008416:	4601      	mov	r1, r0
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	f000 bc17 	b.w	8008c4c <_malloc_r>
 800841e:	bf00      	nop
 8008420:	20000178 	.word	0x20000178

08008424 <memcpy>:
 8008424:	440a      	add	r2, r1
 8008426:	4291      	cmp	r1, r2
 8008428:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800842c:	d100      	bne.n	8008430 <memcpy+0xc>
 800842e:	4770      	bx	lr
 8008430:	b510      	push	{r4, lr}
 8008432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843a:	4291      	cmp	r1, r2
 800843c:	d1f9      	bne.n	8008432 <memcpy+0xe>
 800843e:	bd10      	pop	{r4, pc}

08008440 <_Balloc>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008444:	4604      	mov	r4, r0
 8008446:	460d      	mov	r5, r1
 8008448:	b976      	cbnz	r6, 8008468 <_Balloc+0x28>
 800844a:	2010      	movs	r0, #16
 800844c:	f7ff ffe2 	bl	8008414 <malloc>
 8008450:	4602      	mov	r2, r0
 8008452:	6260      	str	r0, [r4, #36]	; 0x24
 8008454:	b920      	cbnz	r0, 8008460 <_Balloc+0x20>
 8008456:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <_Balloc+0x78>)
 8008458:	4818      	ldr	r0, [pc, #96]	; (80084bc <_Balloc+0x7c>)
 800845a:	2166      	movs	r1, #102	; 0x66
 800845c:	f000 fcd0 	bl	8008e00 <__assert_func>
 8008460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008464:	6006      	str	r6, [r0, #0]
 8008466:	60c6      	str	r6, [r0, #12]
 8008468:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800846a:	68f3      	ldr	r3, [r6, #12]
 800846c:	b183      	cbz	r3, 8008490 <_Balloc+0x50>
 800846e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008476:	b9b8      	cbnz	r0, 80084a8 <_Balloc+0x68>
 8008478:	2101      	movs	r1, #1
 800847a:	fa01 f605 	lsl.w	r6, r1, r5
 800847e:	1d72      	adds	r2, r6, #5
 8008480:	0092      	lsls	r2, r2, #2
 8008482:	4620      	mov	r0, r4
 8008484:	f000 fb60 	bl	8008b48 <_calloc_r>
 8008488:	b160      	cbz	r0, 80084a4 <_Balloc+0x64>
 800848a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800848e:	e00e      	b.n	80084ae <_Balloc+0x6e>
 8008490:	2221      	movs	r2, #33	; 0x21
 8008492:	2104      	movs	r1, #4
 8008494:	4620      	mov	r0, r4
 8008496:	f000 fb57 	bl	8008b48 <_calloc_r>
 800849a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800849c:	60f0      	str	r0, [r6, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e4      	bne.n	800846e <_Balloc+0x2e>
 80084a4:	2000      	movs	r0, #0
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	6802      	ldr	r2, [r0, #0]
 80084aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ae:	2300      	movs	r3, #0
 80084b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084b4:	e7f7      	b.n	80084a6 <_Balloc+0x66>
 80084b6:	bf00      	nop
 80084b8:	08009629 	.word	0x08009629
 80084bc:	0800970c 	.word	0x0800970c

080084c0 <_Bfree>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084c4:	4605      	mov	r5, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	b976      	cbnz	r6, 80084e8 <_Bfree+0x28>
 80084ca:	2010      	movs	r0, #16
 80084cc:	f7ff ffa2 	bl	8008414 <malloc>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6268      	str	r0, [r5, #36]	; 0x24
 80084d4:	b920      	cbnz	r0, 80084e0 <_Bfree+0x20>
 80084d6:	4b09      	ldr	r3, [pc, #36]	; (80084fc <_Bfree+0x3c>)
 80084d8:	4809      	ldr	r0, [pc, #36]	; (8008500 <_Bfree+0x40>)
 80084da:	218a      	movs	r1, #138	; 0x8a
 80084dc:	f000 fc90 	bl	8008e00 <__assert_func>
 80084e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e4:	6006      	str	r6, [r0, #0]
 80084e6:	60c6      	str	r6, [r0, #12]
 80084e8:	b13c      	cbz	r4, 80084fa <_Bfree+0x3a>
 80084ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084ec:	6862      	ldr	r2, [r4, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084f4:	6021      	str	r1, [r4, #0]
 80084f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	08009629 	.word	0x08009629
 8008500:	0800970c 	.word	0x0800970c

08008504 <__multadd>:
 8008504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008508:	690d      	ldr	r5, [r1, #16]
 800850a:	4607      	mov	r7, r0
 800850c:	460c      	mov	r4, r1
 800850e:	461e      	mov	r6, r3
 8008510:	f101 0c14 	add.w	ip, r1, #20
 8008514:	2000      	movs	r0, #0
 8008516:	f8dc 3000 	ldr.w	r3, [ip]
 800851a:	b299      	uxth	r1, r3
 800851c:	fb02 6101 	mla	r1, r2, r1, r6
 8008520:	0c1e      	lsrs	r6, r3, #16
 8008522:	0c0b      	lsrs	r3, r1, #16
 8008524:	fb02 3306 	mla	r3, r2, r6, r3
 8008528:	b289      	uxth	r1, r1
 800852a:	3001      	adds	r0, #1
 800852c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008530:	4285      	cmp	r5, r0
 8008532:	f84c 1b04 	str.w	r1, [ip], #4
 8008536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800853a:	dcec      	bgt.n	8008516 <__multadd+0x12>
 800853c:	b30e      	cbz	r6, 8008582 <__multadd+0x7e>
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	42ab      	cmp	r3, r5
 8008542:	dc19      	bgt.n	8008578 <__multadd+0x74>
 8008544:	6861      	ldr	r1, [r4, #4]
 8008546:	4638      	mov	r0, r7
 8008548:	3101      	adds	r1, #1
 800854a:	f7ff ff79 	bl	8008440 <_Balloc>
 800854e:	4680      	mov	r8, r0
 8008550:	b928      	cbnz	r0, 800855e <__multadd+0x5a>
 8008552:	4602      	mov	r2, r0
 8008554:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <__multadd+0x84>)
 8008556:	480d      	ldr	r0, [pc, #52]	; (800858c <__multadd+0x88>)
 8008558:	21b5      	movs	r1, #181	; 0xb5
 800855a:	f000 fc51 	bl	8008e00 <__assert_func>
 800855e:	6922      	ldr	r2, [r4, #16]
 8008560:	3202      	adds	r2, #2
 8008562:	f104 010c 	add.w	r1, r4, #12
 8008566:	0092      	lsls	r2, r2, #2
 8008568:	300c      	adds	r0, #12
 800856a:	f7ff ff5b 	bl	8008424 <memcpy>
 800856e:	4621      	mov	r1, r4
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff ffa5 	bl	80084c0 <_Bfree>
 8008576:	4644      	mov	r4, r8
 8008578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800857c:	3501      	adds	r5, #1
 800857e:	615e      	str	r6, [r3, #20]
 8008580:	6125      	str	r5, [r4, #16]
 8008582:	4620      	mov	r0, r4
 8008584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008588:	0800969b 	.word	0x0800969b
 800858c:	0800970c 	.word	0x0800970c

08008590 <__hi0bits>:
 8008590:	0c03      	lsrs	r3, r0, #16
 8008592:	041b      	lsls	r3, r3, #16
 8008594:	b9d3      	cbnz	r3, 80085cc <__hi0bits+0x3c>
 8008596:	0400      	lsls	r0, r0, #16
 8008598:	2310      	movs	r3, #16
 800859a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800859e:	bf04      	itt	eq
 80085a0:	0200      	lsleq	r0, r0, #8
 80085a2:	3308      	addeq	r3, #8
 80085a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085a8:	bf04      	itt	eq
 80085aa:	0100      	lsleq	r0, r0, #4
 80085ac:	3304      	addeq	r3, #4
 80085ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085b2:	bf04      	itt	eq
 80085b4:	0080      	lsleq	r0, r0, #2
 80085b6:	3302      	addeq	r3, #2
 80085b8:	2800      	cmp	r0, #0
 80085ba:	db05      	blt.n	80085c8 <__hi0bits+0x38>
 80085bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085c0:	f103 0301 	add.w	r3, r3, #1
 80085c4:	bf08      	it	eq
 80085c6:	2320      	moveq	r3, #32
 80085c8:	4618      	mov	r0, r3
 80085ca:	4770      	bx	lr
 80085cc:	2300      	movs	r3, #0
 80085ce:	e7e4      	b.n	800859a <__hi0bits+0xa>

080085d0 <__lo0bits>:
 80085d0:	6803      	ldr	r3, [r0, #0]
 80085d2:	f013 0207 	ands.w	r2, r3, #7
 80085d6:	4601      	mov	r1, r0
 80085d8:	d00b      	beq.n	80085f2 <__lo0bits+0x22>
 80085da:	07da      	lsls	r2, r3, #31
 80085dc:	d423      	bmi.n	8008626 <__lo0bits+0x56>
 80085de:	0798      	lsls	r0, r3, #30
 80085e0:	bf49      	itett	mi
 80085e2:	085b      	lsrmi	r3, r3, #1
 80085e4:	089b      	lsrpl	r3, r3, #2
 80085e6:	2001      	movmi	r0, #1
 80085e8:	600b      	strmi	r3, [r1, #0]
 80085ea:	bf5c      	itt	pl
 80085ec:	600b      	strpl	r3, [r1, #0]
 80085ee:	2002      	movpl	r0, #2
 80085f0:	4770      	bx	lr
 80085f2:	b298      	uxth	r0, r3
 80085f4:	b9a8      	cbnz	r0, 8008622 <__lo0bits+0x52>
 80085f6:	0c1b      	lsrs	r3, r3, #16
 80085f8:	2010      	movs	r0, #16
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	b90a      	cbnz	r2, 8008602 <__lo0bits+0x32>
 80085fe:	3008      	adds	r0, #8
 8008600:	0a1b      	lsrs	r3, r3, #8
 8008602:	071a      	lsls	r2, r3, #28
 8008604:	bf04      	itt	eq
 8008606:	091b      	lsreq	r3, r3, #4
 8008608:	3004      	addeq	r0, #4
 800860a:	079a      	lsls	r2, r3, #30
 800860c:	bf04      	itt	eq
 800860e:	089b      	lsreq	r3, r3, #2
 8008610:	3002      	addeq	r0, #2
 8008612:	07da      	lsls	r2, r3, #31
 8008614:	d403      	bmi.n	800861e <__lo0bits+0x4e>
 8008616:	085b      	lsrs	r3, r3, #1
 8008618:	f100 0001 	add.w	r0, r0, #1
 800861c:	d005      	beq.n	800862a <__lo0bits+0x5a>
 800861e:	600b      	str	r3, [r1, #0]
 8008620:	4770      	bx	lr
 8008622:	4610      	mov	r0, r2
 8008624:	e7e9      	b.n	80085fa <__lo0bits+0x2a>
 8008626:	2000      	movs	r0, #0
 8008628:	4770      	bx	lr
 800862a:	2020      	movs	r0, #32
 800862c:	4770      	bx	lr
	...

08008630 <__i2b>:
 8008630:	b510      	push	{r4, lr}
 8008632:	460c      	mov	r4, r1
 8008634:	2101      	movs	r1, #1
 8008636:	f7ff ff03 	bl	8008440 <_Balloc>
 800863a:	4602      	mov	r2, r0
 800863c:	b928      	cbnz	r0, 800864a <__i2b+0x1a>
 800863e:	4b05      	ldr	r3, [pc, #20]	; (8008654 <__i2b+0x24>)
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <__i2b+0x28>)
 8008642:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008646:	f000 fbdb 	bl	8008e00 <__assert_func>
 800864a:	2301      	movs	r3, #1
 800864c:	6144      	str	r4, [r0, #20]
 800864e:	6103      	str	r3, [r0, #16]
 8008650:	bd10      	pop	{r4, pc}
 8008652:	bf00      	nop
 8008654:	0800969b 	.word	0x0800969b
 8008658:	0800970c 	.word	0x0800970c

0800865c <__multiply>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4691      	mov	r9, r2
 8008662:	690a      	ldr	r2, [r1, #16]
 8008664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008668:	429a      	cmp	r2, r3
 800866a:	bfb8      	it	lt
 800866c:	460b      	movlt	r3, r1
 800866e:	460c      	mov	r4, r1
 8008670:	bfbc      	itt	lt
 8008672:	464c      	movlt	r4, r9
 8008674:	4699      	movlt	r9, r3
 8008676:	6927      	ldr	r7, [r4, #16]
 8008678:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800867c:	68a3      	ldr	r3, [r4, #8]
 800867e:	6861      	ldr	r1, [r4, #4]
 8008680:	eb07 060a 	add.w	r6, r7, sl
 8008684:	42b3      	cmp	r3, r6
 8008686:	b085      	sub	sp, #20
 8008688:	bfb8      	it	lt
 800868a:	3101      	addlt	r1, #1
 800868c:	f7ff fed8 	bl	8008440 <_Balloc>
 8008690:	b930      	cbnz	r0, 80086a0 <__multiply+0x44>
 8008692:	4602      	mov	r2, r0
 8008694:	4b44      	ldr	r3, [pc, #272]	; (80087a8 <__multiply+0x14c>)
 8008696:	4845      	ldr	r0, [pc, #276]	; (80087ac <__multiply+0x150>)
 8008698:	f240 115d 	movw	r1, #349	; 0x15d
 800869c:	f000 fbb0 	bl	8008e00 <__assert_func>
 80086a0:	f100 0514 	add.w	r5, r0, #20
 80086a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086a8:	462b      	mov	r3, r5
 80086aa:	2200      	movs	r2, #0
 80086ac:	4543      	cmp	r3, r8
 80086ae:	d321      	bcc.n	80086f4 <__multiply+0x98>
 80086b0:	f104 0314 	add.w	r3, r4, #20
 80086b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086b8:	f109 0314 	add.w	r3, r9, #20
 80086bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086c0:	9202      	str	r2, [sp, #8]
 80086c2:	1b3a      	subs	r2, r7, r4
 80086c4:	3a15      	subs	r2, #21
 80086c6:	f022 0203 	bic.w	r2, r2, #3
 80086ca:	3204      	adds	r2, #4
 80086cc:	f104 0115 	add.w	r1, r4, #21
 80086d0:	428f      	cmp	r7, r1
 80086d2:	bf38      	it	cc
 80086d4:	2204      	movcc	r2, #4
 80086d6:	9201      	str	r2, [sp, #4]
 80086d8:	9a02      	ldr	r2, [sp, #8]
 80086da:	9303      	str	r3, [sp, #12]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d80c      	bhi.n	80086fa <__multiply+0x9e>
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	dd03      	ble.n	80086ec <__multiply+0x90>
 80086e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d05a      	beq.n	80087a2 <__multiply+0x146>
 80086ec:	6106      	str	r6, [r0, #16]
 80086ee:	b005      	add	sp, #20
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	f843 2b04 	str.w	r2, [r3], #4
 80086f8:	e7d8      	b.n	80086ac <__multiply+0x50>
 80086fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80086fe:	f1ba 0f00 	cmp.w	sl, #0
 8008702:	d024      	beq.n	800874e <__multiply+0xf2>
 8008704:	f104 0e14 	add.w	lr, r4, #20
 8008708:	46a9      	mov	r9, r5
 800870a:	f04f 0c00 	mov.w	ip, #0
 800870e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008712:	f8d9 1000 	ldr.w	r1, [r9]
 8008716:	fa1f fb82 	uxth.w	fp, r2
 800871a:	b289      	uxth	r1, r1
 800871c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008720:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008724:	f8d9 2000 	ldr.w	r2, [r9]
 8008728:	4461      	add	r1, ip
 800872a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800872e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008736:	b289      	uxth	r1, r1
 8008738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800873c:	4577      	cmp	r7, lr
 800873e:	f849 1b04 	str.w	r1, [r9], #4
 8008742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008746:	d8e2      	bhi.n	800870e <__multiply+0xb2>
 8008748:	9a01      	ldr	r2, [sp, #4]
 800874a:	f845 c002 	str.w	ip, [r5, r2]
 800874e:	9a03      	ldr	r2, [sp, #12]
 8008750:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008754:	3304      	adds	r3, #4
 8008756:	f1b9 0f00 	cmp.w	r9, #0
 800875a:	d020      	beq.n	800879e <__multiply+0x142>
 800875c:	6829      	ldr	r1, [r5, #0]
 800875e:	f104 0c14 	add.w	ip, r4, #20
 8008762:	46ae      	mov	lr, r5
 8008764:	f04f 0a00 	mov.w	sl, #0
 8008768:	f8bc b000 	ldrh.w	fp, [ip]
 800876c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008770:	fb09 220b 	mla	r2, r9, fp, r2
 8008774:	4492      	add	sl, r2
 8008776:	b289      	uxth	r1, r1
 8008778:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800877c:	f84e 1b04 	str.w	r1, [lr], #4
 8008780:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008784:	f8be 1000 	ldrh.w	r1, [lr]
 8008788:	0c12      	lsrs	r2, r2, #16
 800878a:	fb09 1102 	mla	r1, r9, r2, r1
 800878e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008792:	4567      	cmp	r7, ip
 8008794:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008798:	d8e6      	bhi.n	8008768 <__multiply+0x10c>
 800879a:	9a01      	ldr	r2, [sp, #4]
 800879c:	50a9      	str	r1, [r5, r2]
 800879e:	3504      	adds	r5, #4
 80087a0:	e79a      	b.n	80086d8 <__multiply+0x7c>
 80087a2:	3e01      	subs	r6, #1
 80087a4:	e79c      	b.n	80086e0 <__multiply+0x84>
 80087a6:	bf00      	nop
 80087a8:	0800969b 	.word	0x0800969b
 80087ac:	0800970c 	.word	0x0800970c

080087b0 <__pow5mult>:
 80087b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	4615      	mov	r5, r2
 80087b6:	f012 0203 	ands.w	r2, r2, #3
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	d007      	beq.n	80087d0 <__pow5mult+0x20>
 80087c0:	4c25      	ldr	r4, [pc, #148]	; (8008858 <__pow5mult+0xa8>)
 80087c2:	3a01      	subs	r2, #1
 80087c4:	2300      	movs	r3, #0
 80087c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087ca:	f7ff fe9b 	bl	8008504 <__multadd>
 80087ce:	4607      	mov	r7, r0
 80087d0:	10ad      	asrs	r5, r5, #2
 80087d2:	d03d      	beq.n	8008850 <__pow5mult+0xa0>
 80087d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087d6:	b97c      	cbnz	r4, 80087f8 <__pow5mult+0x48>
 80087d8:	2010      	movs	r0, #16
 80087da:	f7ff fe1b 	bl	8008414 <malloc>
 80087de:	4602      	mov	r2, r0
 80087e0:	6270      	str	r0, [r6, #36]	; 0x24
 80087e2:	b928      	cbnz	r0, 80087f0 <__pow5mult+0x40>
 80087e4:	4b1d      	ldr	r3, [pc, #116]	; (800885c <__pow5mult+0xac>)
 80087e6:	481e      	ldr	r0, [pc, #120]	; (8008860 <__pow5mult+0xb0>)
 80087e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087ec:	f000 fb08 	bl	8008e00 <__assert_func>
 80087f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087f4:	6004      	str	r4, [r0, #0]
 80087f6:	60c4      	str	r4, [r0, #12]
 80087f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008800:	b94c      	cbnz	r4, 8008816 <__pow5mult+0x66>
 8008802:	f240 2171 	movw	r1, #625	; 0x271
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff ff12 	bl	8008630 <__i2b>
 800880c:	2300      	movs	r3, #0
 800880e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008812:	4604      	mov	r4, r0
 8008814:	6003      	str	r3, [r0, #0]
 8008816:	f04f 0900 	mov.w	r9, #0
 800881a:	07eb      	lsls	r3, r5, #31
 800881c:	d50a      	bpl.n	8008834 <__pow5mult+0x84>
 800881e:	4639      	mov	r1, r7
 8008820:	4622      	mov	r2, r4
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff ff1a 	bl	800865c <__multiply>
 8008828:	4639      	mov	r1, r7
 800882a:	4680      	mov	r8, r0
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff fe47 	bl	80084c0 <_Bfree>
 8008832:	4647      	mov	r7, r8
 8008834:	106d      	asrs	r5, r5, #1
 8008836:	d00b      	beq.n	8008850 <__pow5mult+0xa0>
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	b938      	cbnz	r0, 800884c <__pow5mult+0x9c>
 800883c:	4622      	mov	r2, r4
 800883e:	4621      	mov	r1, r4
 8008840:	4630      	mov	r0, r6
 8008842:	f7ff ff0b 	bl	800865c <__multiply>
 8008846:	6020      	str	r0, [r4, #0]
 8008848:	f8c0 9000 	str.w	r9, [r0]
 800884c:	4604      	mov	r4, r0
 800884e:	e7e4      	b.n	800881a <__pow5mult+0x6a>
 8008850:	4638      	mov	r0, r7
 8008852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008856:	bf00      	nop
 8008858:	08009858 	.word	0x08009858
 800885c:	08009629 	.word	0x08009629
 8008860:	0800970c 	.word	0x0800970c

08008864 <__lshift>:
 8008864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	6849      	ldr	r1, [r1, #4]
 800886c:	6923      	ldr	r3, [r4, #16]
 800886e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008872:	68a3      	ldr	r3, [r4, #8]
 8008874:	4607      	mov	r7, r0
 8008876:	4691      	mov	r9, r2
 8008878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800887c:	f108 0601 	add.w	r6, r8, #1
 8008880:	42b3      	cmp	r3, r6
 8008882:	db0b      	blt.n	800889c <__lshift+0x38>
 8008884:	4638      	mov	r0, r7
 8008886:	f7ff fddb 	bl	8008440 <_Balloc>
 800888a:	4605      	mov	r5, r0
 800888c:	b948      	cbnz	r0, 80088a2 <__lshift+0x3e>
 800888e:	4602      	mov	r2, r0
 8008890:	4b2a      	ldr	r3, [pc, #168]	; (800893c <__lshift+0xd8>)
 8008892:	482b      	ldr	r0, [pc, #172]	; (8008940 <__lshift+0xdc>)
 8008894:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008898:	f000 fab2 	bl	8008e00 <__assert_func>
 800889c:	3101      	adds	r1, #1
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	e7ee      	b.n	8008880 <__lshift+0x1c>
 80088a2:	2300      	movs	r3, #0
 80088a4:	f100 0114 	add.w	r1, r0, #20
 80088a8:	f100 0210 	add.w	r2, r0, #16
 80088ac:	4618      	mov	r0, r3
 80088ae:	4553      	cmp	r3, sl
 80088b0:	db37      	blt.n	8008922 <__lshift+0xbe>
 80088b2:	6920      	ldr	r0, [r4, #16]
 80088b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088b8:	f104 0314 	add.w	r3, r4, #20
 80088bc:	f019 091f 	ands.w	r9, r9, #31
 80088c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088c8:	d02f      	beq.n	800892a <__lshift+0xc6>
 80088ca:	f1c9 0e20 	rsb	lr, r9, #32
 80088ce:	468a      	mov	sl, r1
 80088d0:	f04f 0c00 	mov.w	ip, #0
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	fa02 f209 	lsl.w	r2, r2, r9
 80088da:	ea42 020c 	orr.w	r2, r2, ip
 80088de:	f84a 2b04 	str.w	r2, [sl], #4
 80088e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e6:	4298      	cmp	r0, r3
 80088e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80088ec:	d8f2      	bhi.n	80088d4 <__lshift+0x70>
 80088ee:	1b03      	subs	r3, r0, r4
 80088f0:	3b15      	subs	r3, #21
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	3304      	adds	r3, #4
 80088f8:	f104 0215 	add.w	r2, r4, #21
 80088fc:	4290      	cmp	r0, r2
 80088fe:	bf38      	it	cc
 8008900:	2304      	movcc	r3, #4
 8008902:	f841 c003 	str.w	ip, [r1, r3]
 8008906:	f1bc 0f00 	cmp.w	ip, #0
 800890a:	d001      	beq.n	8008910 <__lshift+0xac>
 800890c:	f108 0602 	add.w	r6, r8, #2
 8008910:	3e01      	subs	r6, #1
 8008912:	4638      	mov	r0, r7
 8008914:	612e      	str	r6, [r5, #16]
 8008916:	4621      	mov	r1, r4
 8008918:	f7ff fdd2 	bl	80084c0 <_Bfree>
 800891c:	4628      	mov	r0, r5
 800891e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008922:	f842 0f04 	str.w	r0, [r2, #4]!
 8008926:	3301      	adds	r3, #1
 8008928:	e7c1      	b.n	80088ae <__lshift+0x4a>
 800892a:	3904      	subs	r1, #4
 800892c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008930:	f841 2f04 	str.w	r2, [r1, #4]!
 8008934:	4298      	cmp	r0, r3
 8008936:	d8f9      	bhi.n	800892c <__lshift+0xc8>
 8008938:	e7ea      	b.n	8008910 <__lshift+0xac>
 800893a:	bf00      	nop
 800893c:	0800969b 	.word	0x0800969b
 8008940:	0800970c 	.word	0x0800970c

08008944 <__mcmp>:
 8008944:	b530      	push	{r4, r5, lr}
 8008946:	6902      	ldr	r2, [r0, #16]
 8008948:	690c      	ldr	r4, [r1, #16]
 800894a:	1b12      	subs	r2, r2, r4
 800894c:	d10e      	bne.n	800896c <__mcmp+0x28>
 800894e:	f100 0314 	add.w	r3, r0, #20
 8008952:	3114      	adds	r1, #20
 8008954:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008958:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800895c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008960:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008964:	42a5      	cmp	r5, r4
 8008966:	d003      	beq.n	8008970 <__mcmp+0x2c>
 8008968:	d305      	bcc.n	8008976 <__mcmp+0x32>
 800896a:	2201      	movs	r2, #1
 800896c:	4610      	mov	r0, r2
 800896e:	bd30      	pop	{r4, r5, pc}
 8008970:	4283      	cmp	r3, r0
 8008972:	d3f3      	bcc.n	800895c <__mcmp+0x18>
 8008974:	e7fa      	b.n	800896c <__mcmp+0x28>
 8008976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800897a:	e7f7      	b.n	800896c <__mcmp+0x28>

0800897c <__mdiff>:
 800897c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	4606      	mov	r6, r0
 8008984:	4611      	mov	r1, r2
 8008986:	4620      	mov	r0, r4
 8008988:	4690      	mov	r8, r2
 800898a:	f7ff ffdb 	bl	8008944 <__mcmp>
 800898e:	1e05      	subs	r5, r0, #0
 8008990:	d110      	bne.n	80089b4 <__mdiff+0x38>
 8008992:	4629      	mov	r1, r5
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff fd53 	bl	8008440 <_Balloc>
 800899a:	b930      	cbnz	r0, 80089aa <__mdiff+0x2e>
 800899c:	4b3a      	ldr	r3, [pc, #232]	; (8008a88 <__mdiff+0x10c>)
 800899e:	4602      	mov	r2, r0
 80089a0:	f240 2132 	movw	r1, #562	; 0x232
 80089a4:	4839      	ldr	r0, [pc, #228]	; (8008a8c <__mdiff+0x110>)
 80089a6:	f000 fa2b 	bl	8008e00 <__assert_func>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	bfa4      	itt	ge
 80089b6:	4643      	movge	r3, r8
 80089b8:	46a0      	movge	r8, r4
 80089ba:	4630      	mov	r0, r6
 80089bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089c0:	bfa6      	itte	ge
 80089c2:	461c      	movge	r4, r3
 80089c4:	2500      	movge	r5, #0
 80089c6:	2501      	movlt	r5, #1
 80089c8:	f7ff fd3a 	bl	8008440 <_Balloc>
 80089cc:	b920      	cbnz	r0, 80089d8 <__mdiff+0x5c>
 80089ce:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <__mdiff+0x10c>)
 80089d0:	4602      	mov	r2, r0
 80089d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089d6:	e7e5      	b.n	80089a4 <__mdiff+0x28>
 80089d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089dc:	6926      	ldr	r6, [r4, #16]
 80089de:	60c5      	str	r5, [r0, #12]
 80089e0:	f104 0914 	add.w	r9, r4, #20
 80089e4:	f108 0514 	add.w	r5, r8, #20
 80089e8:	f100 0e14 	add.w	lr, r0, #20
 80089ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089f4:	f108 0210 	add.w	r2, r8, #16
 80089f8:	46f2      	mov	sl, lr
 80089fa:	2100      	movs	r1, #0
 80089fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a04:	fa1f f883 	uxth.w	r8, r3
 8008a08:	fa11 f18b 	uxtah	r1, r1, fp
 8008a0c:	0c1b      	lsrs	r3, r3, #16
 8008a0e:	eba1 0808 	sub.w	r8, r1, r8
 8008a12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a1a:	fa1f f888 	uxth.w	r8, r8
 8008a1e:	1419      	asrs	r1, r3, #16
 8008a20:	454e      	cmp	r6, r9
 8008a22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a26:	f84a 3b04 	str.w	r3, [sl], #4
 8008a2a:	d8e7      	bhi.n	80089fc <__mdiff+0x80>
 8008a2c:	1b33      	subs	r3, r6, r4
 8008a2e:	3b15      	subs	r3, #21
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	3304      	adds	r3, #4
 8008a36:	3415      	adds	r4, #21
 8008a38:	42a6      	cmp	r6, r4
 8008a3a:	bf38      	it	cc
 8008a3c:	2304      	movcc	r3, #4
 8008a3e:	441d      	add	r5, r3
 8008a40:	4473      	add	r3, lr
 8008a42:	469e      	mov	lr, r3
 8008a44:	462e      	mov	r6, r5
 8008a46:	4566      	cmp	r6, ip
 8008a48:	d30e      	bcc.n	8008a68 <__mdiff+0xec>
 8008a4a:	f10c 0203 	add.w	r2, ip, #3
 8008a4e:	1b52      	subs	r2, r2, r5
 8008a50:	f022 0203 	bic.w	r2, r2, #3
 8008a54:	3d03      	subs	r5, #3
 8008a56:	45ac      	cmp	ip, r5
 8008a58:	bf38      	it	cc
 8008a5a:	2200      	movcc	r2, #0
 8008a5c:	441a      	add	r2, r3
 8008a5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a62:	b17b      	cbz	r3, 8008a84 <__mdiff+0x108>
 8008a64:	6107      	str	r7, [r0, #16]
 8008a66:	e7a3      	b.n	80089b0 <__mdiff+0x34>
 8008a68:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a6c:	fa11 f288 	uxtah	r2, r1, r8
 8008a70:	1414      	asrs	r4, r2, #16
 8008a72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a76:	b292      	uxth	r2, r2
 8008a78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a7c:	f84e 2b04 	str.w	r2, [lr], #4
 8008a80:	1421      	asrs	r1, r4, #16
 8008a82:	e7e0      	b.n	8008a46 <__mdiff+0xca>
 8008a84:	3f01      	subs	r7, #1
 8008a86:	e7ea      	b.n	8008a5e <__mdiff+0xe2>
 8008a88:	0800969b 	.word	0x0800969b
 8008a8c:	0800970c 	.word	0x0800970c

08008a90 <__d2b>:
 8008a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	4689      	mov	r9, r1
 8008a96:	2101      	movs	r1, #1
 8008a98:	ec57 6b10 	vmov	r6, r7, d0
 8008a9c:	4690      	mov	r8, r2
 8008a9e:	f7ff fccf 	bl	8008440 <_Balloc>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	b930      	cbnz	r0, 8008ab4 <__d2b+0x24>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <__d2b+0xb0>)
 8008aaa:	4826      	ldr	r0, [pc, #152]	; (8008b44 <__d2b+0xb4>)
 8008aac:	f240 310a 	movw	r1, #778	; 0x30a
 8008ab0:	f000 f9a6 	bl	8008e00 <__assert_func>
 8008ab4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008abc:	bb35      	cbnz	r5, 8008b0c <__d2b+0x7c>
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	d028      	beq.n	8008b16 <__d2b+0x86>
 8008ac4:	4668      	mov	r0, sp
 8008ac6:	9600      	str	r6, [sp, #0]
 8008ac8:	f7ff fd82 	bl	80085d0 <__lo0bits>
 8008acc:	9900      	ldr	r1, [sp, #0]
 8008ace:	b300      	cbz	r0, 8008b12 <__d2b+0x82>
 8008ad0:	9a01      	ldr	r2, [sp, #4]
 8008ad2:	f1c0 0320 	rsb	r3, r0, #32
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	430b      	orrs	r3, r1
 8008adc:	40c2      	lsrs	r2, r0
 8008ade:	6163      	str	r3, [r4, #20]
 8008ae0:	9201      	str	r2, [sp, #4]
 8008ae2:	9b01      	ldr	r3, [sp, #4]
 8008ae4:	61a3      	str	r3, [r4, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bf14      	ite	ne
 8008aea:	2202      	movne	r2, #2
 8008aec:	2201      	moveq	r2, #1
 8008aee:	6122      	str	r2, [r4, #16]
 8008af0:	b1d5      	cbz	r5, 8008b28 <__d2b+0x98>
 8008af2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008af6:	4405      	add	r5, r0
 8008af8:	f8c9 5000 	str.w	r5, [r9]
 8008afc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b00:	f8c8 0000 	str.w	r0, [r8]
 8008b04:	4620      	mov	r0, r4
 8008b06:	b003      	add	sp, #12
 8008b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b10:	e7d5      	b.n	8008abe <__d2b+0x2e>
 8008b12:	6161      	str	r1, [r4, #20]
 8008b14:	e7e5      	b.n	8008ae2 <__d2b+0x52>
 8008b16:	a801      	add	r0, sp, #4
 8008b18:	f7ff fd5a 	bl	80085d0 <__lo0bits>
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	6163      	str	r3, [r4, #20]
 8008b20:	2201      	movs	r2, #1
 8008b22:	6122      	str	r2, [r4, #16]
 8008b24:	3020      	adds	r0, #32
 8008b26:	e7e3      	b.n	8008af0 <__d2b+0x60>
 8008b28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b30:	f8c9 0000 	str.w	r0, [r9]
 8008b34:	6918      	ldr	r0, [r3, #16]
 8008b36:	f7ff fd2b 	bl	8008590 <__hi0bits>
 8008b3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b3e:	e7df      	b.n	8008b00 <__d2b+0x70>
 8008b40:	0800969b 	.word	0x0800969b
 8008b44:	0800970c 	.word	0x0800970c

08008b48 <_calloc_r>:
 8008b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b4a:	fba1 2402 	umull	r2, r4, r1, r2
 8008b4e:	b94c      	cbnz	r4, 8008b64 <_calloc_r+0x1c>
 8008b50:	4611      	mov	r1, r2
 8008b52:	9201      	str	r2, [sp, #4]
 8008b54:	f000 f87a 	bl	8008c4c <_malloc_r>
 8008b58:	9a01      	ldr	r2, [sp, #4]
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	b930      	cbnz	r0, 8008b6c <_calloc_r+0x24>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	b003      	add	sp, #12
 8008b62:	bd30      	pop	{r4, r5, pc}
 8008b64:	220c      	movs	r2, #12
 8008b66:	6002      	str	r2, [r0, #0]
 8008b68:	2500      	movs	r5, #0
 8008b6a:	e7f8      	b.n	8008b5e <_calloc_r+0x16>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	f7fd ff21 	bl	80069b4 <memset>
 8008b72:	e7f4      	b.n	8008b5e <_calloc_r+0x16>

08008b74 <_free_r>:
 8008b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b76:	2900      	cmp	r1, #0
 8008b78:	d044      	beq.n	8008c04 <_free_r+0x90>
 8008b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7e:	9001      	str	r0, [sp, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f1a1 0404 	sub.w	r4, r1, #4
 8008b86:	bfb8      	it	lt
 8008b88:	18e4      	addlt	r4, r4, r3
 8008b8a:	f000 f9bf 	bl	8008f0c <__malloc_lock>
 8008b8e:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <_free_r+0x94>)
 8008b90:	9801      	ldr	r0, [sp, #4]
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	b933      	cbnz	r3, 8008ba4 <_free_r+0x30>
 8008b96:	6063      	str	r3, [r4, #4]
 8008b98:	6014      	str	r4, [r2, #0]
 8008b9a:	b003      	add	sp, #12
 8008b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ba0:	f000 b9ba 	b.w	8008f18 <__malloc_unlock>
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d908      	bls.n	8008bba <_free_r+0x46>
 8008ba8:	6825      	ldr	r5, [r4, #0]
 8008baa:	1961      	adds	r1, r4, r5
 8008bac:	428b      	cmp	r3, r1
 8008bae:	bf01      	itttt	eq
 8008bb0:	6819      	ldreq	r1, [r3, #0]
 8008bb2:	685b      	ldreq	r3, [r3, #4]
 8008bb4:	1949      	addeq	r1, r1, r5
 8008bb6:	6021      	streq	r1, [r4, #0]
 8008bb8:	e7ed      	b.n	8008b96 <_free_r+0x22>
 8008bba:	461a      	mov	r2, r3
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	b10b      	cbz	r3, 8008bc4 <_free_r+0x50>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d9fa      	bls.n	8008bba <_free_r+0x46>
 8008bc4:	6811      	ldr	r1, [r2, #0]
 8008bc6:	1855      	adds	r5, r2, r1
 8008bc8:	42a5      	cmp	r5, r4
 8008bca:	d10b      	bne.n	8008be4 <_free_r+0x70>
 8008bcc:	6824      	ldr	r4, [r4, #0]
 8008bce:	4421      	add	r1, r4
 8008bd0:	1854      	adds	r4, r2, r1
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	d1e0      	bne.n	8008b9a <_free_r+0x26>
 8008bd8:	681c      	ldr	r4, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	6053      	str	r3, [r2, #4]
 8008bde:	4421      	add	r1, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	e7da      	b.n	8008b9a <_free_r+0x26>
 8008be4:	d902      	bls.n	8008bec <_free_r+0x78>
 8008be6:	230c      	movs	r3, #12
 8008be8:	6003      	str	r3, [r0, #0]
 8008bea:	e7d6      	b.n	8008b9a <_free_r+0x26>
 8008bec:	6825      	ldr	r5, [r4, #0]
 8008bee:	1961      	adds	r1, r4, r5
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	bf04      	itt	eq
 8008bf4:	6819      	ldreq	r1, [r3, #0]
 8008bf6:	685b      	ldreq	r3, [r3, #4]
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	bf04      	itt	eq
 8008bfc:	1949      	addeq	r1, r1, r5
 8008bfe:	6021      	streq	r1, [r4, #0]
 8008c00:	6054      	str	r4, [r2, #4]
 8008c02:	e7ca      	b.n	8008b9a <_free_r+0x26>
 8008c04:	b003      	add	sp, #12
 8008c06:	bd30      	pop	{r4, r5, pc}
 8008c08:	20000674 	.word	0x20000674

08008c0c <sbrk_aligned>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	4e0e      	ldr	r6, [pc, #56]	; (8008c48 <sbrk_aligned+0x3c>)
 8008c10:	460c      	mov	r4, r1
 8008c12:	6831      	ldr	r1, [r6, #0]
 8008c14:	4605      	mov	r5, r0
 8008c16:	b911      	cbnz	r1, 8008c1e <sbrk_aligned+0x12>
 8008c18:	f000 f88c 	bl	8008d34 <_sbrk_r>
 8008c1c:	6030      	str	r0, [r6, #0]
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	f000 f887 	bl	8008d34 <_sbrk_r>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d00a      	beq.n	8008c40 <sbrk_aligned+0x34>
 8008c2a:	1cc4      	adds	r4, r0, #3
 8008c2c:	f024 0403 	bic.w	r4, r4, #3
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d007      	beq.n	8008c44 <sbrk_aligned+0x38>
 8008c34:	1a21      	subs	r1, r4, r0
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 f87c 	bl	8008d34 <_sbrk_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d101      	bne.n	8008c44 <sbrk_aligned+0x38>
 8008c40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c44:	4620      	mov	r0, r4
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	20000678 	.word	0x20000678

08008c4c <_malloc_r>:
 8008c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c50:	1ccd      	adds	r5, r1, #3
 8008c52:	f025 0503 	bic.w	r5, r5, #3
 8008c56:	3508      	adds	r5, #8
 8008c58:	2d0c      	cmp	r5, #12
 8008c5a:	bf38      	it	cc
 8008c5c:	250c      	movcc	r5, #12
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	4607      	mov	r7, r0
 8008c62:	db01      	blt.n	8008c68 <_malloc_r+0x1c>
 8008c64:	42a9      	cmp	r1, r5
 8008c66:	d905      	bls.n	8008c74 <_malloc_r+0x28>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	4630      	mov	r0, r6
 8008c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c74:	4e2e      	ldr	r6, [pc, #184]	; (8008d30 <_malloc_r+0xe4>)
 8008c76:	f000 f949 	bl	8008f0c <__malloc_lock>
 8008c7a:	6833      	ldr	r3, [r6, #0]
 8008c7c:	461c      	mov	r4, r3
 8008c7e:	bb34      	cbnz	r4, 8008cce <_malloc_r+0x82>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7ff ffc2 	bl	8008c0c <sbrk_aligned>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	d14d      	bne.n	8008d2a <_malloc_r+0xde>
 8008c8e:	6834      	ldr	r4, [r6, #0]
 8008c90:	4626      	mov	r6, r4
 8008c92:	2e00      	cmp	r6, #0
 8008c94:	d140      	bne.n	8008d18 <_malloc_r+0xcc>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	eb04 0803 	add.w	r8, r4, r3
 8008ca0:	f000 f848 	bl	8008d34 <_sbrk_r>
 8008ca4:	4580      	cmp	r8, r0
 8008ca6:	d13a      	bne.n	8008d1e <_malloc_r+0xd2>
 8008ca8:	6821      	ldr	r1, [r4, #0]
 8008caa:	3503      	adds	r5, #3
 8008cac:	1a6d      	subs	r5, r5, r1
 8008cae:	f025 0503 	bic.w	r5, r5, #3
 8008cb2:	3508      	adds	r5, #8
 8008cb4:	2d0c      	cmp	r5, #12
 8008cb6:	bf38      	it	cc
 8008cb8:	250c      	movcc	r5, #12
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff ffa5 	bl	8008c0c <sbrk_aligned>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d02b      	beq.n	8008d1e <_malloc_r+0xd2>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	442b      	add	r3, r5
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	e00e      	b.n	8008cec <_malloc_r+0xa0>
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	1b52      	subs	r2, r2, r5
 8008cd2:	d41e      	bmi.n	8008d12 <_malloc_r+0xc6>
 8008cd4:	2a0b      	cmp	r2, #11
 8008cd6:	d916      	bls.n	8008d06 <_malloc_r+0xba>
 8008cd8:	1961      	adds	r1, r4, r5
 8008cda:	42a3      	cmp	r3, r4
 8008cdc:	6025      	str	r5, [r4, #0]
 8008cde:	bf18      	it	ne
 8008ce0:	6059      	strne	r1, [r3, #4]
 8008ce2:	6863      	ldr	r3, [r4, #4]
 8008ce4:	bf08      	it	eq
 8008ce6:	6031      	streq	r1, [r6, #0]
 8008ce8:	5162      	str	r2, [r4, r5]
 8008cea:	604b      	str	r3, [r1, #4]
 8008cec:	4638      	mov	r0, r7
 8008cee:	f104 060b 	add.w	r6, r4, #11
 8008cf2:	f000 f911 	bl	8008f18 <__malloc_unlock>
 8008cf6:	f026 0607 	bic.w	r6, r6, #7
 8008cfa:	1d23      	adds	r3, r4, #4
 8008cfc:	1af2      	subs	r2, r6, r3
 8008cfe:	d0b6      	beq.n	8008c6e <_malloc_r+0x22>
 8008d00:	1b9b      	subs	r3, r3, r6
 8008d02:	50a3      	str	r3, [r4, r2]
 8008d04:	e7b3      	b.n	8008c6e <_malloc_r+0x22>
 8008d06:	6862      	ldr	r2, [r4, #4]
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	bf0c      	ite	eq
 8008d0c:	6032      	streq	r2, [r6, #0]
 8008d0e:	605a      	strne	r2, [r3, #4]
 8008d10:	e7ec      	b.n	8008cec <_malloc_r+0xa0>
 8008d12:	4623      	mov	r3, r4
 8008d14:	6864      	ldr	r4, [r4, #4]
 8008d16:	e7b2      	b.n	8008c7e <_malloc_r+0x32>
 8008d18:	4634      	mov	r4, r6
 8008d1a:	6876      	ldr	r6, [r6, #4]
 8008d1c:	e7b9      	b.n	8008c92 <_malloc_r+0x46>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	4638      	mov	r0, r7
 8008d24:	f000 f8f8 	bl	8008f18 <__malloc_unlock>
 8008d28:	e7a1      	b.n	8008c6e <_malloc_r+0x22>
 8008d2a:	6025      	str	r5, [r4, #0]
 8008d2c:	e7de      	b.n	8008cec <_malloc_r+0xa0>
 8008d2e:	bf00      	nop
 8008d30:	20000674 	.word	0x20000674

08008d34 <_sbrk_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d06      	ldr	r5, [pc, #24]	; (8008d50 <_sbrk_r+0x1c>)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7f9 fbda 	bl	80024f8 <_sbrk>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_sbrk_r+0x1a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_sbrk_r+0x1a>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	2000067c 	.word	0x2000067c

08008d54 <__sread>:
 8008d54:	b510      	push	{r4, lr}
 8008d56:	460c      	mov	r4, r1
 8008d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5c:	f000 fa3c 	bl	80091d8 <_read_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	bfab      	itete	ge
 8008d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d66:	89a3      	ldrhlt	r3, [r4, #12]
 8008d68:	181b      	addge	r3, r3, r0
 8008d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d6e:	bfac      	ite	ge
 8008d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d72:	81a3      	strhlt	r3, [r4, #12]
 8008d74:	bd10      	pop	{r4, pc}

08008d76 <__swrite>:
 8008d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7a:	461f      	mov	r7, r3
 8008d7c:	898b      	ldrh	r3, [r1, #12]
 8008d7e:	05db      	lsls	r3, r3, #23
 8008d80:	4605      	mov	r5, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	4616      	mov	r6, r2
 8008d86:	d505      	bpl.n	8008d94 <__swrite+0x1e>
 8008d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f000 f898 	bl	8008ec4 <_lseek_r>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	4632      	mov	r2, r6
 8008da2:	463b      	mov	r3, r7
 8008da4:	4628      	mov	r0, r5
 8008da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008daa:	f000 b817 	b.w	8008ddc <_write_r>

08008dae <__sseek>:
 8008dae:	b510      	push	{r4, lr}
 8008db0:	460c      	mov	r4, r1
 8008db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db6:	f000 f885 	bl	8008ec4 <_lseek_r>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	bf15      	itete	ne
 8008dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dca:	81a3      	strheq	r3, [r4, #12]
 8008dcc:	bf18      	it	ne
 8008dce:	81a3      	strhne	r3, [r4, #12]
 8008dd0:	bd10      	pop	{r4, pc}

08008dd2 <__sclose>:
 8008dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd6:	f000 b831 	b.w	8008e3c <_close_r>
	...

08008ddc <_write_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d07      	ldr	r5, [pc, #28]	; (8008dfc <_write_r+0x20>)
 8008de0:	4604      	mov	r4, r0
 8008de2:	4608      	mov	r0, r1
 8008de4:	4611      	mov	r1, r2
 8008de6:	2200      	movs	r2, #0
 8008de8:	602a      	str	r2, [r5, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	f7f9 f938 	bl	8002060 <_write>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_write_r+0x1e>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_write_r+0x1e>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	2000067c 	.word	0x2000067c

08008e00 <__assert_func>:
 8008e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e02:	4614      	mov	r4, r2
 8008e04:	461a      	mov	r2, r3
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <__assert_func+0x2c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	68d8      	ldr	r0, [r3, #12]
 8008e0e:	b14c      	cbz	r4, 8008e24 <__assert_func+0x24>
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <__assert_func+0x30>)
 8008e12:	9100      	str	r1, [sp, #0]
 8008e14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e18:	4906      	ldr	r1, [pc, #24]	; (8008e34 <__assert_func+0x34>)
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	f000 f81e 	bl	8008e5c <fiprintf>
 8008e20:	f000 faba 	bl	8009398 <abort>
 8008e24:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <__assert_func+0x38>)
 8008e26:	461c      	mov	r4, r3
 8008e28:	e7f3      	b.n	8008e12 <__assert_func+0x12>
 8008e2a:	bf00      	nop
 8008e2c:	20000178 	.word	0x20000178
 8008e30:	08009864 	.word	0x08009864
 8008e34:	08009871 	.word	0x08009871
 8008e38:	0800989f 	.word	0x0800989f

08008e3c <_close_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_close_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7f9 f934 	bl	80020b4 <_close>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_close_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_close_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	2000067c 	.word	0x2000067c

08008e5c <fiprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b503      	push	{r0, r1, lr}
 8008e60:	4601      	mov	r1, r0
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	4805      	ldr	r0, [pc, #20]	; (8008e7c <fiprintf+0x20>)
 8008e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f000 f883 	bl	8008f78 <_vfiprintf_r>
 8008e72:	b002      	add	sp, #8
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	20000178 	.word	0x20000178

08008e80 <_fstat_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d07      	ldr	r5, [pc, #28]	; (8008ea0 <_fstat_r+0x20>)
 8008e84:	2300      	movs	r3, #0
 8008e86:	4604      	mov	r4, r0
 8008e88:	4608      	mov	r0, r1
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	602b      	str	r3, [r5, #0]
 8008e8e:	f7f9 f961 	bl	8002154 <_fstat>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d102      	bne.n	8008e9c <_fstat_r+0x1c>
 8008e96:	682b      	ldr	r3, [r5, #0]
 8008e98:	b103      	cbz	r3, 8008e9c <_fstat_r+0x1c>
 8008e9a:	6023      	str	r3, [r4, #0]
 8008e9c:	bd38      	pop	{r3, r4, r5, pc}
 8008e9e:	bf00      	nop
 8008ea0:	2000067c 	.word	0x2000067c

08008ea4 <_isatty_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d06      	ldr	r5, [pc, #24]	; (8008ec0 <_isatty_r+0x1c>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	602b      	str	r3, [r5, #0]
 8008eb0:	f7f9 f8c0 	bl	8002034 <_isatty>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_isatty_r+0x1a>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_isatty_r+0x1a>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	2000067c 	.word	0x2000067c

08008ec4 <_lseek_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	; (8008ee4 <_lseek_r+0x20>)
 8008ec8:	4604      	mov	r4, r0
 8008eca:	4608      	mov	r0, r1
 8008ecc:	4611      	mov	r1, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	602a      	str	r2, [r5, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f7f9 f905 	bl	80020e2 <_lseek>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_lseek_r+0x1e>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_lseek_r+0x1e>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	2000067c 	.word	0x2000067c

08008ee8 <__ascii_mbtowc>:
 8008ee8:	b082      	sub	sp, #8
 8008eea:	b901      	cbnz	r1, 8008eee <__ascii_mbtowc+0x6>
 8008eec:	a901      	add	r1, sp, #4
 8008eee:	b142      	cbz	r2, 8008f02 <__ascii_mbtowc+0x1a>
 8008ef0:	b14b      	cbz	r3, 8008f06 <__ascii_mbtowc+0x1e>
 8008ef2:	7813      	ldrb	r3, [r2, #0]
 8008ef4:	600b      	str	r3, [r1, #0]
 8008ef6:	7812      	ldrb	r2, [r2, #0]
 8008ef8:	1e10      	subs	r0, r2, #0
 8008efa:	bf18      	it	ne
 8008efc:	2001      	movne	r0, #1
 8008efe:	b002      	add	sp, #8
 8008f00:	4770      	bx	lr
 8008f02:	4610      	mov	r0, r2
 8008f04:	e7fb      	b.n	8008efe <__ascii_mbtowc+0x16>
 8008f06:	f06f 0001 	mvn.w	r0, #1
 8008f0a:	e7f8      	b.n	8008efe <__ascii_mbtowc+0x16>

08008f0c <__malloc_lock>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__malloc_lock+0x8>)
 8008f0e:	f7ff ba1a 	b.w	8008346 <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	20000670 	.word	0x20000670

08008f18 <__malloc_unlock>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__malloc_unlock+0x8>)
 8008f1a:	f7ff ba15 	b.w	8008348 <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20000670 	.word	0x20000670

08008f24 <__sfputc_r>:
 8008f24:	6893      	ldr	r3, [r2, #8]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	b410      	push	{r4}
 8008f2c:	6093      	str	r3, [r2, #8]
 8008f2e:	da08      	bge.n	8008f42 <__sfputc_r+0x1e>
 8008f30:	6994      	ldr	r4, [r2, #24]
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	db01      	blt.n	8008f3a <__sfputc_r+0x16>
 8008f36:	290a      	cmp	r1, #10
 8008f38:	d103      	bne.n	8008f42 <__sfputc_r+0x1e>
 8008f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3e:	f000 b95d 	b.w	80091fc <__swbuf_r>
 8008f42:	6813      	ldr	r3, [r2, #0]
 8008f44:	1c58      	adds	r0, r3, #1
 8008f46:	6010      	str	r0, [r2, #0]
 8008f48:	7019      	strb	r1, [r3, #0]
 8008f4a:	4608      	mov	r0, r1
 8008f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <__sfputs_r>:
 8008f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	18d5      	adds	r5, r2, r3
 8008f5c:	42ac      	cmp	r4, r5
 8008f5e:	d101      	bne.n	8008f64 <__sfputs_r+0x12>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e007      	b.n	8008f74 <__sfputs_r+0x22>
 8008f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f68:	463a      	mov	r2, r7
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7ff ffda 	bl	8008f24 <__sfputc_r>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d1f3      	bne.n	8008f5c <__sfputs_r+0xa>
 8008f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f78 <_vfiprintf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	b09d      	sub	sp, #116	; 0x74
 8008f80:	4614      	mov	r4, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	4606      	mov	r6, r0
 8008f86:	b118      	cbz	r0, 8008f90 <_vfiprintf_r+0x18>
 8008f88:	6983      	ldr	r3, [r0, #24]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x18>
 8008f8c:	f7ff f938 	bl	8008200 <__sinit>
 8008f90:	4b89      	ldr	r3, [pc, #548]	; (80091b8 <_vfiprintf_r+0x240>)
 8008f92:	429d      	cmp	r5, r3
 8008f94:	d11b      	bne.n	8008fce <_vfiprintf_r+0x56>
 8008f96:	6875      	ldr	r5, [r6, #4]
 8008f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f9a:	07d9      	lsls	r1, r3, #31
 8008f9c:	d405      	bmi.n	8008faa <_vfiprintf_r+0x32>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	059a      	lsls	r2, r3, #22
 8008fa2:	d402      	bmi.n	8008faa <_vfiprintf_r+0x32>
 8008fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fa6:	f7ff f9ce 	bl	8008346 <__retarget_lock_acquire_recursive>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	071b      	lsls	r3, r3, #28
 8008fae:	d501      	bpl.n	8008fb4 <_vfiprintf_r+0x3c>
 8008fb0:	692b      	ldr	r3, [r5, #16]
 8008fb2:	b9eb      	cbnz	r3, 8008ff0 <_vfiprintf_r+0x78>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 f980 	bl	80092bc <__swsetup_r>
 8008fbc:	b1c0      	cbz	r0, 8008ff0 <_vfiprintf_r+0x78>
 8008fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc0:	07dc      	lsls	r4, r3, #31
 8008fc2:	d50e      	bpl.n	8008fe2 <_vfiprintf_r+0x6a>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc8:	b01d      	add	sp, #116	; 0x74
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	4b7b      	ldr	r3, [pc, #492]	; (80091bc <_vfiprintf_r+0x244>)
 8008fd0:	429d      	cmp	r5, r3
 8008fd2:	d101      	bne.n	8008fd8 <_vfiprintf_r+0x60>
 8008fd4:	68b5      	ldr	r5, [r6, #8]
 8008fd6:	e7df      	b.n	8008f98 <_vfiprintf_r+0x20>
 8008fd8:	4b79      	ldr	r3, [pc, #484]	; (80091c0 <_vfiprintf_r+0x248>)
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	bf08      	it	eq
 8008fde:	68f5      	ldreq	r5, [r6, #12]
 8008fe0:	e7da      	b.n	8008f98 <_vfiprintf_r+0x20>
 8008fe2:	89ab      	ldrh	r3, [r5, #12]
 8008fe4:	0598      	lsls	r0, r3, #22
 8008fe6:	d4ed      	bmi.n	8008fc4 <_vfiprintf_r+0x4c>
 8008fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fea:	f7ff f9ad 	bl	8008348 <__retarget_lock_release_recursive>
 8008fee:	e7e9      	b.n	8008fc4 <_vfiprintf_r+0x4c>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff4:	2320      	movs	r3, #32
 8008ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ffe:	2330      	movs	r3, #48	; 0x30
 8009000:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091c4 <_vfiprintf_r+0x24c>
 8009004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009008:	f04f 0901 	mov.w	r9, #1
 800900c:	4623      	mov	r3, r4
 800900e:	469a      	mov	sl, r3
 8009010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009014:	b10a      	cbz	r2, 800901a <_vfiprintf_r+0xa2>
 8009016:	2a25      	cmp	r2, #37	; 0x25
 8009018:	d1f9      	bne.n	800900e <_vfiprintf_r+0x96>
 800901a:	ebba 0b04 	subs.w	fp, sl, r4
 800901e:	d00b      	beq.n	8009038 <_vfiprintf_r+0xc0>
 8009020:	465b      	mov	r3, fp
 8009022:	4622      	mov	r2, r4
 8009024:	4629      	mov	r1, r5
 8009026:	4630      	mov	r0, r6
 8009028:	f7ff ff93 	bl	8008f52 <__sfputs_r>
 800902c:	3001      	adds	r0, #1
 800902e:	f000 80aa 	beq.w	8009186 <_vfiprintf_r+0x20e>
 8009032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009034:	445a      	add	r2, fp
 8009036:	9209      	str	r2, [sp, #36]	; 0x24
 8009038:	f89a 3000 	ldrb.w	r3, [sl]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 80a2 	beq.w	8009186 <_vfiprintf_r+0x20e>
 8009042:	2300      	movs	r3, #0
 8009044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800904c:	f10a 0a01 	add.w	sl, sl, #1
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009058:	931a      	str	r3, [sp, #104]	; 0x68
 800905a:	4654      	mov	r4, sl
 800905c:	2205      	movs	r2, #5
 800905e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009062:	4858      	ldr	r0, [pc, #352]	; (80091c4 <_vfiprintf_r+0x24c>)
 8009064:	f7f7 f8f4 	bl	8000250 <memchr>
 8009068:	9a04      	ldr	r2, [sp, #16]
 800906a:	b9d8      	cbnz	r0, 80090a4 <_vfiprintf_r+0x12c>
 800906c:	06d1      	lsls	r1, r2, #27
 800906e:	bf44      	itt	mi
 8009070:	2320      	movmi	r3, #32
 8009072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009076:	0713      	lsls	r3, r2, #28
 8009078:	bf44      	itt	mi
 800907a:	232b      	movmi	r3, #43	; 0x2b
 800907c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009080:	f89a 3000 	ldrb.w	r3, [sl]
 8009084:	2b2a      	cmp	r3, #42	; 0x2a
 8009086:	d015      	beq.n	80090b4 <_vfiprintf_r+0x13c>
 8009088:	9a07      	ldr	r2, [sp, #28]
 800908a:	4654      	mov	r4, sl
 800908c:	2000      	movs	r0, #0
 800908e:	f04f 0c0a 	mov.w	ip, #10
 8009092:	4621      	mov	r1, r4
 8009094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009098:	3b30      	subs	r3, #48	; 0x30
 800909a:	2b09      	cmp	r3, #9
 800909c:	d94e      	bls.n	800913c <_vfiprintf_r+0x1c4>
 800909e:	b1b0      	cbz	r0, 80090ce <_vfiprintf_r+0x156>
 80090a0:	9207      	str	r2, [sp, #28]
 80090a2:	e014      	b.n	80090ce <_vfiprintf_r+0x156>
 80090a4:	eba0 0308 	sub.w	r3, r0, r8
 80090a8:	fa09 f303 	lsl.w	r3, r9, r3
 80090ac:	4313      	orrs	r3, r2
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	46a2      	mov	sl, r4
 80090b2:	e7d2      	b.n	800905a <_vfiprintf_r+0xe2>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	1d19      	adds	r1, r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	9103      	str	r1, [sp, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfbb      	ittet	lt
 80090c0:	425b      	neglt	r3, r3
 80090c2:	f042 0202 	orrlt.w	r2, r2, #2
 80090c6:	9307      	strge	r3, [sp, #28]
 80090c8:	9307      	strlt	r3, [sp, #28]
 80090ca:	bfb8      	it	lt
 80090cc:	9204      	strlt	r2, [sp, #16]
 80090ce:	7823      	ldrb	r3, [r4, #0]
 80090d0:	2b2e      	cmp	r3, #46	; 0x2e
 80090d2:	d10c      	bne.n	80090ee <_vfiprintf_r+0x176>
 80090d4:	7863      	ldrb	r3, [r4, #1]
 80090d6:	2b2a      	cmp	r3, #42	; 0x2a
 80090d8:	d135      	bne.n	8009146 <_vfiprintf_r+0x1ce>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	1d1a      	adds	r2, r3, #4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	9203      	str	r2, [sp, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bfb8      	it	lt
 80090e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090ea:	3402      	adds	r4, #2
 80090ec:	9305      	str	r3, [sp, #20]
 80090ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091d4 <_vfiprintf_r+0x25c>
 80090f2:	7821      	ldrb	r1, [r4, #0]
 80090f4:	2203      	movs	r2, #3
 80090f6:	4650      	mov	r0, sl
 80090f8:	f7f7 f8aa 	bl	8000250 <memchr>
 80090fc:	b140      	cbz	r0, 8009110 <_vfiprintf_r+0x198>
 80090fe:	2340      	movs	r3, #64	; 0x40
 8009100:	eba0 000a 	sub.w	r0, r0, sl
 8009104:	fa03 f000 	lsl.w	r0, r3, r0
 8009108:	9b04      	ldr	r3, [sp, #16]
 800910a:	4303      	orrs	r3, r0
 800910c:	3401      	adds	r4, #1
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009114:	482c      	ldr	r0, [pc, #176]	; (80091c8 <_vfiprintf_r+0x250>)
 8009116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800911a:	2206      	movs	r2, #6
 800911c:	f7f7 f898 	bl	8000250 <memchr>
 8009120:	2800      	cmp	r0, #0
 8009122:	d03f      	beq.n	80091a4 <_vfiprintf_r+0x22c>
 8009124:	4b29      	ldr	r3, [pc, #164]	; (80091cc <_vfiprintf_r+0x254>)
 8009126:	bb1b      	cbnz	r3, 8009170 <_vfiprintf_r+0x1f8>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	3307      	adds	r3, #7
 800912c:	f023 0307 	bic.w	r3, r3, #7
 8009130:	3308      	adds	r3, #8
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009136:	443b      	add	r3, r7
 8009138:	9309      	str	r3, [sp, #36]	; 0x24
 800913a:	e767      	b.n	800900c <_vfiprintf_r+0x94>
 800913c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009140:	460c      	mov	r4, r1
 8009142:	2001      	movs	r0, #1
 8009144:	e7a5      	b.n	8009092 <_vfiprintf_r+0x11a>
 8009146:	2300      	movs	r3, #0
 8009148:	3401      	adds	r4, #1
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	4619      	mov	r1, r3
 800914e:	f04f 0c0a 	mov.w	ip, #10
 8009152:	4620      	mov	r0, r4
 8009154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009158:	3a30      	subs	r2, #48	; 0x30
 800915a:	2a09      	cmp	r2, #9
 800915c:	d903      	bls.n	8009166 <_vfiprintf_r+0x1ee>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0c5      	beq.n	80090ee <_vfiprintf_r+0x176>
 8009162:	9105      	str	r1, [sp, #20]
 8009164:	e7c3      	b.n	80090ee <_vfiprintf_r+0x176>
 8009166:	fb0c 2101 	mla	r1, ip, r1, r2
 800916a:	4604      	mov	r4, r0
 800916c:	2301      	movs	r3, #1
 800916e:	e7f0      	b.n	8009152 <_vfiprintf_r+0x1da>
 8009170:	ab03      	add	r3, sp, #12
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	462a      	mov	r2, r5
 8009176:	4b16      	ldr	r3, [pc, #88]	; (80091d0 <_vfiprintf_r+0x258>)
 8009178:	a904      	add	r1, sp, #16
 800917a:	4630      	mov	r0, r6
 800917c:	f7fd fcb4 	bl	8006ae8 <_printf_float>
 8009180:	4607      	mov	r7, r0
 8009182:	1c78      	adds	r0, r7, #1
 8009184:	d1d6      	bne.n	8009134 <_vfiprintf_r+0x1bc>
 8009186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009188:	07d9      	lsls	r1, r3, #31
 800918a:	d405      	bmi.n	8009198 <_vfiprintf_r+0x220>
 800918c:	89ab      	ldrh	r3, [r5, #12]
 800918e:	059a      	lsls	r2, r3, #22
 8009190:	d402      	bmi.n	8009198 <_vfiprintf_r+0x220>
 8009192:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009194:	f7ff f8d8 	bl	8008348 <__retarget_lock_release_recursive>
 8009198:	89ab      	ldrh	r3, [r5, #12]
 800919a:	065b      	lsls	r3, r3, #25
 800919c:	f53f af12 	bmi.w	8008fc4 <_vfiprintf_r+0x4c>
 80091a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a2:	e711      	b.n	8008fc8 <_vfiprintf_r+0x50>
 80091a4:	ab03      	add	r3, sp, #12
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	462a      	mov	r2, r5
 80091aa:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <_vfiprintf_r+0x258>)
 80091ac:	a904      	add	r1, sp, #16
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7fd ff26 	bl	8007000 <_printf_i>
 80091b4:	e7e4      	b.n	8009180 <_vfiprintf_r+0x208>
 80091b6:	bf00      	nop
 80091b8:	080096cc 	.word	0x080096cc
 80091bc:	080096ec 	.word	0x080096ec
 80091c0:	080096ac 	.word	0x080096ac
 80091c4:	080098aa 	.word	0x080098aa
 80091c8:	080098b4 	.word	0x080098b4
 80091cc:	08006ae9 	.word	0x08006ae9
 80091d0:	08008f53 	.word	0x08008f53
 80091d4:	080098b0 	.word	0x080098b0

080091d8 <_read_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	; (80091f8 <_read_r+0x20>)
 80091dc:	4604      	mov	r4, r0
 80091de:	4608      	mov	r0, r1
 80091e0:	4611      	mov	r1, r2
 80091e2:	2200      	movs	r2, #0
 80091e4:	602a      	str	r2, [r5, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f7f8 ff8c 	bl	8002104 <_read>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_read_r+0x1e>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_read_r+0x1e>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	2000067c 	.word	0x2000067c

080091fc <__swbuf_r>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	460e      	mov	r6, r1
 8009200:	4614      	mov	r4, r2
 8009202:	4605      	mov	r5, r0
 8009204:	b118      	cbz	r0, 800920e <__swbuf_r+0x12>
 8009206:	6983      	ldr	r3, [r0, #24]
 8009208:	b90b      	cbnz	r3, 800920e <__swbuf_r+0x12>
 800920a:	f7fe fff9 	bl	8008200 <__sinit>
 800920e:	4b21      	ldr	r3, [pc, #132]	; (8009294 <__swbuf_r+0x98>)
 8009210:	429c      	cmp	r4, r3
 8009212:	d12b      	bne.n	800926c <__swbuf_r+0x70>
 8009214:	686c      	ldr	r4, [r5, #4]
 8009216:	69a3      	ldr	r3, [r4, #24]
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	071a      	lsls	r2, r3, #28
 800921e:	d52f      	bpl.n	8009280 <__swbuf_r+0x84>
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	b36b      	cbz	r3, 8009280 <__swbuf_r+0x84>
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	6820      	ldr	r0, [r4, #0]
 8009228:	1ac0      	subs	r0, r0, r3
 800922a:	6963      	ldr	r3, [r4, #20]
 800922c:	b2f6      	uxtb	r6, r6
 800922e:	4283      	cmp	r3, r0
 8009230:	4637      	mov	r7, r6
 8009232:	dc04      	bgt.n	800923e <__swbuf_r+0x42>
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f7fe ff4e 	bl	80080d8 <_fflush_r>
 800923c:	bb30      	cbnz	r0, 800928c <__swbuf_r+0x90>
 800923e:	68a3      	ldr	r3, [r4, #8]
 8009240:	3b01      	subs	r3, #1
 8009242:	60a3      	str	r3, [r4, #8]
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	6022      	str	r2, [r4, #0]
 800924a:	701e      	strb	r6, [r3, #0]
 800924c:	6963      	ldr	r3, [r4, #20]
 800924e:	3001      	adds	r0, #1
 8009250:	4283      	cmp	r3, r0
 8009252:	d004      	beq.n	800925e <__swbuf_r+0x62>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	07db      	lsls	r3, r3, #31
 8009258:	d506      	bpl.n	8009268 <__swbuf_r+0x6c>
 800925a:	2e0a      	cmp	r6, #10
 800925c:	d104      	bne.n	8009268 <__swbuf_r+0x6c>
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	f7fe ff39 	bl	80080d8 <_fflush_r>
 8009266:	b988      	cbnz	r0, 800928c <__swbuf_r+0x90>
 8009268:	4638      	mov	r0, r7
 800926a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <__swbuf_r+0x9c>)
 800926e:	429c      	cmp	r4, r3
 8009270:	d101      	bne.n	8009276 <__swbuf_r+0x7a>
 8009272:	68ac      	ldr	r4, [r5, #8]
 8009274:	e7cf      	b.n	8009216 <__swbuf_r+0x1a>
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <__swbuf_r+0xa0>)
 8009278:	429c      	cmp	r4, r3
 800927a:	bf08      	it	eq
 800927c:	68ec      	ldreq	r4, [r5, #12]
 800927e:	e7ca      	b.n	8009216 <__swbuf_r+0x1a>
 8009280:	4621      	mov	r1, r4
 8009282:	4628      	mov	r0, r5
 8009284:	f000 f81a 	bl	80092bc <__swsetup_r>
 8009288:	2800      	cmp	r0, #0
 800928a:	d0cb      	beq.n	8009224 <__swbuf_r+0x28>
 800928c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009290:	e7ea      	b.n	8009268 <__swbuf_r+0x6c>
 8009292:	bf00      	nop
 8009294:	080096cc 	.word	0x080096cc
 8009298:	080096ec 	.word	0x080096ec
 800929c:	080096ac 	.word	0x080096ac

080092a0 <__ascii_wctomb>:
 80092a0:	b149      	cbz	r1, 80092b6 <__ascii_wctomb+0x16>
 80092a2:	2aff      	cmp	r2, #255	; 0xff
 80092a4:	bf85      	ittet	hi
 80092a6:	238a      	movhi	r3, #138	; 0x8a
 80092a8:	6003      	strhi	r3, [r0, #0]
 80092aa:	700a      	strbls	r2, [r1, #0]
 80092ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80092b0:	bf98      	it	ls
 80092b2:	2001      	movls	r0, #1
 80092b4:	4770      	bx	lr
 80092b6:	4608      	mov	r0, r1
 80092b8:	4770      	bx	lr
	...

080092bc <__swsetup_r>:
 80092bc:	4b32      	ldr	r3, [pc, #200]	; (8009388 <__swsetup_r+0xcc>)
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	681d      	ldr	r5, [r3, #0]
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	b125      	cbz	r5, 80092d2 <__swsetup_r+0x16>
 80092c8:	69ab      	ldr	r3, [r5, #24]
 80092ca:	b913      	cbnz	r3, 80092d2 <__swsetup_r+0x16>
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7fe ff97 	bl	8008200 <__sinit>
 80092d2:	4b2e      	ldr	r3, [pc, #184]	; (800938c <__swsetup_r+0xd0>)
 80092d4:	429c      	cmp	r4, r3
 80092d6:	d10f      	bne.n	80092f8 <__swsetup_r+0x3c>
 80092d8:	686c      	ldr	r4, [r5, #4]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092e0:	0719      	lsls	r1, r3, #28
 80092e2:	d42c      	bmi.n	800933e <__swsetup_r+0x82>
 80092e4:	06dd      	lsls	r5, r3, #27
 80092e6:	d411      	bmi.n	800930c <__swsetup_r+0x50>
 80092e8:	2309      	movs	r3, #9
 80092ea:	6033      	str	r3, [r6, #0]
 80092ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092f0:	81a3      	strh	r3, [r4, #12]
 80092f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092f6:	e03e      	b.n	8009376 <__swsetup_r+0xba>
 80092f8:	4b25      	ldr	r3, [pc, #148]	; (8009390 <__swsetup_r+0xd4>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	d101      	bne.n	8009302 <__swsetup_r+0x46>
 80092fe:	68ac      	ldr	r4, [r5, #8]
 8009300:	e7eb      	b.n	80092da <__swsetup_r+0x1e>
 8009302:	4b24      	ldr	r3, [pc, #144]	; (8009394 <__swsetup_r+0xd8>)
 8009304:	429c      	cmp	r4, r3
 8009306:	bf08      	it	eq
 8009308:	68ec      	ldreq	r4, [r5, #12]
 800930a:	e7e6      	b.n	80092da <__swsetup_r+0x1e>
 800930c:	0758      	lsls	r0, r3, #29
 800930e:	d512      	bpl.n	8009336 <__swsetup_r+0x7a>
 8009310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009312:	b141      	cbz	r1, 8009326 <__swsetup_r+0x6a>
 8009314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009318:	4299      	cmp	r1, r3
 800931a:	d002      	beq.n	8009322 <__swsetup_r+0x66>
 800931c:	4630      	mov	r0, r6
 800931e:	f7ff fc29 	bl	8008b74 <_free_r>
 8009322:	2300      	movs	r3, #0
 8009324:	6363      	str	r3, [r4, #52]	; 0x34
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	2300      	movs	r3, #0
 8009330:	6063      	str	r3, [r4, #4]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f043 0308 	orr.w	r3, r3, #8
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	b94b      	cbnz	r3, 8009356 <__swsetup_r+0x9a>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800934c:	d003      	beq.n	8009356 <__swsetup_r+0x9a>
 800934e:	4621      	mov	r1, r4
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff f81f 	bl	8008394 <__smakebuf_r>
 8009356:	89a0      	ldrh	r0, [r4, #12]
 8009358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800935c:	f010 0301 	ands.w	r3, r0, #1
 8009360:	d00a      	beq.n	8009378 <__swsetup_r+0xbc>
 8009362:	2300      	movs	r3, #0
 8009364:	60a3      	str	r3, [r4, #8]
 8009366:	6963      	ldr	r3, [r4, #20]
 8009368:	425b      	negs	r3, r3
 800936a:	61a3      	str	r3, [r4, #24]
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	b943      	cbnz	r3, 8009382 <__swsetup_r+0xc6>
 8009370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009374:	d1ba      	bne.n	80092ec <__swsetup_r+0x30>
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	0781      	lsls	r1, r0, #30
 800937a:	bf58      	it	pl
 800937c:	6963      	ldrpl	r3, [r4, #20]
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	e7f4      	b.n	800936c <__swsetup_r+0xb0>
 8009382:	2000      	movs	r0, #0
 8009384:	e7f7      	b.n	8009376 <__swsetup_r+0xba>
 8009386:	bf00      	nop
 8009388:	20000178 	.word	0x20000178
 800938c:	080096cc 	.word	0x080096cc
 8009390:	080096ec 	.word	0x080096ec
 8009394:	080096ac 	.word	0x080096ac

08009398 <abort>:
 8009398:	b508      	push	{r3, lr}
 800939a:	2006      	movs	r0, #6
 800939c:	f000 f82c 	bl	80093f8 <raise>
 80093a0:	2001      	movs	r0, #1
 80093a2:	f000 f8c9 	bl	8009538 <_exit>

080093a6 <_raise_r>:
 80093a6:	291f      	cmp	r1, #31
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	460d      	mov	r5, r1
 80093ae:	d904      	bls.n	80093ba <_raise_r+0x14>
 80093b0:	2316      	movs	r3, #22
 80093b2:	6003      	str	r3, [r0, #0]
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b8:	bd38      	pop	{r3, r4, r5, pc}
 80093ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093bc:	b112      	cbz	r2, 80093c4 <_raise_r+0x1e>
 80093be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093c2:	b94b      	cbnz	r3, 80093d8 <_raise_r+0x32>
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 f831 	bl	800942c <_getpid_r>
 80093ca:	462a      	mov	r2, r5
 80093cc:	4601      	mov	r1, r0
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d4:	f000 b818 	b.w	8009408 <_kill_r>
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d00a      	beq.n	80093f2 <_raise_r+0x4c>
 80093dc:	1c59      	adds	r1, r3, #1
 80093de:	d103      	bne.n	80093e8 <_raise_r+0x42>
 80093e0:	2316      	movs	r3, #22
 80093e2:	6003      	str	r3, [r0, #0]
 80093e4:	2001      	movs	r0, #1
 80093e6:	e7e7      	b.n	80093b8 <_raise_r+0x12>
 80093e8:	2400      	movs	r4, #0
 80093ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093ee:	4628      	mov	r0, r5
 80093f0:	4798      	blx	r3
 80093f2:	2000      	movs	r0, #0
 80093f4:	e7e0      	b.n	80093b8 <_raise_r+0x12>
	...

080093f8 <raise>:
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <raise+0xc>)
 80093fa:	4601      	mov	r1, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f7ff bfd2 	b.w	80093a6 <_raise_r>
 8009402:	bf00      	nop
 8009404:	20000178 	.word	0x20000178

08009408 <_kill_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	; (8009428 <_kill_r+0x20>)
 800940c:	2300      	movs	r3, #0
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	4611      	mov	r1, r2
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	f000 f887 	bl	8009528 <_kill>
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	d102      	bne.n	8009424 <_kill_r+0x1c>
 800941e:	682b      	ldr	r3, [r5, #0]
 8009420:	b103      	cbz	r3, 8009424 <_kill_r+0x1c>
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	bd38      	pop	{r3, r4, r5, pc}
 8009426:	bf00      	nop
 8009428:	2000067c 	.word	0x2000067c

0800942c <_getpid_r>:
 800942c:	f000 b874 	b.w	8009518 <_getpid>

08009430 <fmaxf>:
 8009430:	b508      	push	{r3, lr}
 8009432:	ed2d 8b02 	vpush	{d8}
 8009436:	eeb0 8a40 	vmov.f32	s16, s0
 800943a:	eef0 8a60 	vmov.f32	s17, s1
 800943e:	f000 f82d 	bl	800949c <__fpclassifyf>
 8009442:	b148      	cbz	r0, 8009458 <fmaxf+0x28>
 8009444:	eeb0 0a68 	vmov.f32	s0, s17
 8009448:	f000 f828 	bl	800949c <__fpclassifyf>
 800944c:	b130      	cbz	r0, 800945c <fmaxf+0x2c>
 800944e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009456:	dc01      	bgt.n	800945c <fmaxf+0x2c>
 8009458:	eeb0 8a68 	vmov.f32	s16, s17
 800945c:	eeb0 0a48 	vmov.f32	s0, s16
 8009460:	ecbd 8b02 	vpop	{d8}
 8009464:	bd08      	pop	{r3, pc}

08009466 <fminf>:
 8009466:	b508      	push	{r3, lr}
 8009468:	ed2d 8b02 	vpush	{d8}
 800946c:	eeb0 8a40 	vmov.f32	s16, s0
 8009470:	eef0 8a60 	vmov.f32	s17, s1
 8009474:	f000 f812 	bl	800949c <__fpclassifyf>
 8009478:	b148      	cbz	r0, 800948e <fminf+0x28>
 800947a:	eeb0 0a68 	vmov.f32	s0, s17
 800947e:	f000 f80d 	bl	800949c <__fpclassifyf>
 8009482:	b130      	cbz	r0, 8009492 <fminf+0x2c>
 8009484:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948c:	d401      	bmi.n	8009492 <fminf+0x2c>
 800948e:	eeb0 8a68 	vmov.f32	s16, s17
 8009492:	eeb0 0a48 	vmov.f32	s0, s16
 8009496:	ecbd 8b02 	vpop	{d8}
 800949a:	bd08      	pop	{r3, pc}

0800949c <__fpclassifyf>:
 800949c:	ee10 3a10 	vmov	r3, s0
 80094a0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80094a4:	d00d      	beq.n	80094c2 <__fpclassifyf+0x26>
 80094a6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80094aa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80094ae:	d30a      	bcc.n	80094c6 <__fpclassifyf+0x2a>
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <__fpclassifyf+0x34>)
 80094b2:	1e42      	subs	r2, r0, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d908      	bls.n	80094ca <__fpclassifyf+0x2e>
 80094b8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80094bc:	4258      	negs	r0, r3
 80094be:	4158      	adcs	r0, r3
 80094c0:	4770      	bx	lr
 80094c2:	2002      	movs	r0, #2
 80094c4:	4770      	bx	lr
 80094c6:	2004      	movs	r0, #4
 80094c8:	4770      	bx	lr
 80094ca:	2003      	movs	r0, #3
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	007ffffe 	.word	0x007ffffe

080094d4 <sqrtf>:
 80094d4:	b508      	push	{r3, lr}
 80094d6:	ed2d 8b02 	vpush	{d8}
 80094da:	eeb0 8a40 	vmov.f32	s16, s0
 80094de:	f000 f817 	bl	8009510 <__ieee754_sqrtf>
 80094e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80094e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ea:	d60c      	bvs.n	8009506 <sqrtf+0x32>
 80094ec:	eddf 8a07 	vldr	s17, [pc, #28]	; 800950c <sqrtf+0x38>
 80094f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80094f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f8:	d505      	bpl.n	8009506 <sqrtf+0x32>
 80094fa:	f7fd fa31 	bl	8006960 <__errno>
 80094fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009502:	2321      	movs	r3, #33	; 0x21
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	ecbd 8b02 	vpop	{d8}
 800950a:	bd08      	pop	{r3, pc}
 800950c:	00000000 	.word	0x00000000

08009510 <__ieee754_sqrtf>:
 8009510:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009514:	4770      	bx	lr
	...

08009518 <_getpid>:
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <_getpid+0xc>)
 800951a:	2258      	movs	r2, #88	; 0x58
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009522:	4770      	bx	lr
 8009524:	2000067c 	.word	0x2000067c

08009528 <_kill>:
 8009528:	4b02      	ldr	r3, [pc, #8]	; (8009534 <_kill+0xc>)
 800952a:	2258      	movs	r2, #88	; 0x58
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009532:	4770      	bx	lr
 8009534:	2000067c 	.word	0x2000067c

08009538 <_exit>:
 8009538:	e7fe      	b.n	8009538 <_exit>
	...

0800953c <_init>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	bf00      	nop
 8009540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009542:	bc08      	pop	{r3}
 8009544:	469e      	mov	lr, r3
 8009546:	4770      	bx	lr

08009548 <_fini>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	bf00      	nop
 800954c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954e:	bc08      	pop	{r3}
 8009550:	469e      	mov	lr, r3
 8009552:	4770      	bx	lr
