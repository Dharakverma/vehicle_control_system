
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080076a0  080076a0  000176a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aac  08007aac  00020348  2**0
                  CONTENTS
  4 .ARM          00000008  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab4  08007ab4  00020348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  08007abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000348  08007e04  00020348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08007e04  00020594  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f287  00000000  00000000  00020376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002008  00000000  00000000  0002f5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d29  00000000  00000000  00032950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d63b  00000000  00000000  00035679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb273  00000000  00000000  00042cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013df27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  0013df78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00141728  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00141764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000348 	.word	0x20000348
 800021c:	00000000 	.word	0x00000000
 8000220:	08007688 	.word	0x08007688

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000034c 	.word	0x2000034c
 800023c:	08007688 	.word	0x08007688

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <reverseBits>:


int DLC = 8;

uint32_t reverseBits(uint32_t num)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    uint32_t NO_OF_BITS = sizeof(num) * 8;
 80005fc:	2320      	movs	r3, #32
 80005fe:	60fb      	str	r3, [r7, #12]
    uint32_t reverse_num = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NO_OF_BITS; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	e016      	b.n	8000638 <reverseBits+0x44>
        if ((num & (1 << i)))
 800060a:	2201      	movs	r2, #1
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4013      	ands	r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <reverseBits+0x3e>
            reverse_num |= 1 << ((NO_OF_BITS - 1) - i);
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	461a      	mov	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4313      	orrs	r3, r2
 8000630:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NO_OF_BITS; i++) {
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	3301      	adds	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	429a      	cmp	r2, r3
 800063e:	d8e4      	bhi.n	800060a <reverseBits+0x16>
    }
    return reverse_num;
 8000640:	697b      	ldr	r3, [r7, #20]
}
 8000642:	4618      	mov	r0, r3
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <IncomingCANMessageHandler>:
	{0x287,     &AMK1_TempIGBT,               	48,      	16}

};

//right now it checks value, will need to change it to update variables
void IncomingCANMessageHandler(uint32_t * ID, uint8_t RxData[]){
 8000650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000654:	b09d      	sub	sp, #116	; 0x74
 8000656:	af00      	add	r7, sp, #0
 8000658:	6278      	str	r0, [r7, #36]	; 0x24
 800065a:	6239      	str	r1, [r7, #32]
	/*This function add all RxData to a uint64 line,
	 * then get the bits we want by bit shifting 'final'
	 * according to offset and length*/
	uint32_t a = RxData[0];
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t b = RxData[1];
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	3301      	adds	r3, #1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t c = RxData[2];
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	3302      	adds	r3, #2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t d = RxData[3];
 8000672:	6a3b      	ldr	r3, [r7, #32]
 8000674:	3303      	adds	r3, #3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t e = RxData[4];
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	3304      	adds	r3, #4
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t f = RxData[5];
 8000682:	6a3b      	ldr	r3, [r7, #32]
 8000684:	3305      	adds	r3, #5
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t g = RxData[6];
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	3306      	adds	r3, #6
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t h = RxData[7];
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	3307      	adds	r3, #7
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint64_t firstSegment = 0;
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint32_t secondSegment = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t finalRxData = 0;
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    //add all the unit8 arrays to a uint64 line
	firstSegment =  a << 24 | b << 16 | c << 8 | d;
 80006b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006b8:	061a      	lsls	r2, r3, #24
 80006ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006bc:	041b      	lsls	r3, r3, #16
 80006be:	431a      	orrs	r2, r3
 80006c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	431a      	orrs	r2, r3
 80006c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006c8:	4313      	orrs	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	60fa      	str	r2, [r7, #12]
 80006d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	secondSegment = e << 24 | f << 16 | g << 8 | h;
 80006d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006da:	061a      	lsls	r2, r3, #24
 80006dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	431a      	orrs	r2, r3
 80006e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006ea:	4313      	orrs	r3, r2
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	finalRxData = firstSegment << 32 | secondSegment;
 80006ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	f04f 0100 	mov.w	r1, #0
 80006fa:	0011      	movs	r1, r2
 80006fc:	2000      	movs	r0, #0
 80006fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000700:	2200      	movs	r2, #0
 8000702:	461c      	mov	r4, r3
 8000704:	4615      	mov	r5, r2
 8000706:	ea40 0304 	orr.w	r3, r0, r4
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	ea41 0305 	orr.w	r3, r1, r5
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000716:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    for(int i = 0; i < MAX_RECEIVE_TABLE_SIZE; i++){
 800071a:	2300      	movs	r3, #0
 800071c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800071e:	e0e1      	b.n	80008e4 <IncomingCANMessageHandler+0x294>

        if (RecieveMessageTable[i].ID == *ID){
 8000720:	4975      	ldr	r1, [pc, #468]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 8000722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d158      	bne.n	80007ea <IncomingCANMessageHandler+0x19a>
            //*RecieveMessageTable[i].pointerToUserVariable = CAN_MESSAGE>>(DLC*8 - RecieveMessageTable[i].offset - RecieveMessageTable[i].length) & 0xFFFFFFFFFFFFFFFF>>(64 - RecieveMessageTable[i].length);
            //bit shifting 'final' according to offset and length
        	*RecieveMessageTable[i].pointerToUserVariable = finalRxData>>(DLC*8 - RecieveMessageTable[i].offset - RecieveMessageTable[i].length) & 0xFFFFFFFFFFFFFFFF>>(64 - RecieveMessageTable[i].length);
 8000738:	4b70      	ldr	r3, [pc, #448]	; (80008fc <IncomingCANMessageHandler+0x2ac>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	00d9      	lsls	r1, r3, #3
 800073e:	486e      	ldr	r0, [pc, #440]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 8000740:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4403      	add	r3, r0
 800074c:	3308      	adds	r3, #8
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	1ac9      	subs	r1, r1, r3
 8000752:	4869      	ldr	r0, [pc, #420]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 8000754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4403      	add	r3, r0
 8000760:	330a      	adds	r3, #10
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	1ac9      	subs	r1, r1, r3
 8000766:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800076a:	f1c1 0420 	rsb	r4, r1, #32
 800076e:	f1a1 0020 	sub.w	r0, r1, #32
 8000772:	fa22 f801 	lsr.w	r8, r2, r1
 8000776:	fa03 f404 	lsl.w	r4, r3, r4
 800077a:	ea48 0804 	orr.w	r8, r8, r4
 800077e:	fa23 f000 	lsr.w	r0, r3, r0
 8000782:	ea48 0800 	orr.w	r8, r8, r0
 8000786:	fa23 f901 	lsr.w	r9, r3, r1
 800078a:	fa1f f588 	uxth.w	r5, r8
 800078e:	495a      	ldr	r1, [pc, #360]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 8000790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	330a      	adds	r3, #10
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ac:	f1c1 0420 	rsb	r4, r1, #32
 80007b0:	f1a1 0020 	sub.w	r0, r1, #32
 80007b4:	fa22 fa01 	lsr.w	sl, r2, r1
 80007b8:	fa03 f404 	lsl.w	r4, r3, r4
 80007bc:	ea4a 0a04 	orr.w	sl, sl, r4
 80007c0:	fa23 f000 	lsr.w	r0, r3, r0
 80007c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80007c8:	fa23 fb01 	lsr.w	fp, r3, r1
 80007cc:	fa1f f18a 	uxth.w	r1, sl
 80007d0:	4849      	ldr	r0, [pc, #292]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 80007d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4403      	add	r3, r0
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	ea05 0201 	and.w	r2, r5, r1
 80007e6:	b292      	uxth	r2, r2
 80007e8:	801a      	strh	r2, [r3, #0]
        }
        if(RecieveMessageTable[i].length > 1){
 80007ea:	4943      	ldr	r1, [pc, #268]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 80007ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	330a      	adds	r3, #10
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d96e      	bls.n	80008de <IncomingCANMessageHandler+0x28e>
			uint32_t temp = finalRxData>>(DLC*8 - RecieveMessageTable[i].offset - RecieveMessageTable[i].length) & 0xFFFFFFFFFFFFFFFF>>(64 - RecieveMessageTable[i].length);
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <IncomingCANMessageHandler+0x2ac>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	00d9      	lsls	r1, r3, #3
 8000806:	483c      	ldr	r0, [pc, #240]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 8000808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4403      	add	r3, r0
 8000814:	3308      	adds	r3, #8
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	1ac9      	subs	r1, r1, r3
 800081a:	4837      	ldr	r0, [pc, #220]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 800081c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4403      	add	r3, r0
 8000828:	330a      	adds	r3, #10
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	1ac9      	subs	r1, r1, r3
 800082e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000832:	f1c1 0420 	rsb	r4, r1, #32
 8000836:	f1a1 0020 	sub.w	r0, r1, #32
 800083a:	fa22 f501 	lsr.w	r5, r2, r1
 800083e:	61bd      	str	r5, [r7, #24]
 8000840:	fa03 f404 	lsl.w	r4, r3, r4
 8000844:	69bd      	ldr	r5, [r7, #24]
 8000846:	4325      	orrs	r5, r4
 8000848:	61bd      	str	r5, [r7, #24]
 800084a:	fa23 f000 	lsr.w	r0, r3, r0
 800084e:	69bc      	ldr	r4, [r7, #24]
 8000850:	4304      	orrs	r4, r0
 8000852:	61bc      	str	r4, [r7, #24]
 8000854:	40cb      	lsrs	r3, r1
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	69bd      	ldr	r5, [r7, #24]
 800085a:	4927      	ldr	r1, [pc, #156]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 800085c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800085e:	4613      	mov	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4413      	add	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	440b      	add	r3, r1
 8000868:	330a      	adds	r3, #10
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 8000870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000878:	f1c1 0420 	rsb	r4, r1, #32
 800087c:	f1a1 0020 	sub.w	r0, r1, #32
 8000880:	fa22 f601 	lsr.w	r6, r2, r1
 8000884:	613e      	str	r6, [r7, #16]
 8000886:	fa03 f404 	lsl.w	r4, r3, r4
 800088a:	693e      	ldr	r6, [r7, #16]
 800088c:	4326      	orrs	r6, r4
 800088e:	613e      	str	r6, [r7, #16]
 8000890:	fa23 f000 	lsr.w	r0, r3, r0
 8000894:	693c      	ldr	r4, [r7, #16]
 8000896:	4304      	orrs	r4, r0
 8000898:	613c      	str	r4, [r7, #16]
 800089a:	40cb      	lsrs	r3, r1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	402b      	ands	r3, r5
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			temp = reverseBits(temp);
 80008a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008a6:	f7ff fea5 	bl	80005f4 <reverseBits>
 80008aa:	62f8      	str	r0, [r7, #44]	; 0x2c
			*RecieveMessageTable[i].pointerToUserVariable = temp>>(32 - RecieveMessageTable[i].length);
 80008ac:	4912      	ldr	r1, [pc, #72]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 80008ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	330a      	adds	r3, #10
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f1c3 0320 	rsb	r3, r3, #32
 80008c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c4:	fa22 f003 	lsr.w	r0, r2, r3
 80008c8:	490b      	ldr	r1, [pc, #44]	; (80008f8 <IncomingCANMessageHandler+0x2a8>)
 80008ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	3304      	adds	r3, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	b282      	uxth	r2, r0
 80008dc:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < MAX_RECEIVE_TABLE_SIZE; i++){
 80008de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e0:	3301      	adds	r3, #1
 80008e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e6:	2b1d      	cmp	r3, #29
 80008e8:	f67f af1a 	bls.w	8000720 <IncomingCANMessageHandler+0xd0>
		}
    }
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3774      	adds	r7, #116	; 0x74
 80008f2:	46bd      	mov	sp, r7
 80008f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008f8:	20000004 	.word	0x20000004
 80008fc:	20000000 	.word	0x20000000

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f000 ff2a 	bl	800175e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f8c1 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fa25 	bl	8000d5c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000912:	f000 f9bd 	bl	8000c90 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000916:	f000 f9f1 	bl	8000cfc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800091a:	f000 f915 	bl	8000b48 <MX_ADC1_Init>
  MX_ADC2_Init();
 800091e:	f000 f965 	bl	8000bec <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  UART_st uart3 = {
 8000922:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <main+0x164>)
 8000924:	463c      	mov	r4, r7
 8000926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  .mode = UART_TX_RX,
	  .datasize = UART_Datasize_8,
	  .uart_num = 3
  };

  Printf_Init(&uart3);
 800092c:	463b      	mov	r3, r7
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fac0 	bl	8000eb4 <Printf_Init>

  CAN_Config();
 8000934:	f000 fa6a 	bl	8000e0c <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000938:	2102      	movs	r1, #2
 800093a:	484b      	ldr	r0, [pc, #300]	; (8000a68 <main+0x168>)
 800093c:	f001 fd62 	bl	8002404 <HAL_CAN_ActivateNotification>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <main+0x4a>
	{
	  Error_Handler();
 8000946:	f000 faaf 	bl	8000ea8 <Error_Handler>
	}

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800094a:	2101      	movs	r1, #1
 800094c:	4846      	ldr	r0, [pc, #280]	; (8000a68 <main+0x168>)
 800094e:	f001 fd59 	bl	8002404 <HAL_CAN_ActivateNotification>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <main+0x5c>
  {
	  Error_Handler();
 8000958:	f000 faa6 	bl	8000ea8 <Error_Handler>
  }

  TxHeader.DLC = 8;
 800095c:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <main+0x16c>)
 800095e:	2208      	movs	r2, #8
 8000960:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000962:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <main+0x16c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000968:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <main+0x16c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x200;
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <main+0x16c>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <main+0x16c>)
 8000978:	2200      	movs	r2, #0
 800097a:	751a      	strb	r2, [r3, #20]

  TxHeader2.DLC = 8;
 800097c:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <main+0x170>)
 800097e:	2208      	movs	r2, #8
 8000980:	611a      	str	r2, [r3, #16]
  TxHeader2.IDE = CAN_ID_STD;
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <main+0x170>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000988:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <main+0x170>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x200;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <main+0x170>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	601a      	str	r2, [r3, #0]
  TxHeader2.TransmitGlobalTime = DISABLE;
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <main+0x170>)
 8000998:	2200      	movs	r2, #0
 800099a:	751a      	strb	r2, [r3, #20]

  TxHeader3.DLC = 8;
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <main+0x174>)
 800099e:	2208      	movs	r2, #8
 80009a0:	611a      	str	r2, [r3, #16]
  TxHeader3.IDE = CAN_ID_STD;
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <main+0x174>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  TxHeader3.RTR = CAN_RTR_DATA;
 80009a8:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <main+0x174>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  TxHeader3.StdId = 0x500;
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <main+0x174>)
 80009b0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80009b4:	601a      	str	r2, [r3, #0]
  TxHeader3.TransmitGlobalTime = DISABLE;
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <main+0x174>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	751a      	strb	r2, [r3, #20]

  TxHeader4.DLC = 8;
 80009bc:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <main+0x178>)
 80009be:	2208      	movs	r2, #8
 80009c0:	611a      	str	r2, [r3, #16]
  TxHeader4.IDE = CAN_ID_STD;
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <main+0x178>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  TxHeader4.RTR = CAN_RTR_DATA;
 80009c8:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <main+0x178>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  TxHeader4.StdId = 0x200;
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <main+0x178>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	601a      	str	r2, [r3, #0]
  TxHeader4.TransmitGlobalTime = DISABLE;
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <main+0x178>)
 80009d8:	2200      	movs	r2, #0
 80009da:	751a      	strb	r2, [r3, #20]
//  TxData[4] = 0xFF;
//  TxData[5] = 0xFF;
//  TxData[6] = 0xFF;
//  TxData[7] = 0xFF;

  TxData2[0] = 0xAB;
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <main+0x17c>)
 80009de:	22ab      	movs	r2, #171	; 0xab
 80009e0:	701a      	strb	r2, [r3, #0]
  TxData2[1] = 0xCD;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <main+0x17c>)
 80009e4:	22cd      	movs	r2, #205	; 0xcd
 80009e6:	705a      	strb	r2, [r3, #1]
  TxData2[2] = 0xEF;
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <main+0x17c>)
 80009ea:	22ef      	movs	r2, #239	; 0xef
 80009ec:	709a      	strb	r2, [r3, #2]
  TxData2[3] = 0x12;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <main+0x17c>)
 80009f0:	2212      	movs	r2, #18
 80009f2:	70da      	strb	r2, [r3, #3]
  TxData2[4] = 0x33;
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <main+0x17c>)
 80009f6:	2233      	movs	r2, #51	; 0x33
 80009f8:	711a      	strb	r2, [r3, #4]
  TxData2[5] = 0x21;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <main+0x17c>)
 80009fc:	2221      	movs	r2, #33	; 0x21
 80009fe:	715a      	strb	r2, [r3, #5]
  TxData2[6] = 0x69;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <main+0x17c>)
 8000a02:	2269      	movs	r2, #105	; 0x69
 8000a04:	719a      	strb	r2, [r3, #6]
  TxData2[7] = 0x69;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <main+0x17c>)
 8000a08:	2269      	movs	r2, #105	; 0x69
 8000a0a:	71da      	strb	r2, [r3, #7]

  TxData3[0] = 0x01;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <main+0x180>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
  TxData3[1] = 0x02;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <main+0x180>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	705a      	strb	r2, [r3, #1]
  TxData3[2] = 0xFF;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <main+0x180>)
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	709a      	strb	r2, [r3, #2]
  TxData3[3] = 0xFF;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <main+0x180>)
 8000a20:	22ff      	movs	r2, #255	; 0xff
 8000a22:	70da      	strb	r2, [r3, #3]
  TxData3[4] = 0xFF;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <main+0x180>)
 8000a26:	22ff      	movs	r2, #255	; 0xff
 8000a28:	711a      	strb	r2, [r3, #4]
  TxData3[5] = 0xFF;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <main+0x180>)
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	715a      	strb	r2, [r3, #5]
  TxData3[6] = 0xFF;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <main+0x180>)
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	719a      	strb	r2, [r3, #6]
  TxData3[7] = 0xFF;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <main+0x180>)
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)  {
    HAL_Delay(500);
 8000a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a40:	f000 feea 	bl	8001818 <HAL_Delay>
//    printf(" \n\r");
//    printf("AMK_SystRdy = %d \n\r",AMK_bSystemReady);
//    printf("AMK_bError = %d \n\r",AMK_bError);


    if(motorTorque == 10){
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <main+0x184>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	2b0a      	cmp	r3, #10
 8000a4a:	d1f7      	bne.n	8000a3c <main+0x13c>
    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <main+0x188>)
 8000a50:	f002 fa05 	bl	8002e5e <HAL_GPIO_TogglePin>
        printf("%d \n\r",motorTorque);
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <main+0x184>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <main+0x18c>)
 8000a5c:	f004 fcfa 	bl	8005454 <iprintf>
    HAL_Delay(500);
 8000a60:	e7ec      	b.n	8000a3c <main+0x13c>
 8000a62:	bf00      	nop
 8000a64:	080076a8 	.word	0x080076a8
 8000a68:	200003f4 	.word	0x200003f4
 8000a6c:	200004e4 	.word	0x200004e4
 8000a70:	200004fc 	.word	0x200004fc
 8000a74:	20000514 	.word	0x20000514
 8000a78:	2000052c 	.word	0x2000052c
 8000a7c:	20000560 	.word	0x20000560
 8000a80:	20000568 	.word	0x20000568
 8000a84:	200004a4 	.word	0x200004a4
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	080076a0 	.word	0x080076a0

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2234      	movs	r2, #52	; 0x34
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 f88e 	bl	8004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xb0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xb0>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <SystemClock_Config+0xb0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <SystemClock_Config+0xb4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <SystemClock_Config+0xb4>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <SystemClock_Config+0xb4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2310      	movs	r3, #16
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 f9c9 	bl	8002e94 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f9ce 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fc62 	bl	80033f0 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b32:	f000 f9b9 	bl	8000ea8 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <MX_ADC1_Init+0x9c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <MX_ADC1_Init+0xa0>)
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000ba8:	f000 fe5a 	bl	8001860 <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 f979 	bl	8000ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_ADC1_Init+0x98>)
 8000bc8:	f000 fe8e 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bd2:	f000 f969 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000364 	.word	0x20000364
 8000be4:	40012000 	.word	0x40012000
 8000be8:	0f000001 	.word	0x0f000001

08000bec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_ADC2_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_ADC2_Init+0xa0>)
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c4c:	f000 fe08 	bl	8001860 <HAL_ADC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f000 f927 	bl	8000ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_ADC2_Init+0x98>)
 8000c6c:	f000 fe3c 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000c76:	f000 f917 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200003ac 	.word	0x200003ac
 8000c88:	40012100 	.word	0x40012100
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_CAN1_Init+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cae:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cb2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_CAN1_Init+0x64>)
 8000ce2:	f001 f851 	bl	8001d88 <HAL_CAN_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cec:	f000 f8dc 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200003f4 	.word	0x200003f4
 8000cf8:	40006400 	.word	0x40006400

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <MX_USART3_UART_Init+0x5c>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d40:	f003 f964 	bl	800400c <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f000 f8ad 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000041c 	.word	0x2000041c
 8000d58:	40004800 	.word	0x40004800

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_GPIO_Init+0xa8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MX_GPIO_Init+0xac>)
 8000dda:	f002 f827 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000dde:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_GPIO_Init+0xac>)
 8000df8:	f001 fe6c 	bl	8002ad4 <HAL_GPIO_Init>

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000e36:	230e      	movs	r3, #14
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480a      	ldr	r0, [pc, #40]	; (8000e68 <CAN_Config+0x5c>)
 8000e40:	f001 f89e 	bl	8001f80 <HAL_CAN_ConfigFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000e4a:	f000 f82d 	bl	8000ea8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <CAN_Config+0x5c>)
 8000e50:	f001 f982 	bl	8002158 <HAL_CAN_Start>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000e5a:	f000 f825 	bl	8000ea8 <Error_Handler>
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200003f4 	.word	0x200003f4

08000e6c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e7c:	f001 f9b0 	bl	80021e0 <HAL_CAN_GetRxMessage>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8000e86:	f000 f80f 	bl	8000ea8 <Error_Handler>
	}

	IncomingCANMessageHandler(&RxHeader.StdId, RxData);
 8000e8a:	4904      	ldr	r1, [pc, #16]	; (8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e8e:	f7ff fbdf 	bl	8000650 <IncomingCANMessageHandler>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000570 	.word	0x20000570
 8000ea0:	20000544 	.word	0x20000544
 8000ea4:	200003f4 	.word	0x200003f4

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <Printf_Init>:

// Must be global
UART_st* Printer;


UART_Return_et Printf_Init(UART_st* uart) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  UART_Return_et response;

  // Set global to selected UART
  Printer = uart;
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <Printf_Init+0x3c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  response = UART_Init(uart);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 fba1 	bl	800160a <UART_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]

  if (response != UART_OK) {
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d001      	beq.n	8000ed6 <Printf_Init+0x22>
      return response;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	e008      	b.n	8000ee8 <Printf_Init+0x34>
  }

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */

  setvbuf(stdout, NULL, _IONBF, 0);
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <Printf_Init+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6898      	ldr	r0, [r3, #8]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2202      	movs	r2, #2
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f004 facf 	bl	8005484 <setvbuf>

  return UART_OK;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000578 	.word	0x20000578
 8000ef4:	20000178 	.word	0x20000178

08000ef8 <_isatty>:


int _isatty(int fd) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db04      	blt.n	8000f10 <_isatty+0x18>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	dc01      	bgt.n	8000f10 <_isatty+0x18>
    return 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e005      	b.n	8000f1c <_isatty+0x24>

  errno = EBADF;
 8000f10:	f003 fe2c 	bl	8004b6c <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2209      	movs	r2, #9
 8000f18:	601a      	str	r2, [r3, #0]
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <_write+0x18>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d110      	bne.n	8000f5e <_write+0x3a>
    response = UART_Transmit(Printer, (uint8_t*) ptr, len);
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <_write+0x50>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fba7 	bl	800169a <UART_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]

    if (response == UART_OK)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <_write+0x36>
      return len;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e008      	b.n	8000f6c <_write+0x48>
    else
      return EIO;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e006      	b.n	8000f6c <_write+0x48>
  }

  errno = EBADF;
 8000f5e:	f003 fe05 	bl	8004b6c <__errno>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2209      	movs	r2, #9
 8000f66:	601a      	str	r2, [r3, #0]
  return -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000578 	.word	0x20000578

08000f78 <_close>:


int _close(int fd) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db04      	blt.n	8000f90 <_close+0x18>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	dc01      	bgt.n	8000f90 <_close+0x18>
    return 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e006      	b.n	8000f9e <_close+0x26>

  errno = EBADF;
 8000f90:	f003 fdec 	bl	8004b6c <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2209      	movs	r2, #9
 8000f98:	601a      	str	r2, [r3, #0]
  return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]

  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 8000fb2:	f003 fddb 	bl	8004b6c <__errno>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2209      	movs	r2, #9
 8000fba:	601a      	str	r2, [r3, #0]
  return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDIN_FILENO) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d110      	bne.n	8000ffc <_read+0x34>
    response = UART_Receive(Printer, (uint8_t*) ptr, len);
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <_read+0x4c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fb74 	bl	80016d2 <UART_Receive>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
    if (response == UART_OK)
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <_read+0x30>
      return 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e008      	b.n	800100a <_read+0x42>
    else
      return EIO;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	e006      	b.n	800100a <_read+0x42>
  }

  errno = EBADF;
 8000ffc:	f003 fdb6 	bl	8004b6c <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	2209      	movs	r2, #9
 8001004:	601a      	str	r2, [r3, #0]
  return -1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000578 	.word	0x20000578

08001018 <_fstat>:


int _fstat(int fd, struct stat* st) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db08      	blt.n	800103a <_fstat+0x22>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	dc05      	bgt.n	800103a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001034:	605a      	str	r2, [r3, #4]
    return 0;
 8001036:	2300      	movs	r3, #0
 8001038:	e005      	b.n	8001046 <_fstat+0x2e>
  }

  errno = EBADF;
 800103a:	f003 fd97 	bl	8004b6c <__errno>
 800103e:	4603      	mov	r3, r0
 8001040:	2209      	movs	r2, #9
 8001042:	601a      	str	r2, [r3, #0]
  return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x44>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x44>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x44>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x44>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x44>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <HAL_ADC_MspInit+0xc8>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d124      	bne.n	8001104 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a29      	ldr	r2, [pc, #164]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481a      	ldr	r0, [pc, #104]	; (8001168 <HAL_ADC_MspInit+0xd0>)
 80010fe:	f001 fce9 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001102:	e028      	b.n	8001156 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_ADC_MspInit+0xd4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d123      	bne.n	8001156 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 8001114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_ADC_MspInit+0xcc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_ADC_MspInit+0xd0>)
 8001152:	f001 fcbf 	bl	8002ad4 <HAL_GPIO_Init>
}
 8001156:	bf00      	nop
 8001158:	3730      	adds	r7, #48	; 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012000 	.word	0x40012000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000
 800116c:	40012100 	.word	0x40012100

08001170 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_CAN_MspInit+0x9c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d137      	bne.n	8001202 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_CAN_MspInit+0xa0>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <HAL_CAN_MspInit+0xa0>)
 8001198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_CAN_MspInit+0xa0>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_CAN_MspInit+0xa0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <HAL_CAN_MspInit+0xa0>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_CAN_MspInit+0xa0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c2:	2303      	movs	r3, #3
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011d2:	2309      	movs	r3, #9
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <HAL_CAN_MspInit+0xa4>)
 80011de:	f001 fc79 	bl	8002ad4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2013      	movs	r0, #19
 80011e8:	f001 fc3d 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011ec:	2013      	movs	r0, #19
 80011ee:	f001 fc56 	bl	8002a9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2014      	movs	r0, #20
 80011f8:	f001 fc35 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011fc:	2014      	movs	r0, #20
 80011fe:	f001 fc4e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40006400 	.word	0x40006400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020c00 	.word	0x40020c00

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0ae      	sub	sp, #184	; 0xb8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2290      	movs	r2, #144	; 0x90
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fcc1 	bl	8004bc0 <memset>
  if(huart->Instance==USART3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_UART_MspInit+0xb4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d13c      	bne.n	80012c2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800124e:	2300      	movs	r3, #0
 8001250:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fab0 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff fe21 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b0:	2307      	movs	r3, #7
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspInit+0xbc>)
 80012be:	f001 fc09 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	37b8      	adds	r7, #184	; 0xb8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40004800 	.word	0x40004800
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020c00 	.word	0x40020c00

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 fa58 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <CAN1_TX_IRQHandler+0x18>)
 8001336:	f001 fd92 	bl	8002e5e <HAL_GPIO_TogglePin>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <CAN1_TX_IRQHandler+0x1c>)
 800133c:	f001 f888 	bl	8002450 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020400 	.word	0x40020400
 8001348:	200003f4 	.word	0x200003f4

0800134c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <CAN1_RX0_IRQHandler+0x10>)
 8001352:	f001 f87d 	bl	8002450 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003f4 	.word	0x200003f4

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f003 fbec 	bl	8004b6c <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20080000 	.word	0x20080000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	2000057c 	.word	0x2000057c
 80013c8:	20000598 	.word	0x20000598

080013cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <UART_Select>:

/*------------- PRIVATE FUNCTION DEFINITIONS ------------ */

// UART_Select configures the corresponding UART number from a UART_st
static UART_Return_et UART_Select(UART_st* uart)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	// Switch case for selection of 8 UARTS
	switch(uart->uart_num)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	2b07      	cmp	r3, #7
 8001400:	d83a      	bhi.n	8001478 <UART_Select+0x88>
 8001402:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <UART_Select+0x18>)
 8001404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001408:	08001429 	.word	0x08001429
 800140c:	08001433 	.word	0x08001433
 8001410:	0800143d 	.word	0x0800143d
 8001414:	08001447 	.word	0x08001447
 8001418:	08001451 	.word	0x08001451
 800141c:	0800145b 	.word	0x0800145b
 8001420:	08001465 	.word	0x08001465
 8001424:	0800146f 	.word	0x0800146f
	{
		case 1:
			uart->huart -> Instance = USART1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <UART_Select+0x9c>)
 800142e:	601a      	str	r2, [r3, #0]
			break;
 8001430:	e024      	b.n	800147c <UART_Select+0x8c>
		case 2:
			uart->huart -> Instance = USART2;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <UART_Select+0xa0>)
 8001438:	601a      	str	r2, [r3, #0]
			break;
 800143a:	e01f      	b.n	800147c <UART_Select+0x8c>
		case 3:
			uart->huart -> Instance = USART3;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <UART_Select+0xa4>)
 8001442:	601a      	str	r2, [r3, #0]
			break;
 8001444:	e01a      	b.n	800147c <UART_Select+0x8c>
		case 4:
			uart->huart -> Instance = UART4;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <UART_Select+0xa8>)
 800144c:	601a      	str	r2, [r3, #0]
			break;
 800144e:	e015      	b.n	800147c <UART_Select+0x8c>
		case 5:
			uart->huart -> Instance = UART5;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <UART_Select+0xac>)
 8001456:	601a      	str	r2, [r3, #0]
			break;
 8001458:	e010      	b.n	800147c <UART_Select+0x8c>
		case 6:
			uart->huart -> Instance = USART6;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <UART_Select+0xb0>)
 8001460:	601a      	str	r2, [r3, #0]
			break;
 8001462:	e00b      	b.n	800147c <UART_Select+0x8c>
		case 7:
			uart->huart -> Instance = UART7;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <UART_Select+0xb4>)
 800146a:	601a      	str	r2, [r3, #0]
			break;
 800146c:	e006      	b.n	800147c <UART_Select+0x8c>
		case 8:
			uart->huart -> Instance = UART8;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <UART_Select+0xb8>)
 8001474:	601a      	str	r2, [r3, #0]
			break;
 8001476:	e001      	b.n	800147c <UART_Select+0x8c>
		default:
			return INVALID_UART_NUM;
 8001478:	2305      	movs	r3, #5
 800147a:	e000      	b.n	800147e <UART_Select+0x8e>
	}

	return UART_OK;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40011000 	.word	0x40011000
 8001490:	40004400 	.word	0x40004400
 8001494:	40004800 	.word	0x40004800
 8001498:	40004c00 	.word	0x40004c00
 800149c:	40005000 	.word	0x40005000
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40007800 	.word	0x40007800
 80014a8:	40007c00 	.word	0x40007c00

080014ac <UART_Baud_Rate_Select>:

// UART_Baud_Rate_Select configures the baud rate from the one specified in baudrate
static UART_Return_et UART_Baud_Rate_Select(UART_st* uart)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	// Baud rate must be between 123 Bits/s and 500 KBits/s, stated in .ioc requirements
	if(uart->baudrate < MIN_UART_BAUDRATE || uart->baudrate > MAX_UART_BAUDRATE){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b7a      	cmp	r3, #122	; 0x7a
 80014ba:	d904      	bls.n	80014c6 <UART_Baud_Rate_Select+0x1a>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <UART_Baud_Rate_Select+0x38>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <UART_Baud_Rate_Select+0x1e>
		return BAUDRATE_OUT_OF_BOUNDS;
 80014c6:	2302      	movs	r3, #2
 80014c8:	e005      	b.n	80014d6 <UART_Baud_Rate_Select+0x2a>
	}

	uart->huart->Init.BaudRate = uart->baudrate;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6892      	ldr	r2, [r2, #8]
 80014d2:	605a      	str	r2, [r3, #4]

	return UART_OK;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	0007a120 	.word	0x0007a120

080014e8 <UART_Datasize_Select>:

// UART_Datasize_Select configures the data size from a UART_Datasize_et
static UART_Return_et UART_Datasize_Select(UART_st* uart)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	switch(uart->datasize)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7b1b      	ldrb	r3, [r3, #12]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d011      	beq.n	800151c <UART_Datasize_Select+0x34>
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	dc15      	bgt.n	8001528 <UART_Datasize_Select+0x40>
 80014fc:	2b07      	cmp	r3, #7
 80014fe:	d002      	beq.n	8001506 <UART_Datasize_Select+0x1e>
 8001500:	2b08      	cmp	r3, #8
 8001502:	d006      	beq.n	8001512 <UART_Datasize_Select+0x2a>
 8001504:	e010      	b.n	8001528 <UART_Datasize_Select+0x40>
	{
		case UART_Datasize_7:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_7B;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150e:	609a      	str	r2, [r3, #8]
			break;
 8001510:	e00c      	b.n	800152c <UART_Datasize_Select+0x44>
		case UART_Datasize_8:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
			break;
 800151a:	e007      	b.n	800152c <UART_Datasize_Select+0x44>
		case UART_Datasize_9:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_9B;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001524:	609a      	str	r2, [r3, #8]
			break;
 8001526:	e001      	b.n	800152c <UART_Datasize_Select+0x44>
		default:
			return INVALID_DATASIZE;
 8001528:	2306      	movs	r3, #6
 800152a:	e000      	b.n	800152e <UART_Datasize_Select+0x46>
	}

	return UART_OK;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <UART_Mode_Select>:

// UART_Mode_Select configures the mode based on a UART_Mode_et
static UART_Return_et UART_Mode_Select(UART_st* uart)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	switch(uart->mode)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7b5b      	ldrb	r3, [r3, #13]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d010      	beq.n	800156c <UART_Mode_Select+0x32>
 800154a:	2b03      	cmp	r3, #3
 800154c:	dc13      	bgt.n	8001576 <UART_Mode_Select+0x3c>
 800154e:	2b01      	cmp	r3, #1
 8001550:	d002      	beq.n	8001558 <UART_Mode_Select+0x1e>
 8001552:	2b02      	cmp	r3, #2
 8001554:	d005      	beq.n	8001562 <UART_Mode_Select+0x28>
 8001556:	e00e      	b.n	8001576 <UART_Mode_Select+0x3c>
	{
		case UART_RX:
			uart->huart -> Init.Mode = UART_MODE_RX;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2204      	movs	r2, #4
 800155e:	615a      	str	r2, [r3, #20]
			break;
 8001560:	e00b      	b.n	800157a <UART_Mode_Select+0x40>
		case UART_TX:
			uart->huart -> Init.Mode = UART_MODE_TX;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2208      	movs	r2, #8
 8001568:	615a      	str	r2, [r3, #20]
			break;
 800156a:	e006      	b.n	800157a <UART_Mode_Select+0x40>
		case UART_TX_RX:
			uart->huart -> Init.Mode = UART_MODE_TX_RX;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	220c      	movs	r2, #12
 8001572:	615a      	str	r2, [r3, #20]
			break;
 8001574:	e001      	b.n	800157a <UART_Mode_Select+0x40>
		default:
			return INVALID_MODE;
 8001576:	2303      	movs	r3, #3
 8001578:	e000      	b.n	800157c <UART_Mode_Select+0x42>
	}

	return UART_OK;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <UART_MSB_Select>:

// UART_MSB_Select configures the bit position based on a UART_Bit_Position_et
static UART_Return_et UART_MSB_Select(UART_st* uart)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	switch(uart->bit_position){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7b9b      	ldrb	r3, [r3, #14]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d002      	beq.n	800159e <UART_MSB_Select+0x16>
 8001598:	2b02      	cmp	r3, #2
 800159a:	d005      	beq.n	80015a8 <UART_MSB_Select+0x20>
 800159c:	e00e      	b.n	80015bc <UART_MSB_Select+0x34>
		case LSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80015a6:	e00b      	b.n	80015c0 <UART_MSB_Select+0x38>
		case MSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
			uart->huart -> AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015b8:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 80015ba:	e001      	b.n	80015c0 <UART_MSB_Select+0x38>
		default:
			return INVALID_BIT_POSITION;
 80015bc:	2304      	movs	r3, #4
 80015be:	e000      	b.n	80015c2 <UART_MSB_Select+0x3a>
	}

	return UART_OK;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <UART_Default_Configs>:

// Current configurations that are not being modified
static void UART_Default_Configs(UART_st* uart)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	uart->huart -> Init.StopBits = UART_STOPBITS_1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
	uart->huart -> Init.Parity = UART_PARITY_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
	uart->huart -> Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
	uart->huart -> Init.OverSampling = UART_OVERSAMPLING_16;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
	uart->huart -> Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <UART_Init>:

/*------------- PUBLIC FUNCTION DEFINITIONS ------------- */

UART_Return_et UART_Init(UART_st* uart)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	UART_Return_et response;

	response = UART_Select(uart);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff feec 	bl	80013f0 <UART_Select>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <UART_Init+0x1c>
		return response;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	e035      	b.n	8001692 <UART_Init+0x88>
	}

	response = UART_Baud_Rate_Select(uart);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff40 	bl	80014ac <UART_Baud_Rate_Select>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d001      	beq.n	800163a <UART_Init+0x30>
		return response;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	e02b      	b.n	8001692 <UART_Init+0x88>
	}

	response = UART_Datasize_Select(uart);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff54 	bl	80014e8 <UART_Datasize_Select>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d001      	beq.n	800164e <UART_Init+0x44>
		return response;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	e021      	b.n	8001692 <UART_Init+0x88>
	}

	response = UART_Mode_Select(uart);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff73 	bl	800153a <UART_Mode_Select>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <UART_Init+0x58>
		return response;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	e017      	b.n	8001692 <UART_Init+0x88>
	}

	response = UART_MSB_Select(uart);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff90 	bl	8001588 <UART_MSB_Select>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <UART_Init+0x6c>
		return response;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	e00d      	b.n	8001692 <UART_Init+0x88>
	}

	UART_Default_Configs(uart);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa9 	bl	80015ce <UART_Default_Configs>

	if (HAL_UART_Init(uart->huart) != HAL_OK) { Error_Handler(); }
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fcc3 	bl	800400c <HAL_UART_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <UART_Init+0x86>
 800168c:	f7ff fc0c 	bl	8000ea8 <Error_Handler>

	return UART_OK;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <UART_Transmit>:

// Uses the HAL UART Transmit to transmit a buffer's contents over the channel specified in the uart struct
UART_Return_et UART_Transmit(UART_st* uart, uint8_t tx_buf[], uint8_t buf_len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tx_response;

	tx_response = HAL_UART_Transmit(uart->huart, tx_buf, buf_len, TIMEOUT);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	f002 fcf7 	bl	80040a8 <HAL_UART_Transmit>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
	if (tx_response != HAL_OK) {
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <UART_Transmit+0x2e>
		return TRANSMIT_FAILED;
 80016c4:	2307      	movs	r3, #7
 80016c6:	e000      	b.n	80016ca <UART_Transmit+0x30>
	}

	return UART_OK;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <UART_Receive>:

// TODO: check the rx_buf dataframe being sent (casting currently)
UART_Return_et UART_Receive(UART_st* uart, uint8_t rx_buf[], uint8_t buf_len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rx_response;

	rx_response = HAL_UART_Receive(uart->huart, rx_buf, buf_len, TIMEOUT);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	f002 fd5e 	bl	80041ae <HAL_UART_Receive>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
	if (rx_response != HAL_OK) {
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <UART_Receive+0x2e>
		return RECEIVE_FAILED;
 80016fc:	2308      	movs	r3, #8
 80016fe:	e000      	b.n	8001702 <UART_Receive+0x30>
	}

	return UART_OK;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001712:	490e      	ldr	r1, [pc, #56]	; (800174c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001728:	4c0b      	ldr	r4, [pc, #44]	; (8001758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001736:	f7ff fe49 	bl	80013cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173a:	f003 fa1d 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff f8df 	bl	8000900 <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001750:	08007abc 	.word	0x08007abc
  ldr r2, =_sbss
 8001754:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001758:	20000594 	.word	0x20000594

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>

0800175e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001762:	2003      	movs	r0, #3
 8001764:	f001 f974 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001768:	200f      	movs	r0, #15
 800176a:	f000 f805 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176e:	f7ff fc6f 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f98f 	bl	8002aba <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b4:	f001 f957 	bl	8002a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000016c 	.word	0x2000016c
 80017d0:	20000174 	.word	0x20000174
 80017d4:	20000170 	.word	0x20000170

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000174 	.word	0x20000174
 80017fc:	20000580 	.word	0x20000580

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000580 	.word	0x20000580

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000174 	.word	0x20000174

08001860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e031      	b.n	80018da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fc0a 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d116      	bne.n	80018cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_ADC_Init+0x84>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f970 	bl	8001b94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
 80018ca:	e001      	b.n	80018d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	ffffeefd 	.word	0xffffeefd

080018e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1c>
 8001900:	2302      	movs	r3, #2
 8001902:	e136      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x28a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b09      	cmp	r3, #9
 8001912:	d93a      	bls.n	800198a <HAL_ADC_ConfigChannel+0xa2>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800191c:	d035      	beq.n	800198a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	3b1e      	subs	r3, #30
 8001934:	2207      	movs	r2, #7
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	400a      	ands	r2, r1
 8001942:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a8d      	ldr	r2, [pc, #564]	; (8001b80 <HAL_ADC_ConfigChannel+0x298>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	061a      	lsls	r2, r3, #24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001962:	e035      	b.n	80019d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68d9      	ldr	r1, [r3, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	4603      	mov	r3, r0
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4403      	add	r3, r0
 800197c:	3b1e      	subs	r3, #30
 800197e:	409a      	lsls	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001988:	e022      	b.n	80019d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	2207      	movs	r2, #7
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43da      	mvns	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	400a      	ands	r2, r1
 80019ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6919      	ldr	r1, [r3, #16]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	4603      	mov	r3, r0
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4403      	add	r3, r0
 80019c6:	409a      	lsls	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d824      	bhi.n	8001a22 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b05      	subs	r3, #5
 80019ea:	221f      	movs	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43da      	mvns	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	400a      	ands	r2, r1
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	3b05      	subs	r3, #5
 8001a14:	fa00 f203 	lsl.w	r2, r0, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a20:	e04c      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d824      	bhi.n	8001a74 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b23      	subs	r3, #35	; 0x23
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	400a      	ands	r2, r1
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	3b23      	subs	r3, #35	; 0x23
 8001a66:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
 8001a72:	e023      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	3b41      	subs	r3, #65	; 0x41
 8001a86:	221f      	movs	r2, #31
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	400a      	ands	r2, r1
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b41      	subs	r3, #65	; 0x41
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_ADC_ConfigChannel+0x29c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10a      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1f4>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ada:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_ADC_ConfigChannel+0x29c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10f      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x21e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d10b      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001af8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b04:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_ADC_ConfigChannel+0x29c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12b      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x280>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_ADC_ConfigChannel+0x298>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x23a>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d122      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b2c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_ADC_ConfigChannel+0x298>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_ADC_ConfigChannel+0x2a4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0c9a      	lsrs	r2, r3, #18
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	10000012 	.word	0x10000012
 8001b84:	40012000 	.word	0x40012000
 8001b88:	40012300 	.word	0x40012300
 8001b8c:	2000016c 	.word	0x2000016c
 8001b90:	431bde83 	.word	0x431bde83

08001b94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b9c:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <ADC_Init+0x1ec>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a77      	ldr	r2, [pc, #476]	; (8001d80 <ADC_Init+0x1ec>)
 8001ba2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ba6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ba8:	4b75      	ldr	r3, [pc, #468]	; (8001d80 <ADC_Init+0x1ec>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4973      	ldr	r1, [pc, #460]	; (8001d80 <ADC_Init+0x1ec>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	021a      	lsls	r2, r3, #8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <ADC_Init+0x1f0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e00f      	b.n	8001c8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0202 	bic.w	r2, r2, #2
 8001c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	005a      	lsls	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	035a      	lsls	r2, r3, #13
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	e007      	b.n	8001d04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	051a      	lsls	r2, r3, #20
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6899      	ldr	r1, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d46:	025a      	lsls	r2, r3, #9
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6899      	ldr	r1, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	029a      	lsls	r2, r3, #10
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	0f000001 	.word	0x0f000001

08001d88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0ed      	b.n	8001f76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff f9e2 	bl	8001170 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff fd20 	bl	8001800 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc2:	e012      	b.n	8001dea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dc4:	f7ff fd1c 	bl	8001800 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d90b      	bls.n	8001dea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2205      	movs	r2, #5
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0c5      	b.n	8001f76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0e5      	beq.n	8001dc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0202 	bic.w	r2, r2, #2
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff fcfa 	bl	8001800 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e0e:	e012      	b.n	8001e36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e10:	f7ff fcf6 	bl	8001800 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b0a      	cmp	r3, #10
 8001e1c:	d90b      	bls.n	8001e36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e09f      	b.n	8001f76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e5      	bne.n	8001e10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7e5b      	ldrb	r3, [r3, #25]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e007      	b.n	8001e98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e9b      	ldrb	r3, [r3, #26]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e007      	b.n	8001ec2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0220 	bic.w	r2, r2, #32
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7edb      	ldrb	r3, [r3, #27]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d108      	bne.n	8001edc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0210 	bic.w	r2, r2, #16
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e007      	b.n	8001eec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0210 	orr.w	r2, r2, #16
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d108      	bne.n	8001f06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e007      	b.n	8001f16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0208 	bic.w	r2, r2, #8
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7f5b      	ldrb	r3, [r3, #29]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0204 	orr.w	r2, r2, #4
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e007      	b.n	8001f40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	ea42 0103 	orr.w	r1, r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d003      	beq.n	8001fa6 <HAL_CAN_ConfigFilter+0x26>
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f040 80c7 	bne.w	8002134 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a69      	ldr	r2, [pc, #420]	; (8002150 <HAL_CAN_ConfigFilter+0x1d0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d001      	beq.n	8001fb4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fb2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a63      	ldr	r2, [pc, #396]	; (8002154 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d123      	bne.n	8002062 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	401a      	ands	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800203c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3248      	adds	r2, #72	; 0x48
 8002042:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002056:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002058:	6979      	ldr	r1, [r7, #20]
 800205a:	3348      	adds	r3, #72	; 0x48
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d122      	bne.n	80020b0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800208a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3248      	adds	r2, #72	; 0x48
 8002090:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a6:	6979      	ldr	r1, [r7, #20]
 80020a8:	3348      	adds	r3, #72	; 0x48
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020ca:	e007      	b.n	80020dc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020f6:	e007      	b.n	8002108 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	431a      	orrs	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002126:	f023 0201 	bic.w	r2, r3, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e006      	b.n	8002142 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40003400 	.word	0x40003400
 8002154:	40006400 	.word	0x40006400

08002158 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d12e      	bne.n	80021ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002184:	f7ff fb3c 	bl	8001800 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800218a:	e012      	b.n	80021b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800218c:	f7ff fb38 	bl	8001800 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b0a      	cmp	r3, #10
 8002198:	d90b      	bls.n	80021b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2205      	movs	r2, #5
 80021aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e012      	b.n	80021d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e5      	bne.n	800218c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e006      	b.n	80021d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
  }
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d003      	beq.n	8002204 <HAL_CAN_GetRxMessage+0x24>
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80f3 	bne.w	80023ea <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10e      	bne.n	8002228 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0e7      	b.n	80023f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0d8      	b.n	80023f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	331b      	adds	r3, #27
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	4413      	add	r3, r2
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0204 	and.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	331b      	adds	r3, #27
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e00b      	b.n	8002296 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	331b      	adds	r3, #27
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4413      	add	r3, r2
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	331b      	adds	r3, #27
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4413      	add	r3, r2
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0202 	and.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	331b      	adds	r3, #27
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	331b      	adds	r3, #27
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4413      	add	r3, r2
 80022d0:	3304      	adds	r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	331b      	adds	r3, #27
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	3304      	adds	r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0a1a      	lsrs	r2, r3, #8
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0c1a      	lsrs	r2, r3, #16
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	3302      	adds	r3, #2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	4413      	add	r3, r2
 8002348:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0e1a      	lsrs	r2, r3, #24
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	3303      	adds	r3, #3
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3304      	adds	r3, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0a1a      	lsrs	r2, r3, #8
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	3305      	adds	r3, #5
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0c1a      	lsrs	r2, r3, #16
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	3306      	adds	r3, #6
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e1a      	lsrs	r2, r3, #24
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	3307      	adds	r3, #7
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	60da      	str	r2, [r3, #12]
 80023d4:	e007      	b.n	80023e6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e006      	b.n	80023f8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d002      	beq.n	8002422 <HAL_CAN_ActivateNotification+0x1e>
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d109      	bne.n	8002436 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6959      	ldr	r1, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e006      	b.n	8002444 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07c      	beq.n	8002590 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d023      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f983 	bl	80027be <HAL_CAN_TxMailbox0CompleteCallback>
 80024b8:	e016      	b.n	80024e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	e00c      	b.n	80024e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e002      	b.n	80024e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f989 	bl	80027fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d024      	beq.n	800253c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f963 	bl	80027d2 <HAL_CAN_TxMailbox1CompleteCallback>
 800250c:	e016      	b.n	800253c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	e00c      	b.n	800253c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	e002      	b.n	800253c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f969 	bl	800280e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d024      	beq.n	8002590 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800254e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f943 	bl	80027e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002560:	e016      	b.n	8002590 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e00c      	b.n	8002590 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	e002      	b.n	8002590 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f949 	bl	8002822 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2210      	movs	r2, #16
 80025b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f930 	bl	8002836 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fc3c 	bl	8000e6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2210      	movs	r2, #16
 8002616:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2208      	movs	r2, #8
 8002632:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f912 	bl	800285e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8f9 	bl	800284a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2210      	movs	r2, #16
 8002672:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8fc 	bl	8002872 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2208      	movs	r2, #8
 8002694:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8f5 	bl	8002886 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d07b      	beq.n	800279e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d072      	beq.n	8002796 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270a:	2b00      	cmp	r3, #0
 800270c:	d043      	beq.n	8002796 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d03e      	beq.n	8002796 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800271e:	2b60      	cmp	r3, #96	; 0x60
 8002720:	d02b      	beq.n	800277a <HAL_CAN_IRQHandler+0x32a>
 8002722:	2b60      	cmp	r3, #96	; 0x60
 8002724:	d82e      	bhi.n	8002784 <HAL_CAN_IRQHandler+0x334>
 8002726:	2b50      	cmp	r3, #80	; 0x50
 8002728:	d022      	beq.n	8002770 <HAL_CAN_IRQHandler+0x320>
 800272a:	2b50      	cmp	r3, #80	; 0x50
 800272c:	d82a      	bhi.n	8002784 <HAL_CAN_IRQHandler+0x334>
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d019      	beq.n	8002766 <HAL_CAN_IRQHandler+0x316>
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d826      	bhi.n	8002784 <HAL_CAN_IRQHandler+0x334>
 8002736:	2b30      	cmp	r3, #48	; 0x30
 8002738:	d010      	beq.n	800275c <HAL_CAN_IRQHandler+0x30c>
 800273a:	2b30      	cmp	r3, #48	; 0x30
 800273c:	d822      	bhi.n	8002784 <HAL_CAN_IRQHandler+0x334>
 800273e:	2b10      	cmp	r3, #16
 8002740:	d002      	beq.n	8002748 <HAL_CAN_IRQHandler+0x2f8>
 8002742:	2b20      	cmp	r3, #32
 8002744:	d005      	beq.n	8002752 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002746:	e01d      	b.n	8002784 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002750:	e019      	b.n	8002786 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800275a:	e014      	b.n	8002786 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	f043 0320 	orr.w	r3, r3, #32
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002764:	e00f      	b.n	8002786 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276e:	e00a      	b.n	8002786 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002778:	e005      	b.n	8002786 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002782:	e000      	b.n	8002786 <HAL_CAN_IRQHandler+0x336>
            break;
 8002784:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002794:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2204      	movs	r2, #4
 800279c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f872 	bl	800289a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	; 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	05fa0000 	.word	0x05fa0000

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e175      	b.n	8002de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8164 	bne.w	8002dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x56>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80be 	beq.w	8002dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a65      	ldr	r2, [pc, #404]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c76:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <HAL_GPIO_Init+0x328>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_GPIO_Init+0x32c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d037      	beq.n	8002d12 <HAL_GPIO_Init+0x23e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_GPIO_Init+0x23a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02b      	beq.n	8002d0a <HAL_GPIO_Init+0x236>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <HAL_GPIO_Init+0x338>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d025      	beq.n	8002d06 <HAL_GPIO_Init+0x232>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <HAL_GPIO_Init+0x33c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01f      	beq.n	8002d02 <HAL_GPIO_Init+0x22e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a53      	ldr	r2, [pc, #332]	; (8002e14 <HAL_GPIO_Init+0x340>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d019      	beq.n	8002cfe <HAL_GPIO_Init+0x22a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_GPIO_Init+0x344>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a51      	ldr	r2, [pc, #324]	; (8002e1c <HAL_GPIO_Init+0x348>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_GPIO_Init+0x222>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a50      	ldr	r2, [pc, #320]	; (8002e20 <HAL_GPIO_Init+0x34c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <HAL_GPIO_Init+0x21e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4f      	ldr	r2, [pc, #316]	; (8002e24 <HAL_GPIO_Init+0x350>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_GPIO_Init+0x21a>
 8002cea:	2309      	movs	r3, #9
 8002cec:	e012      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cee:	230a      	movs	r3, #10
 8002cf0:	e010      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	e00e      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e00c      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cfa:	2306      	movs	r3, #6
 8002cfc:	e00a      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cfe:	2305      	movs	r3, #5
 8002d00:	e008      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d12:	2300      	movs	r3, #0
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	f002 0203 	and.w	r2, r2, #3
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d24:	4935      	ldr	r1, [pc, #212]	; (8002dfc <HAL_GPIO_Init+0x328>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5c:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d80:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002daa:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	f67f ae86 	bls.w	8002af4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40021800 	.word	0x40021800
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40022400 	.word	0x40022400
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4013      	ands	r3, r2
 8002e76:	041a      	lsls	r2, r3, #16
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	400b      	ands	r3, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e29b      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8087 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb8:	4b96      	ldr	r3, [pc, #600]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d00c      	beq.n	8002ede <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec4:	4b93      	ldr	r3, [pc, #588]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d112      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62>
 8002ed0:	4b90      	ldr	r3, [pc, #576]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002edc:	d10b      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ede:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d06c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x130>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d168      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e275      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x7a>
 8002f00:	4b84      	ldr	r3, [pc, #528]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a83      	ldr	r2, [pc, #524]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e02e      	b.n	8002f6c <HAL_RCC_OscConfig+0xd8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x9c>
 8002f16:	4b7f      	ldr	r3, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7e      	ldr	r2, [pc, #504]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b7c      	ldr	r3, [pc, #496]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7b      	ldr	r2, [pc, #492]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xd8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0xc0>
 8002f3a:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a75      	ldr	r2, [pc, #468]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b73      	ldr	r3, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a72      	ldr	r2, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xd8>
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6b      	ldr	r2, [pc, #428]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fc44 	bl	8001800 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fc40 	bl	8001800 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e229      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b61      	ldr	r3, [pc, #388]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xe8>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fc30 	bl	8001800 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fc2c 	bl	8001800 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e215      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	4b57      	ldr	r3, [pc, #348]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x110>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d069      	beq.n	80030a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd2:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x190>
 8002fea:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x17a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1e9      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	493d      	ldr	r1, [pc, #244]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	e040      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a38      	ldr	r2, [pc, #224]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe fbe2 	bl	8001800 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe fbde 	bl	8001800 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1c7      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4929      	ldr	r1, [pc, #164]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
 8003072:	e018      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a26      	ldr	r2, [pc, #152]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fbbe 	bl	8001800 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7fe fbba 	bl	8001800 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1a3      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d038      	beq.n	8003124 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d019      	beq.n	80030ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe fb9b 	bl	8001800 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe fb97 	bl	8001800 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e180      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x23a>
 80030ec:	e01a      	b.n	8003124 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_RCC_OscConfig+0x280>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe fb81 	bl	8001800 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003102:	f7fe fb7d 	bl	8001800 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d903      	bls.n	8003118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e166      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
 8003114:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	4b92      	ldr	r3, [pc, #584]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 800311a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ee      	bne.n	8003102 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a4 	beq.w	800327a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b8c      	ldr	r3, [pc, #560]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a88      	ldr	r2, [pc, #544]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b86      	ldr	r3, [pc, #536]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315a:	4b83      	ldr	r3, [pc, #524]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003166:	4b80      	ldr	r3, [pc, #512]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7f      	ldr	r2, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe fb45 	bl	8001800 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe fb41 	bl	8001800 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e12a      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318c:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x31a>
 80031a0:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a6f      	ldr	r2, [pc, #444]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	e02d      	b.n	800320a <HAL_RCC_OscConfig+0x376>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x33c>
 80031b6:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70
 80031c2:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x376>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x35e>
 80031d8:	4b62      	ldr	r3, [pc, #392]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a61      	ldr	r2, [pc, #388]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a5e      	ldr	r2, [pc, #376]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x376>
 80031f2:	4b5c      	ldr	r3, [pc, #368]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe faf5 	bl	8001800 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe faf1 	bl	8001800 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0d8      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x386>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe fadf 	bl	8001800 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe fadb 	bl	8001800 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0c2      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a3c      	ldr	r2, [pc, #240]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80ae 	beq.w	80033e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d06d      	beq.n	800336c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d14b      	bne.n	8003330 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe faac 	bl	8001800 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe faa8 	bl	8001800 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e091      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	071b      	lsls	r3, r3, #28
 80032f6:	491b      	ldr	r1, [pc, #108]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fa7a 	bl	8001800 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fa76 	bl	8001800 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e05f      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x47c>
 800332e:	e057      	b.n	80033e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fa60 	bl	8001800 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe fa5c 	bl	8001800 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e045      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x4b0>
 8003362:	e03d      	b.n	80033e0 <HAL_RCC_OscConfig+0x54c>
 8003364:	40023800 	.word	0x40023800
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_RCC_OscConfig+0x558>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d030      	beq.n	80033dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d129      	bne.n	80033dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d122      	bne.n	80033dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d119      	bne.n	80033dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d10f      	bne.n	80033dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800

080033f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d0      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d910      	bls.n	8003438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 020f 	bic.w	r2, r3, #15
 800341e:	4965      	ldr	r1, [pc, #404]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b8      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800345a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 800346e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	494d      	ldr	r1, [pc, #308]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d040      	beq.n	8003514 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d115      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e073      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06b      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4936      	ldr	r1, [pc, #216]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e4:	f7fe f98c 	bl	8001800 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fe f988 	bl	8001800 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e053      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d210      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 020f 	bic.w	r2, r3, #15
 800352a:	4922      	ldr	r1, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e032      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4916      	ldr	r1, [pc, #88]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003582:	f000 f821 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490a      	ldr	r1, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x1cc>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1d0>)
 800359c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1d4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe f8e8 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023c00 	.word	0x40023c00
 80035b8:	40023800 	.word	0x40023800
 80035bc:	080076b8 	.word	0x080076b8
 80035c0:	2000016c 	.word	0x2000016c
 80035c4:	20000170 	.word	0x20000170

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035cc:	b090      	sub	sp, #64	; 0x40
 80035ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	2300      	movs	r3, #0
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d8:	2300      	movs	r3, #0
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d00d      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x40>
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	f200 80a1 	bhi.w	8003734 <HAL_RCC_GetSysClockFreq+0x16c>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x34>
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x3a>
 80035fa:	e09b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_GetSysClockFreq+0x184>)
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003600:	e09b      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003606:	e098      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003608:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003612:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	099b      	lsrs	r3, r3, #6
 8003624:	2200      	movs	r2, #0
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	627a      	str	r2, [r7, #36]	; 0x24
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003630:	2100      	movs	r1, #0
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003634:	fb03 f201 	mul.w	r2, r3, r1
 8003638:	2300      	movs	r3, #0
 800363a:	fb00 f303 	mul.w	r3, r0, r3
 800363e:	4413      	add	r3, r2
 8003640:	4a43      	ldr	r2, [pc, #268]	; (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003642:	fba0 1202 	umull	r1, r2, r0, r2
 8003646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003648:	460a      	mov	r2, r1
 800364a:	62ba      	str	r2, [r7, #40]	; 0x28
 800364c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364e:	4413      	add	r3, r2
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	2200      	movs	r2, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	61fa      	str	r2, [r7, #28]
 800365a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003662:	f7fc fe45 	bl	80002f0 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366e:	e053      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	2200      	movs	r2, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	617a      	str	r2, [r7, #20]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003682:	f04f 0b00 	mov.w	fp, #0
 8003686:	4652      	mov	r2, sl
 8003688:	465b      	mov	r3, fp
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	0159      	lsls	r1, r3, #5
 8003694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003698:	0150      	lsls	r0, r2, #5
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	ebb2 080a 	subs.w	r8, r2, sl
 80036a2:	eb63 090b 	sbc.w	r9, r3, fp
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036ba:	ebb2 0408 	subs.w	r4, r2, r8
 80036be:	eb63 0509 	sbc.w	r5, r3, r9
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	00eb      	lsls	r3, r5, #3
 80036cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d0:	00e2      	lsls	r2, r4, #3
 80036d2:	4614      	mov	r4, r2
 80036d4:	461d      	mov	r5, r3
 80036d6:	eb14 030a 	adds.w	r3, r4, sl
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	eb45 030b 	adc.w	r3, r5, fp
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ee:	4629      	mov	r1, r5
 80036f0:	028b      	lsls	r3, r1, #10
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f8:	4621      	mov	r1, r4
 80036fa:	028a      	lsls	r2, r1, #10
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	2200      	movs	r2, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800370c:	f7fc fdf0 	bl	80002f0 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	3301      	adds	r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetSysClockFreq+0x184>)
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800373c:	4618      	mov	r0, r3
 800373e:	3740      	adds	r7, #64	; 0x40
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	00f42400 	.word	0x00f42400
 8003750:	017d7840 	.word	0x017d7840

08003754 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_RCC_GetHCLKFreq+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	2000016c 	.word	0x2000016c

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003770:	f7ff fff0 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	080076c8 	.word	0x080076c8

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003798:	f7ff ffdc 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0b5b      	lsrs	r3, r3, #13
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	080076c8 	.word	0x080076c8

080037bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037e4:	4b69      	ldr	r3, [pc, #420]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a68      	ldr	r2, [pc, #416]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037ee:	6093      	str	r3, [r2, #8]
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	4964      	ldr	r1, [pc, #400]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	4959      	ldr	r1, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003836:	2301      	movs	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d017      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	494a      	ldr	r1, [pc, #296]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 808b 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a39      	ldr	r2, [pc, #228]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fd ff9c 	bl	8001800 <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fd ff98 	bl	8001800 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e38f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d035      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	429a      	cmp	r2, r3
 8003906:	d02e      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d114      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd ff60 	bl	8001800 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fd ff5c 	bl	8001800 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e351      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ee      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003972:	d111      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003982:	400b      	ands	r3, r1
 8003984:	4901      	ldr	r1, [pc, #4]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
 800398a:	e00b      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	0ffffcff 	.word	0x0ffffcff
 8003998:	4bac      	ldr	r3, [pc, #688]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4aab      	ldr	r2, [pc, #684]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	4ba9      	ldr	r3, [pc, #676]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	49a6      	ldr	r1, [pc, #664]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039c2:	4ba2      	ldr	r3, [pc, #648]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	4aa0      	ldr	r2, [pc, #640]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039d2:	4b9e      	ldr	r3, [pc, #632]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	499b      	ldr	r1, [pc, #620]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f0:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	4993      	ldr	r1, [pc, #588]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a12:	4b8e      	ldr	r3, [pc, #568]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a20:	498a      	ldr	r1, [pc, #552]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a34:	4b85      	ldr	r3, [pc, #532]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	4982      	ldr	r1, [pc, #520]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a56:	4b7d      	ldr	r3, [pc, #500]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4979      	ldr	r1, [pc, #484]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a78:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4971      	ldr	r1, [pc, #452]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a9a:	4b6c      	ldr	r3, [pc, #432]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f023 020c 	bic.w	r2, r3, #12
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	4968      	ldr	r1, [pc, #416]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003abc:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4960      	ldr	r1, [pc, #384]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	4957      	ldr	r1, [pc, #348]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b00:	4b52      	ldr	r3, [pc, #328]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	494f      	ldr	r1, [pc, #316]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4946      	ldr	r1, [pc, #280]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b52:	493e      	ldr	r1, [pc, #248]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b66:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	4935      	ldr	r1, [pc, #212]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	492d      	ldr	r1, [pc, #180]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb8:	4924      	ldr	r1, [pc, #144]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bea:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf8:	4914      	ldr	r1, [pc, #80]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1c:	490b      	ldr	r1, [pc, #44]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	4902      	ldr	r1, [pc, #8]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c48:	e002      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5c:	4b8a      	ldr	r3, [pc, #552]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	4986      	ldr	r1, [pc, #536]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c80:	4b81      	ldr	r3, [pc, #516]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c90:	497d      	ldr	r1, [pc, #500]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d006      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80d6 	beq.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cac:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a75      	ldr	r2, [pc, #468]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb8:	f7fd fda2 	bl	8001800 <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cc0:	f7fd fd9e 	bl	8001800 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e195      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d021      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11d      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	0e1b      	lsrs	r3, r3, #24
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	019a      	lsls	r2, r3, #6
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	071b      	lsls	r3, r3, #28
 8003d26:	4958      	ldr	r1, [pc, #352]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d58:	d129      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d68:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6e:	0f1b      	lsrs	r3, r3, #28
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	019a      	lsls	r2, r3, #6
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	071b      	lsls	r3, r3, #28
 8003d8e:	493e      	ldr	r1, [pc, #248]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d96:	4b3c      	ldr	r3, [pc, #240]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9c:	f023 021f 	bic.w	r2, r3, #31
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4938      	ldr	r1, [pc, #224]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01d      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dba:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dce:	0f1b      	lsrs	r3, r3, #28
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	019a      	lsls	r2, r3, #6
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	431a      	orrs	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	071b      	lsls	r3, r3, #28
 8003dee:	4926      	ldr	r1, [pc, #152]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	019a      	lsls	r2, r3, #6
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	041b      	lsls	r3, r3, #16
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	491a      	ldr	r1, [pc, #104]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e32:	f7fd fce5 	bl	8001800 <HAL_GetTick>
 8003e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e3a:	f7fd fce1 	bl	8001800 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0d8      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	f040 80ce 	bne.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fcc8 	bl	8001800 <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e72:	e00b      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e74:	f7fd fcc4 	bl	8001800 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d904      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0bb      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e8c:	4b5e      	ldr	r3, [pc, #376]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e98:	d0ec      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d02e      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d12a      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ec2:	4b51      	ldr	r3, [pc, #324]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ed0:	4b4d      	ldr	r3, [pc, #308]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	0f1b      	lsrs	r3, r3, #28
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	071b      	lsls	r3, r3, #28
 8003ef6:	4944      	ldr	r1, [pc, #272]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003efe:	4b42      	ldr	r3, [pc, #264]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	493d      	ldr	r1, [pc, #244]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d022      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2c:	d11d      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f2e:	4b36      	ldr	r3, [pc, #216]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	0e1b      	lsrs	r3, r3, #24
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f3c:	4b32      	ldr	r3, [pc, #200]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	0f1b      	lsrs	r3, r3, #28
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	019a      	lsls	r2, r3, #6
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	061b      	lsls	r3, r3, #24
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	4929      	ldr	r1, [pc, #164]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d028      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	0e1b      	lsrs	r3, r3, #24
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4917      	ldr	r1, [pc, #92]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4911      	ldr	r1, [pc, #68]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fd fc14 	bl	8001800 <HAL_GetTick>
 8003fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fdc:	f7fd fc10 	bl	8001800 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e007      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffa:	d1ef      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800

0800400c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e040      	b.n	80040a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd f8f2 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f974 	bl	8004338 <UART_SetConfig>
 8004050:	4603      	mov	r3, r0
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e022      	b.n	80040a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fbcc 	bl	8004800 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fc53 	bl	8004944 <UART_CheckIdleState>
 800409e:	4603      	mov	r3, r0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d171      	bne.n	80041a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Transmit+0x24>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e06a      	b.n	80041a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2221      	movs	r2, #33	; 0x21
 80040dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040de:	f7fd fb8f 	bl	8001800 <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d108      	bne.n	8004110 <HAL_UART_Transmit+0x68>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e003      	b.n	8004118 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004118:	e02c      	b.n	8004174 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fc5a 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e038      	b.n	80041a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	3302      	adds	r3, #2
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	e007      	b.n	8004162 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3301      	adds	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1cc      	bne.n	800411a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2200      	movs	r2, #0
 8004188:	2140      	movs	r1, #64	; 0x40
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fc27 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e005      	b.n	80041a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08a      	sub	sp, #40	; 0x28
 80041b2:	af02      	add	r7, sp, #8
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	f040 80b1 	bne.w	800432c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_UART_Receive+0x28>
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e0a9      	b.n	800432e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2222      	movs	r2, #34	; 0x22
 80041e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041f0:	f7fd fb06 	bl	8001800 <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	d10e      	bne.n	800422e <HAL_UART_Receive+0x80>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_UART_Receive+0x76>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800421e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004222:	e02d      	b.n	8004280 <HAL_UART_Receive+0xd2>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	22ff      	movs	r2, #255	; 0xff
 8004228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800422c:	e028      	b.n	8004280 <HAL_UART_Receive+0xd2>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_UART_Receive+0xa4>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_UART_Receive+0x9a>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	22ff      	movs	r2, #255	; 0xff
 8004242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004246:	e01b      	b.n	8004280 <HAL_UART_Receive+0xd2>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	227f      	movs	r2, #127	; 0x7f
 800424c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004250:	e016      	b.n	8004280 <HAL_UART_Receive+0xd2>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425a:	d10d      	bne.n	8004278 <HAL_UART_Receive+0xca>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_UART_Receive+0xc0>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	227f      	movs	r2, #127	; 0x7f
 8004268:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800426c:	e008      	b.n	8004280 <HAL_UART_Receive+0xd2>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	223f      	movs	r2, #63	; 0x3f
 8004272:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004276:	e003      	b.n	8004280 <HAL_UART_Receive+0xd2>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004286:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Receive+0xf6>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80042ac:	e032      	b.n	8004314 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2120      	movs	r1, #32
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fb90 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e032      	b.n	800432e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	8a7b      	ldrh	r3, [r7, #18]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29a      	uxth	r2, r3
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	3302      	adds	r3, #2
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e00c      	b.n	8004302 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	8a7b      	ldrh	r3, [r7, #18]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4013      	ands	r3, r2
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3301      	adds	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1c6      	bne.n	80042ae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4ba6      	ldr	r3, [pc, #664]	; (80045fc <UART_SetConfig+0x2c4>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	6979      	ldr	r1, [r7, #20]
 800436c:	430b      	orrs	r3, r1
 800436e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a94      	ldr	r2, [pc, #592]	; (8004600 <UART_SetConfig+0x2c8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d120      	bne.n	80043f6 <UART_SetConfig+0xbe>
 80043b4:	4b93      	ldr	r3, [pc, #588]	; (8004604 <UART_SetConfig+0x2cc>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d816      	bhi.n	80043f0 <UART_SetConfig+0xb8>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0x90>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043e5 	.word	0x080043e5
 80043d0:	080043df 	.word	0x080043df
 80043d4:	080043eb 	.word	0x080043eb
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e150      	b.n	8004680 <UART_SetConfig+0x348>
 80043de:	2302      	movs	r3, #2
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e14d      	b.n	8004680 <UART_SetConfig+0x348>
 80043e4:	2304      	movs	r3, #4
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e14a      	b.n	8004680 <UART_SetConfig+0x348>
 80043ea:	2308      	movs	r3, #8
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e147      	b.n	8004680 <UART_SetConfig+0x348>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e144      	b.n	8004680 <UART_SetConfig+0x348>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a83      	ldr	r2, [pc, #524]	; (8004608 <UART_SetConfig+0x2d0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d132      	bne.n	8004466 <UART_SetConfig+0x12e>
 8004400:	4b80      	ldr	r3, [pc, #512]	; (8004604 <UART_SetConfig+0x2cc>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d828      	bhi.n	8004460 <UART_SetConfig+0x128>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0xdc>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004449 	.word	0x08004449
 8004418:	08004461 	.word	0x08004461
 800441c:	08004461 	.word	0x08004461
 8004420:	08004461 	.word	0x08004461
 8004424:	08004455 	.word	0x08004455
 8004428:	08004461 	.word	0x08004461
 800442c:	08004461 	.word	0x08004461
 8004430:	08004461 	.word	0x08004461
 8004434:	0800444f 	.word	0x0800444f
 8004438:	08004461 	.word	0x08004461
 800443c:	08004461 	.word	0x08004461
 8004440:	08004461 	.word	0x08004461
 8004444:	0800445b 	.word	0x0800445b
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e118      	b.n	8004680 <UART_SetConfig+0x348>
 800444e:	2302      	movs	r3, #2
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e115      	b.n	8004680 <UART_SetConfig+0x348>
 8004454:	2304      	movs	r3, #4
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e112      	b.n	8004680 <UART_SetConfig+0x348>
 800445a:	2308      	movs	r3, #8
 800445c:	77fb      	strb	r3, [r7, #31]
 800445e:	e10f      	b.n	8004680 <UART_SetConfig+0x348>
 8004460:	2310      	movs	r3, #16
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e10c      	b.n	8004680 <UART_SetConfig+0x348>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a68      	ldr	r2, [pc, #416]	; (800460c <UART_SetConfig+0x2d4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d120      	bne.n	80044b2 <UART_SetConfig+0x17a>
 8004470:	4b64      	ldr	r3, [pc, #400]	; (8004604 <UART_SetConfig+0x2cc>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800447a:	2b30      	cmp	r3, #48	; 0x30
 800447c:	d013      	beq.n	80044a6 <UART_SetConfig+0x16e>
 800447e:	2b30      	cmp	r3, #48	; 0x30
 8004480:	d814      	bhi.n	80044ac <UART_SetConfig+0x174>
 8004482:	2b20      	cmp	r3, #32
 8004484:	d009      	beq.n	800449a <UART_SetConfig+0x162>
 8004486:	2b20      	cmp	r3, #32
 8004488:	d810      	bhi.n	80044ac <UART_SetConfig+0x174>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <UART_SetConfig+0x15c>
 800448e:	2b10      	cmp	r3, #16
 8004490:	d006      	beq.n	80044a0 <UART_SetConfig+0x168>
 8004492:	e00b      	b.n	80044ac <UART_SetConfig+0x174>
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e0f2      	b.n	8004680 <UART_SetConfig+0x348>
 800449a:	2302      	movs	r3, #2
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e0ef      	b.n	8004680 <UART_SetConfig+0x348>
 80044a0:	2304      	movs	r3, #4
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e0ec      	b.n	8004680 <UART_SetConfig+0x348>
 80044a6:	2308      	movs	r3, #8
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e0e9      	b.n	8004680 <UART_SetConfig+0x348>
 80044ac:	2310      	movs	r3, #16
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e0e6      	b.n	8004680 <UART_SetConfig+0x348>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a56      	ldr	r2, [pc, #344]	; (8004610 <UART_SetConfig+0x2d8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d120      	bne.n	80044fe <UART_SetConfig+0x1c6>
 80044bc:	4b51      	ldr	r3, [pc, #324]	; (8004604 <UART_SetConfig+0x2cc>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044c6:	2bc0      	cmp	r3, #192	; 0xc0
 80044c8:	d013      	beq.n	80044f2 <UART_SetConfig+0x1ba>
 80044ca:	2bc0      	cmp	r3, #192	; 0xc0
 80044cc:	d814      	bhi.n	80044f8 <UART_SetConfig+0x1c0>
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d009      	beq.n	80044e6 <UART_SetConfig+0x1ae>
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d810      	bhi.n	80044f8 <UART_SetConfig+0x1c0>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <UART_SetConfig+0x1a8>
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d006      	beq.n	80044ec <UART_SetConfig+0x1b4>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x1c0>
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e0cc      	b.n	8004680 <UART_SetConfig+0x348>
 80044e6:	2302      	movs	r3, #2
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e0c9      	b.n	8004680 <UART_SetConfig+0x348>
 80044ec:	2304      	movs	r3, #4
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e0c6      	b.n	8004680 <UART_SetConfig+0x348>
 80044f2:	2308      	movs	r3, #8
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e0c3      	b.n	8004680 <UART_SetConfig+0x348>
 80044f8:	2310      	movs	r3, #16
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e0c0      	b.n	8004680 <UART_SetConfig+0x348>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a44      	ldr	r2, [pc, #272]	; (8004614 <UART_SetConfig+0x2dc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d125      	bne.n	8004554 <UART_SetConfig+0x21c>
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <UART_SetConfig+0x2cc>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004516:	d017      	beq.n	8004548 <UART_SetConfig+0x210>
 8004518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451c:	d817      	bhi.n	800454e <UART_SetConfig+0x216>
 800451e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004522:	d00b      	beq.n	800453c <UART_SetConfig+0x204>
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d811      	bhi.n	800454e <UART_SetConfig+0x216>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <UART_SetConfig+0x1fe>
 800452e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004532:	d006      	beq.n	8004542 <UART_SetConfig+0x20a>
 8004534:	e00b      	b.n	800454e <UART_SetConfig+0x216>
 8004536:	2300      	movs	r3, #0
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e0a1      	b.n	8004680 <UART_SetConfig+0x348>
 800453c:	2302      	movs	r3, #2
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e09e      	b.n	8004680 <UART_SetConfig+0x348>
 8004542:	2304      	movs	r3, #4
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e09b      	b.n	8004680 <UART_SetConfig+0x348>
 8004548:	2308      	movs	r3, #8
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e098      	b.n	8004680 <UART_SetConfig+0x348>
 800454e:	2310      	movs	r3, #16
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e095      	b.n	8004680 <UART_SetConfig+0x348>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2f      	ldr	r2, [pc, #188]	; (8004618 <UART_SetConfig+0x2e0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d125      	bne.n	80045aa <UART_SetConfig+0x272>
 800455e:	4b29      	ldr	r3, [pc, #164]	; (8004604 <UART_SetConfig+0x2cc>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456c:	d017      	beq.n	800459e <UART_SetConfig+0x266>
 800456e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004572:	d817      	bhi.n	80045a4 <UART_SetConfig+0x26c>
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d00b      	beq.n	8004592 <UART_SetConfig+0x25a>
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d811      	bhi.n	80045a4 <UART_SetConfig+0x26c>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <UART_SetConfig+0x254>
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d006      	beq.n	8004598 <UART_SetConfig+0x260>
 800458a:	e00b      	b.n	80045a4 <UART_SetConfig+0x26c>
 800458c:	2301      	movs	r3, #1
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e076      	b.n	8004680 <UART_SetConfig+0x348>
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e073      	b.n	8004680 <UART_SetConfig+0x348>
 8004598:	2304      	movs	r3, #4
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e070      	b.n	8004680 <UART_SetConfig+0x348>
 800459e:	2308      	movs	r3, #8
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e06d      	b.n	8004680 <UART_SetConfig+0x348>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e06a      	b.n	8004680 <UART_SetConfig+0x348>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <UART_SetConfig+0x2e4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d138      	bne.n	8004626 <UART_SetConfig+0x2ee>
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <UART_SetConfig+0x2cc>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045c2:	d017      	beq.n	80045f4 <UART_SetConfig+0x2bc>
 80045c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045c8:	d82a      	bhi.n	8004620 <UART_SetConfig+0x2e8>
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	d00b      	beq.n	80045e8 <UART_SetConfig+0x2b0>
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d4:	d824      	bhi.n	8004620 <UART_SetConfig+0x2e8>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <UART_SetConfig+0x2aa>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d006      	beq.n	80045ee <UART_SetConfig+0x2b6>
 80045e0:	e01e      	b.n	8004620 <UART_SetConfig+0x2e8>
 80045e2:	2300      	movs	r3, #0
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e04b      	b.n	8004680 <UART_SetConfig+0x348>
 80045e8:	2302      	movs	r3, #2
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e048      	b.n	8004680 <UART_SetConfig+0x348>
 80045ee:	2304      	movs	r3, #4
 80045f0:	77fb      	strb	r3, [r7, #31]
 80045f2:	e045      	b.n	8004680 <UART_SetConfig+0x348>
 80045f4:	2308      	movs	r3, #8
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e042      	b.n	8004680 <UART_SetConfig+0x348>
 80045fa:	bf00      	nop
 80045fc:	efff69f3 	.word	0xefff69f3
 8004600:	40011000 	.word	0x40011000
 8004604:	40023800 	.word	0x40023800
 8004608:	40004400 	.word	0x40004400
 800460c:	40004800 	.word	0x40004800
 8004610:	40004c00 	.word	0x40004c00
 8004614:	40005000 	.word	0x40005000
 8004618:	40011400 	.word	0x40011400
 800461c:	40007800 	.word	0x40007800
 8004620:	2310      	movs	r3, #16
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e02c      	b.n	8004680 <UART_SetConfig+0x348>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a72      	ldr	r2, [pc, #456]	; (80047f4 <UART_SetConfig+0x4bc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d125      	bne.n	800467c <UART_SetConfig+0x344>
 8004630:	4b71      	ldr	r3, [pc, #452]	; (80047f8 <UART_SetConfig+0x4c0>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800463a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800463e:	d017      	beq.n	8004670 <UART_SetConfig+0x338>
 8004640:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004644:	d817      	bhi.n	8004676 <UART_SetConfig+0x33e>
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d00b      	beq.n	8004664 <UART_SetConfig+0x32c>
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004650:	d811      	bhi.n	8004676 <UART_SetConfig+0x33e>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <UART_SetConfig+0x326>
 8004656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465a:	d006      	beq.n	800466a <UART_SetConfig+0x332>
 800465c:	e00b      	b.n	8004676 <UART_SetConfig+0x33e>
 800465e:	2300      	movs	r3, #0
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e00d      	b.n	8004680 <UART_SetConfig+0x348>
 8004664:	2302      	movs	r3, #2
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e00a      	b.n	8004680 <UART_SetConfig+0x348>
 800466a:	2304      	movs	r3, #4
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e007      	b.n	8004680 <UART_SetConfig+0x348>
 8004670:	2308      	movs	r3, #8
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e004      	b.n	8004680 <UART_SetConfig+0x348>
 8004676:	2310      	movs	r3, #16
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e001      	b.n	8004680 <UART_SetConfig+0x348>
 800467c:	2310      	movs	r3, #16
 800467e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004688:	d15b      	bne.n	8004742 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800468a:	7ffb      	ldrb	r3, [r7, #31]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d828      	bhi.n	80046e2 <UART_SetConfig+0x3aa>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x360>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046c5 	.word	0x080046c5
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	080046e3 	.word	0x080046e3
 80046a8:	080046d3 	.word	0x080046d3
 80046ac:	080046e3 	.word	0x080046e3
 80046b0:	080046e3 	.word	0x080046e3
 80046b4:	080046e3 	.word	0x080046e3
 80046b8:	080046db 	.word	0x080046db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7ff f856 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80046c0:	61b8      	str	r0, [r7, #24]
        break;
 80046c2:	e013      	b.n	80046ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c4:	f7ff f866 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 80046c8:	61b8      	str	r0, [r7, #24]
        break;
 80046ca:	e00f      	b.n	80046ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046cc:	4b4b      	ldr	r3, [pc, #300]	; (80047fc <UART_SetConfig+0x4c4>)
 80046ce:	61bb      	str	r3, [r7, #24]
        break;
 80046d0:	e00c      	b.n	80046ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d2:	f7fe ff79 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80046d6:	61b8      	str	r0, [r7, #24]
        break;
 80046d8:	e008      	b.n	80046ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046de:	61bb      	str	r3, [r7, #24]
        break;
 80046e0:	e004      	b.n	80046ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	77bb      	strb	r3, [r7, #30]
        break;
 80046ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d074      	beq.n	80047dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	005a      	lsls	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b0f      	cmp	r3, #15
 800470c:	d916      	bls.n	800473c <UART_SetConfig+0x404>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d212      	bcs.n	800473c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f023 030f 	bic.w	r3, r3, #15
 800471e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	b29b      	uxth	r3, r3
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	b29a      	uxth	r2, r3
 800472c:	89fb      	ldrh	r3, [r7, #14]
 800472e:	4313      	orrs	r3, r2
 8004730:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	89fa      	ldrh	r2, [r7, #14]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	e04f      	b.n	80047dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	77bb      	strb	r3, [r7, #30]
 8004740:	e04c      	b.n	80047dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004742:	7ffb      	ldrb	r3, [r7, #31]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d828      	bhi.n	800479a <UART_SetConfig+0x462>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x418>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004775 	.word	0x08004775
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004785 	.word	0x08004785
 800475c:	0800479b 	.word	0x0800479b
 8004760:	0800478b 	.word	0x0800478b
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800479b 	.word	0x0800479b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe fffa 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8004778:	61b8      	str	r0, [r7, #24]
        break;
 800477a:	e013      	b.n	80047a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7ff f80a 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004780:	61b8      	str	r0, [r7, #24]
        break;
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <UART_SetConfig+0x4c4>)
 8004786:	61bb      	str	r3, [r7, #24]
        break;
 8004788:	e00c      	b.n	80047a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fe ff1d 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 800478e:	61b8      	str	r0, [r7, #24]
        break;
 8004790:	e008      	b.n	80047a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	61bb      	str	r3, [r7, #24]
        break;
 8004798:	e004      	b.n	80047a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	77bb      	strb	r3, [r7, #30]
        break;
 80047a2:	bf00      	nop
    }

    if (pclk != 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d018      	beq.n	80047dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085a      	lsrs	r2, r3, #1
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	441a      	add	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d909      	bls.n	80047d8 <UART_SetConfig+0x4a0>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d205      	bcs.n	80047d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e001      	b.n	80047dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80047e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40007c00 	.word	0x40007c00
 80047f8:	40023800 	.word	0x40023800
 80047fc:	00f42400 	.word	0x00f42400

08004800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d10a      	bne.n	8004916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004954:	f7fc ff54 	bl	8001800 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d10e      	bne.n	8004986 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f831 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e027      	b.n	80049d6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d10e      	bne.n	80049b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f81b 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e011      	b.n	80049d6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b09c      	sub	sp, #112	; 0x70
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	e0a7      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f6:	f000 80a3 	beq.w	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fc ff01 	bl	8001800 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d13f      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a24:	667b      	str	r3, [r7, #100]	; 0x64
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e6      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	663b      	str	r3, [r7, #96]	; 0x60
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a62:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e068      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d050      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aac:	d148      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b0a:	623a      	str	r2, [r7, #32]
 8004b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	69f9      	ldr	r1, [r7, #28]
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e010      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f43f af48 	beq.w	80049f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3770      	adds	r7, #112	; 0x70
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <__errno>:
 8004b6c:	4b01      	ldr	r3, [pc, #4]	; (8004b74 <__errno+0x8>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000178 	.word	0x20000178

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	; (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	; (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f002 fd7c 	bl	8007688 <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08007ab4 	.word	0x08007ab4
 8004bb4:	08007ab4 	.word	0x08007ab4
 8004bb8:	08007ab4 	.word	0x08007ab4
 8004bbc:	08007ab8 	.word	0x08007ab8

08004bc0 <memset>:
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <__cvt>:
 8004bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd2:	ed2d 8b02 	vpush	{d8}
 8004bd6:	eeb0 8b40 	vmov.f64	d8, d0
 8004bda:	b085      	sub	sp, #20
 8004bdc:	4617      	mov	r7, r2
 8004bde:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004be0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004be2:	ee18 2a90 	vmov	r2, s17
 8004be6:	f025 0520 	bic.w	r5, r5, #32
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	bfb6      	itet	lt
 8004bee:	222d      	movlt	r2, #45	; 0x2d
 8004bf0:	2200      	movge	r2, #0
 8004bf2:	eeb1 8b40 	vneglt.f64	d8, d0
 8004bf6:	2d46      	cmp	r5, #70	; 0x46
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	d004      	beq.n	8004c08 <__cvt+0x38>
 8004bfe:	2d45      	cmp	r5, #69	; 0x45
 8004c00:	d100      	bne.n	8004c04 <__cvt+0x34>
 8004c02:	3401      	adds	r4, #1
 8004c04:	2102      	movs	r1, #2
 8004c06:	e000      	b.n	8004c0a <__cvt+0x3a>
 8004c08:	2103      	movs	r1, #3
 8004c0a:	ab03      	add	r3, sp, #12
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	ab02      	add	r3, sp, #8
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4622      	mov	r2, r4
 8004c14:	4633      	mov	r3, r6
 8004c16:	eeb0 0b48 	vmov.f64	d0, d8
 8004c1a:	f000 fd85 	bl	8005728 <_dtoa_r>
 8004c1e:	2d47      	cmp	r5, #71	; 0x47
 8004c20:	d101      	bne.n	8004c26 <__cvt+0x56>
 8004c22:	07fb      	lsls	r3, r7, #31
 8004c24:	d51a      	bpl.n	8004c5c <__cvt+0x8c>
 8004c26:	2d46      	cmp	r5, #70	; 0x46
 8004c28:	eb00 0204 	add.w	r2, r0, r4
 8004c2c:	d10c      	bne.n	8004c48 <__cvt+0x78>
 8004c2e:	7803      	ldrb	r3, [r0, #0]
 8004c30:	2b30      	cmp	r3, #48	; 0x30
 8004c32:	d107      	bne.n	8004c44 <__cvt+0x74>
 8004c34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	bf1c      	itt	ne
 8004c3e:	f1c4 0401 	rsbne	r4, r4, #1
 8004c42:	6034      	strne	r4, [r6, #0]
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	441a      	add	r2, r3
 8004c48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c50:	bf08      	it	eq
 8004c52:	9203      	streq	r2, [sp, #12]
 8004c54:	2130      	movs	r1, #48	; 0x30
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d307      	bcc.n	8004c6c <__cvt+0x9c>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c60:	1a1b      	subs	r3, r3, r0
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	b005      	add	sp, #20
 8004c66:	ecbd 8b02 	vpop	{d8}
 8004c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c6c:	1c5c      	adds	r4, r3, #1
 8004c6e:	9403      	str	r4, [sp, #12]
 8004c70:	7019      	strb	r1, [r3, #0]
 8004c72:	e7f0      	b.n	8004c56 <__cvt+0x86>

08004c74 <__exponent>:
 8004c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c76:	4603      	mov	r3, r0
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	bfb8      	it	lt
 8004c7c:	4249      	neglt	r1, r1
 8004c7e:	f803 2b02 	strb.w	r2, [r3], #2
 8004c82:	bfb4      	ite	lt
 8004c84:	222d      	movlt	r2, #45	; 0x2d
 8004c86:	222b      	movge	r2, #43	; 0x2b
 8004c88:	2909      	cmp	r1, #9
 8004c8a:	7042      	strb	r2, [r0, #1]
 8004c8c:	dd2a      	ble.n	8004ce4 <__exponent+0x70>
 8004c8e:	f10d 0407 	add.w	r4, sp, #7
 8004c92:	46a4      	mov	ip, r4
 8004c94:	270a      	movs	r7, #10
 8004c96:	46a6      	mov	lr, r4
 8004c98:	460a      	mov	r2, r1
 8004c9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c9e:	fb07 1516 	mls	r5, r7, r6, r1
 8004ca2:	3530      	adds	r5, #48	; 0x30
 8004ca4:	2a63      	cmp	r2, #99	; 0x63
 8004ca6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004caa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cae:	4631      	mov	r1, r6
 8004cb0:	dcf1      	bgt.n	8004c96 <__exponent+0x22>
 8004cb2:	3130      	adds	r1, #48	; 0x30
 8004cb4:	f1ae 0502 	sub.w	r5, lr, #2
 8004cb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cbc:	1c44      	adds	r4, r0, #1
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4561      	cmp	r1, ip
 8004cc2:	d30a      	bcc.n	8004cda <__exponent+0x66>
 8004cc4:	f10d 0209 	add.w	r2, sp, #9
 8004cc8:	eba2 020e 	sub.w	r2, r2, lr
 8004ccc:	4565      	cmp	r5, ip
 8004cce:	bf88      	it	hi
 8004cd0:	2200      	movhi	r2, #0
 8004cd2:	4413      	add	r3, r2
 8004cd4:	1a18      	subs	r0, r3, r0
 8004cd6:	b003      	add	sp, #12
 8004cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ce2:	e7ed      	b.n	8004cc0 <__exponent+0x4c>
 8004ce4:	2330      	movs	r3, #48	; 0x30
 8004ce6:	3130      	adds	r1, #48	; 0x30
 8004ce8:	7083      	strb	r3, [r0, #2]
 8004cea:	70c1      	strb	r1, [r0, #3]
 8004cec:	1d03      	adds	r3, r0, #4
 8004cee:	e7f1      	b.n	8004cd4 <__exponent+0x60>

08004cf0 <_printf_float>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	b08b      	sub	sp, #44	; 0x2c
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004cfc:	4616      	mov	r6, r2
 8004cfe:	461f      	mov	r7, r3
 8004d00:	4605      	mov	r5, r0
 8004d02:	f001 fc37 	bl	8006574 <_localeconv_r>
 8004d06:	f8d0 b000 	ldr.w	fp, [r0]
 8004d0a:	4658      	mov	r0, fp
 8004d0c:	f7fb fa98 	bl	8000240 <strlen>
 8004d10:	2300      	movs	r3, #0
 8004d12:	9308      	str	r3, [sp, #32]
 8004d14:	f8d8 3000 	ldr.w	r3, [r8]
 8004d18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	3307      	adds	r3, #7
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	f103 0108 	add.w	r1, r3, #8
 8004d28:	f8c8 1000 	str.w	r1, [r8]
 8004d2c:	4682      	mov	sl, r0
 8004d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004d36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004f98 <_printf_float+0x2a8>
 8004d3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004d3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8004d42:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	dd24      	ble.n	8004d96 <_printf_float+0xa6>
 8004d4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d54:	d502      	bpl.n	8004d5c <_printf_float+0x6c>
 8004d56:	232d      	movs	r3, #45	; 0x2d
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5c:	4b90      	ldr	r3, [pc, #576]	; (8004fa0 <_printf_float+0x2b0>)
 8004d5e:	4891      	ldr	r0, [pc, #580]	; (8004fa4 <_printf_float+0x2b4>)
 8004d60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d64:	bf94      	ite	ls
 8004d66:	4698      	movls	r8, r3
 8004d68:	4680      	movhi	r8, r0
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	2300      	movs	r3, #0
 8004d74:	6022      	str	r2, [r4, #0]
 8004d76:	9304      	str	r3, [sp, #16]
 8004d78:	9700      	str	r7, [sp, #0]
 8004d7a:	4633      	mov	r3, r6
 8004d7c:	aa09      	add	r2, sp, #36	; 0x24
 8004d7e:	4621      	mov	r1, r4
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 f9d3 	bl	800512c <_printf_common>
 8004d86:	3001      	adds	r0, #1
 8004d88:	f040 808a 	bne.w	8004ea0 <_printf_float+0x1b0>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d90:	b00b      	add	sp, #44	; 0x2c
 8004d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d96:	eeb4 0b40 	vcmp.f64	d0, d0
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	d709      	bvc.n	8004db4 <_printf_float+0xc4>
 8004da0:	ee10 3a90 	vmov	r3, s1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfbc      	itt	lt
 8004da8:	232d      	movlt	r3, #45	; 0x2d
 8004daa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004dae:	487e      	ldr	r0, [pc, #504]	; (8004fa8 <_printf_float+0x2b8>)
 8004db0:	4b7e      	ldr	r3, [pc, #504]	; (8004fac <_printf_float+0x2bc>)
 8004db2:	e7d5      	b.n	8004d60 <_printf_float+0x70>
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004dba:	9104      	str	r1, [sp, #16]
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	d13c      	bne.n	8004e3a <_printf_float+0x14a>
 8004dc0:	2306      	movs	r3, #6
 8004dc2:	6063      	str	r3, [r4, #4]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	ab08      	add	r3, sp, #32
 8004dca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd2:	ab07      	add	r3, sp, #28
 8004dd4:	6861      	ldr	r1, [r4, #4]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	6022      	str	r2, [r4, #0]
 8004dda:	f10d 031b 	add.w	r3, sp, #27
 8004dde:	4628      	mov	r0, r5
 8004de0:	f7ff fef6 	bl	8004bd0 <__cvt>
 8004de4:	9b04      	ldr	r3, [sp, #16]
 8004de6:	9907      	ldr	r1, [sp, #28]
 8004de8:	2b47      	cmp	r3, #71	; 0x47
 8004dea:	4680      	mov	r8, r0
 8004dec:	d108      	bne.n	8004e00 <_printf_float+0x110>
 8004dee:	1cc8      	adds	r0, r1, #3
 8004df0:	db02      	blt.n	8004df8 <_printf_float+0x108>
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	4299      	cmp	r1, r3
 8004df6:	dd41      	ble.n	8004e7c <_printf_float+0x18c>
 8004df8:	f1a9 0902 	sub.w	r9, r9, #2
 8004dfc:	fa5f f989 	uxtb.w	r9, r9
 8004e00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e04:	d820      	bhi.n	8004e48 <_printf_float+0x158>
 8004e06:	3901      	subs	r1, #1
 8004e08:	464a      	mov	r2, r9
 8004e0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e0e:	9107      	str	r1, [sp, #28]
 8004e10:	f7ff ff30 	bl	8004c74 <__exponent>
 8004e14:	9a08      	ldr	r2, [sp, #32]
 8004e16:	9004      	str	r0, [sp, #16]
 8004e18:	1813      	adds	r3, r2, r0
 8004e1a:	2a01      	cmp	r2, #1
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	dc02      	bgt.n	8004e26 <_printf_float+0x136>
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	07d2      	lsls	r2, r2, #31
 8004e24:	d501      	bpl.n	8004e2a <_printf_float+0x13a>
 8004e26:	3301      	adds	r3, #1
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0a2      	beq.n	8004d78 <_printf_float+0x88>
 8004e32:	232d      	movs	r3, #45	; 0x2d
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e38:	e79e      	b.n	8004d78 <_printf_float+0x88>
 8004e3a:	9904      	ldr	r1, [sp, #16]
 8004e3c:	2947      	cmp	r1, #71	; 0x47
 8004e3e:	d1c1      	bne.n	8004dc4 <_printf_float+0xd4>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1bf      	bne.n	8004dc4 <_printf_float+0xd4>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e7bc      	b.n	8004dc2 <_printf_float+0xd2>
 8004e48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e4c:	d118      	bne.n	8004e80 <_printf_float+0x190>
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	dd0b      	ble.n	8004e6c <_printf_float+0x17c>
 8004e54:	6121      	str	r1, [r4, #16]
 8004e56:	b913      	cbnz	r3, 8004e5e <_printf_float+0x16e>
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	07d0      	lsls	r0, r2, #31
 8004e5c:	d502      	bpl.n	8004e64 <_printf_float+0x174>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	440b      	add	r3, r1
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	e7de      	b.n	8004e2a <_printf_float+0x13a>
 8004e6c:	b913      	cbnz	r3, 8004e74 <_printf_float+0x184>
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	07d2      	lsls	r2, r2, #31
 8004e72:	d501      	bpl.n	8004e78 <_printf_float+0x188>
 8004e74:	3302      	adds	r3, #2
 8004e76:	e7f4      	b.n	8004e62 <_printf_float+0x172>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7f2      	b.n	8004e62 <_printf_float+0x172>
 8004e7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e80:	9b08      	ldr	r3, [sp, #32]
 8004e82:	4299      	cmp	r1, r3
 8004e84:	db05      	blt.n	8004e92 <_printf_float+0x1a2>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	6121      	str	r1, [r4, #16]
 8004e8a:	07d8      	lsls	r0, r3, #31
 8004e8c:	d5ea      	bpl.n	8004e64 <_printf_float+0x174>
 8004e8e:	1c4b      	adds	r3, r1, #1
 8004e90:	e7e7      	b.n	8004e62 <_printf_float+0x172>
 8004e92:	2900      	cmp	r1, #0
 8004e94:	bfd4      	ite	le
 8004e96:	f1c1 0202 	rsble	r2, r1, #2
 8004e9a:	2201      	movgt	r2, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	e7e0      	b.n	8004e62 <_printf_float+0x172>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	055a      	lsls	r2, r3, #21
 8004ea4:	d407      	bmi.n	8004eb6 <_printf_float+0x1c6>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d12a      	bne.n	8004f0a <_printf_float+0x21a>
 8004eb4:	e76a      	b.n	8004d8c <_printf_float+0x9c>
 8004eb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004eba:	f240 80e2 	bls.w	8005082 <_printf_float+0x392>
 8004ebe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004ec2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d133      	bne.n	8004f34 <_printf_float+0x244>
 8004ecc:	4a38      	ldr	r2, [pc, #224]	; (8004fb0 <_printf_float+0x2c0>)
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f af58 	beq.w	8004d8c <_printf_float+0x9c>
 8004edc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	db02      	blt.n	8004eea <_printf_float+0x1fa>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07d8      	lsls	r0, r3, #31
 8004ee8:	d50f      	bpl.n	8004f0a <_printf_float+0x21a>
 8004eea:	4653      	mov	r3, sl
 8004eec:	465a      	mov	r2, fp
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f af49 	beq.w	8004d8c <_printf_float+0x9c>
 8004efa:	f04f 0800 	mov.w	r8, #0
 8004efe:	f104 091a 	add.w	r9, r4, #26
 8004f02:	9b08      	ldr	r3, [sp, #32]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4543      	cmp	r3, r8
 8004f08:	dc09      	bgt.n	8004f1e <_printf_float+0x22e>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	079b      	lsls	r3, r3, #30
 8004f0e:	f100 8108 	bmi.w	8005122 <_printf_float+0x432>
 8004f12:	68e0      	ldr	r0, [r4, #12]
 8004f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f16:	4298      	cmp	r0, r3
 8004f18:	bfb8      	it	lt
 8004f1a:	4618      	movlt	r0, r3
 8004f1c:	e738      	b.n	8004d90 <_printf_float+0xa0>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	464a      	mov	r2, r9
 8004f22:	4631      	mov	r1, r6
 8004f24:	4628      	mov	r0, r5
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f43f af2f 	beq.w	8004d8c <_printf_float+0x9c>
 8004f2e:	f108 0801 	add.w	r8, r8, #1
 8004f32:	e7e6      	b.n	8004f02 <_printf_float+0x212>
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dc3c      	bgt.n	8004fb4 <_printf_float+0x2c4>
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <_printf_float+0x2c0>)
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f af21 	beq.w	8004d8c <_printf_float+0x9c>
 8004f4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	d102      	bne.n	8004f58 <_printf_float+0x268>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	07d9      	lsls	r1, r3, #31
 8004f56:	d5d8      	bpl.n	8004f0a <_printf_float+0x21a>
 8004f58:	4653      	mov	r3, sl
 8004f5a:	465a      	mov	r2, fp
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	f43f af12 	beq.w	8004d8c <_printf_float+0x9c>
 8004f68:	f04f 0900 	mov.w	r9, #0
 8004f6c:	f104 0a1a 	add.w	sl, r4, #26
 8004f70:	9b07      	ldr	r3, [sp, #28]
 8004f72:	425b      	negs	r3, r3
 8004f74:	454b      	cmp	r3, r9
 8004f76:	dc01      	bgt.n	8004f7c <_printf_float+0x28c>
 8004f78:	9b08      	ldr	r3, [sp, #32]
 8004f7a:	e795      	b.n	8004ea8 <_printf_float+0x1b8>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4652      	mov	r2, sl
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f af00 	beq.w	8004d8c <_printf_float+0x9c>
 8004f8c:	f109 0901 	add.w	r9, r9, #1
 8004f90:	e7ee      	b.n	8004f70 <_printf_float+0x280>
 8004f92:	bf00      	nop
 8004f94:	f3af 8000 	nop.w
 8004f98:	ffffffff 	.word	0xffffffff
 8004f9c:	7fefffff 	.word	0x7fefffff
 8004fa0:	080076d4 	.word	0x080076d4
 8004fa4:	080076d8 	.word	0x080076d8
 8004fa8:	080076e0 	.word	0x080076e0
 8004fac:	080076dc 	.word	0x080076dc
 8004fb0:	080076e4 	.word	0x080076e4
 8004fb4:	9a08      	ldr	r2, [sp, #32]
 8004fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bfa8      	it	ge
 8004fbc:	461a      	movge	r2, r3
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	4691      	mov	r9, r2
 8004fc2:	dc38      	bgt.n	8005036 <_printf_float+0x346>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fcc:	f104 021a 	add.w	r2, r4, #26
 8004fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fd2:	9905      	ldr	r1, [sp, #20]
 8004fd4:	9304      	str	r3, [sp, #16]
 8004fd6:	eba3 0309 	sub.w	r3, r3, r9
 8004fda:	428b      	cmp	r3, r1
 8004fdc:	dc33      	bgt.n	8005046 <_printf_float+0x356>
 8004fde:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	db3c      	blt.n	8005060 <_printf_float+0x370>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	07da      	lsls	r2, r3, #31
 8004fea:	d439      	bmi.n	8005060 <_printf_float+0x370>
 8004fec:	9b08      	ldr	r3, [sp, #32]
 8004fee:	9a04      	ldr	r2, [sp, #16]
 8004ff0:	9907      	ldr	r1, [sp, #28]
 8004ff2:	1a9a      	subs	r2, r3, r2
 8004ff4:	eba3 0901 	sub.w	r9, r3, r1
 8004ff8:	4591      	cmp	r9, r2
 8004ffa:	bfa8      	it	ge
 8004ffc:	4691      	movge	r9, r2
 8004ffe:	f1b9 0f00 	cmp.w	r9, #0
 8005002:	dc35      	bgt.n	8005070 <_printf_float+0x380>
 8005004:	f04f 0800 	mov.w	r8, #0
 8005008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800500c:	f104 0a1a 	add.w	sl, r4, #26
 8005010:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	eba3 0309 	sub.w	r3, r3, r9
 800501a:	4543      	cmp	r3, r8
 800501c:	f77f af75 	ble.w	8004f0a <_printf_float+0x21a>
 8005020:	2301      	movs	r3, #1
 8005022:	4652      	mov	r2, sl
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	f43f aeae 	beq.w	8004d8c <_printf_float+0x9c>
 8005030:	f108 0801 	add.w	r8, r8, #1
 8005034:	e7ec      	b.n	8005010 <_printf_float+0x320>
 8005036:	4613      	mov	r3, r2
 8005038:	4631      	mov	r1, r6
 800503a:	4642      	mov	r2, r8
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	d1bf      	bne.n	8004fc4 <_printf_float+0x2d4>
 8005044:	e6a2      	b.n	8004d8c <_printf_float+0x9c>
 8005046:	2301      	movs	r3, #1
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	9204      	str	r2, [sp, #16]
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	f43f ae9b 	beq.w	8004d8c <_printf_float+0x9c>
 8005056:	9b05      	ldr	r3, [sp, #20]
 8005058:	9a04      	ldr	r2, [sp, #16]
 800505a:	3301      	adds	r3, #1
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	e7b7      	b.n	8004fd0 <_printf_float+0x2e0>
 8005060:	4653      	mov	r3, sl
 8005062:	465a      	mov	r2, fp
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	d1be      	bne.n	8004fec <_printf_float+0x2fc>
 800506e:	e68d      	b.n	8004d8c <_printf_float+0x9c>
 8005070:	9a04      	ldr	r2, [sp, #16]
 8005072:	464b      	mov	r3, r9
 8005074:	4442      	add	r2, r8
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	d1c1      	bne.n	8005004 <_printf_float+0x314>
 8005080:	e684      	b.n	8004d8c <_printf_float+0x9c>
 8005082:	9a08      	ldr	r2, [sp, #32]
 8005084:	2a01      	cmp	r2, #1
 8005086:	dc01      	bgt.n	800508c <_printf_float+0x39c>
 8005088:	07db      	lsls	r3, r3, #31
 800508a:	d537      	bpl.n	80050fc <_printf_float+0x40c>
 800508c:	2301      	movs	r3, #1
 800508e:	4642      	mov	r2, r8
 8005090:	4631      	mov	r1, r6
 8005092:	4628      	mov	r0, r5
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	f43f ae78 	beq.w	8004d8c <_printf_float+0x9c>
 800509c:	4653      	mov	r3, sl
 800509e:	465a      	mov	r2, fp
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f ae70 	beq.w	8004d8c <_printf_float+0x9c>
 80050ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80050b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d01b      	beq.n	80050f2 <_printf_float+0x402>
 80050ba:	9b08      	ldr	r3, [sp, #32]
 80050bc:	f108 0201 	add.w	r2, r8, #1
 80050c0:	3b01      	subs	r3, #1
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	d10e      	bne.n	80050ea <_printf_float+0x3fa>
 80050cc:	e65e      	b.n	8004d8c <_printf_float+0x9c>
 80050ce:	2301      	movs	r3, #1
 80050d0:	464a      	mov	r2, r9
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f ae57 	beq.w	8004d8c <_printf_float+0x9c>
 80050de:	f108 0801 	add.w	r8, r8, #1
 80050e2:	9b08      	ldr	r3, [sp, #32]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	4543      	cmp	r3, r8
 80050e8:	dcf1      	bgt.n	80050ce <_printf_float+0x3de>
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050f0:	e6db      	b.n	8004eaa <_printf_float+0x1ba>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 091a 	add.w	r9, r4, #26
 80050fa:	e7f2      	b.n	80050e2 <_printf_float+0x3f2>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4642      	mov	r2, r8
 8005100:	e7df      	b.n	80050c2 <_printf_float+0x3d2>
 8005102:	2301      	movs	r3, #1
 8005104:	464a      	mov	r2, r9
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f ae3d 	beq.w	8004d8c <_printf_float+0x9c>
 8005112:	f108 0801 	add.w	r8, r8, #1
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511a:	1a5b      	subs	r3, r3, r1
 800511c:	4543      	cmp	r3, r8
 800511e:	dcf0      	bgt.n	8005102 <_printf_float+0x412>
 8005120:	e6f7      	b.n	8004f12 <_printf_float+0x222>
 8005122:	f04f 0800 	mov.w	r8, #0
 8005126:	f104 0919 	add.w	r9, r4, #25
 800512a:	e7f4      	b.n	8005116 <_printf_float+0x426>

0800512c <_printf_common>:
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	4616      	mov	r6, r2
 8005132:	4699      	mov	r9, r3
 8005134:	688a      	ldr	r2, [r1, #8]
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800513c:	4293      	cmp	r3, r2
 800513e:	bfb8      	it	lt
 8005140:	4613      	movlt	r3, r2
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005148:	4607      	mov	r7, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b10a      	cbz	r2, 8005152 <_printf_common+0x26>
 800514e:	3301      	adds	r3, #1
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0699      	lsls	r1, r3, #26
 8005156:	bf42      	ittt	mi
 8005158:	6833      	ldrmi	r3, [r6, #0]
 800515a:	3302      	addmi	r3, #2
 800515c:	6033      	strmi	r3, [r6, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d106      	bne.n	8005174 <_printf_common+0x48>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	6832      	ldr	r2, [r6, #0]
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	42ab      	cmp	r3, r5
 8005172:	dc26      	bgt.n	80051c2 <_printf_common+0x96>
 8005174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005178:	1e13      	subs	r3, r2, #0
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	bf18      	it	ne
 800517e:	2301      	movne	r3, #1
 8005180:	0692      	lsls	r2, r2, #26
 8005182:	d42b      	bmi.n	80051dc <_printf_common+0xb0>
 8005184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d01e      	beq.n	80051d0 <_printf_common+0xa4>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	68e5      	ldr	r5, [r4, #12]
 8005196:	6832      	ldr	r2, [r6, #0]
 8005198:	f003 0306 	and.w	r3, r3, #6
 800519c:	2b04      	cmp	r3, #4
 800519e:	bf08      	it	eq
 80051a0:	1aad      	subeq	r5, r5, r2
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	bf0c      	ite	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	2500      	movne	r5, #0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfc4      	itt	gt
 80051b2:	1a9b      	subgt	r3, r3, r2
 80051b4:	18ed      	addgt	r5, r5, r3
 80051b6:	2600      	movs	r6, #0
 80051b8:	341a      	adds	r4, #26
 80051ba:	42b5      	cmp	r5, r6
 80051bc:	d11a      	bne.n	80051f4 <_printf_common+0xc8>
 80051be:	2000      	movs	r0, #0
 80051c0:	e008      	b.n	80051d4 <_printf_common+0xa8>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4652      	mov	r2, sl
 80051c6:	4649      	mov	r1, r9
 80051c8:	4638      	mov	r0, r7
 80051ca:	47c0      	blx	r8
 80051cc:	3001      	adds	r0, #1
 80051ce:	d103      	bne.n	80051d8 <_printf_common+0xac>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	3501      	adds	r5, #1
 80051da:	e7c6      	b.n	800516a <_printf_common+0x3e>
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	2030      	movs	r0, #48	; 0x30
 80051e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e6:	4422      	add	r2, r4
 80051e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f0:	3302      	adds	r3, #2
 80051f2:	e7c7      	b.n	8005184 <_printf_common+0x58>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4622      	mov	r2, r4
 80051f8:	4649      	mov	r1, r9
 80051fa:	4638      	mov	r0, r7
 80051fc:	47c0      	blx	r8
 80051fe:	3001      	adds	r0, #1
 8005200:	d0e6      	beq.n	80051d0 <_printf_common+0xa4>
 8005202:	3601      	adds	r6, #1
 8005204:	e7d9      	b.n	80051ba <_printf_common+0x8e>
	...

08005208 <_printf_i>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	7e0f      	ldrb	r7, [r1, #24]
 800520e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005210:	2f78      	cmp	r7, #120	; 0x78
 8005212:	4691      	mov	r9, r2
 8005214:	4680      	mov	r8, r0
 8005216:	460c      	mov	r4, r1
 8005218:	469a      	mov	sl, r3
 800521a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800521e:	d807      	bhi.n	8005230 <_printf_i+0x28>
 8005220:	2f62      	cmp	r7, #98	; 0x62
 8005222:	d80a      	bhi.n	800523a <_printf_i+0x32>
 8005224:	2f00      	cmp	r7, #0
 8005226:	f000 80d8 	beq.w	80053da <_printf_i+0x1d2>
 800522a:	2f58      	cmp	r7, #88	; 0x58
 800522c:	f000 80a3 	beq.w	8005376 <_printf_i+0x16e>
 8005230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005238:	e03a      	b.n	80052b0 <_printf_i+0xa8>
 800523a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523e:	2b15      	cmp	r3, #21
 8005240:	d8f6      	bhi.n	8005230 <_printf_i+0x28>
 8005242:	a101      	add	r1, pc, #4	; (adr r1, 8005248 <_printf_i+0x40>)
 8005244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005231 	.word	0x08005231
 8005254:	08005231 	.word	0x08005231
 8005258:	08005231 	.word	0x08005231
 800525c:	08005231 	.word	0x08005231
 8005260:	080052b5 	.word	0x080052b5
 8005264:	08005231 	.word	0x08005231
 8005268:	08005231 	.word	0x08005231
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	080053c1 	.word	0x080053c1
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080053a3 	.word	0x080053a3
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053e3 	.word	0x080053e3
 800528c:	08005231 	.word	0x08005231
 8005290:	080052e5 	.word	0x080052e5
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	080053ab 	.word	0x080053ab
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	602a      	str	r2, [r5, #0]
 80052a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0a3      	b.n	80053fc <_printf_i+0x1f4>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	6829      	ldr	r1, [r5, #0]
 80052b8:	0606      	lsls	r6, r0, #24
 80052ba:	f101 0304 	add.w	r3, r1, #4
 80052be:	d50a      	bpl.n	80052d6 <_printf_i+0xce>
 80052c0:	680e      	ldr	r6, [r1, #0]
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	2e00      	cmp	r6, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xc8>
 80052c8:	232d      	movs	r3, #45	; 0x2d
 80052ca:	4276      	negs	r6, r6
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d0:	485e      	ldr	r0, [pc, #376]	; (800544c <_printf_i+0x244>)
 80052d2:	230a      	movs	r3, #10
 80052d4:	e019      	b.n	800530a <_printf_i+0x102>
 80052d6:	680e      	ldr	r6, [r1, #0]
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052de:	bf18      	it	ne
 80052e0:	b236      	sxthne	r6, r6
 80052e2:	e7ef      	b.n	80052c4 <_printf_i+0xbc>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	6820      	ldr	r0, [r4, #0]
 80052e8:	1d19      	adds	r1, r3, #4
 80052ea:	6029      	str	r1, [r5, #0]
 80052ec:	0601      	lsls	r1, r0, #24
 80052ee:	d501      	bpl.n	80052f4 <_printf_i+0xec>
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	e002      	b.n	80052fa <_printf_i+0xf2>
 80052f4:	0646      	lsls	r6, r0, #25
 80052f6:	d5fb      	bpl.n	80052f0 <_printf_i+0xe8>
 80052f8:	881e      	ldrh	r6, [r3, #0]
 80052fa:	4854      	ldr	r0, [pc, #336]	; (800544c <_printf_i+0x244>)
 80052fc:	2f6f      	cmp	r7, #111	; 0x6f
 80052fe:	bf0c      	ite	eq
 8005300:	2308      	moveq	r3, #8
 8005302:	230a      	movne	r3, #10
 8005304:	2100      	movs	r1, #0
 8005306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800530a:	6865      	ldr	r5, [r4, #4]
 800530c:	60a5      	str	r5, [r4, #8]
 800530e:	2d00      	cmp	r5, #0
 8005310:	bfa2      	ittt	ge
 8005312:	6821      	ldrge	r1, [r4, #0]
 8005314:	f021 0104 	bicge.w	r1, r1, #4
 8005318:	6021      	strge	r1, [r4, #0]
 800531a:	b90e      	cbnz	r6, 8005320 <_printf_i+0x118>
 800531c:	2d00      	cmp	r5, #0
 800531e:	d04d      	beq.n	80053bc <_printf_i+0x1b4>
 8005320:	4615      	mov	r5, r2
 8005322:	fbb6 f1f3 	udiv	r1, r6, r3
 8005326:	fb03 6711 	mls	r7, r3, r1, r6
 800532a:	5dc7      	ldrb	r7, [r0, r7]
 800532c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005330:	4637      	mov	r7, r6
 8005332:	42bb      	cmp	r3, r7
 8005334:	460e      	mov	r6, r1
 8005336:	d9f4      	bls.n	8005322 <_printf_i+0x11a>
 8005338:	2b08      	cmp	r3, #8
 800533a:	d10b      	bne.n	8005354 <_printf_i+0x14c>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07de      	lsls	r6, r3, #31
 8005340:	d508      	bpl.n	8005354 <_printf_i+0x14c>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	6861      	ldr	r1, [r4, #4]
 8005346:	4299      	cmp	r1, r3
 8005348:	bfde      	ittt	le
 800534a:	2330      	movle	r3, #48	; 0x30
 800534c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005350:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005354:	1b52      	subs	r2, r2, r5
 8005356:	6122      	str	r2, [r4, #16]
 8005358:	f8cd a000 	str.w	sl, [sp]
 800535c:	464b      	mov	r3, r9
 800535e:	aa03      	add	r2, sp, #12
 8005360:	4621      	mov	r1, r4
 8005362:	4640      	mov	r0, r8
 8005364:	f7ff fee2 	bl	800512c <_printf_common>
 8005368:	3001      	adds	r0, #1
 800536a:	d14c      	bne.n	8005406 <_printf_i+0x1fe>
 800536c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005370:	b004      	add	sp, #16
 8005372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005376:	4835      	ldr	r0, [pc, #212]	; (800544c <_printf_i+0x244>)
 8005378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800537c:	6829      	ldr	r1, [r5, #0]
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	f851 6b04 	ldr.w	r6, [r1], #4
 8005384:	6029      	str	r1, [r5, #0]
 8005386:	061d      	lsls	r5, r3, #24
 8005388:	d514      	bpl.n	80053b4 <_printf_i+0x1ac>
 800538a:	07df      	lsls	r7, r3, #31
 800538c:	bf44      	itt	mi
 800538e:	f043 0320 	orrmi.w	r3, r3, #32
 8005392:	6023      	strmi	r3, [r4, #0]
 8005394:	b91e      	cbnz	r6, 800539e <_printf_i+0x196>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f023 0320 	bic.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	2310      	movs	r3, #16
 80053a0:	e7b0      	b.n	8005304 <_printf_i+0xfc>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f043 0320 	orr.w	r3, r3, #32
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	2378      	movs	r3, #120	; 0x78
 80053ac:	4828      	ldr	r0, [pc, #160]	; (8005450 <_printf_i+0x248>)
 80053ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053b2:	e7e3      	b.n	800537c <_printf_i+0x174>
 80053b4:	0659      	lsls	r1, r3, #25
 80053b6:	bf48      	it	mi
 80053b8:	b2b6      	uxthmi	r6, r6
 80053ba:	e7e6      	b.n	800538a <_printf_i+0x182>
 80053bc:	4615      	mov	r5, r2
 80053be:	e7bb      	b.n	8005338 <_printf_i+0x130>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	6826      	ldr	r6, [r4, #0]
 80053c4:	6961      	ldr	r1, [r4, #20]
 80053c6:	1d18      	adds	r0, r3, #4
 80053c8:	6028      	str	r0, [r5, #0]
 80053ca:	0635      	lsls	r5, r6, #24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	d501      	bpl.n	80053d4 <_printf_i+0x1cc>
 80053d0:	6019      	str	r1, [r3, #0]
 80053d2:	e002      	b.n	80053da <_printf_i+0x1d2>
 80053d4:	0670      	lsls	r0, r6, #25
 80053d6:	d5fb      	bpl.n	80053d0 <_printf_i+0x1c8>
 80053d8:	8019      	strh	r1, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	4615      	mov	r5, r2
 80053e0:	e7ba      	b.n	8005358 <_printf_i+0x150>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	602a      	str	r2, [r5, #0]
 80053e8:	681d      	ldr	r5, [r3, #0]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4628      	mov	r0, r5
 80053f0:	f7fa ff2e 	bl	8000250 <memchr>
 80053f4:	b108      	cbz	r0, 80053fa <_printf_i+0x1f2>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	e7a8      	b.n	8005358 <_printf_i+0x150>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	462a      	mov	r2, r5
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d0ab      	beq.n	800536c <_printf_i+0x164>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	079b      	lsls	r3, r3, #30
 8005418:	d413      	bmi.n	8005442 <_printf_i+0x23a>
 800541a:	68e0      	ldr	r0, [r4, #12]
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	4298      	cmp	r0, r3
 8005420:	bfb8      	it	lt
 8005422:	4618      	movlt	r0, r3
 8005424:	e7a4      	b.n	8005370 <_printf_i+0x168>
 8005426:	2301      	movs	r3, #1
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d09b      	beq.n	800536c <_printf_i+0x164>
 8005434:	3501      	adds	r5, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9903      	ldr	r1, [sp, #12]
 800543a:	1a5b      	subs	r3, r3, r1
 800543c:	42ab      	cmp	r3, r5
 800543e:	dcf2      	bgt.n	8005426 <_printf_i+0x21e>
 8005440:	e7eb      	b.n	800541a <_printf_i+0x212>
 8005442:	2500      	movs	r5, #0
 8005444:	f104 0619 	add.w	r6, r4, #25
 8005448:	e7f5      	b.n	8005436 <_printf_i+0x22e>
 800544a:	bf00      	nop
 800544c:	080076e6 	.word	0x080076e6
 8005450:	080076f7 	.word	0x080076f7

08005454 <iprintf>:
 8005454:	b40f      	push	{r0, r1, r2, r3}
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <iprintf+0x2c>)
 8005458:	b513      	push	{r0, r1, r4, lr}
 800545a:	681c      	ldr	r4, [r3, #0]
 800545c:	b124      	cbz	r4, 8005468 <iprintf+0x14>
 800545e:	69a3      	ldr	r3, [r4, #24]
 8005460:	b913      	cbnz	r3, 8005468 <iprintf+0x14>
 8005462:	4620      	mov	r0, r4
 8005464:	f000 ffe8 	bl	8006438 <__sinit>
 8005468:	ab05      	add	r3, sp, #20
 800546a:	9a04      	ldr	r2, [sp, #16]
 800546c:	68a1      	ldr	r1, [r4, #8]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	4620      	mov	r0, r4
 8005472:	f001 fda5 	bl	8006fc0 <_vfiprintf_r>
 8005476:	b002      	add	sp, #8
 8005478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	20000178 	.word	0x20000178

08005484 <setvbuf>:
 8005484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005488:	461d      	mov	r5, r3
 800548a:	4b5d      	ldr	r3, [pc, #372]	; (8005600 <setvbuf+0x17c>)
 800548c:	681f      	ldr	r7, [r3, #0]
 800548e:	4604      	mov	r4, r0
 8005490:	460e      	mov	r6, r1
 8005492:	4690      	mov	r8, r2
 8005494:	b127      	cbz	r7, 80054a0 <setvbuf+0x1c>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	b913      	cbnz	r3, 80054a0 <setvbuf+0x1c>
 800549a:	4638      	mov	r0, r7
 800549c:	f000 ffcc 	bl	8006438 <__sinit>
 80054a0:	4b58      	ldr	r3, [pc, #352]	; (8005604 <setvbuf+0x180>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d167      	bne.n	8005576 <setvbuf+0xf2>
 80054a6:	687c      	ldr	r4, [r7, #4]
 80054a8:	f1b8 0f02 	cmp.w	r8, #2
 80054ac:	d006      	beq.n	80054bc <setvbuf+0x38>
 80054ae:	f1b8 0f01 	cmp.w	r8, #1
 80054b2:	f200 809f 	bhi.w	80055f4 <setvbuf+0x170>
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	f2c0 809c 	blt.w	80055f4 <setvbuf+0x170>
 80054bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054be:	07db      	lsls	r3, r3, #31
 80054c0:	d405      	bmi.n	80054ce <setvbuf+0x4a>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	0598      	lsls	r0, r3, #22
 80054c6:	d402      	bmi.n	80054ce <setvbuf+0x4a>
 80054c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ca:	f001 f858 	bl	800657e <__retarget_lock_acquire_recursive>
 80054ce:	4621      	mov	r1, r4
 80054d0:	4638      	mov	r0, r7
 80054d2:	f000 ff1d 	bl	8006310 <_fflush_r>
 80054d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d8:	b141      	cbz	r1, 80054ec <setvbuf+0x68>
 80054da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054de:	4299      	cmp	r1, r3
 80054e0:	d002      	beq.n	80054e8 <setvbuf+0x64>
 80054e2:	4638      	mov	r0, r7
 80054e4:	f001 fc62 	bl	8006dac <_free_r>
 80054e8:	2300      	movs	r3, #0
 80054ea:	6363      	str	r3, [r4, #52]	; 0x34
 80054ec:	2300      	movs	r3, #0
 80054ee:	61a3      	str	r3, [r4, #24]
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	0619      	lsls	r1, r3, #24
 80054f6:	d503      	bpl.n	8005500 <setvbuf+0x7c>
 80054f8:	6921      	ldr	r1, [r4, #16]
 80054fa:	4638      	mov	r0, r7
 80054fc:	f001 fc56 	bl	8006dac <_free_r>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	f1b8 0f02 	cmp.w	r8, #2
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	d06c      	beq.n	80055ec <setvbuf+0x168>
 8005512:	ab01      	add	r3, sp, #4
 8005514:	466a      	mov	r2, sp
 8005516:	4621      	mov	r1, r4
 8005518:	4638      	mov	r0, r7
 800551a:	f001 f832 	bl	8006582 <__swhatbuf_r>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	4318      	orrs	r0, r3
 8005522:	81a0      	strh	r0, [r4, #12]
 8005524:	2d00      	cmp	r5, #0
 8005526:	d130      	bne.n	800558a <setvbuf+0x106>
 8005528:	9d00      	ldr	r5, [sp, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	f001 f88e 	bl	800664c <malloc>
 8005530:	4606      	mov	r6, r0
 8005532:	2800      	cmp	r0, #0
 8005534:	d155      	bne.n	80055e2 <setvbuf+0x15e>
 8005536:	f8dd 9000 	ldr.w	r9, [sp]
 800553a:	45a9      	cmp	r9, r5
 800553c:	d14a      	bne.n	80055d4 <setvbuf+0x150>
 800553e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005542:	2200      	movs	r2, #0
 8005544:	60a2      	str	r2, [r4, #8]
 8005546:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800554a:	6022      	str	r2, [r4, #0]
 800554c:	6122      	str	r2, [r4, #16]
 800554e:	2201      	movs	r2, #1
 8005550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005554:	6162      	str	r2, [r4, #20]
 8005556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	07d2      	lsls	r2, r2, #31
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	d405      	bmi.n	800556e <setvbuf+0xea>
 8005562:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005566:	d102      	bne.n	800556e <setvbuf+0xea>
 8005568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556a:	f001 f809 	bl	8006580 <__retarget_lock_release_recursive>
 800556e:	4628      	mov	r0, r5
 8005570:	b003      	add	sp, #12
 8005572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <setvbuf+0x184>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d101      	bne.n	8005580 <setvbuf+0xfc>
 800557c:	68bc      	ldr	r4, [r7, #8]
 800557e:	e793      	b.n	80054a8 <setvbuf+0x24>
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <setvbuf+0x188>)
 8005582:	429c      	cmp	r4, r3
 8005584:	bf08      	it	eq
 8005586:	68fc      	ldreq	r4, [r7, #12]
 8005588:	e78e      	b.n	80054a8 <setvbuf+0x24>
 800558a:	2e00      	cmp	r6, #0
 800558c:	d0cd      	beq.n	800552a <setvbuf+0xa6>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	b913      	cbnz	r3, 8005598 <setvbuf+0x114>
 8005592:	4638      	mov	r0, r7
 8005594:	f000 ff50 	bl	8006438 <__sinit>
 8005598:	f1b8 0f01 	cmp.w	r8, #1
 800559c:	bf08      	it	eq
 800559e:	89a3      	ldrheq	r3, [r4, #12]
 80055a0:	6026      	str	r6, [r4, #0]
 80055a2:	bf04      	itt	eq
 80055a4:	f043 0301 	orreq.w	r3, r3, #1
 80055a8:	81a3      	strheq	r3, [r4, #12]
 80055aa:	89a2      	ldrh	r2, [r4, #12]
 80055ac:	f012 0308 	ands.w	r3, r2, #8
 80055b0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80055b4:	d01c      	beq.n	80055f0 <setvbuf+0x16c>
 80055b6:	07d3      	lsls	r3, r2, #31
 80055b8:	bf41      	itttt	mi
 80055ba:	2300      	movmi	r3, #0
 80055bc:	426d      	negmi	r5, r5
 80055be:	60a3      	strmi	r3, [r4, #8]
 80055c0:	61a5      	strmi	r5, [r4, #24]
 80055c2:	bf58      	it	pl
 80055c4:	60a5      	strpl	r5, [r4, #8]
 80055c6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80055c8:	f015 0501 	ands.w	r5, r5, #1
 80055cc:	d115      	bne.n	80055fa <setvbuf+0x176>
 80055ce:	f412 7f00 	tst.w	r2, #512	; 0x200
 80055d2:	e7c8      	b.n	8005566 <setvbuf+0xe2>
 80055d4:	4648      	mov	r0, r9
 80055d6:	f001 f839 	bl	800664c <malloc>
 80055da:	4606      	mov	r6, r0
 80055dc:	2800      	cmp	r0, #0
 80055de:	d0ae      	beq.n	800553e <setvbuf+0xba>
 80055e0:	464d      	mov	r5, r9
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	e7d0      	b.n	800558e <setvbuf+0x10a>
 80055ec:	2500      	movs	r5, #0
 80055ee:	e7a8      	b.n	8005542 <setvbuf+0xbe>
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	e7e8      	b.n	80055c6 <setvbuf+0x142>
 80055f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055f8:	e7b9      	b.n	800556e <setvbuf+0xea>
 80055fa:	2500      	movs	r5, #0
 80055fc:	e7b7      	b.n	800556e <setvbuf+0xea>
 80055fe:	bf00      	nop
 8005600:	20000178 	.word	0x20000178
 8005604:	080077b8 	.word	0x080077b8
 8005608:	080077d8 	.word	0x080077d8
 800560c:	08007798 	.word	0x08007798

08005610 <quorem>:
 8005610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	6903      	ldr	r3, [r0, #16]
 8005616:	690c      	ldr	r4, [r1, #16]
 8005618:	42a3      	cmp	r3, r4
 800561a:	4607      	mov	r7, r0
 800561c:	f2c0 8081 	blt.w	8005722 <quorem+0x112>
 8005620:	3c01      	subs	r4, #1
 8005622:	f101 0814 	add.w	r8, r1, #20
 8005626:	f100 0514 	add.w	r5, r0, #20
 800562a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005638:	3301      	adds	r3, #1
 800563a:	429a      	cmp	r2, r3
 800563c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005640:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005644:	fbb2 f6f3 	udiv	r6, r2, r3
 8005648:	d331      	bcc.n	80056ae <quorem+0x9e>
 800564a:	f04f 0e00 	mov.w	lr, #0
 800564e:	4640      	mov	r0, r8
 8005650:	46ac      	mov	ip, r5
 8005652:	46f2      	mov	sl, lr
 8005654:	f850 2b04 	ldr.w	r2, [r0], #4
 8005658:	b293      	uxth	r3, r2
 800565a:	fb06 e303 	mla	r3, r6, r3, lr
 800565e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005662:	b29b      	uxth	r3, r3
 8005664:	ebaa 0303 	sub.w	r3, sl, r3
 8005668:	f8dc a000 	ldr.w	sl, [ip]
 800566c:	0c12      	lsrs	r2, r2, #16
 800566e:	fa13 f38a 	uxtah	r3, r3, sl
 8005672:	fb06 e202 	mla	r2, r6, r2, lr
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	9b00      	ldr	r3, [sp, #0]
 800567a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800567e:	b292      	uxth	r2, r2
 8005680:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005684:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005688:	f8bd 3000 	ldrh.w	r3, [sp]
 800568c:	4581      	cmp	r9, r0
 800568e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005692:	f84c 3b04 	str.w	r3, [ip], #4
 8005696:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800569a:	d2db      	bcs.n	8005654 <quorem+0x44>
 800569c:	f855 300b 	ldr.w	r3, [r5, fp]
 80056a0:	b92b      	cbnz	r3, 80056ae <quorem+0x9e>
 80056a2:	9b01      	ldr	r3, [sp, #4]
 80056a4:	3b04      	subs	r3, #4
 80056a6:	429d      	cmp	r5, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	d32e      	bcc.n	800570a <quorem+0xfa>
 80056ac:	613c      	str	r4, [r7, #16]
 80056ae:	4638      	mov	r0, r7
 80056b0:	f001 fa64 	bl	8006b7c <__mcmp>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	db24      	blt.n	8005702 <quorem+0xf2>
 80056b8:	3601      	adds	r6, #1
 80056ba:	4628      	mov	r0, r5
 80056bc:	f04f 0c00 	mov.w	ip, #0
 80056c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80056c4:	f8d0 e000 	ldr.w	lr, [r0]
 80056c8:	b293      	uxth	r3, r2
 80056ca:	ebac 0303 	sub.w	r3, ip, r3
 80056ce:	0c12      	lsrs	r2, r2, #16
 80056d0:	fa13 f38e 	uxtah	r3, r3, lr
 80056d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056dc:	b29b      	uxth	r3, r3
 80056de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056e2:	45c1      	cmp	r9, r8
 80056e4:	f840 3b04 	str.w	r3, [r0], #4
 80056e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056ec:	d2e8      	bcs.n	80056c0 <quorem+0xb0>
 80056ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056f6:	b922      	cbnz	r2, 8005702 <quorem+0xf2>
 80056f8:	3b04      	subs	r3, #4
 80056fa:	429d      	cmp	r5, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	d30a      	bcc.n	8005716 <quorem+0x106>
 8005700:	613c      	str	r4, [r7, #16]
 8005702:	4630      	mov	r0, r6
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	3b04      	subs	r3, #4
 800570e:	2a00      	cmp	r2, #0
 8005710:	d1cc      	bne.n	80056ac <quorem+0x9c>
 8005712:	3c01      	subs	r4, #1
 8005714:	e7c7      	b.n	80056a6 <quorem+0x96>
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	3b04      	subs	r3, #4
 800571a:	2a00      	cmp	r2, #0
 800571c:	d1f0      	bne.n	8005700 <quorem+0xf0>
 800571e:	3c01      	subs	r4, #1
 8005720:	e7eb      	b.n	80056fa <quorem+0xea>
 8005722:	2000      	movs	r0, #0
 8005724:	e7ee      	b.n	8005704 <quorem+0xf4>
	...

08005728 <_dtoa_r>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	ed2d 8b02 	vpush	{d8}
 8005730:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005732:	b091      	sub	sp, #68	; 0x44
 8005734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005738:	ec59 8b10 	vmov	r8, r9, d0
 800573c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800573e:	9106      	str	r1, [sp, #24]
 8005740:	4606      	mov	r6, r0
 8005742:	9208      	str	r2, [sp, #32]
 8005744:	930c      	str	r3, [sp, #48]	; 0x30
 8005746:	b975      	cbnz	r5, 8005766 <_dtoa_r+0x3e>
 8005748:	2010      	movs	r0, #16
 800574a:	f000 ff7f 	bl	800664c <malloc>
 800574e:	4602      	mov	r2, r0
 8005750:	6270      	str	r0, [r6, #36]	; 0x24
 8005752:	b920      	cbnz	r0, 800575e <_dtoa_r+0x36>
 8005754:	4baa      	ldr	r3, [pc, #680]	; (8005a00 <_dtoa_r+0x2d8>)
 8005756:	21ea      	movs	r1, #234	; 0xea
 8005758:	48aa      	ldr	r0, [pc, #680]	; (8005a04 <_dtoa_r+0x2dc>)
 800575a:	f001 fe87 	bl	800746c <__assert_func>
 800575e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005762:	6005      	str	r5, [r0, #0]
 8005764:	60c5      	str	r5, [r0, #12]
 8005766:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	b151      	cbz	r1, 8005782 <_dtoa_r+0x5a>
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	604a      	str	r2, [r1, #4]
 8005770:	2301      	movs	r3, #1
 8005772:	4093      	lsls	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
 8005776:	4630      	mov	r0, r6
 8005778:	f000 ffbe 	bl	80066f8 <_Bfree>
 800577c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f1b9 0300 	subs.w	r3, r9, #0
 8005786:	bfbb      	ittet	lt
 8005788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800578c:	9303      	strlt	r3, [sp, #12]
 800578e:	2300      	movge	r3, #0
 8005790:	2201      	movlt	r2, #1
 8005792:	bfac      	ite	ge
 8005794:	6023      	strge	r3, [r4, #0]
 8005796:	6022      	strlt	r2, [r4, #0]
 8005798:	4b9b      	ldr	r3, [pc, #620]	; (8005a08 <_dtoa_r+0x2e0>)
 800579a:	9c03      	ldr	r4, [sp, #12]
 800579c:	43a3      	bics	r3, r4
 800579e:	d11c      	bne.n	80057da <_dtoa_r+0xb2>
 80057a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80057ac:	ea53 0308 	orrs.w	r3, r3, r8
 80057b0:	f000 84fd 	beq.w	80061ae <_dtoa_r+0xa86>
 80057b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057b6:	b963      	cbnz	r3, 80057d2 <_dtoa_r+0xaa>
 80057b8:	4b94      	ldr	r3, [pc, #592]	; (8005a0c <_dtoa_r+0x2e4>)
 80057ba:	e01f      	b.n	80057fc <_dtoa_r+0xd4>
 80057bc:	4b94      	ldr	r3, [pc, #592]	; (8005a10 <_dtoa_r+0x2e8>)
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	3308      	adds	r3, #8
 80057c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	9801      	ldr	r0, [sp, #4]
 80057c8:	b011      	add	sp, #68	; 0x44
 80057ca:	ecbd 8b02 	vpop	{d8}
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	4b8e      	ldr	r3, [pc, #568]	; (8005a0c <_dtoa_r+0x2e4>)
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	3303      	adds	r3, #3
 80057d8:	e7f3      	b.n	80057c2 <_dtoa_r+0x9a>
 80057da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80057de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80057e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e6:	d10b      	bne.n	8005800 <_dtoa_r+0xd8>
 80057e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057ea:	2301      	movs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 84d9 	beq.w	80061a8 <_dtoa_r+0xa80>
 80057f6:	4887      	ldr	r0, [pc, #540]	; (8005a14 <_dtoa_r+0x2ec>)
 80057f8:	6018      	str	r0, [r3, #0]
 80057fa:	1e43      	subs	r3, r0, #1
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	e7e2      	b.n	80057c6 <_dtoa_r+0x9e>
 8005800:	a90f      	add	r1, sp, #60	; 0x3c
 8005802:	aa0e      	add	r2, sp, #56	; 0x38
 8005804:	4630      	mov	r0, r6
 8005806:	eeb0 0b48 	vmov.f64	d0, d8
 800580a:	f001 fa5d 	bl	8006cc8 <__d2b>
 800580e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005812:	4605      	mov	r5, r0
 8005814:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005816:	2900      	cmp	r1, #0
 8005818:	d046      	beq.n	80058a8 <_dtoa_r+0x180>
 800581a:	ee18 4a90 	vmov	r4, s17
 800581e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005822:	ec53 2b18 	vmov	r2, r3, d8
 8005826:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800582a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800582e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005832:	2400      	movs	r4, #0
 8005834:	ec43 2b16 	vmov	d6, r2, r3
 8005838:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800583c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80059e8 <_dtoa_r+0x2c0>
 8005840:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005844:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80059f0 <_dtoa_r+0x2c8>
 8005848:	eea7 6b05 	vfma.f64	d6, d7, d5
 800584c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80059f8 <_dtoa_r+0x2d0>
 8005850:	ee07 1a90 	vmov	s15, r1
 8005854:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005858:	eeb0 7b46 	vmov.f64	d7, d6
 800585c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005860:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005864:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586c:	ee16 ba90 	vmov	fp, s13
 8005870:	940a      	str	r4, [sp, #40]	; 0x28
 8005872:	d508      	bpl.n	8005886 <_dtoa_r+0x15e>
 8005874:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005878:	eeb4 6b47 	vcmp.f64	d6, d7
 800587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005880:	bf18      	it	ne
 8005882:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8005886:	f1bb 0f16 	cmp.w	fp, #22
 800588a:	d82f      	bhi.n	80058ec <_dtoa_r+0x1c4>
 800588c:	4b62      	ldr	r3, [pc, #392]	; (8005a18 <_dtoa_r+0x2f0>)
 800588e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005892:	ed93 7b00 	vldr	d7, [r3]
 8005896:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589e:	d501      	bpl.n	80058a4 <_dtoa_r+0x17c>
 80058a0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80058a4:	2300      	movs	r3, #0
 80058a6:	e022      	b.n	80058ee <_dtoa_r+0x1c6>
 80058a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058aa:	4401      	add	r1, r0
 80058ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	bfc1      	itttt	gt
 80058b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80058bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80058c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80058c4:	bfd6      	itet	le
 80058c6:	f1c3 0320 	rsble	r3, r3, #32
 80058ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80058ce:	fa08 f803 	lslle.w	r8, r8, r3
 80058d2:	ee07 8a90 	vmov	s15, r8
 80058d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80058da:	3901      	subs	r1, #1
 80058dc:	ee17 4a90 	vmov	r4, s15
 80058e0:	ec53 2b17 	vmov	r2, r3, d7
 80058e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80058e8:	2401      	movs	r4, #1
 80058ea:	e7a3      	b.n	8005834 <_dtoa_r+0x10c>
 80058ec:	2301      	movs	r3, #1
 80058ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f0:	1a43      	subs	r3, r0, r1
 80058f2:	1e5a      	subs	r2, r3, #1
 80058f4:	bf45      	ittet	mi
 80058f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80058fa:	9304      	strmi	r3, [sp, #16]
 80058fc:	2300      	movpl	r3, #0
 80058fe:	2300      	movmi	r3, #0
 8005900:	9205      	str	r2, [sp, #20]
 8005902:	bf54      	ite	pl
 8005904:	9304      	strpl	r3, [sp, #16]
 8005906:	9305      	strmi	r3, [sp, #20]
 8005908:	f1bb 0f00 	cmp.w	fp, #0
 800590c:	db18      	blt.n	8005940 <_dtoa_r+0x218>
 800590e:	9b05      	ldr	r3, [sp, #20]
 8005910:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005914:	445b      	add	r3, fp
 8005916:	9305      	str	r3, [sp, #20]
 8005918:	2300      	movs	r3, #0
 800591a:	9a06      	ldr	r2, [sp, #24]
 800591c:	2a09      	cmp	r2, #9
 800591e:	d849      	bhi.n	80059b4 <_dtoa_r+0x28c>
 8005920:	2a05      	cmp	r2, #5
 8005922:	bfc4      	itt	gt
 8005924:	3a04      	subgt	r2, #4
 8005926:	9206      	strgt	r2, [sp, #24]
 8005928:	9a06      	ldr	r2, [sp, #24]
 800592a:	f1a2 0202 	sub.w	r2, r2, #2
 800592e:	bfcc      	ite	gt
 8005930:	2400      	movgt	r4, #0
 8005932:	2401      	movle	r4, #1
 8005934:	2a03      	cmp	r2, #3
 8005936:	d848      	bhi.n	80059ca <_dtoa_r+0x2a2>
 8005938:	e8df f002 	tbb	[pc, r2]
 800593c:	3a2c2e0b 	.word	0x3a2c2e0b
 8005940:	9b04      	ldr	r3, [sp, #16]
 8005942:	2200      	movs	r2, #0
 8005944:	eba3 030b 	sub.w	r3, r3, fp
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	9209      	str	r2, [sp, #36]	; 0x24
 800594c:	f1cb 0300 	rsb	r3, fp, #0
 8005950:	e7e3      	b.n	800591a <_dtoa_r+0x1f2>
 8005952:	2200      	movs	r2, #0
 8005954:	9207      	str	r2, [sp, #28]
 8005956:	9a08      	ldr	r2, [sp, #32]
 8005958:	2a00      	cmp	r2, #0
 800595a:	dc39      	bgt.n	80059d0 <_dtoa_r+0x2a8>
 800595c:	f04f 0a01 	mov.w	sl, #1
 8005960:	46d1      	mov	r9, sl
 8005962:	4652      	mov	r2, sl
 8005964:	f8cd a020 	str.w	sl, [sp, #32]
 8005968:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800596a:	2100      	movs	r1, #0
 800596c:	6079      	str	r1, [r7, #4]
 800596e:	2004      	movs	r0, #4
 8005970:	f100 0c14 	add.w	ip, r0, #20
 8005974:	4594      	cmp	ip, r2
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	d92f      	bls.n	80059da <_dtoa_r+0x2b2>
 800597a:	4630      	mov	r0, r6
 800597c:	930d      	str	r3, [sp, #52]	; 0x34
 800597e:	f000 fe7b 	bl	8006678 <_Balloc>
 8005982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005984:	9001      	str	r0, [sp, #4]
 8005986:	4602      	mov	r2, r0
 8005988:	2800      	cmp	r0, #0
 800598a:	d149      	bne.n	8005a20 <_dtoa_r+0x2f8>
 800598c:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <_dtoa_r+0x2f4>)
 800598e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005992:	e6e1      	b.n	8005758 <_dtoa_r+0x30>
 8005994:	2201      	movs	r2, #1
 8005996:	e7dd      	b.n	8005954 <_dtoa_r+0x22c>
 8005998:	2200      	movs	r2, #0
 800599a:	9207      	str	r2, [sp, #28]
 800599c:	9a08      	ldr	r2, [sp, #32]
 800599e:	eb0b 0a02 	add.w	sl, fp, r2
 80059a2:	f10a 0901 	add.w	r9, sl, #1
 80059a6:	464a      	mov	r2, r9
 80059a8:	2a01      	cmp	r2, #1
 80059aa:	bfb8      	it	lt
 80059ac:	2201      	movlt	r2, #1
 80059ae:	e7db      	b.n	8005968 <_dtoa_r+0x240>
 80059b0:	2201      	movs	r2, #1
 80059b2:	e7f2      	b.n	800599a <_dtoa_r+0x272>
 80059b4:	2401      	movs	r4, #1
 80059b6:	2200      	movs	r2, #0
 80059b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80059bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80059c0:	2100      	movs	r1, #0
 80059c2:	46d1      	mov	r9, sl
 80059c4:	2212      	movs	r2, #18
 80059c6:	9108      	str	r1, [sp, #32]
 80059c8:	e7ce      	b.n	8005968 <_dtoa_r+0x240>
 80059ca:	2201      	movs	r2, #1
 80059cc:	9207      	str	r2, [sp, #28]
 80059ce:	e7f5      	b.n	80059bc <_dtoa_r+0x294>
 80059d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059d4:	46d1      	mov	r9, sl
 80059d6:	4652      	mov	r2, sl
 80059d8:	e7c6      	b.n	8005968 <_dtoa_r+0x240>
 80059da:	3101      	adds	r1, #1
 80059dc:	6079      	str	r1, [r7, #4]
 80059de:	0040      	lsls	r0, r0, #1
 80059e0:	e7c6      	b.n	8005970 <_dtoa_r+0x248>
 80059e2:	bf00      	nop
 80059e4:	f3af 8000 	nop.w
 80059e8:	636f4361 	.word	0x636f4361
 80059ec:	3fd287a7 	.word	0x3fd287a7
 80059f0:	8b60c8b3 	.word	0x8b60c8b3
 80059f4:	3fc68a28 	.word	0x3fc68a28
 80059f8:	509f79fb 	.word	0x509f79fb
 80059fc:	3fd34413 	.word	0x3fd34413
 8005a00:	08007715 	.word	0x08007715
 8005a04:	0800772c 	.word	0x0800772c
 8005a08:	7ff00000 	.word	0x7ff00000
 8005a0c:	08007711 	.word	0x08007711
 8005a10:	08007708 	.word	0x08007708
 8005a14:	080076e5 	.word	0x080076e5
 8005a18:	08007880 	.word	0x08007880
 8005a1c:	08007787 	.word	0x08007787
 8005a20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005a22:	9901      	ldr	r1, [sp, #4]
 8005a24:	6011      	str	r1, [r2, #0]
 8005a26:	f1b9 0f0e 	cmp.w	r9, #14
 8005a2a:	d86c      	bhi.n	8005b06 <_dtoa_r+0x3de>
 8005a2c:	2c00      	cmp	r4, #0
 8005a2e:	d06a      	beq.n	8005b06 <_dtoa_r+0x3de>
 8005a30:	f1bb 0f00 	cmp.w	fp, #0
 8005a34:	f340 80a0 	ble.w	8005b78 <_dtoa_r+0x450>
 8005a38:	49c1      	ldr	r1, [pc, #772]	; (8005d40 <_dtoa_r+0x618>)
 8005a3a:	f00b 020f 	and.w	r2, fp, #15
 8005a3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005a42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005a46:	ed92 7b00 	vldr	d7, [r2]
 8005a4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8005a4e:	f000 8087 	beq.w	8005b60 <_dtoa_r+0x438>
 8005a52:	4abc      	ldr	r2, [pc, #752]	; (8005d44 <_dtoa_r+0x61c>)
 8005a54:	ed92 6b08 	vldr	d6, [r2, #32]
 8005a58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005a5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005a60:	f001 010f 	and.w	r1, r1, #15
 8005a64:	2203      	movs	r2, #3
 8005a66:	48b7      	ldr	r0, [pc, #732]	; (8005d44 <_dtoa_r+0x61c>)
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d17b      	bne.n	8005b64 <_dtoa_r+0x43c>
 8005a6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005a74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	f000 80a2 	beq.w	8005bc4 <_dtoa_r+0x49c>
 8005a80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a90:	f140 8098 	bpl.w	8005bc4 <_dtoa_r+0x49c>
 8005a94:	f1b9 0f00 	cmp.w	r9, #0
 8005a98:	f000 8094 	beq.w	8005bc4 <_dtoa_r+0x49c>
 8005a9c:	f1ba 0f00 	cmp.w	sl, #0
 8005aa0:	dd2f      	ble.n	8005b02 <_dtoa_r+0x3da>
 8005aa2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005aa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005aaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005aae:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005ab2:	3201      	adds	r2, #1
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005aba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005abe:	ee07 2a90 	vmov	s15, r2
 8005ac2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ac6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005aca:	ee15 4a90 	vmov	r4, s11
 8005ace:	ec52 1b15 	vmov	r1, r2, d5
 8005ad2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d177      	bne.n	8005bca <_dtoa_r+0x4a2>
 8005ada:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005ade:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005ae2:	ec42 1b17 	vmov	d7, r1, r2
 8005ae6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	f300 8263 	bgt.w	8005fb8 <_dtoa_r+0x890>
 8005af2:	eeb1 7b47 	vneg.f64	d7, d7
 8005af6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afe:	f100 8258 	bmi.w	8005fb2 <_dtoa_r+0x88a>
 8005b02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b08:	2a00      	cmp	r2, #0
 8005b0a:	f2c0 811d 	blt.w	8005d48 <_dtoa_r+0x620>
 8005b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005b12:	f300 8119 	bgt.w	8005d48 <_dtoa_r+0x620>
 8005b16:	4b8a      	ldr	r3, [pc, #552]	; (8005d40 <_dtoa_r+0x618>)
 8005b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b1c:	ed93 6b00 	vldr	d6, [r3]
 8005b20:	9b08      	ldr	r3, [sp, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f280 80b7 	bge.w	8005c96 <_dtoa_r+0x56e>
 8005b28:	f1b9 0f00 	cmp.w	r9, #0
 8005b2c:	f300 80b3 	bgt.w	8005c96 <_dtoa_r+0x56e>
 8005b30:	f040 823f 	bne.w	8005fb2 <_dtoa_r+0x88a>
 8005b34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005b38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b48:	464c      	mov	r4, r9
 8005b4a:	464f      	mov	r7, r9
 8005b4c:	f280 8215 	bge.w	8005f7a <_dtoa_r+0x852>
 8005b50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b54:	2331      	movs	r3, #49	; 0x31
 8005b56:	f808 3b01 	strb.w	r3, [r8], #1
 8005b5a:	f10b 0b01 	add.w	fp, fp, #1
 8005b5e:	e211      	b.n	8005f84 <_dtoa_r+0x85c>
 8005b60:	2202      	movs	r2, #2
 8005b62:	e780      	b.n	8005a66 <_dtoa_r+0x33e>
 8005b64:	07cc      	lsls	r4, r1, #31
 8005b66:	d504      	bpl.n	8005b72 <_dtoa_r+0x44a>
 8005b68:	ed90 6b00 	vldr	d6, [r0]
 8005b6c:	3201      	adds	r2, #1
 8005b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b72:	1049      	asrs	r1, r1, #1
 8005b74:	3008      	adds	r0, #8
 8005b76:	e777      	b.n	8005a68 <_dtoa_r+0x340>
 8005b78:	d022      	beq.n	8005bc0 <_dtoa_r+0x498>
 8005b7a:	f1cb 0100 	rsb	r1, fp, #0
 8005b7e:	4a70      	ldr	r2, [pc, #448]	; (8005d40 <_dtoa_r+0x618>)
 8005b80:	f001 000f 	and.w	r0, r1, #15
 8005b84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005b88:	ed92 7b00 	vldr	d7, [r2]
 8005b8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005b90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b94:	486b      	ldr	r0, [pc, #428]	; (8005d44 <_dtoa_r+0x61c>)
 8005b96:	1109      	asrs	r1, r1, #4
 8005b98:	2400      	movs	r4, #0
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	b929      	cbnz	r1, 8005baa <_dtoa_r+0x482>
 8005b9e:	2c00      	cmp	r4, #0
 8005ba0:	f43f af6a 	beq.w	8005a78 <_dtoa_r+0x350>
 8005ba4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ba8:	e766      	b.n	8005a78 <_dtoa_r+0x350>
 8005baa:	07cf      	lsls	r7, r1, #31
 8005bac:	d505      	bpl.n	8005bba <_dtoa_r+0x492>
 8005bae:	ed90 6b00 	vldr	d6, [r0]
 8005bb2:	3201      	adds	r2, #1
 8005bb4:	2401      	movs	r4, #1
 8005bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005bba:	1049      	asrs	r1, r1, #1
 8005bbc:	3008      	adds	r0, #8
 8005bbe:	e7ed      	b.n	8005b9c <_dtoa_r+0x474>
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	e759      	b.n	8005a78 <_dtoa_r+0x350>
 8005bc4:	465f      	mov	r7, fp
 8005bc6:	4648      	mov	r0, r9
 8005bc8:	e775      	b.n	8005ab6 <_dtoa_r+0x38e>
 8005bca:	ec42 1b17 	vmov	d7, r1, r2
 8005bce:	4a5c      	ldr	r2, [pc, #368]	; (8005d40 <_dtoa_r+0x618>)
 8005bd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005bd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005bd8:	9a01      	ldr	r2, [sp, #4]
 8005bda:	1814      	adds	r4, r2, r0
 8005bdc:	9a07      	ldr	r2, [sp, #28]
 8005bde:	b352      	cbz	r2, 8005c36 <_dtoa_r+0x50e>
 8005be0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005be4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005be8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005bec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005bf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005bf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005bf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005bfc:	ee14 2a90 	vmov	r2, s9
 8005c00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005c04:	3230      	adds	r2, #48	; 0x30
 8005c06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005c0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c12:	f808 2b01 	strb.w	r2, [r8], #1
 8005c16:	d439      	bmi.n	8005c8c <_dtoa_r+0x564>
 8005c18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005c1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c24:	d472      	bmi.n	8005d0c <_dtoa_r+0x5e4>
 8005c26:	45a0      	cmp	r8, r4
 8005c28:	f43f af6b 	beq.w	8005b02 <_dtoa_r+0x3da>
 8005c2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005c30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005c34:	e7e0      	b.n	8005bf8 <_dtoa_r+0x4d0>
 8005c36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005c3e:	4621      	mov	r1, r4
 8005c40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005c44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005c48:	ee14 2a90 	vmov	r2, s9
 8005c4c:	3230      	adds	r2, #48	; 0x30
 8005c4e:	f808 2b01 	strb.w	r2, [r8], #1
 8005c52:	45a0      	cmp	r8, r4
 8005c54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005c58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005c5c:	d118      	bne.n	8005c90 <_dtoa_r+0x568>
 8005c5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005c62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005c66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6e:	dc4d      	bgt.n	8005d0c <_dtoa_r+0x5e4>
 8005c70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005c74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7c:	f57f af41 	bpl.w	8005b02 <_dtoa_r+0x3da>
 8005c80:	4688      	mov	r8, r1
 8005c82:	3901      	subs	r1, #1
 8005c84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005c88:	2b30      	cmp	r3, #48	; 0x30
 8005c8a:	d0f9      	beq.n	8005c80 <_dtoa_r+0x558>
 8005c8c:	46bb      	mov	fp, r7
 8005c8e:	e02a      	b.n	8005ce6 <_dtoa_r+0x5be>
 8005c90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005c94:	e7d6      	b.n	8005c44 <_dtoa_r+0x51c>
 8005c96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005c9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ca2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005ca6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005caa:	ee15 3a10 	vmov	r3, s10
 8005cae:	3330      	adds	r3, #48	; 0x30
 8005cb0:	f808 3b01 	strb.w	r3, [r8], #1
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	eba8 0303 	sub.w	r3, r8, r3
 8005cba:	4599      	cmp	r9, r3
 8005cbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005cc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005cc4:	d133      	bne.n	8005d2e <_dtoa_r+0x606>
 8005cc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005cca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	dc1a      	bgt.n	8005d0a <_dtoa_r+0x5e2>
 8005cd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8005cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cdc:	d103      	bne.n	8005ce6 <_dtoa_r+0x5be>
 8005cde:	ee15 3a10 	vmov	r3, s10
 8005ce2:	07d9      	lsls	r1, r3, #31
 8005ce4:	d411      	bmi.n	8005d0a <_dtoa_r+0x5e2>
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f000 fd05 	bl	80066f8 <_Bfree>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cf2:	f888 3000 	strb.w	r3, [r8]
 8005cf6:	f10b 0301 	add.w	r3, fp, #1
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f43f ad61 	beq.w	80057c6 <_dtoa_r+0x9e>
 8005d04:	f8c3 8000 	str.w	r8, [r3]
 8005d08:	e55d      	b.n	80057c6 <_dtoa_r+0x9e>
 8005d0a:	465f      	mov	r7, fp
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	4698      	mov	r8, r3
 8005d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d14:	2a39      	cmp	r2, #57	; 0x39
 8005d16:	d106      	bne.n	8005d26 <_dtoa_r+0x5fe>
 8005d18:	9a01      	ldr	r2, [sp, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d1f7      	bne.n	8005d0e <_dtoa_r+0x5e6>
 8005d1e:	9901      	ldr	r1, [sp, #4]
 8005d20:	2230      	movs	r2, #48	; 0x30
 8005d22:	3701      	adds	r7, #1
 8005d24:	700a      	strb	r2, [r1, #0]
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	3201      	adds	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e7ae      	b.n	8005c8c <_dtoa_r+0x564>
 8005d2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	d1b2      	bne.n	8005ca2 <_dtoa_r+0x57a>
 8005d3c:	e7d3      	b.n	8005ce6 <_dtoa_r+0x5be>
 8005d3e:	bf00      	nop
 8005d40:	08007880 	.word	0x08007880
 8005d44:	08007858 	.word	0x08007858
 8005d48:	9907      	ldr	r1, [sp, #28]
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	f000 80d0 	beq.w	8005ef0 <_dtoa_r+0x7c8>
 8005d50:	9906      	ldr	r1, [sp, #24]
 8005d52:	2901      	cmp	r1, #1
 8005d54:	f300 80b4 	bgt.w	8005ec0 <_dtoa_r+0x798>
 8005d58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	f000 80ac 	beq.w	8005eb8 <_dtoa_r+0x790>
 8005d60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005d68:	461c      	mov	r4, r3
 8005d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d6c:	9b04      	ldr	r3, [sp, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	9b05      	ldr	r3, [sp, #20]
 8005d74:	2101      	movs	r1, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	4630      	mov	r0, r6
 8005d7a:	9305      	str	r3, [sp, #20]
 8005d7c:	f000 fd74 	bl	8006868 <__i2b>
 8005d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d82:	4607      	mov	r7, r0
 8005d84:	f1b8 0f00 	cmp.w	r8, #0
 8005d88:	dd0d      	ble.n	8005da6 <_dtoa_r+0x67e>
 8005d8a:	9a05      	ldr	r2, [sp, #20]
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	dd0a      	ble.n	8005da6 <_dtoa_r+0x67e>
 8005d90:	4542      	cmp	r2, r8
 8005d92:	9904      	ldr	r1, [sp, #16]
 8005d94:	bfa8      	it	ge
 8005d96:	4642      	movge	r2, r8
 8005d98:	1a89      	subs	r1, r1, r2
 8005d9a:	9104      	str	r1, [sp, #16]
 8005d9c:	9905      	ldr	r1, [sp, #20]
 8005d9e:	eba8 0802 	sub.w	r8, r8, r2
 8005da2:	1a8a      	subs	r2, r1, r2
 8005da4:	9205      	str	r2, [sp, #20]
 8005da6:	b303      	cbz	r3, 8005dea <_dtoa_r+0x6c2>
 8005da8:	9a07      	ldr	r2, [sp, #28]
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	f000 80a5 	beq.w	8005efa <_dtoa_r+0x7d2>
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	dd13      	ble.n	8005ddc <_dtoa_r+0x6b4>
 8005db4:	4639      	mov	r1, r7
 8005db6:	4622      	mov	r2, r4
 8005db8:	4630      	mov	r0, r6
 8005dba:	930d      	str	r3, [sp, #52]	; 0x34
 8005dbc:	f000 fe14 	bl	80069e8 <__pow5mult>
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 fd64 	bl	8006894 <__multiply>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	900a      	str	r0, [sp, #40]	; 0x28
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f000 fc91 	bl	80066f8 <_Bfree>
 8005dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dda:	4615      	mov	r5, r2
 8005ddc:	1b1a      	subs	r2, r3, r4
 8005dde:	d004      	beq.n	8005dea <_dtoa_r+0x6c2>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f000 fe00 	bl	80069e8 <__pow5mult>
 8005de8:	4605      	mov	r5, r0
 8005dea:	2101      	movs	r1, #1
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 fd3b 	bl	8006868 <__i2b>
 8005df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	f340 8081 	ble.w	8005efe <_dtoa_r+0x7d6>
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4601      	mov	r1, r0
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 fdf1 	bl	80069e8 <__pow5mult>
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	dd7a      	ble.n	8005f04 <_dtoa_r+0x7dc>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	930a      	str	r3, [sp, #40]	; 0x28
 8005e12:	6922      	ldr	r2, [r4, #16]
 8005e14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005e18:	6910      	ldr	r0, [r2, #16]
 8005e1a:	f000 fcd5 	bl	80067c8 <__hi0bits>
 8005e1e:	f1c0 0020 	rsb	r0, r0, #32
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	4418      	add	r0, r3
 8005e26:	f010 001f 	ands.w	r0, r0, #31
 8005e2a:	f000 808c 	beq.w	8005f46 <_dtoa_r+0x81e>
 8005e2e:	f1c0 0220 	rsb	r2, r0, #32
 8005e32:	2a04      	cmp	r2, #4
 8005e34:	f340 8085 	ble.w	8005f42 <_dtoa_r+0x81a>
 8005e38:	f1c0 001c 	rsb	r0, r0, #28
 8005e3c:	9b04      	ldr	r3, [sp, #16]
 8005e3e:	4403      	add	r3, r0
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	9b05      	ldr	r3, [sp, #20]
 8005e44:	4403      	add	r3, r0
 8005e46:	4480      	add	r8, r0
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dd05      	ble.n	8005e5c <_dtoa_r+0x734>
 8005e50:	4629      	mov	r1, r5
 8005e52:	461a      	mov	r2, r3
 8005e54:	4630      	mov	r0, r6
 8005e56:	f000 fe21 	bl	8006a9c <__lshift>
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	9b05      	ldr	r3, [sp, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dd05      	ble.n	8005e6e <_dtoa_r+0x746>
 8005e62:	4621      	mov	r1, r4
 8005e64:	461a      	mov	r2, r3
 8005e66:	4630      	mov	r0, r6
 8005e68:	f000 fe18 	bl	8006a9c <__lshift>
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d06a      	beq.n	8005f4a <_dtoa_r+0x822>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 fe80 	bl	8006b7c <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	da64      	bge.n	8005f4a <_dtoa_r+0x822>
 8005e80:	2300      	movs	r3, #0
 8005e82:	4629      	mov	r1, r5
 8005e84:	220a      	movs	r2, #10
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 fc58 	bl	800673c <__multadd>
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005e92:	4605      	mov	r5, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8191 	beq.w	80061bc <_dtoa_r+0xa94>
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f000 fc4b 	bl	800673c <__multadd>
 8005ea6:	f1ba 0f00 	cmp.w	sl, #0
 8005eaa:	4607      	mov	r7, r0
 8005eac:	f300 808d 	bgt.w	8005fca <_dtoa_r+0x8a2>
 8005eb0:	9b06      	ldr	r3, [sp, #24]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	dc50      	bgt.n	8005f58 <_dtoa_r+0x830>
 8005eb6:	e088      	b.n	8005fca <_dtoa_r+0x8a2>
 8005eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ebe:	e751      	b.n	8005d64 <_dtoa_r+0x63c>
 8005ec0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	bfbf      	itttt	lt
 8005ec8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8005eca:	1ae3      	sublt	r3, r4, r3
 8005ecc:	18d2      	addlt	r2, r2, r3
 8005ece:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005ed0:	bfb6      	itet	lt
 8005ed2:	4623      	movlt	r3, r4
 8005ed4:	1b1c      	subge	r4, r3, r4
 8005ed6:	2400      	movlt	r4, #0
 8005ed8:	f1b9 0f00 	cmp.w	r9, #0
 8005edc:	bfb5      	itete	lt
 8005ede:	9a04      	ldrlt	r2, [sp, #16]
 8005ee0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005ee4:	eba2 0809 	sublt.w	r8, r2, r9
 8005ee8:	464a      	movge	r2, r9
 8005eea:	bfb8      	it	lt
 8005eec:	2200      	movlt	r2, #0
 8005eee:	e73c      	b.n	8005d6a <_dtoa_r+0x642>
 8005ef0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005ef4:	9f07      	ldr	r7, [sp, #28]
 8005ef6:	461c      	mov	r4, r3
 8005ef8:	e744      	b.n	8005d84 <_dtoa_r+0x65c>
 8005efa:	461a      	mov	r2, r3
 8005efc:	e770      	b.n	8005de0 <_dtoa_r+0x6b8>
 8005efe:	9b06      	ldr	r3, [sp, #24]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	dc18      	bgt.n	8005f36 <_dtoa_r+0x80e>
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	b9b3      	cbnz	r3, 8005f36 <_dtoa_r+0x80e>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005f0e:	b9a2      	cbnz	r2, 8005f3a <_dtoa_r+0x812>
 8005f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f14:	0d12      	lsrs	r2, r2, #20
 8005f16:	0512      	lsls	r2, r2, #20
 8005f18:	b18a      	cbz	r2, 8005f3e <_dtoa_r+0x816>
 8005f1a:	9b04      	ldr	r3, [sp, #16]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	9b05      	ldr	r3, [sp, #20]
 8005f22:	3301      	adds	r3, #1
 8005f24:	9305      	str	r3, [sp, #20]
 8005f26:	2301      	movs	r3, #1
 8005f28:	930a      	str	r3, [sp, #40]	; 0x28
 8005f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f af70 	bne.w	8005e12 <_dtoa_r+0x6ea>
 8005f32:	2001      	movs	r0, #1
 8005f34:	e775      	b.n	8005e22 <_dtoa_r+0x6fa>
 8005f36:	2300      	movs	r3, #0
 8005f38:	e7f6      	b.n	8005f28 <_dtoa_r+0x800>
 8005f3a:	9b02      	ldr	r3, [sp, #8]
 8005f3c:	e7f4      	b.n	8005f28 <_dtoa_r+0x800>
 8005f3e:	920a      	str	r2, [sp, #40]	; 0x28
 8005f40:	e7f3      	b.n	8005f2a <_dtoa_r+0x802>
 8005f42:	d082      	beq.n	8005e4a <_dtoa_r+0x722>
 8005f44:	4610      	mov	r0, r2
 8005f46:	301c      	adds	r0, #28
 8005f48:	e778      	b.n	8005e3c <_dtoa_r+0x714>
 8005f4a:	f1b9 0f00 	cmp.w	r9, #0
 8005f4e:	dc37      	bgt.n	8005fc0 <_dtoa_r+0x898>
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	dd34      	ble.n	8005fc0 <_dtoa_r+0x898>
 8005f56:	46ca      	mov	sl, r9
 8005f58:	f1ba 0f00 	cmp.w	sl, #0
 8005f5c:	d10d      	bne.n	8005f7a <_dtoa_r+0x852>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4653      	mov	r3, sl
 8005f62:	2205      	movs	r2, #5
 8005f64:	4630      	mov	r0, r6
 8005f66:	f000 fbe9 	bl	800673c <__multadd>
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fe04 	bl	8006b7c <__mcmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f73f adeb 	bgt.w	8005b50 <_dtoa_r+0x428>
 8005f7a:	9b08      	ldr	r3, [sp, #32]
 8005f7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f80:	ea6f 0b03 	mvn.w	fp, r3
 8005f84:	f04f 0900 	mov.w	r9, #0
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 fbb4 	bl	80066f8 <_Bfree>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	f43f aea8 	beq.w	8005ce6 <_dtoa_r+0x5be>
 8005f96:	f1b9 0f00 	cmp.w	r9, #0
 8005f9a:	d005      	beq.n	8005fa8 <_dtoa_r+0x880>
 8005f9c:	45b9      	cmp	r9, r7
 8005f9e:	d003      	beq.n	8005fa8 <_dtoa_r+0x880>
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f000 fba8 	bl	80066f8 <_Bfree>
 8005fa8:	4639      	mov	r1, r7
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 fba4 	bl	80066f8 <_Bfree>
 8005fb0:	e699      	b.n	8005ce6 <_dtoa_r+0x5be>
 8005fb2:	2400      	movs	r4, #0
 8005fb4:	4627      	mov	r7, r4
 8005fb6:	e7e0      	b.n	8005f7a <_dtoa_r+0x852>
 8005fb8:	46bb      	mov	fp, r7
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	e5c7      	b.n	8005b50 <_dtoa_r+0x428>
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	46ca      	mov	sl, r9
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8100 	beq.w	80061ca <_dtoa_r+0xaa2>
 8005fca:	f1b8 0f00 	cmp.w	r8, #0
 8005fce:	dd05      	ble.n	8005fdc <_dtoa_r+0x8b4>
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4642      	mov	r2, r8
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 fd61 	bl	8006a9c <__lshift>
 8005fda:	4607      	mov	r7, r0
 8005fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d05d      	beq.n	800609e <_dtoa_r+0x976>
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 fb47 	bl	8006678 <_Balloc>
 8005fea:	4680      	mov	r8, r0
 8005fec:	b928      	cbnz	r0, 8005ffa <_dtoa_r+0x8d2>
 8005fee:	4b82      	ldr	r3, [pc, #520]	; (80061f8 <_dtoa_r+0xad0>)
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ff6:	f7ff bbaf 	b.w	8005758 <_dtoa_r+0x30>
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	3202      	adds	r2, #2
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	f107 010c 	add.w	r1, r7, #12
 8006004:	300c      	adds	r0, #12
 8006006:	f000 fb29 	bl	800665c <memcpy>
 800600a:	2201      	movs	r2, #1
 800600c:	4641      	mov	r1, r8
 800600e:	4630      	mov	r0, r6
 8006010:	f000 fd44 	bl	8006a9c <__lshift>
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	3301      	adds	r3, #1
 8006018:	9304      	str	r3, [sp, #16]
 800601a:	9b01      	ldr	r3, [sp, #4]
 800601c:	4453      	add	r3, sl
 800601e:	9308      	str	r3, [sp, #32]
 8006020:	9b02      	ldr	r3, [sp, #8]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	46b9      	mov	r9, r7
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	4607      	mov	r7, r0
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	4621      	mov	r1, r4
 8006030:	3b01      	subs	r3, #1
 8006032:	4628      	mov	r0, r5
 8006034:	9302      	str	r3, [sp, #8]
 8006036:	f7ff faeb 	bl	8005610 <quorem>
 800603a:	4603      	mov	r3, r0
 800603c:	3330      	adds	r3, #48	; 0x30
 800603e:	9005      	str	r0, [sp, #20]
 8006040:	4649      	mov	r1, r9
 8006042:	4628      	mov	r0, r5
 8006044:	9309      	str	r3, [sp, #36]	; 0x24
 8006046:	f000 fd99 	bl	8006b7c <__mcmp>
 800604a:	463a      	mov	r2, r7
 800604c:	4682      	mov	sl, r0
 800604e:	4621      	mov	r1, r4
 8006050:	4630      	mov	r0, r6
 8006052:	f000 fdaf 	bl	8006bb4 <__mdiff>
 8006056:	68c2      	ldr	r2, [r0, #12]
 8006058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605a:	4680      	mov	r8, r0
 800605c:	bb0a      	cbnz	r2, 80060a2 <_dtoa_r+0x97a>
 800605e:	4601      	mov	r1, r0
 8006060:	4628      	mov	r0, r5
 8006062:	f000 fd8b 	bl	8006b7c <__mcmp>
 8006066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006068:	4602      	mov	r2, r0
 800606a:	4641      	mov	r1, r8
 800606c:	4630      	mov	r0, r6
 800606e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006072:	f000 fb41 	bl	80066f8 <_Bfree>
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800607a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800607e:	ea43 0102 	orr.w	r1, r3, r2
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	430b      	orrs	r3, r1
 8006086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006088:	d10d      	bne.n	80060a6 <_dtoa_r+0x97e>
 800608a:	2b39      	cmp	r3, #57	; 0x39
 800608c:	d029      	beq.n	80060e2 <_dtoa_r+0x9ba>
 800608e:	f1ba 0f00 	cmp.w	sl, #0
 8006092:	dd01      	ble.n	8006098 <_dtoa_r+0x970>
 8006094:	9b05      	ldr	r3, [sp, #20]
 8006096:	3331      	adds	r3, #49	; 0x31
 8006098:	9a02      	ldr	r2, [sp, #8]
 800609a:	7013      	strb	r3, [r2, #0]
 800609c:	e774      	b.n	8005f88 <_dtoa_r+0x860>
 800609e:	4638      	mov	r0, r7
 80060a0:	e7b8      	b.n	8006014 <_dtoa_r+0x8ec>
 80060a2:	2201      	movs	r2, #1
 80060a4:	e7e1      	b.n	800606a <_dtoa_r+0x942>
 80060a6:	f1ba 0f00 	cmp.w	sl, #0
 80060aa:	db06      	blt.n	80060ba <_dtoa_r+0x992>
 80060ac:	9906      	ldr	r1, [sp, #24]
 80060ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80060b2:	9907      	ldr	r1, [sp, #28]
 80060b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80060b8:	d120      	bne.n	80060fc <_dtoa_r+0x9d4>
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	ddec      	ble.n	8006098 <_dtoa_r+0x970>
 80060be:	4629      	mov	r1, r5
 80060c0:	2201      	movs	r2, #1
 80060c2:	4630      	mov	r0, r6
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	f000 fce9 	bl	8006a9c <__lshift>
 80060ca:	4621      	mov	r1, r4
 80060cc:	4605      	mov	r5, r0
 80060ce:	f000 fd55 	bl	8006b7c <__mcmp>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	dc02      	bgt.n	80060de <_dtoa_r+0x9b6>
 80060d8:	d1de      	bne.n	8006098 <_dtoa_r+0x970>
 80060da:	07da      	lsls	r2, r3, #31
 80060dc:	d5dc      	bpl.n	8006098 <_dtoa_r+0x970>
 80060de:	2b39      	cmp	r3, #57	; 0x39
 80060e0:	d1d8      	bne.n	8006094 <_dtoa_r+0x96c>
 80060e2:	9a02      	ldr	r2, [sp, #8]
 80060e4:	2339      	movs	r3, #57	; 0x39
 80060e6:	7013      	strb	r3, [r2, #0]
 80060e8:	4643      	mov	r3, r8
 80060ea:	4698      	mov	r8, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80060f2:	2a39      	cmp	r2, #57	; 0x39
 80060f4:	d051      	beq.n	800619a <_dtoa_r+0xa72>
 80060f6:	3201      	adds	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e745      	b.n	8005f88 <_dtoa_r+0x860>
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	dd03      	ble.n	8006108 <_dtoa_r+0x9e0>
 8006100:	2b39      	cmp	r3, #57	; 0x39
 8006102:	d0ee      	beq.n	80060e2 <_dtoa_r+0x9ba>
 8006104:	3301      	adds	r3, #1
 8006106:	e7c7      	b.n	8006098 <_dtoa_r+0x970>
 8006108:	9a04      	ldr	r2, [sp, #16]
 800610a:	9908      	ldr	r1, [sp, #32]
 800610c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006110:	428a      	cmp	r2, r1
 8006112:	d02b      	beq.n	800616c <_dtoa_r+0xa44>
 8006114:	4629      	mov	r1, r5
 8006116:	2300      	movs	r3, #0
 8006118:	220a      	movs	r2, #10
 800611a:	4630      	mov	r0, r6
 800611c:	f000 fb0e 	bl	800673c <__multadd>
 8006120:	45b9      	cmp	r9, r7
 8006122:	4605      	mov	r5, r0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	f04f 020a 	mov.w	r2, #10
 800612c:	4649      	mov	r1, r9
 800612e:	4630      	mov	r0, r6
 8006130:	d107      	bne.n	8006142 <_dtoa_r+0xa1a>
 8006132:	f000 fb03 	bl	800673c <__multadd>
 8006136:	4681      	mov	r9, r0
 8006138:	4607      	mov	r7, r0
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	3301      	adds	r3, #1
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	e774      	b.n	800602c <_dtoa_r+0x904>
 8006142:	f000 fafb 	bl	800673c <__multadd>
 8006146:	4639      	mov	r1, r7
 8006148:	4681      	mov	r9, r0
 800614a:	2300      	movs	r3, #0
 800614c:	220a      	movs	r2, #10
 800614e:	4630      	mov	r0, r6
 8006150:	f000 faf4 	bl	800673c <__multadd>
 8006154:	4607      	mov	r7, r0
 8006156:	e7f0      	b.n	800613a <_dtoa_r+0xa12>
 8006158:	f1ba 0f00 	cmp.w	sl, #0
 800615c:	9a01      	ldr	r2, [sp, #4]
 800615e:	bfcc      	ite	gt
 8006160:	46d0      	movgt	r8, sl
 8006162:	f04f 0801 	movle.w	r8, #1
 8006166:	4490      	add	r8, r2
 8006168:	f04f 0900 	mov.w	r9, #0
 800616c:	4629      	mov	r1, r5
 800616e:	2201      	movs	r2, #1
 8006170:	4630      	mov	r0, r6
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	f000 fc92 	bl	8006a9c <__lshift>
 8006178:	4621      	mov	r1, r4
 800617a:	4605      	mov	r5, r0
 800617c:	f000 fcfe 	bl	8006b7c <__mcmp>
 8006180:	2800      	cmp	r0, #0
 8006182:	dcb1      	bgt.n	80060e8 <_dtoa_r+0x9c0>
 8006184:	d102      	bne.n	800618c <_dtoa_r+0xa64>
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	07db      	lsls	r3, r3, #31
 800618a:	d4ad      	bmi.n	80060e8 <_dtoa_r+0x9c0>
 800618c:	4643      	mov	r3, r8
 800618e:	4698      	mov	r8, r3
 8006190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006194:	2a30      	cmp	r2, #48	; 0x30
 8006196:	d0fa      	beq.n	800618e <_dtoa_r+0xa66>
 8006198:	e6f6      	b.n	8005f88 <_dtoa_r+0x860>
 800619a:	9a01      	ldr	r2, [sp, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d1a4      	bne.n	80060ea <_dtoa_r+0x9c2>
 80061a0:	f10b 0b01 	add.w	fp, fp, #1
 80061a4:	2331      	movs	r3, #49	; 0x31
 80061a6:	e778      	b.n	800609a <_dtoa_r+0x972>
 80061a8:	4b14      	ldr	r3, [pc, #80]	; (80061fc <_dtoa_r+0xad4>)
 80061aa:	f7ff bb27 	b.w	80057fc <_dtoa_r+0xd4>
 80061ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f47f ab03 	bne.w	80057bc <_dtoa_r+0x94>
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <_dtoa_r+0xad8>)
 80061b8:	f7ff bb20 	b.w	80057fc <_dtoa_r+0xd4>
 80061bc:	f1ba 0f00 	cmp.w	sl, #0
 80061c0:	dc03      	bgt.n	80061ca <_dtoa_r+0xaa2>
 80061c2:	9b06      	ldr	r3, [sp, #24]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	f73f aec7 	bgt.w	8005f58 <_dtoa_r+0x830>
 80061ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061ce:	4621      	mov	r1, r4
 80061d0:	4628      	mov	r0, r5
 80061d2:	f7ff fa1d 	bl	8005610 <quorem>
 80061d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061da:	f808 3b01 	strb.w	r3, [r8], #1
 80061de:	9a01      	ldr	r2, [sp, #4]
 80061e0:	eba8 0202 	sub.w	r2, r8, r2
 80061e4:	4592      	cmp	sl, r2
 80061e6:	ddb7      	ble.n	8006158 <_dtoa_r+0xa30>
 80061e8:	4629      	mov	r1, r5
 80061ea:	2300      	movs	r3, #0
 80061ec:	220a      	movs	r2, #10
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 faa4 	bl	800673c <__multadd>
 80061f4:	4605      	mov	r5, r0
 80061f6:	e7ea      	b.n	80061ce <_dtoa_r+0xaa6>
 80061f8:	08007787 	.word	0x08007787
 80061fc:	080076e4 	.word	0x080076e4
 8006200:	08007708 	.word	0x08007708

08006204 <__sflush_r>:
 8006204:	898a      	ldrh	r2, [r1, #12]
 8006206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	4605      	mov	r5, r0
 800620c:	0710      	lsls	r0, r2, #28
 800620e:	460c      	mov	r4, r1
 8006210:	d458      	bmi.n	80062c4 <__sflush_r+0xc0>
 8006212:	684b      	ldr	r3, [r1, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dc05      	bgt.n	8006224 <__sflush_r+0x20>
 8006218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	dc02      	bgt.n	8006224 <__sflush_r+0x20>
 800621e:	2000      	movs	r0, #0
 8006220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006226:	2e00      	cmp	r6, #0
 8006228:	d0f9      	beq.n	800621e <__sflush_r+0x1a>
 800622a:	2300      	movs	r3, #0
 800622c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006230:	682f      	ldr	r7, [r5, #0]
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	d032      	beq.n	800629c <__sflush_r+0x98>
 8006236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	075a      	lsls	r2, r3, #29
 800623c:	d505      	bpl.n	800624a <__sflush_r+0x46>
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006244:	b10b      	cbz	r3, 800624a <__sflush_r+0x46>
 8006246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006248:	1ac0      	subs	r0, r0, r3
 800624a:	2300      	movs	r3, #0
 800624c:	4602      	mov	r2, r0
 800624e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006250:	6a21      	ldr	r1, [r4, #32]
 8006252:	4628      	mov	r0, r5
 8006254:	47b0      	blx	r6
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	d106      	bne.n	800626a <__sflush_r+0x66>
 800625c:	6829      	ldr	r1, [r5, #0]
 800625e:	291d      	cmp	r1, #29
 8006260:	d82c      	bhi.n	80062bc <__sflush_r+0xb8>
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <__sflush_r+0x108>)
 8006264:	40ca      	lsrs	r2, r1
 8006266:	07d6      	lsls	r6, r2, #31
 8006268:	d528      	bpl.n	80062bc <__sflush_r+0xb8>
 800626a:	2200      	movs	r2, #0
 800626c:	6062      	str	r2, [r4, #4]
 800626e:	04d9      	lsls	r1, r3, #19
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	d504      	bpl.n	8006280 <__sflush_r+0x7c>
 8006276:	1c42      	adds	r2, r0, #1
 8006278:	d101      	bne.n	800627e <__sflush_r+0x7a>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	b903      	cbnz	r3, 8006280 <__sflush_r+0x7c>
 800627e:	6560      	str	r0, [r4, #84]	; 0x54
 8006280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006282:	602f      	str	r7, [r5, #0]
 8006284:	2900      	cmp	r1, #0
 8006286:	d0ca      	beq.n	800621e <__sflush_r+0x1a>
 8006288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800628c:	4299      	cmp	r1, r3
 800628e:	d002      	beq.n	8006296 <__sflush_r+0x92>
 8006290:	4628      	mov	r0, r5
 8006292:	f000 fd8b 	bl	8006dac <_free_r>
 8006296:	2000      	movs	r0, #0
 8006298:	6360      	str	r0, [r4, #52]	; 0x34
 800629a:	e7c1      	b.n	8006220 <__sflush_r+0x1c>
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	2301      	movs	r3, #1
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b0      	blx	r6
 80062a4:	1c41      	adds	r1, r0, #1
 80062a6:	d1c7      	bne.n	8006238 <__sflush_r+0x34>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0c4      	beq.n	8006238 <__sflush_r+0x34>
 80062ae:	2b1d      	cmp	r3, #29
 80062b0:	d001      	beq.n	80062b6 <__sflush_r+0xb2>
 80062b2:	2b16      	cmp	r3, #22
 80062b4:	d101      	bne.n	80062ba <__sflush_r+0xb6>
 80062b6:	602f      	str	r7, [r5, #0]
 80062b8:	e7b1      	b.n	800621e <__sflush_r+0x1a>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	e7ad      	b.n	8006220 <__sflush_r+0x1c>
 80062c4:	690f      	ldr	r7, [r1, #16]
 80062c6:	2f00      	cmp	r7, #0
 80062c8:	d0a9      	beq.n	800621e <__sflush_r+0x1a>
 80062ca:	0793      	lsls	r3, r2, #30
 80062cc:	680e      	ldr	r6, [r1, #0]
 80062ce:	bf08      	it	eq
 80062d0:	694b      	ldreq	r3, [r1, #20]
 80062d2:	600f      	str	r7, [r1, #0]
 80062d4:	bf18      	it	ne
 80062d6:	2300      	movne	r3, #0
 80062d8:	eba6 0807 	sub.w	r8, r6, r7
 80062dc:	608b      	str	r3, [r1, #8]
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	dd9c      	ble.n	800621e <__sflush_r+0x1a>
 80062e4:	6a21      	ldr	r1, [r4, #32]
 80062e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062e8:	4643      	mov	r3, r8
 80062ea:	463a      	mov	r2, r7
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b0      	blx	r6
 80062f0:	2800      	cmp	r0, #0
 80062f2:	dc06      	bgt.n	8006302 <__sflush_r+0xfe>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006300:	e78e      	b.n	8006220 <__sflush_r+0x1c>
 8006302:	4407      	add	r7, r0
 8006304:	eba8 0800 	sub.w	r8, r8, r0
 8006308:	e7e9      	b.n	80062de <__sflush_r+0xda>
 800630a:	bf00      	nop
 800630c:	20400001 	.word	0x20400001

08006310 <_fflush_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	4605      	mov	r5, r0
 8006316:	460c      	mov	r4, r1
 8006318:	b913      	cbnz	r3, 8006320 <_fflush_r+0x10>
 800631a:	2500      	movs	r5, #0
 800631c:	4628      	mov	r0, r5
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	b118      	cbz	r0, 800632a <_fflush_r+0x1a>
 8006322:	6983      	ldr	r3, [r0, #24]
 8006324:	b90b      	cbnz	r3, 800632a <_fflush_r+0x1a>
 8006326:	f000 f887 	bl	8006438 <__sinit>
 800632a:	4b14      	ldr	r3, [pc, #80]	; (800637c <_fflush_r+0x6c>)
 800632c:	429c      	cmp	r4, r3
 800632e:	d11b      	bne.n	8006368 <_fflush_r+0x58>
 8006330:	686c      	ldr	r4, [r5, #4]
 8006332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ef      	beq.n	800631a <_fflush_r+0xa>
 800633a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800633c:	07d0      	lsls	r0, r2, #31
 800633e:	d404      	bmi.n	800634a <_fflush_r+0x3a>
 8006340:	0599      	lsls	r1, r3, #22
 8006342:	d402      	bmi.n	800634a <_fflush_r+0x3a>
 8006344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006346:	f000 f91a 	bl	800657e <__retarget_lock_acquire_recursive>
 800634a:	4628      	mov	r0, r5
 800634c:	4621      	mov	r1, r4
 800634e:	f7ff ff59 	bl	8006204 <__sflush_r>
 8006352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	4605      	mov	r5, r0
 8006358:	d4e0      	bmi.n	800631c <_fflush_r+0xc>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	059b      	lsls	r3, r3, #22
 800635e:	d4dd      	bmi.n	800631c <_fflush_r+0xc>
 8006360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006362:	f000 f90d 	bl	8006580 <__retarget_lock_release_recursive>
 8006366:	e7d9      	b.n	800631c <_fflush_r+0xc>
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <_fflush_r+0x70>)
 800636a:	429c      	cmp	r4, r3
 800636c:	d101      	bne.n	8006372 <_fflush_r+0x62>
 800636e:	68ac      	ldr	r4, [r5, #8]
 8006370:	e7df      	b.n	8006332 <_fflush_r+0x22>
 8006372:	4b04      	ldr	r3, [pc, #16]	; (8006384 <_fflush_r+0x74>)
 8006374:	429c      	cmp	r4, r3
 8006376:	bf08      	it	eq
 8006378:	68ec      	ldreq	r4, [r5, #12]
 800637a:	e7da      	b.n	8006332 <_fflush_r+0x22>
 800637c:	080077b8 	.word	0x080077b8
 8006380:	080077d8 	.word	0x080077d8
 8006384:	08007798 	.word	0x08007798

08006388 <std>:
 8006388:	2300      	movs	r3, #0
 800638a:	b510      	push	{r4, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	e9c0 3300 	strd	r3, r3, [r0]
 8006392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006396:	6083      	str	r3, [r0, #8]
 8006398:	8181      	strh	r1, [r0, #12]
 800639a:	6643      	str	r3, [r0, #100]	; 0x64
 800639c:	81c2      	strh	r2, [r0, #14]
 800639e:	6183      	str	r3, [r0, #24]
 80063a0:	4619      	mov	r1, r3
 80063a2:	2208      	movs	r2, #8
 80063a4:	305c      	adds	r0, #92	; 0x5c
 80063a6:	f7fe fc0b 	bl	8004bc0 <memset>
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <std+0x38>)
 80063ac:	6263      	str	r3, [r4, #36]	; 0x24
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <std+0x3c>)
 80063b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <std+0x40>)
 80063b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <std+0x44>)
 80063b8:	6224      	str	r4, [r4, #32]
 80063ba:	6323      	str	r3, [r4, #48]	; 0x30
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	bf00      	nop
 80063c0:	08007241 	.word	0x08007241
 80063c4:	08007263 	.word	0x08007263
 80063c8:	0800729b 	.word	0x0800729b
 80063cc:	080072bf 	.word	0x080072bf

080063d0 <_cleanup_r>:
 80063d0:	4901      	ldr	r1, [pc, #4]	; (80063d8 <_cleanup_r+0x8>)
 80063d2:	f000 b8af 	b.w	8006534 <_fwalk_reent>
 80063d6:	bf00      	nop
 80063d8:	08006311 	.word	0x08006311

080063dc <__sfmoreglue>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	2268      	movs	r2, #104	; 0x68
 80063e0:	1e4d      	subs	r5, r1, #1
 80063e2:	4355      	muls	r5, r2
 80063e4:	460e      	mov	r6, r1
 80063e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063ea:	f000 fd4b 	bl	8006e84 <_malloc_r>
 80063ee:	4604      	mov	r4, r0
 80063f0:	b140      	cbz	r0, 8006404 <__sfmoreglue+0x28>
 80063f2:	2100      	movs	r1, #0
 80063f4:	e9c0 1600 	strd	r1, r6, [r0]
 80063f8:	300c      	adds	r0, #12
 80063fa:	60a0      	str	r0, [r4, #8]
 80063fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006400:	f7fe fbde 	bl	8004bc0 <memset>
 8006404:	4620      	mov	r0, r4
 8006406:	bd70      	pop	{r4, r5, r6, pc}

08006408 <__sfp_lock_acquire>:
 8006408:	4801      	ldr	r0, [pc, #4]	; (8006410 <__sfp_lock_acquire+0x8>)
 800640a:	f000 b8b8 	b.w	800657e <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	20000585 	.word	0x20000585

08006414 <__sfp_lock_release>:
 8006414:	4801      	ldr	r0, [pc, #4]	; (800641c <__sfp_lock_release+0x8>)
 8006416:	f000 b8b3 	b.w	8006580 <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	20000585 	.word	0x20000585

08006420 <__sinit_lock_acquire>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__sinit_lock_acquire+0x8>)
 8006422:	f000 b8ac 	b.w	800657e <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	20000586 	.word	0x20000586

0800642c <__sinit_lock_release>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__sinit_lock_release+0x8>)
 800642e:	f000 b8a7 	b.w	8006580 <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	20000586 	.word	0x20000586

08006438 <__sinit>:
 8006438:	b510      	push	{r4, lr}
 800643a:	4604      	mov	r4, r0
 800643c:	f7ff fff0 	bl	8006420 <__sinit_lock_acquire>
 8006440:	69a3      	ldr	r3, [r4, #24]
 8006442:	b11b      	cbz	r3, 800644c <__sinit+0x14>
 8006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006448:	f7ff bff0 	b.w	800642c <__sinit_lock_release>
 800644c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006450:	6523      	str	r3, [r4, #80]	; 0x50
 8006452:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <__sinit+0x68>)
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <__sinit+0x6c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	62a2      	str	r2, [r4, #40]	; 0x28
 800645a:	42a3      	cmp	r3, r4
 800645c:	bf04      	itt	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	61a3      	streq	r3, [r4, #24]
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f820 	bl	80064a8 <__sfp>
 8006468:	6060      	str	r0, [r4, #4]
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f81c 	bl	80064a8 <__sfp>
 8006470:	60a0      	str	r0, [r4, #8]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f818 	bl	80064a8 <__sfp>
 8006478:	2200      	movs	r2, #0
 800647a:	60e0      	str	r0, [r4, #12]
 800647c:	2104      	movs	r1, #4
 800647e:	6860      	ldr	r0, [r4, #4]
 8006480:	f7ff ff82 	bl	8006388 <std>
 8006484:	68a0      	ldr	r0, [r4, #8]
 8006486:	2201      	movs	r2, #1
 8006488:	2109      	movs	r1, #9
 800648a:	f7ff ff7d 	bl	8006388 <std>
 800648e:	68e0      	ldr	r0, [r4, #12]
 8006490:	2202      	movs	r2, #2
 8006492:	2112      	movs	r1, #18
 8006494:	f7ff ff78 	bl	8006388 <std>
 8006498:	2301      	movs	r3, #1
 800649a:	61a3      	str	r3, [r4, #24]
 800649c:	e7d2      	b.n	8006444 <__sinit+0xc>
 800649e:	bf00      	nop
 80064a0:	080076d0 	.word	0x080076d0
 80064a4:	080063d1 	.word	0x080063d1

080064a8 <__sfp>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	4607      	mov	r7, r0
 80064ac:	f7ff ffac 	bl	8006408 <__sfp_lock_acquire>
 80064b0:	4b1e      	ldr	r3, [pc, #120]	; (800652c <__sfp+0x84>)
 80064b2:	681e      	ldr	r6, [r3, #0]
 80064b4:	69b3      	ldr	r3, [r6, #24]
 80064b6:	b913      	cbnz	r3, 80064be <__sfp+0x16>
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7ff ffbd 	bl	8006438 <__sinit>
 80064be:	3648      	adds	r6, #72	; 0x48
 80064c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	d503      	bpl.n	80064d0 <__sfp+0x28>
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	b30b      	cbz	r3, 8006510 <__sfp+0x68>
 80064cc:	6836      	ldr	r6, [r6, #0]
 80064ce:	e7f7      	b.n	80064c0 <__sfp+0x18>
 80064d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064d4:	b9d5      	cbnz	r5, 800650c <__sfp+0x64>
 80064d6:	4b16      	ldr	r3, [pc, #88]	; (8006530 <__sfp+0x88>)
 80064d8:	60e3      	str	r3, [r4, #12]
 80064da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064de:	6665      	str	r5, [r4, #100]	; 0x64
 80064e0:	f000 f84c 	bl	800657c <__retarget_lock_init_recursive>
 80064e4:	f7ff ff96 	bl	8006414 <__sfp_lock_release>
 80064e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064f0:	6025      	str	r5, [r4, #0]
 80064f2:	61a5      	str	r5, [r4, #24]
 80064f4:	2208      	movs	r2, #8
 80064f6:	4629      	mov	r1, r5
 80064f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064fc:	f7fe fb60 	bl	8004bc0 <memset>
 8006500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006508:	4620      	mov	r0, r4
 800650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650c:	3468      	adds	r4, #104	; 0x68
 800650e:	e7d9      	b.n	80064c4 <__sfp+0x1c>
 8006510:	2104      	movs	r1, #4
 8006512:	4638      	mov	r0, r7
 8006514:	f7ff ff62 	bl	80063dc <__sfmoreglue>
 8006518:	4604      	mov	r4, r0
 800651a:	6030      	str	r0, [r6, #0]
 800651c:	2800      	cmp	r0, #0
 800651e:	d1d5      	bne.n	80064cc <__sfp+0x24>
 8006520:	f7ff ff78 	bl	8006414 <__sfp_lock_release>
 8006524:	230c      	movs	r3, #12
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	e7ee      	b.n	8006508 <__sfp+0x60>
 800652a:	bf00      	nop
 800652c:	080076d0 	.word	0x080076d0
 8006530:	ffff0001 	.word	0xffff0001

08006534 <_fwalk_reent>:
 8006534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006538:	4606      	mov	r6, r0
 800653a:	4688      	mov	r8, r1
 800653c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006540:	2700      	movs	r7, #0
 8006542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006546:	f1b9 0901 	subs.w	r9, r9, #1
 800654a:	d505      	bpl.n	8006558 <_fwalk_reent+0x24>
 800654c:	6824      	ldr	r4, [r4, #0]
 800654e:	2c00      	cmp	r4, #0
 8006550:	d1f7      	bne.n	8006542 <_fwalk_reent+0xe>
 8006552:	4638      	mov	r0, r7
 8006554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006558:	89ab      	ldrh	r3, [r5, #12]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d907      	bls.n	800656e <_fwalk_reent+0x3a>
 800655e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006562:	3301      	adds	r3, #1
 8006564:	d003      	beq.n	800656e <_fwalk_reent+0x3a>
 8006566:	4629      	mov	r1, r5
 8006568:	4630      	mov	r0, r6
 800656a:	47c0      	blx	r8
 800656c:	4307      	orrs	r7, r0
 800656e:	3568      	adds	r5, #104	; 0x68
 8006570:	e7e9      	b.n	8006546 <_fwalk_reent+0x12>
	...

08006574 <_localeconv_r>:
 8006574:	4800      	ldr	r0, [pc, #0]	; (8006578 <_localeconv_r+0x4>)
 8006576:	4770      	bx	lr
 8006578:	200002cc 	.word	0x200002cc

0800657c <__retarget_lock_init_recursive>:
 800657c:	4770      	bx	lr

0800657e <__retarget_lock_acquire_recursive>:
 800657e:	4770      	bx	lr

08006580 <__retarget_lock_release_recursive>:
 8006580:	4770      	bx	lr

08006582 <__swhatbuf_r>:
 8006582:	b570      	push	{r4, r5, r6, lr}
 8006584:	460e      	mov	r6, r1
 8006586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658a:	2900      	cmp	r1, #0
 800658c:	b096      	sub	sp, #88	; 0x58
 800658e:	4614      	mov	r4, r2
 8006590:	461d      	mov	r5, r3
 8006592:	da08      	bge.n	80065a6 <__swhatbuf_r+0x24>
 8006594:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	602a      	str	r2, [r5, #0]
 800659c:	061a      	lsls	r2, r3, #24
 800659e:	d410      	bmi.n	80065c2 <__swhatbuf_r+0x40>
 80065a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065a4:	e00e      	b.n	80065c4 <__swhatbuf_r+0x42>
 80065a6:	466a      	mov	r2, sp
 80065a8:	f000 ffa0 	bl	80074ec <_fstat_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dbf1      	blt.n	8006594 <__swhatbuf_r+0x12>
 80065b0:	9a01      	ldr	r2, [sp, #4]
 80065b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065ba:	425a      	negs	r2, r3
 80065bc:	415a      	adcs	r2, r3
 80065be:	602a      	str	r2, [r5, #0]
 80065c0:	e7ee      	b.n	80065a0 <__swhatbuf_r+0x1e>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	2000      	movs	r0, #0
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	b016      	add	sp, #88	; 0x58
 80065ca:	bd70      	pop	{r4, r5, r6, pc}

080065cc <__smakebuf_r>:
 80065cc:	898b      	ldrh	r3, [r1, #12]
 80065ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065d0:	079d      	lsls	r5, r3, #30
 80065d2:	4606      	mov	r6, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d507      	bpl.n	80065e8 <__smakebuf_r+0x1c>
 80065d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	2301      	movs	r3, #1
 80065e2:	6163      	str	r3, [r4, #20]
 80065e4:	b002      	add	sp, #8
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	ab01      	add	r3, sp, #4
 80065ea:	466a      	mov	r2, sp
 80065ec:	f7ff ffc9 	bl	8006582 <__swhatbuf_r>
 80065f0:	9900      	ldr	r1, [sp, #0]
 80065f2:	4605      	mov	r5, r0
 80065f4:	4630      	mov	r0, r6
 80065f6:	f000 fc45 	bl	8006e84 <_malloc_r>
 80065fa:	b948      	cbnz	r0, 8006610 <__smakebuf_r+0x44>
 80065fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006600:	059a      	lsls	r2, r3, #22
 8006602:	d4ef      	bmi.n	80065e4 <__smakebuf_r+0x18>
 8006604:	f023 0303 	bic.w	r3, r3, #3
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	e7e3      	b.n	80065d8 <__smakebuf_r+0xc>
 8006610:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <__smakebuf_r+0x7c>)
 8006612:	62b3      	str	r3, [r6, #40]	; 0x28
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	6020      	str	r0, [r4, #0]
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	9b00      	ldr	r3, [sp, #0]
 8006620:	6163      	str	r3, [r4, #20]
 8006622:	9b01      	ldr	r3, [sp, #4]
 8006624:	6120      	str	r0, [r4, #16]
 8006626:	b15b      	cbz	r3, 8006640 <__smakebuf_r+0x74>
 8006628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662c:	4630      	mov	r0, r6
 800662e:	f000 ff6f 	bl	8007510 <_isatty_r>
 8006632:	b128      	cbz	r0, 8006640 <__smakebuf_r+0x74>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	89a0      	ldrh	r0, [r4, #12]
 8006642:	4305      	orrs	r5, r0
 8006644:	81a5      	strh	r5, [r4, #12]
 8006646:	e7cd      	b.n	80065e4 <__smakebuf_r+0x18>
 8006648:	080063d1 	.word	0x080063d1

0800664c <malloc>:
 800664c:	4b02      	ldr	r3, [pc, #8]	; (8006658 <malloc+0xc>)
 800664e:	4601      	mov	r1, r0
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	f000 bc17 	b.w	8006e84 <_malloc_r>
 8006656:	bf00      	nop
 8006658:	20000178 	.word	0x20000178

0800665c <memcpy>:
 800665c:	440a      	add	r2, r1
 800665e:	4291      	cmp	r1, r2
 8006660:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006664:	d100      	bne.n	8006668 <memcpy+0xc>
 8006666:	4770      	bx	lr
 8006668:	b510      	push	{r4, lr}
 800666a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800666e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006672:	4291      	cmp	r1, r2
 8006674:	d1f9      	bne.n	800666a <memcpy+0xe>
 8006676:	bd10      	pop	{r4, pc}

08006678 <_Balloc>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800667c:	4604      	mov	r4, r0
 800667e:	460d      	mov	r5, r1
 8006680:	b976      	cbnz	r6, 80066a0 <_Balloc+0x28>
 8006682:	2010      	movs	r0, #16
 8006684:	f7ff ffe2 	bl	800664c <malloc>
 8006688:	4602      	mov	r2, r0
 800668a:	6260      	str	r0, [r4, #36]	; 0x24
 800668c:	b920      	cbnz	r0, 8006698 <_Balloc+0x20>
 800668e:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <_Balloc+0x78>)
 8006690:	4818      	ldr	r0, [pc, #96]	; (80066f4 <_Balloc+0x7c>)
 8006692:	2166      	movs	r1, #102	; 0x66
 8006694:	f000 feea 	bl	800746c <__assert_func>
 8006698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800669c:	6006      	str	r6, [r0, #0]
 800669e:	60c6      	str	r6, [r0, #12]
 80066a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066a2:	68f3      	ldr	r3, [r6, #12]
 80066a4:	b183      	cbz	r3, 80066c8 <_Balloc+0x50>
 80066a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ae:	b9b8      	cbnz	r0, 80066e0 <_Balloc+0x68>
 80066b0:	2101      	movs	r1, #1
 80066b2:	fa01 f605 	lsl.w	r6, r1, r5
 80066b6:	1d72      	adds	r2, r6, #5
 80066b8:	0092      	lsls	r2, r2, #2
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 fb60 	bl	8006d80 <_calloc_r>
 80066c0:	b160      	cbz	r0, 80066dc <_Balloc+0x64>
 80066c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066c6:	e00e      	b.n	80066e6 <_Balloc+0x6e>
 80066c8:	2221      	movs	r2, #33	; 0x21
 80066ca:	2104      	movs	r1, #4
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fb57 	bl	8006d80 <_calloc_r>
 80066d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d4:	60f0      	str	r0, [r6, #12]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e4      	bne.n	80066a6 <_Balloc+0x2e>
 80066dc:	2000      	movs	r0, #0
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	6802      	ldr	r2, [r0, #0]
 80066e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066e6:	2300      	movs	r3, #0
 80066e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066ec:	e7f7      	b.n	80066de <_Balloc+0x66>
 80066ee:	bf00      	nop
 80066f0:	08007715 	.word	0x08007715
 80066f4:	080077f8 	.word	0x080077f8

080066f8 <_Bfree>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	b976      	cbnz	r6, 8006720 <_Bfree+0x28>
 8006702:	2010      	movs	r0, #16
 8006704:	f7ff ffa2 	bl	800664c <malloc>
 8006708:	4602      	mov	r2, r0
 800670a:	6268      	str	r0, [r5, #36]	; 0x24
 800670c:	b920      	cbnz	r0, 8006718 <_Bfree+0x20>
 800670e:	4b09      	ldr	r3, [pc, #36]	; (8006734 <_Bfree+0x3c>)
 8006710:	4809      	ldr	r0, [pc, #36]	; (8006738 <_Bfree+0x40>)
 8006712:	218a      	movs	r1, #138	; 0x8a
 8006714:	f000 feaa 	bl	800746c <__assert_func>
 8006718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800671c:	6006      	str	r6, [r0, #0]
 800671e:	60c6      	str	r6, [r0, #12]
 8006720:	b13c      	cbz	r4, 8006732 <_Bfree+0x3a>
 8006722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006724:	6862      	ldr	r2, [r4, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800672c:	6021      	str	r1, [r4, #0]
 800672e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	08007715 	.word	0x08007715
 8006738:	080077f8 	.word	0x080077f8

0800673c <__multadd>:
 800673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006740:	690d      	ldr	r5, [r1, #16]
 8006742:	4607      	mov	r7, r0
 8006744:	460c      	mov	r4, r1
 8006746:	461e      	mov	r6, r3
 8006748:	f101 0c14 	add.w	ip, r1, #20
 800674c:	2000      	movs	r0, #0
 800674e:	f8dc 3000 	ldr.w	r3, [ip]
 8006752:	b299      	uxth	r1, r3
 8006754:	fb02 6101 	mla	r1, r2, r1, r6
 8006758:	0c1e      	lsrs	r6, r3, #16
 800675a:	0c0b      	lsrs	r3, r1, #16
 800675c:	fb02 3306 	mla	r3, r2, r6, r3
 8006760:	b289      	uxth	r1, r1
 8006762:	3001      	adds	r0, #1
 8006764:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006768:	4285      	cmp	r5, r0
 800676a:	f84c 1b04 	str.w	r1, [ip], #4
 800676e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006772:	dcec      	bgt.n	800674e <__multadd+0x12>
 8006774:	b30e      	cbz	r6, 80067ba <__multadd+0x7e>
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc19      	bgt.n	80067b0 <__multadd+0x74>
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	4638      	mov	r0, r7
 8006780:	3101      	adds	r1, #1
 8006782:	f7ff ff79 	bl	8006678 <_Balloc>
 8006786:	4680      	mov	r8, r0
 8006788:	b928      	cbnz	r0, 8006796 <__multadd+0x5a>
 800678a:	4602      	mov	r2, r0
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <__multadd+0x84>)
 800678e:	480d      	ldr	r0, [pc, #52]	; (80067c4 <__multadd+0x88>)
 8006790:	21b5      	movs	r1, #181	; 0xb5
 8006792:	f000 fe6b 	bl	800746c <__assert_func>
 8006796:	6922      	ldr	r2, [r4, #16]
 8006798:	3202      	adds	r2, #2
 800679a:	f104 010c 	add.w	r1, r4, #12
 800679e:	0092      	lsls	r2, r2, #2
 80067a0:	300c      	adds	r0, #12
 80067a2:	f7ff ff5b 	bl	800665c <memcpy>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff ffa5 	bl	80066f8 <_Bfree>
 80067ae:	4644      	mov	r4, r8
 80067b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067b4:	3501      	adds	r5, #1
 80067b6:	615e      	str	r6, [r3, #20]
 80067b8:	6125      	str	r5, [r4, #16]
 80067ba:	4620      	mov	r0, r4
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	08007787 	.word	0x08007787
 80067c4:	080077f8 	.word	0x080077f8

080067c8 <__hi0bits>:
 80067c8:	0c03      	lsrs	r3, r0, #16
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	b9d3      	cbnz	r3, 8006804 <__hi0bits+0x3c>
 80067ce:	0400      	lsls	r0, r0, #16
 80067d0:	2310      	movs	r3, #16
 80067d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80067d6:	bf04      	itt	eq
 80067d8:	0200      	lsleq	r0, r0, #8
 80067da:	3308      	addeq	r3, #8
 80067dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067e0:	bf04      	itt	eq
 80067e2:	0100      	lsleq	r0, r0, #4
 80067e4:	3304      	addeq	r3, #4
 80067e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067ea:	bf04      	itt	eq
 80067ec:	0080      	lsleq	r0, r0, #2
 80067ee:	3302      	addeq	r3, #2
 80067f0:	2800      	cmp	r0, #0
 80067f2:	db05      	blt.n	8006800 <__hi0bits+0x38>
 80067f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067f8:	f103 0301 	add.w	r3, r3, #1
 80067fc:	bf08      	it	eq
 80067fe:	2320      	moveq	r3, #32
 8006800:	4618      	mov	r0, r3
 8006802:	4770      	bx	lr
 8006804:	2300      	movs	r3, #0
 8006806:	e7e4      	b.n	80067d2 <__hi0bits+0xa>

08006808 <__lo0bits>:
 8006808:	6803      	ldr	r3, [r0, #0]
 800680a:	f013 0207 	ands.w	r2, r3, #7
 800680e:	4601      	mov	r1, r0
 8006810:	d00b      	beq.n	800682a <__lo0bits+0x22>
 8006812:	07da      	lsls	r2, r3, #31
 8006814:	d423      	bmi.n	800685e <__lo0bits+0x56>
 8006816:	0798      	lsls	r0, r3, #30
 8006818:	bf49      	itett	mi
 800681a:	085b      	lsrmi	r3, r3, #1
 800681c:	089b      	lsrpl	r3, r3, #2
 800681e:	2001      	movmi	r0, #1
 8006820:	600b      	strmi	r3, [r1, #0]
 8006822:	bf5c      	itt	pl
 8006824:	600b      	strpl	r3, [r1, #0]
 8006826:	2002      	movpl	r0, #2
 8006828:	4770      	bx	lr
 800682a:	b298      	uxth	r0, r3
 800682c:	b9a8      	cbnz	r0, 800685a <__lo0bits+0x52>
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	2010      	movs	r0, #16
 8006832:	b2da      	uxtb	r2, r3
 8006834:	b90a      	cbnz	r2, 800683a <__lo0bits+0x32>
 8006836:	3008      	adds	r0, #8
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	071a      	lsls	r2, r3, #28
 800683c:	bf04      	itt	eq
 800683e:	091b      	lsreq	r3, r3, #4
 8006840:	3004      	addeq	r0, #4
 8006842:	079a      	lsls	r2, r3, #30
 8006844:	bf04      	itt	eq
 8006846:	089b      	lsreq	r3, r3, #2
 8006848:	3002      	addeq	r0, #2
 800684a:	07da      	lsls	r2, r3, #31
 800684c:	d403      	bmi.n	8006856 <__lo0bits+0x4e>
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	f100 0001 	add.w	r0, r0, #1
 8006854:	d005      	beq.n	8006862 <__lo0bits+0x5a>
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	4770      	bx	lr
 800685a:	4610      	mov	r0, r2
 800685c:	e7e9      	b.n	8006832 <__lo0bits+0x2a>
 800685e:	2000      	movs	r0, #0
 8006860:	4770      	bx	lr
 8006862:	2020      	movs	r0, #32
 8006864:	4770      	bx	lr
	...

08006868 <__i2b>:
 8006868:	b510      	push	{r4, lr}
 800686a:	460c      	mov	r4, r1
 800686c:	2101      	movs	r1, #1
 800686e:	f7ff ff03 	bl	8006678 <_Balloc>
 8006872:	4602      	mov	r2, r0
 8006874:	b928      	cbnz	r0, 8006882 <__i2b+0x1a>
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <__i2b+0x24>)
 8006878:	4805      	ldr	r0, [pc, #20]	; (8006890 <__i2b+0x28>)
 800687a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800687e:	f000 fdf5 	bl	800746c <__assert_func>
 8006882:	2301      	movs	r3, #1
 8006884:	6144      	str	r4, [r0, #20]
 8006886:	6103      	str	r3, [r0, #16]
 8006888:	bd10      	pop	{r4, pc}
 800688a:	bf00      	nop
 800688c:	08007787 	.word	0x08007787
 8006890:	080077f8 	.word	0x080077f8

08006894 <__multiply>:
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	4691      	mov	r9, r2
 800689a:	690a      	ldr	r2, [r1, #16]
 800689c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	bfb8      	it	lt
 80068a4:	460b      	movlt	r3, r1
 80068a6:	460c      	mov	r4, r1
 80068a8:	bfbc      	itt	lt
 80068aa:	464c      	movlt	r4, r9
 80068ac:	4699      	movlt	r9, r3
 80068ae:	6927      	ldr	r7, [r4, #16]
 80068b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068b4:	68a3      	ldr	r3, [r4, #8]
 80068b6:	6861      	ldr	r1, [r4, #4]
 80068b8:	eb07 060a 	add.w	r6, r7, sl
 80068bc:	42b3      	cmp	r3, r6
 80068be:	b085      	sub	sp, #20
 80068c0:	bfb8      	it	lt
 80068c2:	3101      	addlt	r1, #1
 80068c4:	f7ff fed8 	bl	8006678 <_Balloc>
 80068c8:	b930      	cbnz	r0, 80068d8 <__multiply+0x44>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4b44      	ldr	r3, [pc, #272]	; (80069e0 <__multiply+0x14c>)
 80068ce:	4845      	ldr	r0, [pc, #276]	; (80069e4 <__multiply+0x150>)
 80068d0:	f240 115d 	movw	r1, #349	; 0x15d
 80068d4:	f000 fdca 	bl	800746c <__assert_func>
 80068d8:	f100 0514 	add.w	r5, r0, #20
 80068dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068e0:	462b      	mov	r3, r5
 80068e2:	2200      	movs	r2, #0
 80068e4:	4543      	cmp	r3, r8
 80068e6:	d321      	bcc.n	800692c <__multiply+0x98>
 80068e8:	f104 0314 	add.w	r3, r4, #20
 80068ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068f0:	f109 0314 	add.w	r3, r9, #20
 80068f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068f8:	9202      	str	r2, [sp, #8]
 80068fa:	1b3a      	subs	r2, r7, r4
 80068fc:	3a15      	subs	r2, #21
 80068fe:	f022 0203 	bic.w	r2, r2, #3
 8006902:	3204      	adds	r2, #4
 8006904:	f104 0115 	add.w	r1, r4, #21
 8006908:	428f      	cmp	r7, r1
 800690a:	bf38      	it	cc
 800690c:	2204      	movcc	r2, #4
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	9a02      	ldr	r2, [sp, #8]
 8006912:	9303      	str	r3, [sp, #12]
 8006914:	429a      	cmp	r2, r3
 8006916:	d80c      	bhi.n	8006932 <__multiply+0x9e>
 8006918:	2e00      	cmp	r6, #0
 800691a:	dd03      	ble.n	8006924 <__multiply+0x90>
 800691c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006920:	2b00      	cmp	r3, #0
 8006922:	d05a      	beq.n	80069da <__multiply+0x146>
 8006924:	6106      	str	r6, [r0, #16]
 8006926:	b005      	add	sp, #20
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	f843 2b04 	str.w	r2, [r3], #4
 8006930:	e7d8      	b.n	80068e4 <__multiply+0x50>
 8006932:	f8b3 a000 	ldrh.w	sl, [r3]
 8006936:	f1ba 0f00 	cmp.w	sl, #0
 800693a:	d024      	beq.n	8006986 <__multiply+0xf2>
 800693c:	f104 0e14 	add.w	lr, r4, #20
 8006940:	46a9      	mov	r9, r5
 8006942:	f04f 0c00 	mov.w	ip, #0
 8006946:	f85e 2b04 	ldr.w	r2, [lr], #4
 800694a:	f8d9 1000 	ldr.w	r1, [r9]
 800694e:	fa1f fb82 	uxth.w	fp, r2
 8006952:	b289      	uxth	r1, r1
 8006954:	fb0a 110b 	mla	r1, sl, fp, r1
 8006958:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800695c:	f8d9 2000 	ldr.w	r2, [r9]
 8006960:	4461      	add	r1, ip
 8006962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006966:	fb0a c20b 	mla	r2, sl, fp, ip
 800696a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800696e:	b289      	uxth	r1, r1
 8006970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006974:	4577      	cmp	r7, lr
 8006976:	f849 1b04 	str.w	r1, [r9], #4
 800697a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800697e:	d8e2      	bhi.n	8006946 <__multiply+0xb2>
 8006980:	9a01      	ldr	r2, [sp, #4]
 8006982:	f845 c002 	str.w	ip, [r5, r2]
 8006986:	9a03      	ldr	r2, [sp, #12]
 8006988:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800698c:	3304      	adds	r3, #4
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d020      	beq.n	80069d6 <__multiply+0x142>
 8006994:	6829      	ldr	r1, [r5, #0]
 8006996:	f104 0c14 	add.w	ip, r4, #20
 800699a:	46ae      	mov	lr, r5
 800699c:	f04f 0a00 	mov.w	sl, #0
 80069a0:	f8bc b000 	ldrh.w	fp, [ip]
 80069a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069a8:	fb09 220b 	mla	r2, r9, fp, r2
 80069ac:	4492      	add	sl, r2
 80069ae:	b289      	uxth	r1, r1
 80069b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069b4:	f84e 1b04 	str.w	r1, [lr], #4
 80069b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069bc:	f8be 1000 	ldrh.w	r1, [lr]
 80069c0:	0c12      	lsrs	r2, r2, #16
 80069c2:	fb09 1102 	mla	r1, r9, r2, r1
 80069c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069ca:	4567      	cmp	r7, ip
 80069cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069d0:	d8e6      	bhi.n	80069a0 <__multiply+0x10c>
 80069d2:	9a01      	ldr	r2, [sp, #4]
 80069d4:	50a9      	str	r1, [r5, r2]
 80069d6:	3504      	adds	r5, #4
 80069d8:	e79a      	b.n	8006910 <__multiply+0x7c>
 80069da:	3e01      	subs	r6, #1
 80069dc:	e79c      	b.n	8006918 <__multiply+0x84>
 80069de:	bf00      	nop
 80069e0:	08007787 	.word	0x08007787
 80069e4:	080077f8 	.word	0x080077f8

080069e8 <__pow5mult>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4615      	mov	r5, r2
 80069ee:	f012 0203 	ands.w	r2, r2, #3
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	d007      	beq.n	8006a08 <__pow5mult+0x20>
 80069f8:	4c25      	ldr	r4, [pc, #148]	; (8006a90 <__pow5mult+0xa8>)
 80069fa:	3a01      	subs	r2, #1
 80069fc:	2300      	movs	r3, #0
 80069fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a02:	f7ff fe9b 	bl	800673c <__multadd>
 8006a06:	4607      	mov	r7, r0
 8006a08:	10ad      	asrs	r5, r5, #2
 8006a0a:	d03d      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a0e:	b97c      	cbnz	r4, 8006a30 <__pow5mult+0x48>
 8006a10:	2010      	movs	r0, #16
 8006a12:	f7ff fe1b 	bl	800664c <malloc>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6270      	str	r0, [r6, #36]	; 0x24
 8006a1a:	b928      	cbnz	r0, 8006a28 <__pow5mult+0x40>
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <__pow5mult+0xac>)
 8006a1e:	481e      	ldr	r0, [pc, #120]	; (8006a98 <__pow5mult+0xb0>)
 8006a20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a24:	f000 fd22 	bl	800746c <__assert_func>
 8006a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a2c:	6004      	str	r4, [r0, #0]
 8006a2e:	60c4      	str	r4, [r0, #12]
 8006a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a38:	b94c      	cbnz	r4, 8006a4e <__pow5mult+0x66>
 8006a3a:	f240 2171 	movw	r1, #625	; 0x271
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff ff12 	bl	8006868 <__i2b>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	f04f 0900 	mov.w	r9, #0
 8006a52:	07eb      	lsls	r3, r5, #31
 8006a54:	d50a      	bpl.n	8006a6c <__pow5mult+0x84>
 8006a56:	4639      	mov	r1, r7
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff1a 	bl	8006894 <__multiply>
 8006a60:	4639      	mov	r1, r7
 8006a62:	4680      	mov	r8, r0
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff fe47 	bl	80066f8 <_Bfree>
 8006a6a:	4647      	mov	r7, r8
 8006a6c:	106d      	asrs	r5, r5, #1
 8006a6e:	d00b      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	b938      	cbnz	r0, 8006a84 <__pow5mult+0x9c>
 8006a74:	4622      	mov	r2, r4
 8006a76:	4621      	mov	r1, r4
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff ff0b 	bl	8006894 <__multiply>
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	f8c0 9000 	str.w	r9, [r0]
 8006a84:	4604      	mov	r4, r0
 8006a86:	e7e4      	b.n	8006a52 <__pow5mult+0x6a>
 8006a88:	4638      	mov	r0, r7
 8006a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8e:	bf00      	nop
 8006a90:	08007948 	.word	0x08007948
 8006a94:	08007715 	.word	0x08007715
 8006a98:	080077f8 	.word	0x080077f8

08006a9c <__lshift>:
 8006a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	6849      	ldr	r1, [r1, #4]
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	4607      	mov	r7, r0
 8006aae:	4691      	mov	r9, r2
 8006ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ab4:	f108 0601 	add.w	r6, r8, #1
 8006ab8:	42b3      	cmp	r3, r6
 8006aba:	db0b      	blt.n	8006ad4 <__lshift+0x38>
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7ff fddb 	bl	8006678 <_Balloc>
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b948      	cbnz	r0, 8006ada <__lshift+0x3e>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	4b2a      	ldr	r3, [pc, #168]	; (8006b74 <__lshift+0xd8>)
 8006aca:	482b      	ldr	r0, [pc, #172]	; (8006b78 <__lshift+0xdc>)
 8006acc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ad0:	f000 fccc 	bl	800746c <__assert_func>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__lshift+0x1c>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f100 0114 	add.w	r1, r0, #20
 8006ae0:	f100 0210 	add.w	r2, r0, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	4553      	cmp	r3, sl
 8006ae8:	db37      	blt.n	8006b5a <__lshift+0xbe>
 8006aea:	6920      	ldr	r0, [r4, #16]
 8006aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006af0:	f104 0314 	add.w	r3, r4, #20
 8006af4:	f019 091f 	ands.w	r9, r9, #31
 8006af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b00:	d02f      	beq.n	8006b62 <__lshift+0xc6>
 8006b02:	f1c9 0e20 	rsb	lr, r9, #32
 8006b06:	468a      	mov	sl, r1
 8006b08:	f04f 0c00 	mov.w	ip, #0
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	fa02 f209 	lsl.w	r2, r2, r9
 8006b12:	ea42 020c 	orr.w	r2, r2, ip
 8006b16:	f84a 2b04 	str.w	r2, [sl], #4
 8006b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1e:	4298      	cmp	r0, r3
 8006b20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b24:	d8f2      	bhi.n	8006b0c <__lshift+0x70>
 8006b26:	1b03      	subs	r3, r0, r4
 8006b28:	3b15      	subs	r3, #21
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	3304      	adds	r3, #4
 8006b30:	f104 0215 	add.w	r2, r4, #21
 8006b34:	4290      	cmp	r0, r2
 8006b36:	bf38      	it	cc
 8006b38:	2304      	movcc	r3, #4
 8006b3a:	f841 c003 	str.w	ip, [r1, r3]
 8006b3e:	f1bc 0f00 	cmp.w	ip, #0
 8006b42:	d001      	beq.n	8006b48 <__lshift+0xac>
 8006b44:	f108 0602 	add.w	r6, r8, #2
 8006b48:	3e01      	subs	r6, #1
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	612e      	str	r6, [r5, #16]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	f7ff fdd2 	bl	80066f8 <_Bfree>
 8006b54:	4628      	mov	r0, r5
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b5e:	3301      	adds	r3, #1
 8006b60:	e7c1      	b.n	8006ae6 <__lshift+0x4a>
 8006b62:	3904      	subs	r1, #4
 8006b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b6c:	4298      	cmp	r0, r3
 8006b6e:	d8f9      	bhi.n	8006b64 <__lshift+0xc8>
 8006b70:	e7ea      	b.n	8006b48 <__lshift+0xac>
 8006b72:	bf00      	nop
 8006b74:	08007787 	.word	0x08007787
 8006b78:	080077f8 	.word	0x080077f8

08006b7c <__mcmp>:
 8006b7c:	b530      	push	{r4, r5, lr}
 8006b7e:	6902      	ldr	r2, [r0, #16]
 8006b80:	690c      	ldr	r4, [r1, #16]
 8006b82:	1b12      	subs	r2, r2, r4
 8006b84:	d10e      	bne.n	8006ba4 <__mcmp+0x28>
 8006b86:	f100 0314 	add.w	r3, r0, #20
 8006b8a:	3114      	adds	r1, #20
 8006b8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b9c:	42a5      	cmp	r5, r4
 8006b9e:	d003      	beq.n	8006ba8 <__mcmp+0x2c>
 8006ba0:	d305      	bcc.n	8006bae <__mcmp+0x32>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	bd30      	pop	{r4, r5, pc}
 8006ba8:	4283      	cmp	r3, r0
 8006baa:	d3f3      	bcc.n	8006b94 <__mcmp+0x18>
 8006bac:	e7fa      	b.n	8006ba4 <__mcmp+0x28>
 8006bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb2:	e7f7      	b.n	8006ba4 <__mcmp+0x28>

08006bb4 <__mdiff>:
 8006bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	460c      	mov	r4, r1
 8006bba:	4606      	mov	r6, r0
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4690      	mov	r8, r2
 8006bc2:	f7ff ffdb 	bl	8006b7c <__mcmp>
 8006bc6:	1e05      	subs	r5, r0, #0
 8006bc8:	d110      	bne.n	8006bec <__mdiff+0x38>
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f7ff fd53 	bl	8006678 <_Balloc>
 8006bd2:	b930      	cbnz	r0, 8006be2 <__mdiff+0x2e>
 8006bd4:	4b3a      	ldr	r3, [pc, #232]	; (8006cc0 <__mdiff+0x10c>)
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	f240 2132 	movw	r1, #562	; 0x232
 8006bdc:	4839      	ldr	r0, [pc, #228]	; (8006cc4 <__mdiff+0x110>)
 8006bde:	f000 fc45 	bl	800746c <__assert_func>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bec:	bfa4      	itt	ge
 8006bee:	4643      	movge	r3, r8
 8006bf0:	46a0      	movge	r8, r4
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bf8:	bfa6      	itte	ge
 8006bfa:	461c      	movge	r4, r3
 8006bfc:	2500      	movge	r5, #0
 8006bfe:	2501      	movlt	r5, #1
 8006c00:	f7ff fd3a 	bl	8006678 <_Balloc>
 8006c04:	b920      	cbnz	r0, 8006c10 <__mdiff+0x5c>
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <__mdiff+0x10c>)
 8006c08:	4602      	mov	r2, r0
 8006c0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c0e:	e7e5      	b.n	8006bdc <__mdiff+0x28>
 8006c10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c14:	6926      	ldr	r6, [r4, #16]
 8006c16:	60c5      	str	r5, [r0, #12]
 8006c18:	f104 0914 	add.w	r9, r4, #20
 8006c1c:	f108 0514 	add.w	r5, r8, #20
 8006c20:	f100 0e14 	add.w	lr, r0, #20
 8006c24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c2c:	f108 0210 	add.w	r2, r8, #16
 8006c30:	46f2      	mov	sl, lr
 8006c32:	2100      	movs	r1, #0
 8006c34:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c3c:	fa1f f883 	uxth.w	r8, r3
 8006c40:	fa11 f18b 	uxtah	r1, r1, fp
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	eba1 0808 	sub.w	r8, r1, r8
 8006c4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c52:	fa1f f888 	uxth.w	r8, r8
 8006c56:	1419      	asrs	r1, r3, #16
 8006c58:	454e      	cmp	r6, r9
 8006c5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c5e:	f84a 3b04 	str.w	r3, [sl], #4
 8006c62:	d8e7      	bhi.n	8006c34 <__mdiff+0x80>
 8006c64:	1b33      	subs	r3, r6, r4
 8006c66:	3b15      	subs	r3, #21
 8006c68:	f023 0303 	bic.w	r3, r3, #3
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	3415      	adds	r4, #21
 8006c70:	42a6      	cmp	r6, r4
 8006c72:	bf38      	it	cc
 8006c74:	2304      	movcc	r3, #4
 8006c76:	441d      	add	r5, r3
 8006c78:	4473      	add	r3, lr
 8006c7a:	469e      	mov	lr, r3
 8006c7c:	462e      	mov	r6, r5
 8006c7e:	4566      	cmp	r6, ip
 8006c80:	d30e      	bcc.n	8006ca0 <__mdiff+0xec>
 8006c82:	f10c 0203 	add.w	r2, ip, #3
 8006c86:	1b52      	subs	r2, r2, r5
 8006c88:	f022 0203 	bic.w	r2, r2, #3
 8006c8c:	3d03      	subs	r5, #3
 8006c8e:	45ac      	cmp	ip, r5
 8006c90:	bf38      	it	cc
 8006c92:	2200      	movcc	r2, #0
 8006c94:	441a      	add	r2, r3
 8006c96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c9a:	b17b      	cbz	r3, 8006cbc <__mdiff+0x108>
 8006c9c:	6107      	str	r7, [r0, #16]
 8006c9e:	e7a3      	b.n	8006be8 <__mdiff+0x34>
 8006ca0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ca4:	fa11 f288 	uxtah	r2, r1, r8
 8006ca8:	1414      	asrs	r4, r2, #16
 8006caa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cae:	b292      	uxth	r2, r2
 8006cb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006cb4:	f84e 2b04 	str.w	r2, [lr], #4
 8006cb8:	1421      	asrs	r1, r4, #16
 8006cba:	e7e0      	b.n	8006c7e <__mdiff+0xca>
 8006cbc:	3f01      	subs	r7, #1
 8006cbe:	e7ea      	b.n	8006c96 <__mdiff+0xe2>
 8006cc0:	08007787 	.word	0x08007787
 8006cc4:	080077f8 	.word	0x080077f8

08006cc8 <__d2b>:
 8006cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	4689      	mov	r9, r1
 8006cce:	2101      	movs	r1, #1
 8006cd0:	ec57 6b10 	vmov	r6, r7, d0
 8006cd4:	4690      	mov	r8, r2
 8006cd6:	f7ff fccf 	bl	8006678 <_Balloc>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	b930      	cbnz	r0, 8006cec <__d2b+0x24>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <__d2b+0xb0>)
 8006ce2:	4826      	ldr	r0, [pc, #152]	; (8006d7c <__d2b+0xb4>)
 8006ce4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ce8:	f000 fbc0 	bl	800746c <__assert_func>
 8006cec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006cf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cf4:	bb35      	cbnz	r5, 8006d44 <__d2b+0x7c>
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	d028      	beq.n	8006d4e <__d2b+0x86>
 8006cfc:	4668      	mov	r0, sp
 8006cfe:	9600      	str	r6, [sp, #0]
 8006d00:	f7ff fd82 	bl	8006808 <__lo0bits>
 8006d04:	9900      	ldr	r1, [sp, #0]
 8006d06:	b300      	cbz	r0, 8006d4a <__d2b+0x82>
 8006d08:	9a01      	ldr	r2, [sp, #4]
 8006d0a:	f1c0 0320 	rsb	r3, r0, #32
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	430b      	orrs	r3, r1
 8006d14:	40c2      	lsrs	r2, r0
 8006d16:	6163      	str	r3, [r4, #20]
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	9b01      	ldr	r3, [sp, #4]
 8006d1c:	61a3      	str	r3, [r4, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bf14      	ite	ne
 8006d22:	2202      	movne	r2, #2
 8006d24:	2201      	moveq	r2, #1
 8006d26:	6122      	str	r2, [r4, #16]
 8006d28:	b1d5      	cbz	r5, 8006d60 <__d2b+0x98>
 8006d2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d2e:	4405      	add	r5, r0
 8006d30:	f8c9 5000 	str.w	r5, [r9]
 8006d34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d38:	f8c8 0000 	str.w	r0, [r8]
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	b003      	add	sp, #12
 8006d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d48:	e7d5      	b.n	8006cf6 <__d2b+0x2e>
 8006d4a:	6161      	str	r1, [r4, #20]
 8006d4c:	e7e5      	b.n	8006d1a <__d2b+0x52>
 8006d4e:	a801      	add	r0, sp, #4
 8006d50:	f7ff fd5a 	bl	8006808 <__lo0bits>
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	6163      	str	r3, [r4, #20]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	6122      	str	r2, [r4, #16]
 8006d5c:	3020      	adds	r0, #32
 8006d5e:	e7e3      	b.n	8006d28 <__d2b+0x60>
 8006d60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d68:	f8c9 0000 	str.w	r0, [r9]
 8006d6c:	6918      	ldr	r0, [r3, #16]
 8006d6e:	f7ff fd2b 	bl	80067c8 <__hi0bits>
 8006d72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d76:	e7df      	b.n	8006d38 <__d2b+0x70>
 8006d78:	08007787 	.word	0x08007787
 8006d7c:	080077f8 	.word	0x080077f8

08006d80 <_calloc_r>:
 8006d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d82:	fba1 2402 	umull	r2, r4, r1, r2
 8006d86:	b94c      	cbnz	r4, 8006d9c <_calloc_r+0x1c>
 8006d88:	4611      	mov	r1, r2
 8006d8a:	9201      	str	r2, [sp, #4]
 8006d8c:	f000 f87a 	bl	8006e84 <_malloc_r>
 8006d90:	9a01      	ldr	r2, [sp, #4]
 8006d92:	4605      	mov	r5, r0
 8006d94:	b930      	cbnz	r0, 8006da4 <_calloc_r+0x24>
 8006d96:	4628      	mov	r0, r5
 8006d98:	b003      	add	sp, #12
 8006d9a:	bd30      	pop	{r4, r5, pc}
 8006d9c:	220c      	movs	r2, #12
 8006d9e:	6002      	str	r2, [r0, #0]
 8006da0:	2500      	movs	r5, #0
 8006da2:	e7f8      	b.n	8006d96 <_calloc_r+0x16>
 8006da4:	4621      	mov	r1, r4
 8006da6:	f7fd ff0b 	bl	8004bc0 <memset>
 8006daa:	e7f4      	b.n	8006d96 <_calloc_r+0x16>

08006dac <_free_r>:
 8006dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dae:	2900      	cmp	r1, #0
 8006db0:	d044      	beq.n	8006e3c <_free_r+0x90>
 8006db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db6:	9001      	str	r0, [sp, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f1a1 0404 	sub.w	r4, r1, #4
 8006dbe:	bfb8      	it	lt
 8006dc0:	18e4      	addlt	r4, r4, r3
 8006dc2:	f000 fbd9 	bl	8007578 <__malloc_lock>
 8006dc6:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <_free_r+0x94>)
 8006dc8:	9801      	ldr	r0, [sp, #4]
 8006dca:	6813      	ldr	r3, [r2, #0]
 8006dcc:	b933      	cbnz	r3, 8006ddc <_free_r+0x30>
 8006dce:	6063      	str	r3, [r4, #4]
 8006dd0:	6014      	str	r4, [r2, #0]
 8006dd2:	b003      	add	sp, #12
 8006dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dd8:	f000 bbd4 	b.w	8007584 <__malloc_unlock>
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d908      	bls.n	8006df2 <_free_r+0x46>
 8006de0:	6825      	ldr	r5, [r4, #0]
 8006de2:	1961      	adds	r1, r4, r5
 8006de4:	428b      	cmp	r3, r1
 8006de6:	bf01      	itttt	eq
 8006de8:	6819      	ldreq	r1, [r3, #0]
 8006dea:	685b      	ldreq	r3, [r3, #4]
 8006dec:	1949      	addeq	r1, r1, r5
 8006dee:	6021      	streq	r1, [r4, #0]
 8006df0:	e7ed      	b.n	8006dce <_free_r+0x22>
 8006df2:	461a      	mov	r2, r3
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b10b      	cbz	r3, 8006dfc <_free_r+0x50>
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	d9fa      	bls.n	8006df2 <_free_r+0x46>
 8006dfc:	6811      	ldr	r1, [r2, #0]
 8006dfe:	1855      	adds	r5, r2, r1
 8006e00:	42a5      	cmp	r5, r4
 8006e02:	d10b      	bne.n	8006e1c <_free_r+0x70>
 8006e04:	6824      	ldr	r4, [r4, #0]
 8006e06:	4421      	add	r1, r4
 8006e08:	1854      	adds	r4, r2, r1
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	d1e0      	bne.n	8006dd2 <_free_r+0x26>
 8006e10:	681c      	ldr	r4, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	6053      	str	r3, [r2, #4]
 8006e16:	4421      	add	r1, r4
 8006e18:	6011      	str	r1, [r2, #0]
 8006e1a:	e7da      	b.n	8006dd2 <_free_r+0x26>
 8006e1c:	d902      	bls.n	8006e24 <_free_r+0x78>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	6003      	str	r3, [r0, #0]
 8006e22:	e7d6      	b.n	8006dd2 <_free_r+0x26>
 8006e24:	6825      	ldr	r5, [r4, #0]
 8006e26:	1961      	adds	r1, r4, r5
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	bf04      	itt	eq
 8006e2c:	6819      	ldreq	r1, [r3, #0]
 8006e2e:	685b      	ldreq	r3, [r3, #4]
 8006e30:	6063      	str	r3, [r4, #4]
 8006e32:	bf04      	itt	eq
 8006e34:	1949      	addeq	r1, r1, r5
 8006e36:	6021      	streq	r1, [r4, #0]
 8006e38:	6054      	str	r4, [r2, #4]
 8006e3a:	e7ca      	b.n	8006dd2 <_free_r+0x26>
 8006e3c:	b003      	add	sp, #12
 8006e3e:	bd30      	pop	{r4, r5, pc}
 8006e40:	20000588 	.word	0x20000588

08006e44 <sbrk_aligned>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4e0e      	ldr	r6, [pc, #56]	; (8006e80 <sbrk_aligned+0x3c>)
 8006e48:	460c      	mov	r4, r1
 8006e4a:	6831      	ldr	r1, [r6, #0]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	b911      	cbnz	r1, 8006e56 <sbrk_aligned+0x12>
 8006e50:	f000 f9e6 	bl	8007220 <_sbrk_r>
 8006e54:	6030      	str	r0, [r6, #0]
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f9e1 	bl	8007220 <_sbrk_r>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d00a      	beq.n	8006e78 <sbrk_aligned+0x34>
 8006e62:	1cc4      	adds	r4, r0, #3
 8006e64:	f024 0403 	bic.w	r4, r4, #3
 8006e68:	42a0      	cmp	r0, r4
 8006e6a:	d007      	beq.n	8006e7c <sbrk_aligned+0x38>
 8006e6c:	1a21      	subs	r1, r4, r0
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 f9d6 	bl	8007220 <_sbrk_r>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d101      	bne.n	8006e7c <sbrk_aligned+0x38>
 8006e78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	2000058c 	.word	0x2000058c

08006e84 <_malloc_r>:
 8006e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e88:	1ccd      	adds	r5, r1, #3
 8006e8a:	f025 0503 	bic.w	r5, r5, #3
 8006e8e:	3508      	adds	r5, #8
 8006e90:	2d0c      	cmp	r5, #12
 8006e92:	bf38      	it	cc
 8006e94:	250c      	movcc	r5, #12
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	4607      	mov	r7, r0
 8006e9a:	db01      	blt.n	8006ea0 <_malloc_r+0x1c>
 8006e9c:	42a9      	cmp	r1, r5
 8006e9e:	d905      	bls.n	8006eac <_malloc_r+0x28>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	2600      	movs	r6, #0
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eac:	4e2e      	ldr	r6, [pc, #184]	; (8006f68 <_malloc_r+0xe4>)
 8006eae:	f000 fb63 	bl	8007578 <__malloc_lock>
 8006eb2:	6833      	ldr	r3, [r6, #0]
 8006eb4:	461c      	mov	r4, r3
 8006eb6:	bb34      	cbnz	r4, 8006f06 <_malloc_r+0x82>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f7ff ffc2 	bl	8006e44 <sbrk_aligned>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	d14d      	bne.n	8006f62 <_malloc_r+0xde>
 8006ec6:	6834      	ldr	r4, [r6, #0]
 8006ec8:	4626      	mov	r6, r4
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	d140      	bne.n	8006f50 <_malloc_r+0xcc>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	eb04 0803 	add.w	r8, r4, r3
 8006ed8:	f000 f9a2 	bl	8007220 <_sbrk_r>
 8006edc:	4580      	cmp	r8, r0
 8006ede:	d13a      	bne.n	8006f56 <_malloc_r+0xd2>
 8006ee0:	6821      	ldr	r1, [r4, #0]
 8006ee2:	3503      	adds	r5, #3
 8006ee4:	1a6d      	subs	r5, r5, r1
 8006ee6:	f025 0503 	bic.w	r5, r5, #3
 8006eea:	3508      	adds	r5, #8
 8006eec:	2d0c      	cmp	r5, #12
 8006eee:	bf38      	it	cc
 8006ef0:	250c      	movcc	r5, #12
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff ffa5 	bl	8006e44 <sbrk_aligned>
 8006efa:	3001      	adds	r0, #1
 8006efc:	d02b      	beq.n	8006f56 <_malloc_r+0xd2>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	442b      	add	r3, r5
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	e00e      	b.n	8006f24 <_malloc_r+0xa0>
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	1b52      	subs	r2, r2, r5
 8006f0a:	d41e      	bmi.n	8006f4a <_malloc_r+0xc6>
 8006f0c:	2a0b      	cmp	r2, #11
 8006f0e:	d916      	bls.n	8006f3e <_malloc_r+0xba>
 8006f10:	1961      	adds	r1, r4, r5
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	6025      	str	r5, [r4, #0]
 8006f16:	bf18      	it	ne
 8006f18:	6059      	strne	r1, [r3, #4]
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	bf08      	it	eq
 8006f1e:	6031      	streq	r1, [r6, #0]
 8006f20:	5162      	str	r2, [r4, r5]
 8006f22:	604b      	str	r3, [r1, #4]
 8006f24:	4638      	mov	r0, r7
 8006f26:	f104 060b 	add.w	r6, r4, #11
 8006f2a:	f000 fb2b 	bl	8007584 <__malloc_unlock>
 8006f2e:	f026 0607 	bic.w	r6, r6, #7
 8006f32:	1d23      	adds	r3, r4, #4
 8006f34:	1af2      	subs	r2, r6, r3
 8006f36:	d0b6      	beq.n	8006ea6 <_malloc_r+0x22>
 8006f38:	1b9b      	subs	r3, r3, r6
 8006f3a:	50a3      	str	r3, [r4, r2]
 8006f3c:	e7b3      	b.n	8006ea6 <_malloc_r+0x22>
 8006f3e:	6862      	ldr	r2, [r4, #4]
 8006f40:	42a3      	cmp	r3, r4
 8006f42:	bf0c      	ite	eq
 8006f44:	6032      	streq	r2, [r6, #0]
 8006f46:	605a      	strne	r2, [r3, #4]
 8006f48:	e7ec      	b.n	8006f24 <_malloc_r+0xa0>
 8006f4a:	4623      	mov	r3, r4
 8006f4c:	6864      	ldr	r4, [r4, #4]
 8006f4e:	e7b2      	b.n	8006eb6 <_malloc_r+0x32>
 8006f50:	4634      	mov	r4, r6
 8006f52:	6876      	ldr	r6, [r6, #4]
 8006f54:	e7b9      	b.n	8006eca <_malloc_r+0x46>
 8006f56:	230c      	movs	r3, #12
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f000 fb12 	bl	8007584 <__malloc_unlock>
 8006f60:	e7a1      	b.n	8006ea6 <_malloc_r+0x22>
 8006f62:	6025      	str	r5, [r4, #0]
 8006f64:	e7de      	b.n	8006f24 <_malloc_r+0xa0>
 8006f66:	bf00      	nop
 8006f68:	20000588 	.word	0x20000588

08006f6c <__sfputc_r>:
 8006f6c:	6893      	ldr	r3, [r2, #8]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	b410      	push	{r4}
 8006f74:	6093      	str	r3, [r2, #8]
 8006f76:	da08      	bge.n	8006f8a <__sfputc_r+0x1e>
 8006f78:	6994      	ldr	r4, [r2, #24]
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	db01      	blt.n	8006f82 <__sfputc_r+0x16>
 8006f7e:	290a      	cmp	r1, #10
 8006f80:	d103      	bne.n	8006f8a <__sfputc_r+0x1e>
 8006f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f86:	f000 b99f 	b.w	80072c8 <__swbuf_r>
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	1c58      	adds	r0, r3, #1
 8006f8e:	6010      	str	r0, [r2, #0]
 8006f90:	7019      	strb	r1, [r3, #0]
 8006f92:	4608      	mov	r0, r1
 8006f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <__sfputs_r>:
 8006f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	18d5      	adds	r5, r2, r3
 8006fa4:	42ac      	cmp	r4, r5
 8006fa6:	d101      	bne.n	8006fac <__sfputs_r+0x12>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	e007      	b.n	8006fbc <__sfputs_r+0x22>
 8006fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb0:	463a      	mov	r2, r7
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7ff ffda 	bl	8006f6c <__sfputc_r>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d1f3      	bne.n	8006fa4 <__sfputs_r+0xa>
 8006fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fc0 <_vfiprintf_r>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	b09d      	sub	sp, #116	; 0x74
 8006fc8:	4614      	mov	r4, r2
 8006fca:	4698      	mov	r8, r3
 8006fcc:	4606      	mov	r6, r0
 8006fce:	b118      	cbz	r0, 8006fd8 <_vfiprintf_r+0x18>
 8006fd0:	6983      	ldr	r3, [r0, #24]
 8006fd2:	b90b      	cbnz	r3, 8006fd8 <_vfiprintf_r+0x18>
 8006fd4:	f7ff fa30 	bl	8006438 <__sinit>
 8006fd8:	4b89      	ldr	r3, [pc, #548]	; (8007200 <_vfiprintf_r+0x240>)
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	d11b      	bne.n	8007016 <_vfiprintf_r+0x56>
 8006fde:	6875      	ldr	r5, [r6, #4]
 8006fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fe2:	07d9      	lsls	r1, r3, #31
 8006fe4:	d405      	bmi.n	8006ff2 <_vfiprintf_r+0x32>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_vfiprintf_r+0x32>
 8006fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fee:	f7ff fac6 	bl	800657e <__retarget_lock_acquire_recursive>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	071b      	lsls	r3, r3, #28
 8006ff6:	d501      	bpl.n	8006ffc <_vfiprintf_r+0x3c>
 8006ff8:	692b      	ldr	r3, [r5, #16]
 8006ffa:	b9eb      	cbnz	r3, 8007038 <_vfiprintf_r+0x78>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	4630      	mov	r0, r6
 8007000:	f000 f9c6 	bl	8007390 <__swsetup_r>
 8007004:	b1c0      	cbz	r0, 8007038 <_vfiprintf_r+0x78>
 8007006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007008:	07dc      	lsls	r4, r3, #31
 800700a:	d50e      	bpl.n	800702a <_vfiprintf_r+0x6a>
 800700c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007010:	b01d      	add	sp, #116	; 0x74
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	4b7b      	ldr	r3, [pc, #492]	; (8007204 <_vfiprintf_r+0x244>)
 8007018:	429d      	cmp	r5, r3
 800701a:	d101      	bne.n	8007020 <_vfiprintf_r+0x60>
 800701c:	68b5      	ldr	r5, [r6, #8]
 800701e:	e7df      	b.n	8006fe0 <_vfiprintf_r+0x20>
 8007020:	4b79      	ldr	r3, [pc, #484]	; (8007208 <_vfiprintf_r+0x248>)
 8007022:	429d      	cmp	r5, r3
 8007024:	bf08      	it	eq
 8007026:	68f5      	ldreq	r5, [r6, #12]
 8007028:	e7da      	b.n	8006fe0 <_vfiprintf_r+0x20>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	0598      	lsls	r0, r3, #22
 800702e:	d4ed      	bmi.n	800700c <_vfiprintf_r+0x4c>
 8007030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007032:	f7ff faa5 	bl	8006580 <__retarget_lock_release_recursive>
 8007036:	e7e9      	b.n	800700c <_vfiprintf_r+0x4c>
 8007038:	2300      	movs	r3, #0
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	2320      	movs	r3, #32
 800703e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007042:	f8cd 800c 	str.w	r8, [sp, #12]
 8007046:	2330      	movs	r3, #48	; 0x30
 8007048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800720c <_vfiprintf_r+0x24c>
 800704c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007050:	f04f 0901 	mov.w	r9, #1
 8007054:	4623      	mov	r3, r4
 8007056:	469a      	mov	sl, r3
 8007058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705c:	b10a      	cbz	r2, 8007062 <_vfiprintf_r+0xa2>
 800705e:	2a25      	cmp	r2, #37	; 0x25
 8007060:	d1f9      	bne.n	8007056 <_vfiprintf_r+0x96>
 8007062:	ebba 0b04 	subs.w	fp, sl, r4
 8007066:	d00b      	beq.n	8007080 <_vfiprintf_r+0xc0>
 8007068:	465b      	mov	r3, fp
 800706a:	4622      	mov	r2, r4
 800706c:	4629      	mov	r1, r5
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff ff93 	bl	8006f9a <__sfputs_r>
 8007074:	3001      	adds	r0, #1
 8007076:	f000 80aa 	beq.w	80071ce <_vfiprintf_r+0x20e>
 800707a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707c:	445a      	add	r2, fp
 800707e:	9209      	str	r2, [sp, #36]	; 0x24
 8007080:	f89a 3000 	ldrb.w	r3, [sl]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80a2 	beq.w	80071ce <_vfiprintf_r+0x20e>
 800708a:	2300      	movs	r3, #0
 800708c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007094:	f10a 0a01 	add.w	sl, sl, #1
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	9307      	str	r3, [sp, #28]
 800709c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070a0:	931a      	str	r3, [sp, #104]	; 0x68
 80070a2:	4654      	mov	r4, sl
 80070a4:	2205      	movs	r2, #5
 80070a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070aa:	4858      	ldr	r0, [pc, #352]	; (800720c <_vfiprintf_r+0x24c>)
 80070ac:	f7f9 f8d0 	bl	8000250 <memchr>
 80070b0:	9a04      	ldr	r2, [sp, #16]
 80070b2:	b9d8      	cbnz	r0, 80070ec <_vfiprintf_r+0x12c>
 80070b4:	06d1      	lsls	r1, r2, #27
 80070b6:	bf44      	itt	mi
 80070b8:	2320      	movmi	r3, #32
 80070ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070be:	0713      	lsls	r3, r2, #28
 80070c0:	bf44      	itt	mi
 80070c2:	232b      	movmi	r3, #43	; 0x2b
 80070c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c8:	f89a 3000 	ldrb.w	r3, [sl]
 80070cc:	2b2a      	cmp	r3, #42	; 0x2a
 80070ce:	d015      	beq.n	80070fc <_vfiprintf_r+0x13c>
 80070d0:	9a07      	ldr	r2, [sp, #28]
 80070d2:	4654      	mov	r4, sl
 80070d4:	2000      	movs	r0, #0
 80070d6:	f04f 0c0a 	mov.w	ip, #10
 80070da:	4621      	mov	r1, r4
 80070dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070e0:	3b30      	subs	r3, #48	; 0x30
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	d94e      	bls.n	8007184 <_vfiprintf_r+0x1c4>
 80070e6:	b1b0      	cbz	r0, 8007116 <_vfiprintf_r+0x156>
 80070e8:	9207      	str	r2, [sp, #28]
 80070ea:	e014      	b.n	8007116 <_vfiprintf_r+0x156>
 80070ec:	eba0 0308 	sub.w	r3, r0, r8
 80070f0:	fa09 f303 	lsl.w	r3, r9, r3
 80070f4:	4313      	orrs	r3, r2
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	46a2      	mov	sl, r4
 80070fa:	e7d2      	b.n	80070a2 <_vfiprintf_r+0xe2>
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	1d19      	adds	r1, r3, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	9103      	str	r1, [sp, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	bfbb      	ittet	lt
 8007108:	425b      	neglt	r3, r3
 800710a:	f042 0202 	orrlt.w	r2, r2, #2
 800710e:	9307      	strge	r3, [sp, #28]
 8007110:	9307      	strlt	r3, [sp, #28]
 8007112:	bfb8      	it	lt
 8007114:	9204      	strlt	r2, [sp, #16]
 8007116:	7823      	ldrb	r3, [r4, #0]
 8007118:	2b2e      	cmp	r3, #46	; 0x2e
 800711a:	d10c      	bne.n	8007136 <_vfiprintf_r+0x176>
 800711c:	7863      	ldrb	r3, [r4, #1]
 800711e:	2b2a      	cmp	r3, #42	; 0x2a
 8007120:	d135      	bne.n	800718e <_vfiprintf_r+0x1ce>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	1d1a      	adds	r2, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9203      	str	r2, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfb8      	it	lt
 800712e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007132:	3402      	adds	r4, #2
 8007134:	9305      	str	r3, [sp, #20]
 8007136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800721c <_vfiprintf_r+0x25c>
 800713a:	7821      	ldrb	r1, [r4, #0]
 800713c:	2203      	movs	r2, #3
 800713e:	4650      	mov	r0, sl
 8007140:	f7f9 f886 	bl	8000250 <memchr>
 8007144:	b140      	cbz	r0, 8007158 <_vfiprintf_r+0x198>
 8007146:	2340      	movs	r3, #64	; 0x40
 8007148:	eba0 000a 	sub.w	r0, r0, sl
 800714c:	fa03 f000 	lsl.w	r0, r3, r0
 8007150:	9b04      	ldr	r3, [sp, #16]
 8007152:	4303      	orrs	r3, r0
 8007154:	3401      	adds	r4, #1
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715c:	482c      	ldr	r0, [pc, #176]	; (8007210 <_vfiprintf_r+0x250>)
 800715e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007162:	2206      	movs	r2, #6
 8007164:	f7f9 f874 	bl	8000250 <memchr>
 8007168:	2800      	cmp	r0, #0
 800716a:	d03f      	beq.n	80071ec <_vfiprintf_r+0x22c>
 800716c:	4b29      	ldr	r3, [pc, #164]	; (8007214 <_vfiprintf_r+0x254>)
 800716e:	bb1b      	cbnz	r3, 80071b8 <_vfiprintf_r+0x1f8>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	3307      	adds	r3, #7
 8007174:	f023 0307 	bic.w	r3, r3, #7
 8007178:	3308      	adds	r3, #8
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717e:	443b      	add	r3, r7
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	e767      	b.n	8007054 <_vfiprintf_r+0x94>
 8007184:	fb0c 3202 	mla	r2, ip, r2, r3
 8007188:	460c      	mov	r4, r1
 800718a:	2001      	movs	r0, #1
 800718c:	e7a5      	b.n	80070da <_vfiprintf_r+0x11a>
 800718e:	2300      	movs	r3, #0
 8007190:	3401      	adds	r4, #1
 8007192:	9305      	str	r3, [sp, #20]
 8007194:	4619      	mov	r1, r3
 8007196:	f04f 0c0a 	mov.w	ip, #10
 800719a:	4620      	mov	r0, r4
 800719c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071a0:	3a30      	subs	r2, #48	; 0x30
 80071a2:	2a09      	cmp	r2, #9
 80071a4:	d903      	bls.n	80071ae <_vfiprintf_r+0x1ee>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0c5      	beq.n	8007136 <_vfiprintf_r+0x176>
 80071aa:	9105      	str	r1, [sp, #20]
 80071ac:	e7c3      	b.n	8007136 <_vfiprintf_r+0x176>
 80071ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b2:	4604      	mov	r4, r0
 80071b4:	2301      	movs	r3, #1
 80071b6:	e7f0      	b.n	800719a <_vfiprintf_r+0x1da>
 80071b8:	ab03      	add	r3, sp, #12
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	462a      	mov	r2, r5
 80071be:	4b16      	ldr	r3, [pc, #88]	; (8007218 <_vfiprintf_r+0x258>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7fd fd94 	bl	8004cf0 <_printf_float>
 80071c8:	4607      	mov	r7, r0
 80071ca:	1c78      	adds	r0, r7, #1
 80071cc:	d1d6      	bne.n	800717c <_vfiprintf_r+0x1bc>
 80071ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d0:	07d9      	lsls	r1, r3, #31
 80071d2:	d405      	bmi.n	80071e0 <_vfiprintf_r+0x220>
 80071d4:	89ab      	ldrh	r3, [r5, #12]
 80071d6:	059a      	lsls	r2, r3, #22
 80071d8:	d402      	bmi.n	80071e0 <_vfiprintf_r+0x220>
 80071da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071dc:	f7ff f9d0 	bl	8006580 <__retarget_lock_release_recursive>
 80071e0:	89ab      	ldrh	r3, [r5, #12]
 80071e2:	065b      	lsls	r3, r3, #25
 80071e4:	f53f af12 	bmi.w	800700c <_vfiprintf_r+0x4c>
 80071e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ea:	e711      	b.n	8007010 <_vfiprintf_r+0x50>
 80071ec:	ab03      	add	r3, sp, #12
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	462a      	mov	r2, r5
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <_vfiprintf_r+0x258>)
 80071f4:	a904      	add	r1, sp, #16
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7fe f806 	bl	8005208 <_printf_i>
 80071fc:	e7e4      	b.n	80071c8 <_vfiprintf_r+0x208>
 80071fe:	bf00      	nop
 8007200:	080077b8 	.word	0x080077b8
 8007204:	080077d8 	.word	0x080077d8
 8007208:	08007798 	.word	0x08007798
 800720c:	08007954 	.word	0x08007954
 8007210:	0800795e 	.word	0x0800795e
 8007214:	08004cf1 	.word	0x08004cf1
 8007218:	08006f9b 	.word	0x08006f9b
 800721c:	0800795a 	.word	0x0800795a

08007220 <_sbrk_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d06      	ldr	r5, [pc, #24]	; (800723c <_sbrk_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7fa f898 	bl	8001360 <_sbrk>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_sbrk_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_sbrk_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20000590 	.word	0x20000590

08007240 <__sread>:
 8007240:	b510      	push	{r4, lr}
 8007242:	460c      	mov	r4, r1
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	f000 f9a2 	bl	8007590 <_read_r>
 800724c:	2800      	cmp	r0, #0
 800724e:	bfab      	itete	ge
 8007250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007252:	89a3      	ldrhlt	r3, [r4, #12]
 8007254:	181b      	addge	r3, r3, r0
 8007256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800725a:	bfac      	ite	ge
 800725c:	6563      	strge	r3, [r4, #84]	; 0x54
 800725e:	81a3      	strhlt	r3, [r4, #12]
 8007260:	bd10      	pop	{r4, pc}

08007262 <__swrite>:
 8007262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	461f      	mov	r7, r3
 8007268:	898b      	ldrh	r3, [r1, #12]
 800726a:	05db      	lsls	r3, r3, #23
 800726c:	4605      	mov	r5, r0
 800726e:	460c      	mov	r4, r1
 8007270:	4616      	mov	r6, r2
 8007272:	d505      	bpl.n	8007280 <__swrite+0x1e>
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	2302      	movs	r3, #2
 800727a:	2200      	movs	r2, #0
 800727c:	f000 f958 	bl	8007530 <_lseek_r>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	4628      	mov	r0, r5
 8007292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	f000 b869 	b.w	800736c <_write_r>

0800729a <__sseek>:
 800729a:	b510      	push	{r4, lr}
 800729c:	460c      	mov	r4, r1
 800729e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a2:	f000 f945 	bl	8007530 <_lseek_r>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	bf15      	itete	ne
 80072ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80072ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072b6:	81a3      	strheq	r3, [r4, #12]
 80072b8:	bf18      	it	ne
 80072ba:	81a3      	strhne	r3, [r4, #12]
 80072bc:	bd10      	pop	{r4, pc}

080072be <__sclose>:
 80072be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c2:	f000 b8f1 	b.w	80074a8 <_close_r>
	...

080072c8 <__swbuf_r>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	460e      	mov	r6, r1
 80072cc:	4614      	mov	r4, r2
 80072ce:	4605      	mov	r5, r0
 80072d0:	b118      	cbz	r0, 80072da <__swbuf_r+0x12>
 80072d2:	6983      	ldr	r3, [r0, #24]
 80072d4:	b90b      	cbnz	r3, 80072da <__swbuf_r+0x12>
 80072d6:	f7ff f8af 	bl	8006438 <__sinit>
 80072da:	4b21      	ldr	r3, [pc, #132]	; (8007360 <__swbuf_r+0x98>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	d12b      	bne.n	8007338 <__swbuf_r+0x70>
 80072e0:	686c      	ldr	r4, [r5, #4]
 80072e2:	69a3      	ldr	r3, [r4, #24]
 80072e4:	60a3      	str	r3, [r4, #8]
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	071a      	lsls	r2, r3, #28
 80072ea:	d52f      	bpl.n	800734c <__swbuf_r+0x84>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	b36b      	cbz	r3, 800734c <__swbuf_r+0x84>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	1ac0      	subs	r0, r0, r3
 80072f6:	6963      	ldr	r3, [r4, #20]
 80072f8:	b2f6      	uxtb	r6, r6
 80072fa:	4283      	cmp	r3, r0
 80072fc:	4637      	mov	r7, r6
 80072fe:	dc04      	bgt.n	800730a <__swbuf_r+0x42>
 8007300:	4621      	mov	r1, r4
 8007302:	4628      	mov	r0, r5
 8007304:	f7ff f804 	bl	8006310 <_fflush_r>
 8007308:	bb30      	cbnz	r0, 8007358 <__swbuf_r+0x90>
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	3b01      	subs	r3, #1
 800730e:	60a3      	str	r3, [r4, #8]
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	6022      	str	r2, [r4, #0]
 8007316:	701e      	strb	r6, [r3, #0]
 8007318:	6963      	ldr	r3, [r4, #20]
 800731a:	3001      	adds	r0, #1
 800731c:	4283      	cmp	r3, r0
 800731e:	d004      	beq.n	800732a <__swbuf_r+0x62>
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	07db      	lsls	r3, r3, #31
 8007324:	d506      	bpl.n	8007334 <__swbuf_r+0x6c>
 8007326:	2e0a      	cmp	r6, #10
 8007328:	d104      	bne.n	8007334 <__swbuf_r+0x6c>
 800732a:	4621      	mov	r1, r4
 800732c:	4628      	mov	r0, r5
 800732e:	f7fe ffef 	bl	8006310 <_fflush_r>
 8007332:	b988      	cbnz	r0, 8007358 <__swbuf_r+0x90>
 8007334:	4638      	mov	r0, r7
 8007336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <__swbuf_r+0x9c>)
 800733a:	429c      	cmp	r4, r3
 800733c:	d101      	bne.n	8007342 <__swbuf_r+0x7a>
 800733e:	68ac      	ldr	r4, [r5, #8]
 8007340:	e7cf      	b.n	80072e2 <__swbuf_r+0x1a>
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <__swbuf_r+0xa0>)
 8007344:	429c      	cmp	r4, r3
 8007346:	bf08      	it	eq
 8007348:	68ec      	ldreq	r4, [r5, #12]
 800734a:	e7ca      	b.n	80072e2 <__swbuf_r+0x1a>
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f81e 	bl	8007390 <__swsetup_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	d0cb      	beq.n	80072f0 <__swbuf_r+0x28>
 8007358:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800735c:	e7ea      	b.n	8007334 <__swbuf_r+0x6c>
 800735e:	bf00      	nop
 8007360:	080077b8 	.word	0x080077b8
 8007364:	080077d8 	.word	0x080077d8
 8007368:	08007798 	.word	0x08007798

0800736c <_write_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	; (800738c <_write_r+0x20>)
 8007370:	4604      	mov	r4, r0
 8007372:	4608      	mov	r0, r1
 8007374:	4611      	mov	r1, r2
 8007376:	2200      	movs	r2, #0
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f7f9 fdd2 	bl	8000f24 <_write>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_write_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_write_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000590 	.word	0x20000590

08007390 <__swsetup_r>:
 8007390:	4b32      	ldr	r3, [pc, #200]	; (800745c <__swsetup_r+0xcc>)
 8007392:	b570      	push	{r4, r5, r6, lr}
 8007394:	681d      	ldr	r5, [r3, #0]
 8007396:	4606      	mov	r6, r0
 8007398:	460c      	mov	r4, r1
 800739a:	b125      	cbz	r5, 80073a6 <__swsetup_r+0x16>
 800739c:	69ab      	ldr	r3, [r5, #24]
 800739e:	b913      	cbnz	r3, 80073a6 <__swsetup_r+0x16>
 80073a0:	4628      	mov	r0, r5
 80073a2:	f7ff f849 	bl	8006438 <__sinit>
 80073a6:	4b2e      	ldr	r3, [pc, #184]	; (8007460 <__swsetup_r+0xd0>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d10f      	bne.n	80073cc <__swsetup_r+0x3c>
 80073ac:	686c      	ldr	r4, [r5, #4]
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073b4:	0719      	lsls	r1, r3, #28
 80073b6:	d42c      	bmi.n	8007412 <__swsetup_r+0x82>
 80073b8:	06dd      	lsls	r5, r3, #27
 80073ba:	d411      	bmi.n	80073e0 <__swsetup_r+0x50>
 80073bc:	2309      	movs	r3, #9
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ca:	e03e      	b.n	800744a <__swsetup_r+0xba>
 80073cc:	4b25      	ldr	r3, [pc, #148]	; (8007464 <__swsetup_r+0xd4>)
 80073ce:	429c      	cmp	r4, r3
 80073d0:	d101      	bne.n	80073d6 <__swsetup_r+0x46>
 80073d2:	68ac      	ldr	r4, [r5, #8]
 80073d4:	e7eb      	b.n	80073ae <__swsetup_r+0x1e>
 80073d6:	4b24      	ldr	r3, [pc, #144]	; (8007468 <__swsetup_r+0xd8>)
 80073d8:	429c      	cmp	r4, r3
 80073da:	bf08      	it	eq
 80073dc:	68ec      	ldreq	r4, [r5, #12]
 80073de:	e7e6      	b.n	80073ae <__swsetup_r+0x1e>
 80073e0:	0758      	lsls	r0, r3, #29
 80073e2:	d512      	bpl.n	800740a <__swsetup_r+0x7a>
 80073e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e6:	b141      	cbz	r1, 80073fa <__swsetup_r+0x6a>
 80073e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ec:	4299      	cmp	r1, r3
 80073ee:	d002      	beq.n	80073f6 <__swsetup_r+0x66>
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff fcdb 	bl	8006dac <_free_r>
 80073f6:	2300      	movs	r3, #0
 80073f8:	6363      	str	r3, [r4, #52]	; 0x34
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	2300      	movs	r3, #0
 8007404:	6063      	str	r3, [r4, #4]
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f043 0308 	orr.w	r3, r3, #8
 8007410:	81a3      	strh	r3, [r4, #12]
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	b94b      	cbnz	r3, 800742a <__swsetup_r+0x9a>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800741c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007420:	d003      	beq.n	800742a <__swsetup_r+0x9a>
 8007422:	4621      	mov	r1, r4
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff f8d1 	bl	80065cc <__smakebuf_r>
 800742a:	89a0      	ldrh	r0, [r4, #12]
 800742c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007430:	f010 0301 	ands.w	r3, r0, #1
 8007434:	d00a      	beq.n	800744c <__swsetup_r+0xbc>
 8007436:	2300      	movs	r3, #0
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	6963      	ldr	r3, [r4, #20]
 800743c:	425b      	negs	r3, r3
 800743e:	61a3      	str	r3, [r4, #24]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b943      	cbnz	r3, 8007456 <__swsetup_r+0xc6>
 8007444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007448:	d1ba      	bne.n	80073c0 <__swsetup_r+0x30>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	0781      	lsls	r1, r0, #30
 800744e:	bf58      	it	pl
 8007450:	6963      	ldrpl	r3, [r4, #20]
 8007452:	60a3      	str	r3, [r4, #8]
 8007454:	e7f4      	b.n	8007440 <__swsetup_r+0xb0>
 8007456:	2000      	movs	r0, #0
 8007458:	e7f7      	b.n	800744a <__swsetup_r+0xba>
 800745a:	bf00      	nop
 800745c:	20000178 	.word	0x20000178
 8007460:	080077b8 	.word	0x080077b8
 8007464:	080077d8 	.word	0x080077d8
 8007468:	08007798 	.word	0x08007798

0800746c <__assert_func>:
 800746c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800746e:	4614      	mov	r4, r2
 8007470:	461a      	mov	r2, r3
 8007472:	4b09      	ldr	r3, [pc, #36]	; (8007498 <__assert_func+0x2c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4605      	mov	r5, r0
 8007478:	68d8      	ldr	r0, [r3, #12]
 800747a:	b14c      	cbz	r4, 8007490 <__assert_func+0x24>
 800747c:	4b07      	ldr	r3, [pc, #28]	; (800749c <__assert_func+0x30>)
 800747e:	9100      	str	r1, [sp, #0]
 8007480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007484:	4906      	ldr	r1, [pc, #24]	; (80074a0 <__assert_func+0x34>)
 8007486:	462b      	mov	r3, r5
 8007488:	f000 f81e 	bl	80074c8 <fiprintf>
 800748c:	f000 f89f 	bl	80075ce <abort>
 8007490:	4b04      	ldr	r3, [pc, #16]	; (80074a4 <__assert_func+0x38>)
 8007492:	461c      	mov	r4, r3
 8007494:	e7f3      	b.n	800747e <__assert_func+0x12>
 8007496:	bf00      	nop
 8007498:	20000178 	.word	0x20000178
 800749c:	08007965 	.word	0x08007965
 80074a0:	08007972 	.word	0x08007972
 80074a4:	080079a0 	.word	0x080079a0

080074a8 <_close_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4d06      	ldr	r5, [pc, #24]	; (80074c4 <_close_r+0x1c>)
 80074ac:	2300      	movs	r3, #0
 80074ae:	4604      	mov	r4, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	f7f9 fd60 	bl	8000f78 <_close>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_close_r+0x1a>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_close_r+0x1a>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	20000590 	.word	0x20000590

080074c8 <fiprintf>:
 80074c8:	b40e      	push	{r1, r2, r3}
 80074ca:	b503      	push	{r0, r1, lr}
 80074cc:	4601      	mov	r1, r0
 80074ce:	ab03      	add	r3, sp, #12
 80074d0:	4805      	ldr	r0, [pc, #20]	; (80074e8 <fiprintf+0x20>)
 80074d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d6:	6800      	ldr	r0, [r0, #0]
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	f7ff fd71 	bl	8006fc0 <_vfiprintf_r>
 80074de:	b002      	add	sp, #8
 80074e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e4:	b003      	add	sp, #12
 80074e6:	4770      	bx	lr
 80074e8:	20000178 	.word	0x20000178

080074ec <_fstat_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_fstat_r+0x20>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	f7f9 fd8d 	bl	8001018 <_fstat>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d102      	bne.n	8007508 <_fstat_r+0x1c>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	b103      	cbz	r3, 8007508 <_fstat_r+0x1c>
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	bf00      	nop
 800750c:	20000590 	.word	0x20000590

08007510 <_isatty_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d06      	ldr	r5, [pc, #24]	; (800752c <_isatty_r+0x1c>)
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	f7f9 fcec 	bl	8000ef8 <_isatty>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_isatty_r+0x1a>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_isatty_r+0x1a>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20000590 	.word	0x20000590

08007530 <_lseek_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d07      	ldr	r5, [pc, #28]	; (8007550 <_lseek_r+0x20>)
 8007534:	4604      	mov	r4, r0
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7f9 fd31 	bl	8000fa6 <_lseek>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_lseek_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_lseek_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000590 	.word	0x20000590

08007554 <__ascii_mbtowc>:
 8007554:	b082      	sub	sp, #8
 8007556:	b901      	cbnz	r1, 800755a <__ascii_mbtowc+0x6>
 8007558:	a901      	add	r1, sp, #4
 800755a:	b142      	cbz	r2, 800756e <__ascii_mbtowc+0x1a>
 800755c:	b14b      	cbz	r3, 8007572 <__ascii_mbtowc+0x1e>
 800755e:	7813      	ldrb	r3, [r2, #0]
 8007560:	600b      	str	r3, [r1, #0]
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	1e10      	subs	r0, r2, #0
 8007566:	bf18      	it	ne
 8007568:	2001      	movne	r0, #1
 800756a:	b002      	add	sp, #8
 800756c:	4770      	bx	lr
 800756e:	4610      	mov	r0, r2
 8007570:	e7fb      	b.n	800756a <__ascii_mbtowc+0x16>
 8007572:	f06f 0001 	mvn.w	r0, #1
 8007576:	e7f8      	b.n	800756a <__ascii_mbtowc+0x16>

08007578 <__malloc_lock>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__malloc_lock+0x8>)
 800757a:	f7ff b800 	b.w	800657e <__retarget_lock_acquire_recursive>
 800757e:	bf00      	nop
 8007580:	20000584 	.word	0x20000584

08007584 <__malloc_unlock>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__malloc_unlock+0x8>)
 8007586:	f7fe bffb 	b.w	8006580 <__retarget_lock_release_recursive>
 800758a:	bf00      	nop
 800758c:	20000584 	.word	0x20000584

08007590 <_read_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_read_r+0x20>)
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	2200      	movs	r2, #0
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7f9 fd12 	bl	8000fc8 <_read>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_read_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_read_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000590 	.word	0x20000590

080075b4 <__ascii_wctomb>:
 80075b4:	b149      	cbz	r1, 80075ca <__ascii_wctomb+0x16>
 80075b6:	2aff      	cmp	r2, #255	; 0xff
 80075b8:	bf85      	ittet	hi
 80075ba:	238a      	movhi	r3, #138	; 0x8a
 80075bc:	6003      	strhi	r3, [r0, #0]
 80075be:	700a      	strbls	r2, [r1, #0]
 80075c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075c4:	bf98      	it	ls
 80075c6:	2001      	movls	r0, #1
 80075c8:	4770      	bx	lr
 80075ca:	4608      	mov	r0, r1
 80075cc:	4770      	bx	lr

080075ce <abort>:
 80075ce:	b508      	push	{r3, lr}
 80075d0:	2006      	movs	r0, #6
 80075d2:	f000 f82b 	bl	800762c <raise>
 80075d6:	2001      	movs	r0, #1
 80075d8:	f000 f854 	bl	8007684 <_exit>

080075dc <_raise_r>:
 80075dc:	291f      	cmp	r1, #31
 80075de:	b538      	push	{r3, r4, r5, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	460d      	mov	r5, r1
 80075e4:	d904      	bls.n	80075f0 <_raise_r+0x14>
 80075e6:	2316      	movs	r3, #22
 80075e8:	6003      	str	r3, [r0, #0]
 80075ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075f2:	b112      	cbz	r2, 80075fa <_raise_r+0x1e>
 80075f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075f8:	b94b      	cbnz	r3, 800760e <_raise_r+0x32>
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 f830 	bl	8007660 <_getpid_r>
 8007600:	462a      	mov	r2, r5
 8007602:	4601      	mov	r1, r0
 8007604:	4620      	mov	r0, r4
 8007606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760a:	f000 b817 	b.w	800763c <_kill_r>
 800760e:	2b01      	cmp	r3, #1
 8007610:	d00a      	beq.n	8007628 <_raise_r+0x4c>
 8007612:	1c59      	adds	r1, r3, #1
 8007614:	d103      	bne.n	800761e <_raise_r+0x42>
 8007616:	2316      	movs	r3, #22
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	2001      	movs	r0, #1
 800761c:	e7e7      	b.n	80075ee <_raise_r+0x12>
 800761e:	2400      	movs	r4, #0
 8007620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007624:	4628      	mov	r0, r5
 8007626:	4798      	blx	r3
 8007628:	2000      	movs	r0, #0
 800762a:	e7e0      	b.n	80075ee <_raise_r+0x12>

0800762c <raise>:
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <raise+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f7ff bfd3 	b.w	80075dc <_raise_r>
 8007636:	bf00      	nop
 8007638:	20000178 	.word	0x20000178

0800763c <_kill_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d07      	ldr	r5, [pc, #28]	; (800765c <_kill_r+0x20>)
 8007640:	2300      	movs	r3, #0
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f000 f813 	bl	8007674 <_kill>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	d102      	bne.n	8007658 <_kill_r+0x1c>
 8007652:	682b      	ldr	r3, [r5, #0]
 8007654:	b103      	cbz	r3, 8007658 <_kill_r+0x1c>
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	bf00      	nop
 800765c:	20000590 	.word	0x20000590

08007660 <_getpid_r>:
 8007660:	f000 b800 	b.w	8007664 <_getpid>

08007664 <_getpid>:
 8007664:	4b02      	ldr	r3, [pc, #8]	; (8007670 <_getpid+0xc>)
 8007666:	2258      	movs	r2, #88	; 0x58
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800766e:	4770      	bx	lr
 8007670:	20000590 	.word	0x20000590

08007674 <_kill>:
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <_kill+0xc>)
 8007676:	2258      	movs	r2, #88	; 0x58
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800767e:	4770      	bx	lr
 8007680:	20000590 	.word	0x20000590

08007684 <_exit>:
 8007684:	e7fe      	b.n	8007684 <_exit>
	...

08007688 <_init>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr

08007694 <_fini>:
 8007694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007696:	bf00      	nop
 8007698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769a:	bc08      	pop	{r3}
 800769c:	469e      	mov	lr, r3
 800769e:	4770      	bx	lr
